id,description,insecure_code,secure_code,severity,explanation_of_fix,Link,Confidence
Sol-001,"The vulnerability arises from missing a signer check for an account, which could allow unauthorized actions.","authority: AccountInfo<'info>,","authority: Signer<'info>,",High,"The secure code uses `Signer<'info>` instead of `AccountInfo<'info>`, ensuring the account is a transaction signer. This prevents unauthorized calls by requiring cryptographic proof of intent, a critical Solana security requirement.",,Medium
Sol-002,"The insecure code fails to properly check that the caller is the owner of the token before proceeding with operations, leading to a potential vulnerability where unauthorized users could interact with the contract as if they were the owner.",if authority.key != token.owner { return Err(ProgramError::InvalidAccountData); },#[account(constraint = authority.key == &token.owner)],High,"The secure code uses Anchor’s `#[account(constraint)]` to enforce that the authority’s key matches the token’s owner at the account validation stage, preventing unauthorized operations by embedding the check in the framework’s runtime.",,Medium
Sol-003,"The vulnerability arises from the use of incorrect `seeds` for generating a Program Derived Address (PDA), thereby potentially allowing unauthorized token withdrawal or interaction with the wrong PDA.","let seeds = &[ctx.accounts.pool.mint.as_ref(), &[ctx.accounts.pool.bump]];","let seeds = &[ctx.accounts.pool.withdraw_destination.as_ref(), &[ctx.accounts.pool.bump]];",Critical,"The secure code corrects the PDA seeds to use `withdraw_destination` instead of `mint`, ensuring the PDA aligns with the intended account. This prevents attackers from withdrawing tokens from an unintended PDA, a severe exploit vector.",,Medium
Sol-004,"The vulnerability involves incorrect seed canonicalization when creating a program address. Insecure code uses a provided `bump` seed that might not match the bump seed calculated by the Solana runtime, leading to potential bypass of security checks or other unintended behaviors.",if address != ctx.accounts.data.key() { return Err(ProgramError::InvalidArgument); },"let (_, expected_bump) = Pubkey::find_program_address(&[key.to_le_bytes().as_ref()], ctx.program_id); if expected_bump != bump { return Err(ProgramError::InvalidArgument); }",High,"The secure code calculates the canonical `bump` using `Pubkey::find_program_address` and compares it to the provided `bump`, ensuring the PDA is valid and matches runtime expectations. This prevents spoofing or bypassing PDA-based security checks.",,Medium
Sol-005,"The ""TypeCosplay"" vulnerability involves the absence of a check to ensure an account's data matches the expected account type or discriminant, allowing an attacker to pass an account of an incorrect type.",if ctx.accounts.user.owner != ctx.program_id { return Err(ProgramError::IllegalOwner); },if ctx.accounts.user.owner != ctx.program_id { return Err(ProgramError::IllegalOwner); } if user.discriminant != AccountDiscriminant::User { return Err(ProgramError::InvalidAccountData); },Medium,"The secure code adds a `discriminant` check to verify the account’s type matches `AccountDiscriminant::User`, preventing attackers from passing a different account type (e.g., a token account as a user account), which could disrupt contract logic.",,Medium
Sol-006,DuplicateMutableAccounts,let user_a = &mut ctx.accounts.user_a; let user_b = &mut ctx.accounts.user_b;,if ctx.accounts.user_a.key() == ctx.accounts.user_b.key() { return Err(ProgramError::InvalidArgument) } let user_a = &mut ctx.accounts.user_a; let user_b = &mut ctx.accounts.user_b;,Medium,"The secure code checks if `user_a` and `user_b` have the same key, rejecting duplicates. Solana disallows duplicate mutable accounts to prevent data races, and this fix ensures runtime compliance and prevents unintended state changes.",,Medium
Sol-007,"The vulnerability arises from not verifying if an account provided as 'authority' in a Solana smart contract function has actually signed the transaction, potentially allowing unauthorized actions.","msg!(""GM {}"", authority.key().to_string());","if !authority.is_signer { return Err(ProgramError::MissingRequiredSignature); } msg!(""GM {}"", authority.key().to_string());",High,"The secure code adds an `is_signer` check, ensuring the `authority` account signed the transaction. This prevents unauthorized execution by requiring explicit signer validation, a fundamental Solana security measure.",,Medium
Sol-008,Not verifying if an account provided to a smart contract is the expected system account could lead to malicious actors exploiting the contract by providing incorrect accounts. This issue is particularly critical when dealing with system accounts like the Rent sysvar in Solana.,"msg!(""Rent Key -> {}"", rent.key().to_string());","require_eq!(rent.key(), sysvar::rent::ID); msg!(""Rent Key -> {}"", rent.key().to_string());",Medium,"The secure code uses `require_eq!` to verify the `rent` account matches the Rent sysvar’s ID (`sysvar::rent::ID`). This ensures the contract uses the correct system account, preventing attackers from substituting fake sysvars.",,Medium
Sol-009,"The vulnerability arises from not properly validating the ownership of a token account in smart contracts, which could allow unauthorized access to sensitive actions or information by failing to ensure the account is a valid SPL token account owned by the SPL Token Program and controlled by the expected authority.",if authority.key != &token.owner { return Err(ProgramError::InvalidAccountData); },if *token.owner != *authority.key { return Err(ProgramError::InvalidAccountData); } if token.account_type != spl_token::state::AccountType::Account { return Err(ProgramError::InvalidAccountData); } if *token.program != spl_token::id() { return Err(ProgramError::InvalidAccountData); },High,"The secure code checks that the token’s owner matches the authority, the account is an SPL token account (`AccountType::Account`), and it’s owned by the SPL Token Program (`spl_token::id()`). This ensures only valid, authority-controlled token accounts are used, preventing unauthorized access.",,Medium
Sol-010,"The vulnerability arises from not checking if the called program in a Cross-Program Invocation (CPI) is the intended one, allowing potential arbitrary executions by malicious actors.","fn cpi(token_program: AccountInfo, source: AccountInfo, destination: AccountInfo, authority: AccountInfo, amount: u64) { invoke(&transfer(token_program.key, source.key, destination.key, authority.key, &[], amount), &[source, destination, authority]); }","fn cpi_secure(token_program: AccountInfo, source: AccountInfo, destination: AccountInfo, authority: AccountInfo, amount: u64) { if &TOKEN_PROGRAM_ID != token_program.key { panic!(""Incorrect program ID""); } invoke(&transfer(token_program.key, source.key, destination.key, authority.key, &[], amount), &[source, destination, authority]); }",Critical,"The secure code verifies the `token_program` matches `TOKEN_PROGRAM_ID` before the CPI, preventing calls to malicious programs. This stops arbitrary execution, a severe risk in Solana’s CPI model.",,Medium
Sol-011,"The vulnerability revolves around a smart contract's improper account closure process. The insecure code fails to properly zero out the data of a closed account, leaving residual data that could be potentially exploited or lead to inconsistent state representations. Ensuring the data of an account is cleared and marked with a discriminator indicating closure is crucial for security and data integrity.",let dest_starting_lamports = destination.lamports(); *destination.lamports.borrow_mut() = dest_starting_lamports.checked_add(account.lamports()).unwrap(); *account.lamports.borrow_mut() = 0;,let dest_starting_lamports = destination.lamports(); *destination.lamports.borrow_mut() = dest_starting_lamports.checked_add(account.lamports()).unwrap(); *account.lamports.borrow_mut() = 0; let mut data = account.try_borrow_mut_data()?; for byte in data.iter_mut() { *byte = 0; } let mut cursor = Cursor::new(&mut data); cursor.write_all(&CLOSED_ACCOUNT_DISCRIMINATOR).unwrap();,Medium,"The secure code zeroes out the account data and writes a `CLOSED_ACCOUNT_DISCRIMINATOR`, ensuring no residual data remains and the account’s closure is explicitly marked. This prevents reuse or misinterpretation of closed accounts.",,Medium
Sol-012,"The vulnerability is related to the improper initialization of smart contracts, allowing for the possibility of reinitialization attacks, where an attacker might reinitialize already initialized accounts, or create and not properly initialize accounts, potentially compromising the contract's security.",let mut user = User::try_from_slice(&data).unwrap(); user.authority = authority; user.serialize(&mut data).unwrap();,let mut user = User::try_from_slice(&data).unwrap(); if user.discriminator { return Err(ProgramError::InvalidAccountData); } user.authority = authority; user.discriminator = true; user.serialize(&mut data).unwrap();,High,"The secure code checks the `discriminator` to prevent reinitialization, then sets it after initializing the account. This ensures accounts are initialized only once, blocking attackers from overwriting state.",,Medium
Sol-013,"The vulnerability arises from not verifying if The caller (authority) is The actual owner of The token account prior to executing actions or revealing sensitive information, which can lead to unauthorized access or information disclosure.","let token = SplTokenAccount::unpack(&token.data.borrow())?; msg!(""Your account balance is: {}"", token.amount);","let token = SplTokenAccount::unpack(&token.data.borrow())?; if authority.key != &token.owner { return Err(ProgramError::InvalidAccountData); } msg!(""Your account balance is: {}"", token.amount);",Medium,The secure code adds a check to ensure the `authority` matches the `token.owner` before revealing sensitive data (balance). This prevents unauthorized users from accessing token account information.,,Medium
Sol-014,"The vulnerability arises from unchecked arithmetic operations in smart contracts, which can lead to overflows or underflows in Rust's release mode, allowing attackers to manipulate balances or other critical values.",let new_balance = account.balance + amount; account.balance = new_balance;,let new_balance = account.balance.checked_add(amount).ok_or(ProgramError::ArithmeticOverflow)?; account.balance = new_balance;,Critical,"The secure code uses `checked_add` to detect overflows, returning an error if the operation exceeds `u64` limits. This prevents balance manipulation, a severe exploit seen in Solana hacks like Mango Markets.",,Medium
Sol-015,"The vulnerability occurs when a smart contract assumes an account’s data is initialized without checking, potentially allowing attackers to exploit uninitialized or garbage data to bypass logic.",let user_data = User::try_deserialize(&mut account.data.borrow())?; if user_data.authority == authority.key() { process_action(); },"if account.data.borrow().is_empty() { User::init(&mut account.data.borrow_mut(), authority.key())?; } else { let user_data = User::try_deserialize(&mut account.data.borrow())?; if user_data.authority != authority.key() { return Err(ProgramError::InvalidAccountData); } } process_action();",High,"The secure code checks if the account data is empty and initializes it if so, otherwise validating the deserialized `authority`. This prevents logic bypass via uninitialized or attacker-controlled data.",,Medium
Sol-016,"The vulnerability arises from not re-verifying signer status in a Cross-Program Invocation (CPI), allowing attackers to spoof a signer’s authority by manipulating the calling context.","invoke( &transfer_instruction, &[source.clone(), destination.clone(), authority.clone()], )?;","let signer_seeds = &[authority.key.as_ref(), &[bump]]; invoke_signed( &transfer_instruction, &[source.clone(), destination.clone(), authority.clone()], &[&signer_seeds], )?;",Critical,"The secure code uses `invoke_signed` with PDA seeds, ensuring the CPI call carries signer authority cryptographically. This prevents spoofing, a severe risk in Solana’s CPI model (e.g., Wormhole exploit).",,Medium
Sol-017,"The vulnerability stems from not validating state changes before and after external calls, such as flash loans, allowing attackers to temporarily manipulate balances or other contract states.",let initial_balance = account.balance; external_call(&mut account)?; account.balance += reward;,let initial_balance = account.balance; external_call(&mut account)?; if account.balance != initial_balance { return Err(ProgramError::InvalidState); } account.balance = initial_balance.checked_add(reward).ok_or(ProgramError::ArithmeticOverflow)?;,High,"The secure code checks the balance before and after the external call, rejecting changes, and uses `checked_add` for the reward. This prevents flash loan manipulations and ensures state integrity.",,Medium
Sol-018,"The vulnerability occurs when a smart contract does not prevent the replay of transaction instructions, potentially allowing attackers to reuse valid instructions for unauthorized actions like double-spending.","process_transfer(&mut account, amount);","if account.last_txn == ctx.instruction_context.transaction_context.transaction_id { return Err(ProgramError::InvalidArgument); } process_transfer(&mut account, amount); account.last_txn = ctx.instruction_context.transaction_context.transaction_id;",High,"The secure code tracks the last transaction ID, rejecting replays if it matches the current one, and updates it post-transfer. This prevents attackers from reusing signed instructions, ensuring transaction uniqueness.",,Medium
Sol-019,"The vulnerability arises from unchecked arithmetic operations in smart contracts, which can lead to overflows or underflows in Rust's release mode, allowing attackers to manipulate balances or other critical values.","fn main() {let mut balance: u64 = 10;balance -= 20;println!(""Balance: {}"", balance);}","fn main() {let balance: u64 = 10;let new_balance = balance.checked_sub(20).expect(""Subtraction overflowed!"");println!(""New Balance: {}"", new_balance);}",Critical,Use Rust’s checked_* or saturating_* methods to safely handle overflows and underflows:,,Medium
Sol-020,"The vulnerability occurs when an external contract calls back into the vulnerable contract before the original function call is completed, potentially allowing the external contract to alter the state unexpectedly (such as withdrawing funds multiple times). ","pub fn withdraw(&mut self, amount: u128) {assert!(self.balances[self.caller()] >= amount, ""Insufficient funds"");self.transfer(self.caller(), amount);self.balances[self.caller()] -= amount;  // Reentrancy vulnerability}","pub fn withdraw(&mut self, amount: u128) {assert!(self.balances[self.caller()] >= amount, ""Insufficient funds"");self.balances[self.caller()] -= amount;self.transfer(self.caller(), amount);}",Critical,"Use the checks-effects-interactions pattern, updating the state before making external calls",,Medium
Sol-021,The vulnerability occurs due to a missing ownership check,"fn withdraw_token_restricted(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult {let account_iter = &mut accounts.iter();let vault = next_account_info(account_iter)?;let admin = next_account_info(account_iter)?;let config = ConfigAccount::unpack(next_account_info(account_iter)?)?;let vault_authority = next_account_info(account_iter)?;if config.admin != admin.pubkey() {return Err(ProgramError::InvalidAdminAccount);}Ok(())}","fn withdraw_token_restricted(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult {let account_iter = &mut accounts.iter();let vault = next_account_info(account_iter)?;let admin = next_account_info(account_iter)?;let config = ConfigAccount::unpack(next_account_info(account_iter)?)?;let vault_authority = next_account_info(account_iter)?;if config.owner != program_id {return Err(ProgramError::InvalidConfigAccount);}if config.admin != admin.pubkey() {return Err(ProgramError::InvalidAdminAccount);}Ok(())}",Critical,Add the missing ownership check to prevent unauthorized access,,Medium
Sol-022,The vulnerability occurs when the contract doesn't verify that the respective entity has signed the corresponding transaction,"fn update_admin(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult {let account_iter = &mut accounts.iter();let config = ConfigAccount::unpack(next_account_info(account_iter)?)?;let admin = next_account_info(account_iter)?;let new_admin next_account_info(account_iter)?;// Validate the config account...if admin.pubkey() != config.admin {returnErr(ProgramError::InvalidAdminAccount);}config.admin = new_admin.pubkey();Ok(())}","fn update_admin(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult { let account_iter = &mut accounts.iter(); let config = ConfigAccount::unpack(next_account_info(account_iter)?)?; let admin = next_account_info(account_iter)?; let new_admin = next_account_info(account_iter)?; // ... // Validate the config account... // ... if admin.pubkey() != config.admin { return Err(ProgramError::InvalidAdminAccount); } // check that the current admin has signed this operation if !admin.is_signer { return Err(ProgramError::MissingSigner); } config.admin = new_admin.pubkey(); Ok(()) }",Critical,Insert the missing check to ensure valid checks are executed,,Medium
Sol-023,"The vulnerability occurrs due to integer overflow, causing the program to panic","let FEE: u32 = 1000; fn withdraw_token(program_id: &Pubkey, accounts: &[AccountInfo], amount: u32) -> ProgramResult { // ... // deserialize & validate user and vault accounts // ... if amount + FEE > vault.user_balance[user_id] { return Err(ProgramError::AttemptToWithdrawTooMuch); } // ... // Transfer `amount` many tokens from vault to user-controlled account ... // ... Ok(()) }","let FEE: u32 = 1000; fn withdraw_token(program_id: &Pubkey, accounts: &[AccountInfo], amount: u32) -> ProgramResult { // ... // deserialize & validate user and vault accounts // ... if amount.checked_add(FEE).ok_or(ProgramError::InvalidArgument)? > vault.user_balance[user_id] { return Err(ProgramError::AttemptToWithdrawTooMuch); } // ... // Transfer `amount` many tokens from vault to user-controlled account ... // ... Ok(()) }",Critical,Replace the + with checked_add to mitigate this issue,,Medium
Sol-024,The vulnerability occurs when an attacker uses a foreign program account to call an unexpected function ,"pub fn process_withdraw(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let vault = next_account_info(account_info_iter)?; let vault_authority = next_account_info(account_info_iter)?; let destination = next_account_info(account_info_iter)?; let token_program = next_account_info(account_info_iter)?; // ... // get signer seeds, validate account owners and signers, // and verify that the user can withdraw the supplied amount // ... // invoke unverified token_program invoke_signed( &spl_token::instruction::transfer( &token_program.key, &vault.key, &destination.key, &vault_authority.key, &[&vault_authority.key], amount, )?, &[ vault.clone(), destination.clone(), vault_owner_info.clone(), token_program.clone(), ], &[&seeds], )?; Ok(()) }","pub fn process_withdraw(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let vault = next_account_info(account_info_iter)?; let vault_authority = next_account_info(account_info_iter)?; let destination = next_account_info(account_info_iter)?; let token_program = next_account_info(account_info_iter)?; // ... // get signer seeds, validate account owners and signers, // and verify that the user can withdraw the supplied amount // ... // verify that token_program is in fact the official spl token program if token_program.key != &spl_token::id() { return Err(ProgramError::InvalidTokenProgram); } invoke_signed( &spl_token::instruction::transfer( &token_program.key, &vault.key, &destination.key, &vault_authority.key, &[&vault_authority.key], amount, )?, &[ vault.clone(), destination.clone(), vault_owner_info.clone(), token_program.clone(), ], &[&seeds], )?; Ok(()) }",Critical,"Make sure we check that the program we are invoking is, in fact, the one we want",,Medium
Sol-025,The vulnerability arises when an account type is not the one expected by the program,"// ------- Account Types -------- pub struct Config { pub admin: Pubkey, pub fee: u32, pub user_count: u32, } pub struct User { pub user_authority: Pubkey, pub balance: u64, } // ------- Helper functions -------- fn unpack_config(account: &AccountInfo) -> Result<Config, ProgramError> { let mut config: Config = deserialize(&mut account.data.borrow())?; return config; } // ------- Contract Instructions --------- fn create_user(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult { let account_iter = &mut accounts.iter(); let user = next_account_info(account_iter)?; // ... // Initialize a User struct, set user_authority // to user and set balance to 0 // ... Ok(()) } fn withdraw_tokens(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult { let account_iter = &mut accounts.iter(); let vault = next_account_info(account_iter)?; let admin = next_account_info(account_iter)?; let config = unpack_config(next_account_info(account_iter)?)?; let vault_authority = next_account_info(account_iter)?; if config.owner != program_id { return Err(ProgramError::InvalidConfigAccount); } if config.admin != admin.pubkey() { return Err(ProgramError::InvalidAdminAccount); } // ... // Transfer funds from vault to admin using vault_authority // ... Ok(()) }","// ------- Account Types -------- pub struct Config { pub TYPE: u8, // <-- should contain a unique identifier for this account type pub admin: Pubkey, pub fee: u32, pub user_count: u32, } pub struct User { pub TYPE: u8, // <-- should contain a unique identifier for this account type pub user_authority: Pubkey, pub balance: u64, } // ------- Helper functions -------- fn unpack_config(account: &AccountInfo) -> Result<Config, ProgramError> { let mut config: Config = deserialize(&mut account.data.borrow())?; if config.TYPE != Types::ConfigType { return Err(ProgramError::InvalidAccountType); } return config; }// ------- Contract Instructions --------- fn create_user(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult { let account_iter = &mut accounts.iter(); let user = next_account_info(account_iter)?; // ... // Initialize a User struct, set user_authority // to user and set balance to 0 // ... Ok(()) } fn withdraw_tokens(program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult { let account_iter = &mut accounts.iter(); let vault = next_account_info(account_iter)?; let admin = next_account_info(account_iter)?; let config = unpack_config(next_account_info(account_iter)?)?; let vault_authority = next_account_info(account_iter)?; if config.owner != program_id { return Err(ProgramError::InvalidConfigAccount); } if config.admin != admin.pubkey() { return Err(ProgramError::InvalidAdminAccount); } // ... // Transfer funds from vault to admin using vault_authority // ... Ok(()) }",High,"When we create a new account, we set the TYPE field to a value that is unique to accounts of that type. Our deserialization function will also have to validate the TYPE and error out if the account does not have the type we’re expecting.",,Medium
Sol-026,signer-authorization,"use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod signer_authorization_insecure { use super::*; pub fn log_message(ctx: Context<LogMessage>) -> ProgramResult { msg!(""GM {}"", ctx.accounts.authority.key().to_string()); Ok(()) } } #[derive(Accounts)] pub struct LogMessage<'info> { authority: AccountInfo<'info>, }","use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod signer_authorization_secure { use super::*; pub fn log_message(ctx: Context<LogMessage>) -> ProgramResult { if !ctx.accounts.authority.is_signer { return Err(ProgramError::MissingRequiredSignature); } msg!(""GM {}"", ctx.accounts.authority.key().to_string()); Ok(()) } } #[derive(Accounts)] pub struct LogMessage<'info> { authority: AccountInfo<'info>, }",Critical,We should always add signer checks when making system calls that require authorization,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/0-signer-authorization/insecure/src/lib.rs,High
Sol-027,signer-authorization,"use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod signer_authorization_recommended { use super::*; pub fn log_message(ctx: Context<LogMessage>) -> ProgramResult { msg!(""GM {}"", ctx.accounts.authority.key().to_string()); Ok(()) } } #[derive(Accounts)] pub struct LogMessage<'info> { authority: Signer<'info>, }","use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod signer_authorization_secure { use super::*; pub fn log_message(ctx: Context<LogMessage>) -> ProgramResult { if !ctx.accounts.authority.is_signer { return Err(ProgramError::MissingRequiredSignature); } msg!(""GM {}"", ctx.accounts.authority.key().to_string()); Ok(()) } } #[derive(Accounts)] pub struct LogMessage<'info> { authority: AccountInfo<'info>, }",Medium,,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/0-signer-authorization/recommended/src/lib.rs,High
Sol-028,account-data-matching,"use anchor_lang::prelude::*; use anchor_lang::solana_program::program_pack::Pack; use spl_token::state::Account as SplTokenAccount; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod account_data_matching_insecure { use super::*; pub fn log_message(ctx: Context<LogMessage>) -> ProgramResult { let token = SplTokenAccount::unpack(&ctx.accounts.token.data.borrow())?; msg!(""Your account balance is: {}"", token.amount); Ok(()) } } #[derive(Accounts)] pub struct LogMessage<'info> { token: AccountInfo<'info>, authority: Signer<'info>, }","use anchor_lang::prelude::*; use anchor_lang::solana_program::program_pack::Pack; use spl_token::state::Account as SplTokenAccount; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod account_data_matching_secure { use super::*; pub fn log_message(ctx: Context<LogMessage>) -> ProgramResult { let token = SplTokenAccount::unpack(&ctx.accounts.token.data.borrow())?; if ctx.accounts.authority.key != &token.owner { return Err(ProgramError::InvalidAccountData); } msg!(""Your acocunt balance is: {}"", token.amount); Ok(()) } } #[derive(Accounts)] pub struct LogMessage<'info> { token: AccountInfo<'info>, authority: Signer<'info>, }",Critical,Make sure to add the proper authority checks before making calls to token functions,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/1-account-data-matching/insecure/src/lib.rs,High
Sol-029,account-data-matching,"use anchor_lang::prelude::*; use anchor_spl::token::TokenAccount; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod account_data_matching_recommended { use super::*; pub fn log_message(ctx: Context<LogMessage>) -> ProgramResult { msg!(""Your account balance is: {}"", ctx.accounts.token.amount); Ok(()) } } #[derive(Accounts)] pub struct LogMessage<'info> { #[account(constraint = authority.key == &token.owner)] token: Account<'info, TokenAccount>, authority: Signer<'info>, }","use anchor_lang::prelude::*; use anchor_lang::solana_program::program_pack::Pack; use spl_token::state::Account as SplTokenAccount; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod account_data_matching_secure { use super::*; pub fn log_message(ctx: Context<LogMessage>) -> ProgramResult { let token = SplTokenAccount::unpack(&ctx.accounts.token.data.borrow())?; if ctx.accounts.authority.key != &token.owner { return Err(ProgramError::InvalidAccountData); } msg!(""Your acocunt balance is: {}"", token.amount); Ok(()) } } #[derive(Accounts)] pub struct LogMessage<'info> { token: AccountInfo<'info>, authority: Signer<'info>, }",Medium,,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/1-account-data-matching/recommended/src/lib.rs,High
Sol-030,owner-checks,"use anchor_lang::prelude::*; use anchor_lang::solana_program::program_error::ProgramError; use anchor_lang::solana_program::program_pack::Pack; use spl_token::state::Account as SplTokenAccount; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod owner_checks_insecure { use super::*; pub fn log_message(ctx: Context<LogMessage>) -> ProgramResult { let token = SplTokenAccount::unpack(&ctx.accounts.token.data.borrow())?; if ctx.accounts.authority.key != &token.owner { return Err(ProgramError::InvalidAccountData); } msg!(""Your account balance is: {}"", token.amount); Ok(()) } } #[derive(Accounts)] pub struct LogMessage<'info> { token: AccountInfo<'info>, authority: Signer<'info>, }","use anchor_lang::prelude::*; use anchor_lang::solana_program::program_error::ProgramError; use anchor_lang::solana_program::program_pack::Pack; use spl_token::state::Account as SplTokenAccount; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod owner_checks_secure { use super::*; pub fn log_message(ctx: Context<LogMessage>) -> ProgramResult { let token = SplTokenAccount::unpack(&ctx.accounts.token.data.borrow())?; if ctx.accounts.token.owner != &spl_token::ID { return Err(ProgramError::InvalidAccountData); } if ctx.accounts.authority.key != &token.owner { return Err(ProgramError::InvalidAccountData); } msg!(""Your account balance is: {}"", token.amount); Ok(()) } } #[derive(Accounts)] pub struct LogMessage<'info> { token: AccountInfo<'info>, authority: Signer<'info>, }",Critical,,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/2-owner-checks/insecure/src/lib.rs,High
Sol-031,owner-checks,"use anchor_lang::prelude::*; use anchor_spl::token::TokenAccount; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod owner_checks_recommended { use super::*; pub fn log_message(ctx: Context<LogMessage>) -> ProgramResult { msg!(""Your account balance is: {}"", ctx.accounts.token.amount); Ok(()) } } #[derive(Accounts)] pub struct LogMessage<'info> { #[account(constraint = authority.key == &token.owner)] token: Account<'info, TokenAccount>, authority: Signer<'info>, }","use anchor_lang::prelude::*; use anchor_lang::solana_program::program_error::ProgramError; use anchor_lang::solana_program::program_pack::Pack; use spl_token::state::Account as SplTokenAccount; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod owner_checks_secure { use super::*; pub fn log_message(ctx: Context<LogMessage>) -> ProgramResult { let token = SplTokenAccount::unpack(&ctx.accounts.token.data.borrow())?; if ctx.accounts.token.owner != &spl_token::ID { return Err(ProgramError::InvalidAccountData); } if ctx.accounts.authority.key != &token.owner { return Err(ProgramError::InvalidAccountData); } msg!(""Your account balance is: {}"", token.amount); Ok(()) } } #[derive(Accounts)] pub struct LogMessage<'info> { token: AccountInfo<'info>, authority: Signer<'info>, }",Low,,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/2-owner-checks/recommended/src/lib.rs,High
Sol-032,type-cosplay,"use anchor_lang::prelude::*; use borsh::{BorshDeserialize, BorshSerialize}; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod type_cosplay_insecure { use super::*; pub fn update_user(ctx: Context<UpdateUser>) -> ProgramResult { let user = User::try_from_slice(&ctx.accounts.user.data.borrow()).unwrap(); if ctx.accounts.user.owner != ctx.program_id { return Err(ProgramError::IllegalOwner); } if user.authority != ctx.accounts.authority.key() { return Err(ProgramError::InvalidAccountData); } msg!(""GM {}"", user.authority); Ok(()) } } #[derive(Accounts)] pub struct UpdateUser<'info> { user: AccountInfo<'info>, authority: Signer<'info>, } #[derive(BorshSerialize, BorshDeserialize)] pub struct User { authority: Pubkey, } #[derive(BorshSerialize, BorshDeserialize)] pub struct Metadata { account: Pubkey, }","use anchor_lang::prelude::*; use borsh::{BorshDeserialize, BorshSerialize}; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod type_cosplay_secure { use super::*; pub fn update_user(ctx: Context<UpdateUser>) -> ProgramResult { let user = User::try_from_slice(&ctx.accounts.user.data.borrow()).unwrap(); if ctx.accounts.user.owner != ctx.program_id { return Err(ProgramError::IllegalOwner); } if user.authority != ctx.accounts.authority.key() { return Err(ProgramError::InvalidAccountData); } if user.discriminant != AccountDiscriminant::User { return Err(ProgramError::InvalidAccountData); } msg!(""GM {}"", user.authority); Ok(()) } } #[derive(Accounts)] pub struct UpdateUser<'info> { user: AccountInfo<'info>, authority: Signer<'info>, } #[derive(BorshSerialize, BorshDeserialize)] pub struct User { discriminant: AccountDiscriminant, authority: Pubkey, } #[derive(BorshSerialize, BorshDeserialize)] pub struct Metadata { discriminant: AccountDiscriminant, account: Pubkey, } #[derive(BorshSerialize, BorshDeserialize, PartialEq)] pub enum AccountDiscriminant { User, Metadata, }",Critical,,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/3-type-cosplay/insecure/src/lib.rs,High
Sol-033,type-cosplay,"use anchor_lang::prelude::*; use borsh::{BorshDeserialize, BorshSerialize}; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod type_cosplay_recommended { use super::*; pub fn update_user(ctx: Context<UpdateUser>) -> ProgramResult { msg!(""GM {}"", ctx.accounts.user.authority); Ok(()) } } #[derive(Accounts)] pub struct UpdateUser<'info> { #[account(has_one = authority)] user: Account<'info, User>, authority: Signer<'info>, } #[account] pub struct User { authority: Pubkey, } #[account] pub struct Metadata { account: Pubkey, }","use anchor_lang::prelude::*; use borsh::{BorshDeserialize, BorshSerialize}; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod type_cosplay_secure { use super::*; pub fn update_user(ctx: Context<UpdateUser>) -> ProgramResult { let user = User::try_from_slice(&ctx.accounts.user.data.borrow()).unwrap(); if ctx.accounts.user.owner != ctx.program_id { return Err(ProgramError::IllegalOwner); } if user.authority != ctx.accounts.authority.key() { return Err(ProgramError::InvalidAccountData); } if user.discriminant != AccountDiscriminant::User { return Err(ProgramError::InvalidAccountData); } msg!(""GM {}"", user.authority); Ok(()) } } #[derive(Accounts)] pub struct UpdateUser<'info> { user: AccountInfo<'info>, authority: Signer<'info>, } #[derive(BorshSerialize, BorshDeserialize)] pub struct User { discriminant: AccountDiscriminant, authority: Pubkey, } #[derive(BorshSerialize, BorshDeserialize)] pub struct Metadata { discriminant: AccountDiscriminant, account: Pubkey, } #[derive(BorshSerialize, BorshDeserialize, PartialEq)] pub enum AccountDiscriminant { User, Metadata, }",Low,,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/3-type-cosplay/recommended/src/lib.rs,High
Sol-034,initialization,"use anchor_lang::prelude::*; use borsh::{BorshDeserialize, BorshSerialize}; use std::ops::DerefMut; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod initialization_insecure { use super::*; pub fn initialize(ctx: Context<Initialize>) -> ProgramResult { let mut user = User::try_from_slice(&ctx.accounts.user.data.borrow()).unwrap(); user.authority = ctx.accounts.authority.key(); let mut storage = ctx.accounts.user.try_borrow_mut_data()?; user.serialize(storage.deref_mut()).unwrap(); Ok(()) } } /* - reinitialize - create and dont initialize - passing previously initialzed accounts from other programs (e.g. token program => need to check delegate and authority) */ #[derive(Accounts)] pub struct Initialize<'info> { user: AccountInfo<'info>, authority: Signer<'info>, } #[derive(BorshSerialize, BorshDeserialize)] pub struct User { authority: Pubkey, }","use anchor_lang::prelude::*; use borsh::{BorshDeserialize, BorshSerialize}; use std::ops::DerefMut; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod reinitialization_secure_recommended { use super::*; pub fn initialize(ctx: Context<Initialize>) -> ProgramResult { let mut user = User::try_from_slice(&ctx.accounts.user.data.borrow()).unwrap(); if !user.discriminator { return Err(ProgramError::InvalidAccountData); } user.authority = ctx.accounts.authority.key(); user.discriminator = true; let mut storage = ctx.accounts.user.try_borrow_mut_data()?; user.serialize(storage.deref_mut()).unwrap(); msg!(""GM""); Ok(()) } } #[derive(Accounts)] pub struct Initialize<'info> { user: AccountInfo<'info>, authority: Signer<'info>, } #[derive(BorshSerialize, BorshDeserialize)] pub struct User { discriminator: bool, authority: Pubkey, }",Critical,,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/4-initialization/insecure/src/lib.rs,High
Sol-035,initialization,"use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod reinitialization_4 { use super::*; pub fn init(_ctx: Context<Init>) -> ProgramResult { msg!(""GM""); Ok(()) } } #[derive(Accounts)] pub struct Init<'info> { #[account(init, payer = authority, space = 8+32)] user: Account<'info, User>, #[account(mut)] authority: Signer<'info>, system_program: Program<'info, System>, } #[account] pub struct User { authority: Pubkey, }","use anchor_lang::prelude::*; use borsh::{BorshDeserialize, BorshSerialize}; use std::ops::DerefMut; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod reinitialization_secure_recommended { use super::*; pub fn initialize(ctx: Context<Initialize>) -> ProgramResult { let mut user = User::try_from_slice(&ctx.accounts.user.data.borrow()).unwrap(); if !user.discriminator { return Err(ProgramError::InvalidAccountData); } user.authority = ctx.accounts.authority.key(); user.discriminator = true; let mut storage = ctx.accounts.user.try_borrow_mut_data()?; user.serialize(storage.deref_mut()).unwrap(); msg!(""GM""); Ok(()) } } #[derive(Accounts)] pub struct Initialize<'info> { user: AccountInfo<'info>, authority: Signer<'info>, } #[derive(BorshSerialize, BorshDeserialize)] pub struct User { discriminator: bool, authority: Pubkey, }",Low,,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/4-initialization/recommended/src/lib.rs,High
Sol-036,arbitrary-cpi,"use anchor_lang::prelude::*; use anchor_lang::solana_program; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod arbitrary_cpi_insecure { use super::*; pub fn cpi(ctx: Context<Cpi>, amount: u64) -> ProgramResult { solana_program::program::invoke( &spl_token::instruction::transfer( ctx.accounts.token_program.key, ctx.accounts.source.key, ctx.accounts.destination.key, ctx.accounts.authority.key, &[], amount, )?, &[ ctx.accounts.source.clone(), ctx.accounts.destination.clone(), ctx.accounts.authority.clone(), ], ) } } #[derive(Accounts)] pub struct Cpi<'info> { source: AccountInfo<'info>, destination: AccountInfo<'info>, authority: AccountInfo<'info>, token_program: AccountInfo<'info>, }","use anchor_lang::prelude::*; use anchor_lang::solana_program; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod arbitrary_cpi_secure { use super::*; pub fn cpi_secure(ctx: Context<Cpi>, amount: u64) -> ProgramResult { if &spl_token::ID != ctx.accounts.token_program.key { return Err(ProgramError::IncorrectProgramId); } solana_program::program::invoke( &spl_token::instruction::transfer( ctx.accounts.token_program.key, ctx.accounts.source.key, ctx.accounts.destination.key, ctx.accounts.authority.key, &[], amount, )?, &[ ctx.accounts.source.clone(), ctx.accounts.destination.clone(), ctx.accounts.authority.clone(), ], ) } } #[derive(Accounts)] pub struct Cpi<'info> { source: AccountInfo<'info>, destination: AccountInfo<'info>, authority: AccountInfo<'info>, token_program: AccountInfo<'info>, }",Critical,,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/5-arbitrary-cpi/insecure/src/lib.rs,High
Sol-037,arbitrary-cpi,"use anchor_lang::prelude::*; use anchor_spl::token::{self, Token, TokenAccount}; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod arbitrary_cpi_recommended { use super::*; pub fn cpi(ctx: Context<Cpi>, amount: u64) -> ProgramResult { token::transfer(ctx.accounts.transfer_ctx(), amount) } } #[derive(Accounts)] pub struct Cpi<'info> { source: Account<'info, TokenAccount>, destination: Account<'info, TokenAccount>, authority: Signer<'info>, token_program: Program<'info, Token>, } impl<'info> Cpi<'info> { pub fn transfer_ctx(&self) -> CpiContext<'_, '_, '_, 'info, token::Transfer<'info>> { let program = self.token_program.to_account_info(); let accounts = token::Transfer { from: self.source.to_account_info(), to: self.destination.to_account_info(), authority: self.authority.to_account_info(), }; CpiContext::new(program, accounts) } }","use anchor_lang::prelude::*; use anchor_lang::solana_program; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod arbitrary_cpi_secure { use super::*; pub fn cpi_secure(ctx: Context<Cpi>, amount: u64) -> ProgramResult { if &spl_token::ID != ctx.accounts.token_program.key { return Err(ProgramError::IncorrectProgramId); } solana_program::program::invoke( &spl_token::instruction::transfer( ctx.accounts.token_program.key, ctx.accounts.source.key, ctx.accounts.destination.key, ctx.accounts.authority.key, &[], amount, )?, &[ ctx.accounts.source.clone(), ctx.accounts.destination.clone(), ctx.accounts.authority.clone(), ], ) } } #[derive(Accounts)] pub struct Cpi<'info> { source: AccountInfo<'info>, destination: AccountInfo<'info>, authority: AccountInfo<'info>, token_program: AccountInfo<'info>, }",Low,,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/5-arbitrary-cpi/recommended/src/lib.rs,High
Sol-038,duplicate-mutable-accounts,"use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod duplicate_mutable_accounts_insecure { use super::*; pub fn update(ctx: Context<Update>, a: u64, b: u64) -> ProgramResult { let user_a = &mut ctx.accounts.user_a; let user_b = &mut ctx.accounts.user_b; user_a.data = a; user_b.data = b; Ok(()) } } #[derive(Accounts)] pub struct Update<'info> { user_a: Account<'info, User>, user_b: Account<'info, User>, } #[account] pub struct User { data: u64, }","use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod duplicate_mutable_accounts_secure { use super::*; pub fn update(ctx: Context<Update>, a: u64, b: u64) -> ProgramResult { if ctx.accounts.user_a.key() == ctx.accounts.user_b.key() { return Err(ProgramError::InvalidArgument) } let user_a = &mut ctx.accounts.user_a; let user_b = &mut ctx.accounts.user_b; user_a.data = a; user_b.data = b; Ok(()) } } #[derive(Accounts)] pub struct Update<'info> { user_a: Account<'info, User>, user_b: Account<'info, User>, } #[account] pub struct User { data: u64, }",Critical,,https://github.com/TalentCoder99/sealevel-attacks/blob/master/programs/6-duplicate-mutable-accounts/insecure/src/lib.rs,High
Sol-039,duplicate-mutable-accounts,"use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod duplicate_mutable_accounts_recommended { use super::*; pub fn update(ctx: Context<Update>, a: u64, b: u64) -> ProgramResult { let user_a = &mut ctx.accounts.user_a; let user_b = &mut ctx.accounts.user_b; user_a.data = a; user_b.data = b; Ok(()) } } #[derive(Accounts)] pub struct Update<'info> { #[account(constraint = user_a.key() != user_b.key())] user_a: Account<'info, User>, user_b: Account<'info, User>, } #[account] pub struct User { data: u64, }","use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod duplicate_mutable_accounts_secure { use super::*; pub fn update(ctx: Context<Update>, a: u64, b: u64) -> ProgramResult { if ctx.accounts.user_a.key() == ctx.accounts.user_b.key() { return Err(ProgramError::InvalidArgument) } let user_a = &mut ctx.accounts.user_a; let user_b = &mut ctx.accounts.user_b; user_a.data = a; user_b.data = b; Ok(()) } } #[derive(Accounts)] pub struct Update<'info> { user_a: Account<'info, User>, user_b: Account<'info, User>, } #[account] pub struct User { data: u64, }",Low,,https://github.com/TalentCoder99/sealevel-attacks/blob/master/programs/6-duplicate-mutable-accounts/insecure/src/lib.rs,High
Sol-040,bump-seed-canonicalization,"use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod bump_seed_canonicalization_insecure { use super::*; pub fn set_value(ctx: Context<BumpSeed>, key: u64, new_value: u64, bump: u8) -> ProgramResult { let address = Pubkey::create_program_address(&[key.to_le_bytes().as_ref(), &[bump]], ctx.program_id)?; if address != ctx.accounts.data.key() { return Err(ProgramError::InvalidArgument); } ctx.accounts.data.value = new_value; Ok(()) } } #[derive(Accounts)] pub struct BumpSeed<'info> { data: Account<'info, Data>, } #[account] pub struct Data { value: u64, }","use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod bump_seed_canonicalization_secure { use super::*; pub fn set_value_secure( ctx: Context<BumpSeed>, key: u64, new_value: u64, bump: u8, ) -> ProgramResult { let (address, expected_bump) = Pubkey::find_program_address(&[key.to_le_bytes().as_ref()], ctx.program_id); if address != ctx.accounts.data.key() { return Err(ProgramError::InvalidArgument); } if expected_bump != bump { return Err(ProgramError::InvalidArgument); } ctx.accounts.data.value = new_value; Ok(()) } } #[derive(Accounts)] pub struct BumpSeed<'info> { data: Account<'info, Data>, } #[account] pub struct Data { value: u64, }",Critical,,https://github.com/TalentCoder99/sealevel-attacks/blob/master/programs/7-bump-seed-canonicalization/insecure/src/lib.rs,High
Sol-041,bump-seed-canonicalization,"use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod bump_seed_canonicalization_recommended { use super::*; pub fn set_value(ctx: Context<BumpSeed>, key: u64, new_value: u64) -> ProgramResult { ctx.accounts.data.value = new_value; Ok(()) } } #[derive(Accounts)] #[instruction(key: u64)] pub struct BumpSeed<'info> { // Note a subtle pattern that is not displayed here. // // Usually, the usage of PDAs is broken into two parts: // // 1) allocation via `#[account(init, seeds = [...], bump)]` // 2) using the account via `#[account(init, seeds = [...], bump = data.bump)] // // When using a PDA, it's usually recommend to store the bump seed in the // account data, so that you can use it as demonstrated in 2), which will // provide a more efficient check. #[account(seeds = [key.to_le_bytes().as_ref()], bump)] data: Account<'info, Data>, } #[account] pub struct Data { value: u64, }","use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod bump_seed_canonicalization_secure { use super::*; pub fn set_value_secure( ctx: Context<BumpSeed>, key: u64, new_value: u64, bump: u8, ) -> ProgramResult { let (address, expected_bump) = Pubkey::find_program_address(&[key.to_le_bytes().as_ref()], ctx.program_id); if address != ctx.accounts.data.key() { return Err(ProgramError::InvalidArgument); } if expected_bump != bump { return Err(ProgramError::InvalidArgument); } ctx.accounts.data.value = new_value; Ok(()) } } #[derive(Accounts)] pub struct BumpSeed<'info> { data: Account<'info, Data>, } #[account] pub struct Data { value: u64, }",Low,,https://github.com/TalentCoder99/sealevel-attacks/blob/master/programs/7-bump-seed-canonicalization/recommended/src/lib.rs,High
Sol-042,pda-sharing,"use anchor_lang::prelude::*; use anchor_spl::token::{self, Token, TokenAccount}; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod pda_sharing_insecure { use super::*; pub fn withdraw_tokens(ctx: Context<WithdrawTokens>) -> ProgramResult { let amount = ctx.accounts.vault.amount; let seeds = &[ctx.accounts.pool.mint.as_ref(), &[ctx.accounts.pool.bump]]; token::transfer(ctx.accounts.transfer_ctx().with_signer(&[seeds]), amount) } } #[derive(Accounts)] pub struct WithdrawTokens<'info> { #[account(has_one = vault, has_one = withdraw_destination)] pool: Account<'info, TokenPool>, vault: Account<'info, TokenAccount>, withdraw_destination: Account<'info, TokenAccount>, authority: Signer<'info>, token_program: Program<'info, Token>, } impl<'info> WithdrawTokens<'info> { pub fn transfer_ctx(&self) -> CpiContext<'_, '_, '_, 'info, token::Transfer<'info>> { let program = self.token_program.to_account_info(); let accounts = token::Transfer { from: self.vault.to_account_info(), to: self.withdraw_destination.to_account_info(), authority: self.authority.to_account_info(), }; CpiContext::new(program, accounts) } } #[account] pub struct TokenPool { vault: Pubkey, mint: Pubkey, withdraw_destination: Pubkey, bump: u8, }","use anchor_lang::prelude::*; use anchor_spl::token::{self, Token, TokenAccount}; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod pda_sharing_secure { use super::*; pub fn withdraw_tokens(ctx: Context<WithdrawTokens>) -> ProgramResult { let amount = ctx.accounts.vault.amount; let seeds = &[ ctx.accounts.pool.withdraw_destination.as_ref(), &[ctx.accounts.pool.bump], ]; token::transfer(ctx.accounts.transfer_ctx().with_signer(&[seeds]), amount) } } #[derive(Accounts)] pub struct WithdrawTokens<'info> { #[account(has_one = vault, has_one = withdraw_destination)] pool: Account<'info, TokenPool>, vault: Account<'info, TokenAccount>, withdraw_destination: Account<'info, TokenAccount>, authority: Signer<'info>, token_program: Program<'info, Token>, } impl<'info> WithdrawTokens<'info> { pub fn transfer_ctx(&self) -> CpiContext<'_, '_, '_, 'info, token::Transfer<'info>> { let program = self.token_program.to_account_info(); let accounts = token::Transfer { from: self.vault.to_account_info(), to: self.withdraw_destination.to_account_info(), authority: self.authority.to_account_info(), }; CpiContext::new(program, accounts) } } #[account] pub struct TokenPool { vault: Pubkey, mint: Pubkey, withdraw_destination: Pubkey, bump: u8, }",Critical,,https://github.com/TalentCoder99/sealevel-attacks/blob/master/programs/8-pda-sharing/insecure/src/lib.rs,High
Sol-043,pda-sharing,"use anchor_lang::prelude::*; use anchor_spl::token::{self, Token, TokenAccount}; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod pda_sharing_recommended { use super::*; pub fn withdraw_tokens(ctx: Context<WithdrawTokens>) -> ProgramResult { let amount = ctx.accounts.vault.amount; let seeds = &[ ctx.accounts.pool.withdraw_destination.as_ref(), &[ctx.accounts.pool.bump], ]; token::transfer(ctx.accounts.transfer_ctx().with_signer(&[seeds]), amount) } } #[derive(Accounts)] pub struct WithdrawTokens<'info> { #[account( has_one = vault, has_one = withdraw_destination, seeds = [withdraw_destination.key().as_ref()], bump = pool.bump, )] pool: Account<'info, TokenPool>, vault: Account<'info, TokenAccount>, withdraw_destination: Account<'info, TokenAccount>, authority: Signer<'info>, token_program: Program<'info, Token>, } impl<'info> WithdrawTokens<'info> { pub fn transfer_ctx(&self) -> CpiContext<'_, '_, '_, 'info, token::Transfer<'info>> { let program = self.token_program.to_account_info(); let accounts = token::Transfer { from: self.vault.to_account_info(), to: self.withdraw_destination.to_account_info(), authority: self.authority.to_account_info(), }; CpiContext::new(program, accounts) } } #[account] pub struct TokenPool { vault: Pubkey, mint: Pubkey, withdraw_destination: Pubkey, bump: u8, }","use anchor_lang::prelude::*; use anchor_spl::token::{self, Token, TokenAccount}; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod pda_sharing_secure { use super::*; pub fn withdraw_tokens(ctx: Context<WithdrawTokens>) -> ProgramResult { let amount = ctx.accounts.vault.amount; let seeds = &[ ctx.accounts.pool.withdraw_destination.as_ref(), &[ctx.accounts.pool.bump], ]; token::transfer(ctx.accounts.transfer_ctx().with_signer(&[seeds]), amount) } } #[derive(Accounts)] pub struct WithdrawTokens<'info> { #[account(has_one = vault, has_one = withdraw_destination)] pool: Account<'info, TokenPool>, vault: Account<'info, TokenAccount>, withdraw_destination: Account<'info, TokenAccount>, authority: Signer<'info>, token_program: Program<'info, Token>, } impl<'info> WithdrawTokens<'info> { pub fn transfer_ctx(&self) -> CpiContext<'_, '_, '_, 'info, token::Transfer<'info>> { let program = self.token_program.to_account_info(); let accounts = token::Transfer { from: self.vault.to_account_info(), to: self.withdraw_destination.to_account_info(), authority: self.authority.to_account_info(), }; CpiContext::new(program, accounts) } } #[account] pub struct TokenPool { vault: Pubkey, mint: Pubkey, withdraw_destination: Pubkey, bump: u8, }",Low,,https://github.com/TalentCoder99/sealevel-attacks/blob/master/programs/8-pda-sharing/recommended/src/lib.rs,High
Sol-044,closing-accounts,"use anchor_lang::prelude::*; use std::io::Write; use std::ops::DerefMut; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod closing_accounts_insecure_still_still { use super::*; pub fn close(ctx: Context<Close>) -> ProgramResult { let account = ctx.accounts.account.to_account_info(); let dest_starting_lamports = ctx.accounts.destination.lamports(); **ctx.accounts.destination.lamports.borrow_mut() = dest_starting_lamports .checked_add(account.lamports()) .unwrap(); **account.lamports.borrow_mut() = 0; let mut data = account.try_borrow_mut_data()?; for byte in data.deref_mut().iter_mut() { *byte = 0; } let dst: &mut [u8] = &mut data; let mut cursor = std::io::Cursor::new(dst); cursor .write_all(&anchor_lang::__private::CLOSED_ACCOUNT_DISCRIMINATOR) .unwrap(); Ok(()) } } #[derive(Accounts)] pub struct Close<'info> { account: Account<'info, Data>, destination: AccountInfo<'info>, } #[account] pub struct Data { data: u64, }","use anchor_lang::__private::CLOSED_ACCOUNT_DISCRIMINATOR; use anchor_lang::prelude::*; use std::io::{Cursor, Write}; use std::ops::DerefMut; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod closing_accounts_secure { use super::*; pub fn close(ctx: Context<Close>) -> ProgramResult { let dest_starting_lamports = ctx.accounts.destination.lamports(); let account = ctx.accounts.account.to_account_info(); **ctx.accounts.destination.lamports.borrow_mut() = dest_starting_lamports .checked_add(account.lamports()) .unwrap(); **account.lamports.borrow_mut() = 0; let mut data = account.try_borrow_mut_data()?; for byte in data.deref_mut().iter_mut() { *byte = 0; } let dst: &mut [u8] = &mut data; let mut cursor = Cursor::new(dst); cursor.write_all(&CLOSED_ACCOUNT_DISCRIMINATOR).unwrap(); Ok(()) } pub fn force_defund(ctx: Context<ForceDefund>) -> ProgramResult { let account = &ctx.accounts.account; let data = account.try_borrow_data()?; assert!(data.len() > 8); let mut discriminator = [0u8; 8]; discriminator.copy_from_slice(&data[0..8]); if discriminator != CLOSED_ACCOUNT_DISCRIMINATOR { return Err(ProgramError::InvalidAccountData); } let dest_starting_lamports = ctx.accounts.destination.lamports(); **ctx.accounts.destination.lamports.borrow_mut() = dest_starting_lamports .checked_add(account.lamports()) .unwrap(); **account.lamports.borrow_mut() = 0; Ok(()) } } #[derive(Accounts)] pub struct Close<'info> { account: Account<'info, Data>, destination: AccountInfo<'info>, } #[derive(Accounts)] pub struct ForceDefund<'info> { account: AccountInfo<'info>, destination: AccountInfo<'info>, } #[account] pub struct Data { data: u64, }",Critical,,https://github.com/TalentCoder99/sealevel-attacks/blob/master/programs/9-closing-accounts/insecure-still-still/src/lib.rs,High
Sol-045,closing-accounts,"use anchor_lang::prelude::*; use std::ops::DerefMut; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod closing_accounts_insecure_still { use super::*; pub fn close(ctx: Context<Close>) -> ProgramResult { let account = ctx.accounts.account.to_account_info(); let dest_starting_lamports = ctx.accounts.destination.lamports(); **ctx.accounts.destination.lamports.borrow_mut() = dest_starting_lamports .checked_add(account.lamports()) .unwrap(); **account.lamports.borrow_mut() = 0; let mut data = account.try_borrow_mut_data()?; for byte in data.deref_mut().iter_mut() { *byte = 0; } Ok(()) } } #[derive(Accounts)] pub struct Initialize<'info> { #[account(zero)] account: Account<'info, Data>, authority: Signer<'info>, } #[derive(Accounts)] pub struct Close<'info> { account: Account<'info, Data>, destination: AccountInfo<'info>, } #[account] pub struct Data { data: u64, }","use anchor_lang::__private::CLOSED_ACCOUNT_DISCRIMINATOR; use anchor_lang::prelude::*; use std::io::{Cursor, Write}; use std::ops::DerefMut; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod closing_accounts_secure { use super::*; pub fn close(ctx: Context<Close>) -> ProgramResult { let dest_starting_lamports = ctx.accounts.destination.lamports(); let account = ctx.accounts.account.to_account_info(); **ctx.accounts.destination.lamports.borrow_mut() = dest_starting_lamports .checked_add(account.lamports()) .unwrap(); **account.lamports.borrow_mut() = 0; let mut data = account.try_borrow_mut_data()?; for byte in data.deref_mut().iter_mut() { *byte = 0; } let dst: &mut [u8] = &mut data; let mut cursor = Cursor::new(dst); cursor.write_all(&CLOSED_ACCOUNT_DISCRIMINATOR).unwrap(); Ok(()) } pub fn force_defund(ctx: Context<ForceDefund>) -> ProgramResult { let account = &ctx.accounts.account; let data = account.try_borrow_data()?; assert!(data.len() > 8); let mut discriminator = [0u8; 8]; discriminator.copy_from_slice(&data[0..8]); if discriminator != CLOSED_ACCOUNT_DISCRIMINATOR { return Err(ProgramError::InvalidAccountData); } let dest_starting_lamports = ctx.accounts.destination.lamports(); **ctx.accounts.destination.lamports.borrow_mut() = dest_starting_lamports .checked_add(account.lamports()) .unwrap(); **account.lamports.borrow_mut() = 0; Ok(()) } } #[derive(Accounts)] pub struct Close<'info> { account: Account<'info, Data>, destination: AccountInfo<'info>, } #[derive(Accounts)] pub struct ForceDefund<'info> { account: AccountInfo<'info>, destination: AccountInfo<'info>, } #[account] pub struct Data { data: u64, }",Critical,,https://github.com/TalentCoder99/sealevel-attacks/blob/master/programs/9-closing-accounts/insecure-still/src/lib.rs,High
Sol-046,closing-accounts,"use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod closing_accounts_insecure { use super::*; pub fn close(ctx: Context<Close>) -> ProgramResult { let dest_starting_lamports = ctx.accounts.destination.lamports(); **ctx.accounts.destination.lamports.borrow_mut() = dest_starting_lamports .checked_add(ctx.accounts.account.to_account_info().lamports()) .unwrap(); **ctx.accounts.account.to_account_info().lamports.borrow_mut() = 0; Ok(()) } } #[derive(Accounts)] pub struct Close<'info> { account: Account<'info, Data>, destination: AccountInfo<'info>, } #[account] pub struct Data { data: u64, }","use anchor_lang::__private::CLOSED_ACCOUNT_DISCRIMINATOR; use anchor_lang::prelude::*; use std::io::{Cursor, Write}; use std::ops::DerefMut; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod closing_accounts_secure { use super::*; pub fn close(ctx: Context<Close>) -> ProgramResult { let dest_starting_lamports = ctx.accounts.destination.lamports(); let account = ctx.accounts.account.to_account_info(); **ctx.accounts.destination.lamports.borrow_mut() = dest_starting_lamports .checked_add(account.lamports()) .unwrap(); **account.lamports.borrow_mut() = 0; let mut data = account.try_borrow_mut_data()?; for byte in data.deref_mut().iter_mut() { *byte = 0; } let dst: &mut [u8] = &mut data; let mut cursor = Cursor::new(dst); cursor.write_all(&CLOSED_ACCOUNT_DISCRIMINATOR).unwrap(); Ok(()) } pub fn force_defund(ctx: Context<ForceDefund>) -> ProgramResult { let account = &ctx.accounts.account; let data = account.try_borrow_data()?; assert!(data.len() > 8); let mut discriminator = [0u8; 8]; discriminator.copy_from_slice(&data[0..8]); if discriminator != CLOSED_ACCOUNT_DISCRIMINATOR { return Err(ProgramError::InvalidAccountData); } let dest_starting_lamports = ctx.accounts.destination.lamports(); **ctx.accounts.destination.lamports.borrow_mut() = dest_starting_lamports .checked_add(account.lamports()) .unwrap(); **account.lamports.borrow_mut() = 0; Ok(()) } } #[derive(Accounts)] pub struct Close<'info> { account: Account<'info, Data>, destination: AccountInfo<'info>, } #[derive(Accounts)] pub struct ForceDefund<'info> { account: AccountInfo<'info>, destination: AccountInfo<'info>, } #[account] pub struct Data { data: u64, }",Critical,,https://github.com/TalentCoder99/sealevel-attacks/tree/master/programs/9-closing-accounts/insecure/src/lib.rs,High
Sol-047,closing-accounts,"use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod closing_accounts_recommended { use super::*; pub fn close(ctx: Context<Close>) -> ProgramResult { Ok(()) } } #[derive(Accounts)] pub struct Close<'info> { #[account(mut, close = destination)] account: Account<'info, Data>, #[account(mut)] destination: AccountInfo<'info>, } #[account] pub struct Data { data: u64, }","use anchor_lang::__private::CLOSED_ACCOUNT_DISCRIMINATOR; use anchor_lang::prelude::*; use std::io::{Cursor, Write}; use std::ops::DerefMut; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod closing_accounts_secure { use super::*; pub fn close(ctx: Context<Close>) -> ProgramResult { let dest_starting_lamports = ctx.accounts.destination.lamports(); let account = ctx.accounts.account.to_account_info(); **ctx.accounts.destination.lamports.borrow_mut() = dest_starting_lamports .checked_add(account.lamports()) .unwrap(); **account.lamports.borrow_mut() = 0; let mut data = account.try_borrow_mut_data()?; for byte in data.deref_mut().iter_mut() { *byte = 0; } let dst: &mut [u8] = &mut data; let mut cursor = Cursor::new(dst); cursor.write_all(&CLOSED_ACCOUNT_DISCRIMINATOR).unwrap(); Ok(()) } pub fn force_defund(ctx: Context<ForceDefund>) -> ProgramResult { let account = &ctx.accounts.account; let data = account.try_borrow_data()?; assert!(data.len() > 8); let mut discriminator = [0u8; 8]; discriminator.copy_from_slice(&data[0..8]); if discriminator != CLOSED_ACCOUNT_DISCRIMINATOR { return Err(ProgramError::InvalidAccountData); } let dest_starting_lamports = ctx.accounts.destination.lamports(); **ctx.accounts.destination.lamports.borrow_mut() = dest_starting_lamports .checked_add(account.lamports()) .unwrap(); **account.lamports.borrow_mut() = 0; Ok(()) } } #[derive(Accounts)] pub struct Close<'info> { account: Account<'info, Data>, destination: AccountInfo<'info>, } #[derive(Accounts)] pub struct ForceDefund<'info> { account: AccountInfo<'info>, destination: AccountInfo<'info>, } #[account] pub struct Data { data: u64, }",Low,,https://github.com/TalentCoder99/sealevel-attacks/blob/master/programs/9-closing-accounts/recommended/src/lib.rs,High
Sol-048,sysvar-address-checking,"use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod insecure { use super::*; pub fn check_sysvar_address(ctx: Context<CheckSysvarAddress>) -> Result<()> { msg!(""Rent Key -> {}"", ctx.accounts.rent.key().to_string()); Ok(()) } } #[derive(Accounts)] pub struct CheckSysvarAddress<'info> { rent: AccountInfo<'info>, }","use anchor_lang::prelude::*; use anchor_lang::solana_program::sysvar; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod secure { use super::*; pub fn check_sysvar_address(ctx: Context<CheckSysvarAddress>) -> Result<()> { require_eq!(ctx.accounts.rent.key(), sysvar::rent::ID); msg!(""Rent Key -> {}"", ctx.accounts.rent.key().to_string()); Ok(()) } } #[derive(Accounts)] pub struct CheckSysvarAddress<'info> { rent: AccountInfo<'info>, }",Critical,,https://github.com/coral-xyz/sealevel-attacks/tree/master/programs/10-sysvar-address-checking/insecure,High
Sol-049,sysvar-address-checking,"use anchor_lang::prelude::*; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod recommended { use super::*; pub fn check_sysvar_address(ctx: Context<CheckSysvarAddress>) -> Result<()> { msg!(""Rent Key -> {}"", ctx.accounts.rent.key().to_string()); Ok(()) } } #[derive(Accounts)] pub struct CheckSysvarAddress<'info> { rent: Sysvar<'info, Rent>, }","use anchor_lang::prelude::*; use anchor_lang::solana_program::sysvar; declare_id!(""Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS""); #[program] pub mod secure { use super::*; pub fn check_sysvar_address(ctx: Context<CheckSysvarAddress>) -> Result<()> { require_eq!(ctx.accounts.rent.key(), sysvar::rent::ID); msg!(""Rent Key -> {}"", ctx.accounts.rent.key().to_string()); Ok(()) } } #[derive(Accounts)] pub struct CheckSysvarAddress<'info> { rent: AccountInfo<'info>, }",Low,,https://github.com/coral-xyz/sealevel-attacks/blob/master/programs/10-sysvar-address-checking/recommended/src/lib.rs,High
Sol-050,syvar-check,"pub fn load_current_index(data: &[u8]) -> u16 { let mut instr_fixed_data = [0u8; 2]; let len = data.len(); instr_fixed_data.copy_from_slice(&data[len - 2..len]); u16::from_le_bytes(instr_fixed_data) } /// Load the current `Instruction`'s index in the currently executing `Transaction` pub fn load_current_index_checked( instruction_sysvar_account_info: &AccountInfo, ) -> Result<u16, ProgramError> { if !check_id(instruction_sysvar_account_info.key) { return Err(ProgramError::UnsupportedSysvar); } let instruction_sysvar = instruction_sysvar_account_info.try_borrow_data()?; let mut instr_fixed_data = [0u8; 2]; let len = instruction_sysvar.len(); instr_fixed_data.copy_from_slice(&instruction_sysvar[len - 2..len]); Ok(u16::from_le_bytes(instr_fixed_data)) }","pub fn load_current_index(data: &[u8]) -> u16 { let mut instr_fixed_data = [0u8; 2]; let len = data.len(); instr_fixed_data.copy_from_slice(&data[len - 2..len]); u16::from_le_bytes(instr_fixed_data) } pub fn load_current_index_checked( instruction_sysvar_account_info: &AccountInfo, ) -> Result<u16, ProgramError> { // Ensure the sysvar account is explicitly set to the expected system-provided instructions sysvar if instruction_sysvar_account_info.key != &sysvar::instructions::ID { return Err(ProgramError::InvalidAccountData); } let instruction_sysvar = instruction_sysvar_account_info.try_borrow_data()?; let mut instr_fixed_data = [0u8; 2]; let len = instruction_sysvar.len(); instr_fixed_data.copy_from_slice(&instruction_sysvar[len - 2..len]); Ok(u16::from_le_bytes(instr_fixed_data)) }",Critical,"This vulnerability led to the wormhole bridge hack due to the lack of checks on the sys account. Instead of relying on check_id, the fix explicitly compares instruction_sysvar_account_info.key against the system’s legitimate sysvar::instructions::ID.",,Medium
Sol-051,,"impl<'info> Validate<'info> for SaberSwapAccounts<'info> { fn validate(&self) -> Result<()> { assert_keys_eq!(self.arrow.vendor_miner.mint, self.pool_mint); assert_keys_eq!(self.saber_swap.pool_mint, self.pool_mint); assert_keys_eq!(self.saber_swap.token_a.reserves, self.reserve_a); assert_keys_eq!(self.saber_swap.token_b.reserves, self.reserve_b); Ok(()) } }","impl<'info> Validate<'info> for SaberSwapAccounts<'info> { fn validate(&self) -> Result<()> { let token_program = Pubkey::from_str(""TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"").unwrap(); // Ensure the provided pool mint is controlled by the expected authority let expected_authority = Pubkey::find_program_address( &[b""saber_swap_authority""], // Expected authority seed &self.saber_swap.program_id ).0; require_keys_eq!(self.saber_swap.authority, expected_authority, CustomError::InvalidAuthority); // Validate that the provided token accounts belong to the correct SPL token program require_keys_eq!(self.saber_swap.token_a.owner, token_program, CustomError::InvalidTokenAccount); require_keys_eq!(self.saber_swap.token_b.owner, token_program, CustomError::InvalidTokenAccount); // Ensure the reserves are actually owned by the Saber swap program require_keys_eq!(self.saber_swap.token_a.reserves.owner, self.saber_swap.program_id, CustomError::InvalidReserve); require_keys_eq!(self.saber_swap.token_b.reserves.owner, self.saber_swap.program_id, CustomError::InvalidReserve); Ok(()) } }",,,,Medium
Sol-052,,"fn withdraw(_program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let wallet_info = next_account_info(account_info_iter)?; let vault_info = next_account_info(account_info_iter)?; let authority_info = next_account_info(account_info_iter)?; let destination_info = next_account_info(account_info_iter)?; if *vault_info.owner != *_program_id { return Err(ProgramError::IncorrectProgramId); } if *wallet_info.owner != *_program_id { return Err(ProgramError::IncorrectProgramId); } if *destination_info.owner != solana_program::system_program::ID { return Err(ProgramError::InvalidAccountData); } if !authority_info.is_signer { return Err(ProgramError::MissingRequiredSignature); } let wallet = Wallet::deserialize(&mut &(*wallet_info.data).borrow_mut()[..])?; if wallet.authority != *authority_info.key { return Err(ProgramError::IllegalOwner); } if wallet.vault != *vault_info.key { return Err(ProgramError::InvalidAccountData); } let vault_signer_seeds = &[b""vault"", authority_info.key.as_ref(), &[wallet.bump_seed]]; let vault_signer = Pubkey::create_program_address(vault_signer_seeds, _program_id)?; if *vault_info.key != vault_signer { return Err(ProgramError::InvalidSeeds); } let vault_balance = vault_info.lamports(); if amount > vault_balance { return Err(ProgramError::InsufficientFunds); } *vault_info.try_borrow_mut_lamports()? = vault_balance.checked_sub(amount).ok_or(ProgramError::InsufficientFunds)?; *destination_info.try_borrow_mut_lamports()? = destination_info.lamports().checked_add(amount).ok_or(ProgramError::ArithmeticOverflow)?; if vault_info.lamports() != vault_balance - amount { return Err(ProgramError::InvalidState); } Ok(()) }","fn withdraw(_program_id: &Pubkey, accounts: &[AccountInfo], amount: u64) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let wallet_info = next_account_info(account_info_iter)?; let vault_info = next_account_info(account_info_iter)?; let authority_info = next_account_info(account_info_iter)?; let destination_info = next_account_info(account_info_iter)?; // Verify program ownership first if *vault_info.owner != *_program_id { return Err(ProgramError::IllegalOwner); } if *wallet_info.owner != *_program_id { return Err(ProgramError::IllegalOwner); } if *destination_info.owner != solana_program::system_program::ID { return Err(ProgramError::InvalidAccountData); } // Verify authority before deserialization if !authority_info.is_signer { return Err(ProgramError::MissingRequiredSignature); } let wallet = Wallet::deserialize(&mut &(*wallet_info.data).borrow_mut()[..])?; if wallet.authority != *authority_info.key { return Err(ProgramError::InvalidAccountData); } if wallet.vault != *vault_info.key { return Err(ProgramError::InvalidAccountData); } // ✅ FIX: Use `find_program_address` to prevent failure let (expected_vault_pda, _bump_seed) = Pubkey::find_program_address( &[b""vault"", authority_info.key.as_ref()], _program_id ); if *vault_info.key != expected_vault_pda { return Err(ProgramError::InvalidSeeds); } // Safe balance check and transfer let vault_balance = vault_info.lamports(); if amount > vault_balance { return Err(ProgramError::InsufficientFunds); } *vault_info.try_borrow_mut_lamports()? = vault_balance.checked_sub(amount).ok_or(ProgramError::InsufficientFunds)?; *destination_info.try_borrow_mut_lamports()? = destination_info.lamports().checked_add(amount).ok_or(ProgramError::ArithmeticOverflow)?; // Reentrancy protection if vault_info.lamports() != vault_balance - amount { return Err(ProgramError::InvalidState); } Ok(()) }",,,,Medium
Sol-053,,"pub fn verify_signatures( ctx: &ExecutionContext, accs: &mut VerifySignatures, data: VerifySignaturesData, ) -> Result<()> { accs.guardian_set .verify_derivation(ctx.program_id, &(&*accs).into())?; let sig_infos: Vec<SigInfo> = data .signers .iter() .enumerate() .filter_map(|(i, p)| { if *p == -1 { return None; } return Some(SigInfo { sig_index: *p as u8, signer_index: i as u8, }); }) .collect(); let current_instruction = solana_program::sysvar::instructions::load_current_index( &accs.instruction_acc.try_borrow_mut_data()?, ); if current_instruction == 0 { return Err(InstructionAtWrongIndex.into()); } // The previous ix must be a secp verification instruction let secp_ix_index = (current_instruction - 1) as u8; let secp_ix = solana_program::sysvar::instructions::load_instruction_at( secp_ix_index as usize, &accs.instruction_acc.try_borrow_mut_data()?,Modified line has conversations. ) .map_err(|_| ProgramError::InvalidAccountData)?; // Check that the instruction is actually for the secp program if secp_ix.program_id != solana_program::secp256k1_program::id() { return Err(InvalidSecpInstruction.into()); } let secp_data_len = secp_ix.data.len(); if secp_data_len < 2 { return Err(InvalidSecpInstruction.into()); } let sig_len = secp_ix.data[0]; let mut index = 1; let mut secp_ixs: Vec<SecpInstructionPart> = Vec::with_capacity(sig_len as usize); for i in 0..sig_len { let _sig_offset = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]) as usize; index += 2; let sig_ix = secp_ix.data[index]; index += 1; let address_offset = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]) as usize; index += 2; let address_ix = secp_ix.data[index]; index += 1; let msg_offset = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]); index += 2; let msg_size = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]); index += 2; let msg_ix = secp_ix.data[index]; index += 1; if address_ix != secp_ix_index || msg_ix != secp_ix_index || sig_ix != secp_ix_index { return Err(InvalidSecpInstruction.into()); } let address: &[u8] = &secp_ix.data[address_offset..address_offset + 20]; // Make sure that all messages are equal if i > 0 { if msg_offset != secp_ixs[0].msg_offset || msg_size != secp_ixs[0].msg_size { return Err(InvalidSecpInstruction.into()); } } secp_ixs.push(SecpInstructionPart { address, msg_offset, msg_size, }); } if sig_infos.len() != secp_ixs.len() { return Err(ProgramError::InvalidArgument.into()); } // Data must be a hash if secp_ixs[0].msg_size != 32 { return Err(ProgramError::InvalidArgument.into()); } // Extract message which is encoded in Solana Secp256k1 instruction data. let message = &secp_ix.data [secp_ixs[0].msg_offset as usize..(secp_ixs[0].msg_offset + secp_ixs[0].msg_size) as usize]; // Hash the message part, which contains the serialized VAA body. let mut msg_hash: [u8; 32] = [0u8; 32]; msg_hash.copy_from_slice(message); if !accs.signature_set.is_initialized() { accs.signature_set.signatures = vec![false; accs.guardian_set.keys.len()]; accs.signature_set.guardian_set_index = accs.guardian_set.index; accs.signature_set.hash = msg_hash; let size = accs.signature_set.size(); let ix = solana_program::system_instruction::create_account( accs.payer.key, accs.signature_set.info().key, Exempt.amount(size), size as u64, ctx.program_id, ); solana_program::program::invoke(&ix, ctx.accounts)?; } else { // If the account already existed, check that the parameters match if accs.signature_set.guardian_set_index != accs.guardian_set.index { return Err(GuardianSetMismatch.into()); } if accs.signature_set.hash != msg_hash { return Err(InvalidHash.into()); } } // Write sigs of checked addresses into sig_state for s in sig_infos { if s.signer_index > accs.guardian_set.num_guardians() { return Err(ProgramError::InvalidArgument.into()); } if s.sig_index + 1 > sig_len { return Err(ProgramError::InvalidArgument.into()); } let key = accs.guardian_set.keys[s.signer_index as usize]; // Check key in ix if key != secp_ixs[s.sig_index as usize].address { return Err(ProgramError::InvalidArgument.into()); } // Overwritten content should be zeros except double signs by the signer or harmless replays accs.signature_set.signatures[s.signer_index as usize] = true; } Ok(()) }","pub fn verify_signatures( ctx: &ExecutionContext, accs: &mut VerifySignatures, data: VerifySignaturesData, ) -> Result<()> { accs.guardian_set .verify_derivation(ctx.program_id, &(&*accs).into())?; let sig_infos: Vec<SigInfo> = data .signers .iter() .enumerate() .filter_map(|(i, p)| { if *p == -1 { return None; } return Some(SigInfo { sig_index: *p as u8, signer_index: i as u8, }); }) .collect(); let current_instruction = solana_program::sysvar::instructions::load_current_index_checked( &accs.instruction_acc, )?; if current_instruction == 0 { return Err(InstructionAtWrongIndex.into()); } // The previous ix must be a secp verification instruction let secp_ix_index = (current_instruction - 1) as u8; let secp_ix = solana_program::sysvar::instructions::load_instruction_at_checked( secp_ix_index as usize, &accs.instruction_acc, 4Has conversations. ) .map_err(|_| ProgramError::InvalidAccountData)?; // Check that the instruction is actually for the secp program if secp_ix.program_id != solana_program::secp256k1_program::id() { return Err(InvalidSecpInstruction.into()); } let secp_data_len = secp_ix.data.len(); if secp_data_len < 2 { return Err(InvalidSecpInstruction.into()); } let sig_len = secp_ix.data[0]; let mut index = 1; let mut secp_ixs: Vec<SecpInstructionPart> = Vec::with_capacity(sig_len as usize); for i in 0..sig_len { let _sig_offset = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]) as usize; index += 2; let sig_ix = secp_ix.data[index]; index += 1; let address_offset = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]) as usize; index += 2; let address_ix = secp_ix.data[index]; index += 1; let msg_offset = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]); index += 2; let msg_size = byteorder::LE::read_u16(&secp_ix.data[index..index + 2]); index += 2; let msg_ix = secp_ix.data[index]; index += 1; if address_ix != secp_ix_index || msg_ix != secp_ix_index || sig_ix != secp_ix_index { return Err(InvalidSecpInstruction.into()); } let address: &[u8] = &secp_ix.data[address_offset..address_offset + 20]; // Make sure that all messages are equal if i > 0 { if msg_offset != secp_ixs[0].msg_offset || msg_size != secp_ixs[0].msg_size { return Err(InvalidSecpInstruction.into()); } } secp_ixs.push(SecpInstructionPart { address, msg_offset, msg_size, }); } if sig_infos.len() != secp_ixs.len() { return Err(ProgramError::InvalidArgument.into()); } // Data must be a hash if secp_ixs[0].msg_size != 32 { return Err(ProgramError::InvalidArgument.into()); } // Extract message which is encoded in Solana Secp256k1 instruction data. let message = &secp_ix.data [secp_ixs[0].msg_offset as usize..(secp_ixs[0].msg_offset + secp_ixs[0].msg_size) as usize]; // Hash the message part, which contains the serialized VAA body. let mut msg_hash: [u8; 32] = [0u8; 32]; msg_hash.copy_from_slice(message); if !accs.signature_set.is_initialized() { accs.signature_set.signatures = vec![false; accs.guardian_set.keys.len()]; accs.signature_set.guardian_set_index = accs.guardian_set.index; accs.signature_set.hash = msg_hash; let size = accs.signature_set.size(); let ix = solana_program::system_instruction::create_account( accs.payer.key, accs.signature_set.info().key, Exempt.amount(size), size as u64, ctx.program_id, ); solana_program::program::invoke(&ix, ctx.accounts)?; } else { // If the account already existed, check that the parameters match if accs.signature_set.guardian_set_index != accs.guardian_set.index { return Err(GuardianSetMismatch.into()); } if accs.signature_set.hash != msg_hash { return Err(InvalidHash.into()); } } // Write sigs of checked addresses into sig_state for s in sig_infos { if s.signer_index > accs.guardian_set.num_guardians() { return Err(ProgramError::InvalidArgument.into()); } if s.sig_index + 1 > sig_len { return Err(ProgramError::InvalidArgument.into()); } let key = accs.guardian_set.keys[s.signer_index as usize]; // Check key in ix if key != secp_ixs[s.sig_index as usize].address { return Err(ProgramError::InvalidArgument.into()); } // Overwritten content should be zeros except double signs by the signer or harmless replays accs.signature_set.signatures[s.signer_index as usize] = true; } Ok(()) }",,,,Medium
Sol-054,,"pub fn collateral_to_liquidity(&self, collateral_amount: u64) -> Result<u64, ProgramError> { Decimal::from(collateral_amount) .try_div(self.0)? .try_round_u64() }","pub fn collateral_to_liquidity(&self, collateral_amount: u64) -> Result<u64, ProgramError> { self.decimal_collateral_to_liquidity(collateral_amount.into())? .try_floor_u64() }",,,,Medium
Sol-055,,"pub fn liquidity_to_collateral(&self, liquidity_amount: u64) -> Result<u64, ProgramError> { self.0.try_mul(liquidity_amount)?.try_round_u64() }","pub fn liquidity_to_collateral(&self, liquidity_amount: u64) -> Result<u64, ProgramError> { self.decimal_liquidity_to_collateral(liquidity_amount.into())? .try_floor_u64() }",,,,Medium
Sol-056,,"#[derive(Accounts)] pub struct Deposit<'info> { #[account(mut)] reserve: AccountInfo<'info>, #[account(mut)] // ❌ No PDA validation here! deposit_account: AccountInfo<'info>, }","use solana_program::pubkey::Pubkey; use solana_program::program_error::ProgramError; pub fn validate_pda( deposit_account: &Pubkey, reserve_key: &Pubkey, program_id: &Pubkey, provided_bump: u8, ) -> Result<(), ProgramError> { let seeds = &[b""deposits"", reserve_key.as_ref()]; let (expected_pda, expected_bump) = Pubkey::find_program_address(seeds, program_id); if deposit_account != &expected_pda { return Err(ProgramError::InvalidAccountData); } if provided_bump != expected_bump { return Err(ProgramError::InvalidAccountData); } Ok(()) }",,,,Medium
Sol-057,,"#[derive(Accounts)] pub struct Deposit<'info> { #[account(mut)] reserve: AccountInfo<'info>, #[account(mut)] // ❌ No PDA validation here! deposit_account: AccountInfo<'info>, }","#[derive(Accounts)] pub struct Deposit<'info> { #[account(mut)] reserve: AccountInfo<'info>, #[account( mut, seeds = [b""deposits"", reserve.key().as_ref()], // ✅ Ensures PDA derivation bump = bump // ✅ Ensures bump seed correctness )] deposit_account: AccountInfo<'info>, }",,,,Medium
Sol-058,,"#[derive(Accounts)] pub struct Deposit<'info> { #[account(mut)] reserve: AccountInfo<'info>, #[account(mut)] // ❌ No PDA validation here! deposit_account: AccountInfo<'info>, }","let (expected_pda, expected_bump) = Pubkey::find_program_address( &[b""deposits"", reserve.key().as_ref()], program_id ); if deposit_account.key() != expected_pda { return Err(ProgramError::InvalidAccountData); } if provided_bump != expected_bump { return Err(ProgramError::InvalidAccountData); }",,,,Medium
Sol-059,"The process to execute this exploit is as follows: 1. The admin creates a mint with an initial decimal value of 18 using the `MintCloseAuthority` extension, assigning the close authority to an address they control. 2. The admin uses the mint in the `InitONFT` resulting in 1e12 as a value of the `ld2sd_rate` (assuming 6 shared decimals). 3. With the mint supply still at 0, the admin then uses the close authority to close the mint account. 4. After the mint is closed, the admin can reinitialize a new mint at the same address, but this time with a reduced decimal value, such as 6. This manipulation of decimal values causes the `ld2sd_rate` to become inflated, as the program (ONFT) will still treat the mint as though it has 18 decimals while it actually operates with only 6 decimals. This mismatch leads to erroneous token calculations and can be used for various financial exploits. ### Example Exploits: * **Legitimate transfers treated as dust:**\ Assume a token with a value of $1, where 1 token equals `1e6` units (decimal of 6). An admin or attacker can send 100,000 tokens (with a total value of $1,000,000). Using the manipulated `ld2sd_rate`, the program with an inflated rate of `1e12`, causing the whole amount `1e11` (100 billion units) to dust due to `remove_dust`, meaning the tokens will not be sent as intended. * **Cross-chain Manipulation:**\ The attacker can initialize another `ONFT_config` with a different token escrow account, using the manipulated `ld2sd_rate` to transfer tokens from another chain (e.g., Ethereum) to Solana. The inflated rate on Solana causes the amount received to be much higher than intended. Once the tokens are transferred, the attacker switches the peer to the new `ONFT_config` using the correct (lower) rate and transfers the tokens back to the original chain, gaining an arbitrage-like advantage due to the discrepancy in the rates between the `ONFT_config` accounts.","pub fn encode( send_to: [u8; 32], amount_sd: u64, sender: Pubkey, compose_msg: &Option<Vec<u8>>, ) -> Vec<u8> { if let Some(msg) = compose_msg { let mut encoded = Vec::with_capacity(72 + msg.len()); // 32 + 8 + 32 encoded.extend_from_slice(&send_to); encoded.extend_from_slice(&amount_sd.to_be_bytes()); encoded.extend_from_slice(sender.to_bytes().as_ref()); encoded.extend_from_slice(&msg); encoded } else { let mut encoded = Vec::with_capacity(40); // 32 + 8 encoded.extend_from_slice(&send_to); encoded.extend_from_slice(&amount_sd.to_be_bytes()); encoded } }","const MAX_MSG_SIZE: usize = 1024; // Adjust based on protocol requirements pub fn encode( send_to: [u8; 32], amount_sd: u64, sender: Pubkey, compose_msg: &Option<Vec<u8>>, ) -> Result<Vec<u8>, OFTError> { if let Some(msg) = compose_msg { if msg.len() > MAX_MSG_SIZE { return Err(OFTError::MessageTooLarge); } let mut encoded = Vec::with_capacity(72 + msg.len()); encoded.extend_from_slice(&send_to); encoded.extend_from_slice(&amount_sd.to_be_bytes()); encoded.extend_from_slice(sender.to_bytes().as_ref()); encoded.extend_from_slice(&msg); Ok(encoded) } else { let mut encoded = Vec::with_capacity(40); encoded.extend_from_slice(&send_to); encoded.extend_from_slice(&amount_sd.to_be_bytes()); Ok(encoded) } }",Medium,"To mitigate this issue, it is strongly recommended to: 1. Add a check in the `InitOFT` instruction to verify that the `MintCloseAuthority` extension is not enabled. 2. Ensure that the close authority for the mint is explicitly set to `None` during initialization. This will prevent the exploitation of the `MintCloseAuthority` and ensure that the mint’s decimal value cannot be manipulated after its creation, thereby safeguarding the `ld2sd_rate` from being inflated. ### Sample Implementation Use this function upon `onft_config` creation to prevent the mint close authority extension :",https://solodit.cyfrin.io/issues/m-03-missing-size-checks-for-compose_msg-can-lead-to-oversized-messages-and-transaction-failures-shieldify-none-kanpaipandas-lzapponft-markdown,Medium
Sol-060,"Mint decimal manipulation through `MintCloseAuthority` leads to inflation of `ld2sd_rate`. The `ld2sd_rate` (local-to-shared decimal rate) can be manipulated by the initializer through the exploitation of the `MintCloseAuthority` extension in the Solana program. This manipulation is possible because the initializer has control over the mint’s decimal value, which can be changed after the mint’s creation, leading to critical discrepancies in token accounting and potential financial exploits. The process to execute this exploit is as follows: 1. The admin creates a mint with an initial decimal value of 18 using the `MintCloseAuthority` extension, assigning the close authority to an address they control. 2. The admin uses the mint in the `InitONFT` resulting in 1e12 as a value of the `ld2sd_rate` (assuming 6 shared decimals). 3. With the mint supply still at 0, the admin then uses the close authority to close the mint account. 4. After the mint is closed, the admin can reinitialize a new mint at the same address, but this time with a reduced decimal value, such as 6. This manipulation of decimal values causes the `ld2sd_rate` to become inflated, as the program (ONFT) will still treat the mint as though it has 18 decimals while it actually operates with only 6 decimals. This mismatch leads to erroneous token calculations and can be used for various financial exploits. ### Example Exploits: * **Legitimate transfers treated as dust:**\ Assume a token with a value of $1, where 1 token equals `1e6` units (decimal of 6). An admin or attacker can send 100,000 tokens (with a total value of $1,000,000). Using the manipulated `ld2sd_rate`, the program with an inflated rate of `1e12`, causing the whole amount `1e11` (100 billion units) to dust due to `remove_dust`, meaning the tokens will not be sent as intended. * **Cross-chain Manipulation:**\ The attacker can initialize another `ONFT_config` with a different token escrow account, using the manipulated `ld2sd_rate` to transfer tokens from another chain (e.g., Ethereum) to Solana. The inflated rate on Solana causes the amount received to be much higher than intended. Once the tokens are transferred, the attacker switches the peer to the new `ONFT_config` using the correct (lower) rate and transfers the tokens back to the original chain, gaining an arbitrage-like advantage due to the discrepancy in the rates between the `ONFT_config` accounts.","pub struct InitAdapterONft<'info> { #[account(mut)] pub payer: Signer<'info>, #[account( init, payer = payer, space = 8 + ONftConfig::INIT_SPACE, seeds = [ONft_SEED, token_escrow.key().as_ref()], bump )] pub ONft_config: Account<'info, ONftConfig>, #[account( init, payer = payer, space = 8 + LzReceiveTypesAccounts::INIT_SPACE, seeds = [LZ_RECEIVE_TYPES_SEED, &ONft_config.key().as_ref()], bump )] pub lz_receive_types_accounts: Account<'info, LzReceiveTypesAccounts>, #[account(mint::token_program = token_program)] pub token_mint: InterfaceAccount<'info, Mint>, #[account( init, payer = payer, token::authority = ONft_config, token::mint = token_mint, token::token_program = token_program, )] pub token_escrow: InterfaceAccount<'info, TokenAccount>, pub token_program: Interface<'info, TokenInterface>, pub system_program: Program<'info, System>, } impl InitAdapterONft<'_> { pub fn apply(ctx: &mut Context<InitAdapterONft>, params: &InitAdapterONftParams) -> Result<()> { ctx.accounts.ONft_config.bump = ctx.bumps.ONft_config; ctx.accounts.ONft_config.token_mint = ctx.accounts.token_mint.key(); ctx.accounts.ONft_config.ext = ONftConfigExt::Adapter(ctx.accounts.token_escrow.key()); ctx.accounts.ONft_config.token_program = ctx.accounts.token_program.key(); ctx.accounts.lz_receive_types_accounts.ONft_config = ctx.accounts.ONft_config.key(); ctx.accounts.lz_receive_types_accounts.token_mint = ctx.accounts.token_mint.key(); let oapp_signer = ctx.accounts.ONft_config.key(); ctx.accounts.ONft_config.init( params.endpoint_program, params.admin, params.shared_decimals, ctx.accounts.token_mint.decimals, ctx.remaining_accounts, oapp_signer, ) } }","pub struct InitAdapterONft<'info> { #[account(mut)] pub payer: Signer<'info>, #[account( init, payer = payer, space = 8 + ONftConfig::INIT_SPACE, seeds = [ONft_SEED, token_escrow.key().as_ref()], bump )] pub ONft_config: Account<'info, ONftConfig>, #[account( init, payer = payer, space = 8 + LzReceiveTypesAccounts::INIT_SPACE, seeds = [LZ_RECEIVE_TYPES_SEED, &ONft_config.key().as_ref()], bump )] pub lz_receive_types_accounts: Account<'info, LzReceiveTypesAccounts>, #[account(mint::token_program = token_program)] pub token_mint: InterfaceAccount<'info, Mint>, #[account( init, payer = payer, token::authority = ONft_config, token::mint = token_mint, token::token_program = token_program, )] pub token_escrow: InterfaceAccount<'info, TokenAccount>, pub token_program: Interface<'info, TokenInterface>, pub system_program: Program<'info, System>, } pub fn is_supported_mint(mint_account: &InterfaceAccount<Mint>) -> bool { let mint_info = mint_account.to_account_info(); let mint_data = mint_info.data.borrow(); let mint = StateWithExtensions::<spl_token_2022::state::Mint>::unpack(&mint_data).unwrap(); let extensions = mint.get_extension_types().unwrap(); for e in extensions { if e == ExtensionType::MintCloseAuthority { return false; } } true } impl InitAdapterONft<'_> { pub fn apply(ctx: &mut Context<InitAdapterONft>, params: &InitAdapterONftParams) -> Result<()> { if !is_supported_mint(&ctx.accounts.mint) { return Err(Error::UnsupportedBaseMint.into()); } ctx.accounts.ONft_config.bump = ctx.bumps.ONft_config; ctx.accounts.ONft_config.token_mint = ctx.accounts.token_mint.key(); ctx.accounts.ONft_config.ext = ONftConfigExt::Adapter(ctx.accounts.token_escrow.key()); ctx.accounts.ONft_config.token_program = ctx.accounts.token_program.key(); ctx.accounts.lz_receive_types_accounts.ONft_config = ctx.accounts.ONft_config.key(); ctx.accounts.lz_receive_types_accounts.token_mint = ctx.accounts.token_mint.key(); let oapp_signer = ctx.accounts.ONft_config.key(); ctx.accounts.ONft_config.init( params.endpoint_program, params.admin, params.shared_decimals, ctx.accounts.token_mint.decimals, ctx.remaining_accounts, oapp_signer, ) } }",High,https://solodit.cyfrin.io/issues/c-01-mint-decimal-manipulation-through-mintcloseauthority-leads-to-inflation-of-ld2sd_rate-shieldify-none-kanpaipandas-lzapponft-markdown,https://solodit.cyfrin.io/issues/c-01-mint-decimal-manipulation-through-mintcloseauthority-leads-to-inflation-of-ld2sd_rate-shieldify-none-kanpaipandas-lzapponft-markdown,Medium
Sol-061,"Critical OFT settings vulnerable to Solana restarts. The OFTStore structure contains critical settings that are vulnerable to Solana chain restarts. Specifically, the `paused` and `default_fee_bps` fields can revert to previous states. If Solana restarts to a previous slot: 1. The `paused` field could revert from true to false, reactivating the system when it should be paused for security reasons. This is particularly dangerous if the pause was enacted in response to a detected vulnerability or ongoing attack. 2. The `default_fee_bps` could revert to an outdated value. This might lead to incorrect fee calculations, potentially causing financial losses for users or the protocol itself. These issues arise because Solana's restart mechanism reverts the entire state (when the validators vote for that) to a previous slot, including these critical OFT settings. The current implementation doesn't have safeguards against such cases.","pub struct OFTStore { // ... other fields ... pub default_fee_bps: u16, pub paused: bool, // ... other fields ... }","pub struct OFTStore { // ... other fields ... pub last_updated_slot: u64, // ... other fields ... } fn is_config_outdated(oft_store: &OFTStore) -> Result<bool> { let last_restart_slot = LastRestartSlot::get()?; Ok(oft_store.last_updated_slot <= last_restart_slot.last_restart_slot) }",Low,https://solodit.cyfrin.io/issues/l-07-critical-oft-settings-vulnerable-to-solana-restarts-pashov-audit-group-none-layerzero-september-markdown,,Medium
Sol-062,"When a user proposes a loan via the proposeLoan instruction, the contract accepts a token account containing the NFT to be used as collateral. However, it fails to validate that the token account actually contains the token.","#[account(mut, // owner = token::ID, associated_token::mint = nft_mint, associated_token::authority = user)] pub nft_user_token_account: Box<Account<'info, TokenAccount>>,","#[account(mut, // owner = token::ID, + constraint = nft_user_token_account.amount == TOKEN_MINT_SUPPLY, associated_token::mint = nft_mint, associated_token::authority = user)] pub nft_user_token_account: Box<Account<'info, TokenAccount>>,",Critical,Verify that the nft_user_token_account has a balance of one.,https://solodit.cyfrin.io/issues/anchor-and-solana-usage-ottersec-none-frakt-pdf,Medium
Sol-063,"In the redeemWinningLotTicket instruction, the raffle winner purchases the NFT collateral from the protocol, transferring funds to the loan’s liquidity pool. However, this association between loan and liquidity pool is not checked. This allows an attacker who wins the liquidation raffle to transfer funds to a different liquidity pool. Depending on parameters, this can result in the NFT collateral being cheaper than intended.","loan.reward_amount = ,→ convert_u128_to_u64(u128::from(liquidity_pool.borrow_cumulative) .checked_sub(u128::from(loan.reward_interest_rate.expect(""no reward ,→ staked""))).unwrap() .checked_mul(u128::from(loan.amount_to_get)).unwrap() .checked_div(u128::from(PRICE_BASED_TIME_DENOMINATOR)).unwrap() .checked_div(u128::from(BASE_POINTS)).unwrap()).unwrap();","#[account( mut, constraint = loan.loan_status==LoanStatus::Liquidated @ ,→ ErrorCodes::LotIsNotLiquidatedYet, + has_one = nft_mint @ ErrorCodes::WrongNftMintOnLoan, + has_one = liquidity_pool @ ErrorCodes::WrongLiqPoolOnLoan, + has_one = collection_info @ ,→ ErrorCodes::WrongCollectionInfoOnLoan, // constraint=loan.expired_at > now_ts()? || loan.loan_type == ,→ LoanType::PriceBased @ ErrorCodes::TimeIsNotExpired )]",High,Verify that the provided liquidity_pool and collection_info accounts match what is specified in the loan account.,https://solodit.cyfrin.io/issues/anchor-and-solana-usage-ottersec-none-frakt-pdf,Medium
Sol-064,"The create_order function is responsible for creating a new order in the program. It performs several critical tasks, including: Validating the stability of the USDC price obtained from the Pyth Network. Ensuring that sufficient fees are provided for cross-chain operations. Initializing and populating the order with details such as the source and destination chains, token amounts, and involved parties. Transferring USDC from the user’s token account to a vault account for order processing. During the price validation step, the function fetches the USDC price using the Pyth price feed and adjusts it based on the feed's exponent value. However, this implementation does not consider the conf (confidence interval) parameter provided by Pyth, which represents the uncertainty range in the reported price. Ignoring conf might lead to decisions based on potentially unreliable price data, especially during periods of high market volatility. By not incorporating the conf parameter, the program exposes itself to risks where the USDC/USD price might appear stable but has significant uncertainty. This could lead to: Depeg Exploitation: If USDC experiences a depeg and the confidence interval (conf) is not considered, the price could appear valid while being inaccurate due to high uncertainty. Users on the Solana network could exploit this by exchanging depegged USDC tokens on Solana for more valuable tokens on another network, effectively transferring the depeg losses to the program and its users. Systemic Risks Across Chains: As the function facilitates cross-chain operations, overlooking the confidence interval might propagate incorrect exchange rates between networks, leading to financial imbalances or exploits. Inaccurate Price Validation: In volatile market conditions, large conf values signal unreliable data. Ignoring this parameter leaves the program vulnerable to decisions based on incomplete or misleading price information.","msg!(""deposit USDC amount: {:?}"", amount); let price_update = &mut ctx.accounts.price_update; let feed_id: [u8; 32] = get_feed_id_from_hex(FEED_ID)?; let price = price_update.get_price_no_older_than(&Clock::get()?, MAXIMUM_AGE, &feed_id)?; // Adjust price to floating-point by scaling with 10^exponent let adjusted_price: f64 = (price.price as f64) * 10f64.powi(price.exponent);","let lower_bound = (price.price - price.conf) as f64 * 10f64.powi(price.exponent); let upper_bound = (price.price + price.conf) as f64 * 10f64.powi(price.exponent); // Validate price bounds require!(lower_bound > 0.99, GeniusError::StableCoinPriceTooLow); require!(upper_bound < MAX_ACCEPTABLE_PRICE, GeniusError::StableCoinPriceTooHigh);",Low,"Modify the price validation logic to incorporate the conf parameter. This ensures that the price used for validation is reliable and falls within an acceptable range. By incorporating the confidence interval, the program can assess the validity of the price more accurately, mitigating risks associated with volatile or unreliable price data.",https://www.halborn.com/audits/shuttle-labs/genius-solana-program,Medium
Sol-065,"The Withdraw instruction of the Waterusdc program allows users to withdraw liquidity from the lending program for a predefined fee. However, instead of transferring the fee to the fee vault as intended, the instruction mistakenly returns the fee to the user. As a result, the protocol is unable to collect fees from users.","let fee_transfer_accounts = TransferChecked { from: ctx.accounts.usdc_token_account.to_account_info(), to: ctx.accounts.user_ata.to_account_info(), authority: ctx.accounts.program_authority.to_account_info(), mint: ctx.accounts.usdc_mint.to_account_info(), }; let fee_amount_context = CpiContext::new_with_signer( ctx.accounts.token_program.to_account_info(), fee_transfer_accounts, signer_seeds, ); anchor_spl::token::transfer_checked(fee_amount_context, w_fee, 6)?;",,Critical,"To address this issue, it is recommended to correct the destination address so that the fee is sent to the fee vault account.",https://www.halborn.com/audits/vaultka/waterusdc-and-vaultka-solana-programs,Medium
Sol-066,"The RemoveApprovedLenders instruction allows the operator to remove an approved lender who will no longer be able to deposit. However, due to a lack of validation in the Deposit instruction, approved lenders who have been removed by the operator can still be able to deposit to keep earning yield and sharing looses.","pub struct Deposit<'info> { pub depositor: Signer<'info>, #[account( mut, seeds = [ LENDER_STATE_SEED, tranche_mint.key().as_ref(), depositor.key().as_ref(), ], bump = lender_state.bump, )] pub lender_state: Box<Account<'info, LenderState>>,",,Low,"To address this issue, it is recommended to add a call to preconditions::only_approved_lender to verify the lender who is trying to deposit is a current-approved lender.",https://www.halborn.com/audits/huma/huma-protocol,Medium
Sol-067,"The create_pool instruction requires several parameters, one of which is the pool name. However, there is currently no validation to ensure that the length of the pool name does not exceed the maximum allowed limit, potentially leading to input that violates expected constraints.","pub(crate) fn create_pool( ctx: Context<CreatePool>, pool_id: Pubkey, pool_name: String, pool_owner_treasury: Pubkey, evaluation_agent: Pubkey, tranches_policy_type: TranchesPolicyType, ) -> Result<()> { let pool_config = ctx.accounts.pool_config.as_mut(); pool_config.huma_config = ctx.accounts.huma_config.key(); pool_config.pool_id = pool_id; pool_config.bump = ctx.bumps.pool_config; pool_config.pool_authority_bump = ctx.bumps.pool_authority; pool_config.pool_owner = ctx.accounts.owner.key(); pool_config.pool_name = pool_name.clone();",,Low,"To address this issue, it is recommended to add a validation to verify the pool name provided to not exceed the MAX_POOL_NAME_LENGTH.",https://www.halborn.com/audits/huma/huma-protocol,Medium
Sol-068,"The CreateReceivable instruction requires some values as parameters, one of them is the currency code. However this value is not validated to check if its length exceeds the max length allowed.","receivable_info.set_inner(ReceivableInfo::new( ctx.bumps.receivable_info, args.currency_code.clone(), args.receivable_amount, timestamp, args.maturity_date, ctx.accounts.owner.key(), ));",,Low,"To resolve this issue, it is recommended to verify the correct maximal length of the currency code to be 3 bytes.",https://www.halborn.com/audits/huma/huma-protocol,Medium
Sol-069,The instruction CreateReceivable allows anyone to create a receivable NFT. The instruction requires also passing the PoolConfig and PoolState accounts and verifies that the pool is not disabled. However the instructions SubmitReceivable nor ApproveReceivable do not verify that the NFT is being approved for the same pool as it was created for. It is therefore possible to create Receivables for an arbitrary pool where the borrower has approved credit that is enabled and later submit or approve them for another pool.,"pub struct CreateReceivable<'info> { /// The address of the new receivable. #[account(mut)] pub asset: Signer<'info>, /// This will be the `authority`, `owner` and `update_authority` of the receivable, /// as well as the one paying for account storage. #[account(mut)] pub owner: Signer<'info>, /// CHECK: Read only authority. #[account( seeds = [ HUMA_PROGRAM_AUTHORITY_SEED ], bump, )] pub huma_program_authority: UncheckedAccount<'info>, #[account( seeds = [ HUMA_CONFIG_SEED, huma_config.id.as_ref(), ], bump = huma_config.bump, )] pub huma_config: Box<Account<'info, HumaConfig>>, #[account( seeds = [ POOL_CONFIG_SEED, pool_config.pool_id.as_ref(), ], bump = pool_config.bump, has_one = huma_config @ Error::InvalidHumaConfig, )] pub pool_config: Box<Account<'info, PoolConfig>>, #[account( seeds = [ POOL_STATE_SEED, pool_config.key().as_ref(), ], bump = pool_state.bump, )] pub pool_state: Box<Account<'info, PoolState>>",,Low,"To resolve this issue, it is recommended to either verify the correct pool also in both the SubmitReceivable and ApproveReceivable instructions, or, if the receivable is not meant to be tied to a specific pool, remove the PoolState and PoolConfig accounts from the CreateReceivable instruction.",https://www.halborn.com/audits/huma/huma-protocol,Medium
Sol-070,"The ReallocPoolConfig instruction allows both the huma owner and the pool owner to reallocate pools from the old format to the new format, adding a padding field and the auto_redemption_after_lockup flag in LPConfig. However, this instruction lacks a validation mechanism to determine the format of the provided pool_config. If a pool_config in the new format is supplied, the instruction still attempts to process it as if it were in the old format. The deserialization of the new format data into the old format structure does not fail because the fields shared between the two formats are located at the same positions in memory, and the additional fields in the new format (e.g., padding and auto_redemption_after_lockup) are ignored during the deserialization process. This behavior can cause misinterpretation of data if the additional bytes in the new format result in misaligned field values during deserialization. When the instruction subsequently writes back the data in the new format, the misinterpreted values from the deserialization process overwrite the original ones, leading to inconsistencies in the final pool_config. This vulnerability could result in corrupted or incorrect pool configurations, particularly when migrating or reallocating pools already in the new format, as the instruction fails to distinguish between the two formats",pub(crate) fn realloc_pool_config(ctx: Context<ReallocPoolConfig>) -> Result<()> { let old_pool_config = { let data: &[u8] = &mut ctx.accounts.pool_config.try_borrow_data()?; let old_pool_config = old_version::PoolConfig::try_deserialize(&mut &data[..])?; Box::new(old_pool_config) }; let pool_config_account = ctx.accounts.pool_config.to_account_info();,,Low,"Although the likelihood of this occurring is very low because the responsibility for performing the reallocation lies with the huma owner and the pool owner, it is essential to carry out this operation with great care to avoid inconsistencies and potential failures. It is also advisable to add a validation mechanism in the instruction handler to ensure that the provided pool configuration is in the old format before proceeding.",https://www.halborn.com/audits/huma/huma-protocol,Medium
Sol-071,"In the swap instruction, amount_out is calculated using the entire params.amount_in value, which represents the total number of input tokens provided by the user. The fees are calculated based on the params.amount_in and amount_out values. However, these fees are not subtracted from the user’s input before calculating the amount_out.  As a result, the user receives the full value of their input tokens converted to output tokens without the fees being deducted upfront. Nevertheless, the swap instruction still calculates the fee amount and subsequently distributes the fees after the amount is transferred to the user. This implies that the fees are taken from the pool’s funds rather than from the user’s input.  Effectively, this means the user is not bearing the cost of the fees. Over time, as more swaps are executed, the pool’s value diminishes because it continuously pays out fees from its own funds. This gradual depletion results in an imbalance where the pool loses value, affecting the liquidity providers.","pub fn swap(ctx: Context<Swap>, params: &SwapParams) -> Result<()> { [...] let fees_in_amount = match is_internal_swap { true => 0, false => pool.get_swap_in_fees( token_id_in, params.amount_in, &receiving_custody, &received_token_price_high, &dispensing_custody, )?, }; [...] }",,Critical,E n s u r e swap i n s t r u c t i o n c a l c u l a t e s a n d d e d u c t s t h e f e e a m o u n t f r o m amount_in b e f o r e c o n v e r t i n g t o amount_out t o k e n s a n d t r a n s f e r r i n g t o t h e u s e r .,https://solodit.cyfrin.io/issues/unauthorized-owner-modification-ottersec-none-adrena-pdf,Medium
Sol-072,"The remove_liquidity instruction contains a potential vulnerability that may result in an artificial inflation of custody.assets.owned. The function calculates the fee_amount based on the removal amount and pool configuration. In some cases, the code may temporarily increase the remove_liquidity fees stored in custody.fees.remove_liquidity if the price confidence value is high.  The code correctly subtracts the withdrawal amount from custody.assets.owned to reflect the decrease in owned assets due to the user receiving tokens. However, it then incorrectly adds the fee_amount back to custody.assets.owned. The fee_amount already represents a portion of the user’s original asset ownership that is taken as a fee. Adding it back essentially double-counts that portion, inflating the total owned assets.  The pool AUM (Assets Under Management) calculation, which considers total custody assets, may be skewed, resulting in inaccurate pool valuations. Among other uses, this affects the calculation of LP (Liquidity Provider) token values. Inflating the pool AUM also leads to an artificial increase in LP token value, allowing liquidity providers to withdraw more assets with their LP tokens than they are truly worth. Other calculations relying on custody.assets.owned may also be affected.  Proof of Concept: A user deposits 100 token A and is the only depositor of token A. The custody account correctly reflects 100 token A as owned assets. The user initiates a removal with 100 LP tokens, representing their entire 100 token A deposit. The function calculates a remove_liquidity fee of 10 token A. The user receives 90 token A after the fee is applied. The function correctly subtracts 90 token A from custody.assets.owned to reflect the user’s withdrawal. However, the function incorrectly adds the 10 token fee back to custody.assets.owned. As a result, custody now incorrectly shows 10 token A, even though the pool actually has zero.","pub fn remove_liquidity( ctx: Context<RemoveLiquidity>, params: &RemoveLiquidityParams, ) -> Result<()> { // Update custody stats { [...] // Fees that will be distributed later will impact the owned assets // For now, we can account all fees as owned by custody // // Note: doing this influence a tiny bit the update_borrow_rate calculations // but it's barely minimal. It's acceptable. custody.assets.owned += fee_amount; custody.update_borrow_rate(curtime)?; } [...] }",,Critical,"I n s t e a d o f a d d i n g fee_amount b a c k t o custody.assets.owned , t h e c o d e s h o u l d t r e a t i t a s a l r e a d y a c c o u n t e d f o r w i t h i n t h e r e m a i n i n g o w n e d a s s e t s .",https://solodit.cyfrin.io/issues/unauthorized-owner-modification-ottersec-none-adrena-pdf,Medium
Sol-073,"The remove_liquid_stake function checks if the amount to remove (params.amount) is greater than the overlap_amount (user_staking.liquid_stake.overlap_amount). However, since overlap_amount is set to zero before the subtraction, the entire params.amount is subtracted from total_stake, even though the overlap_amount was never added to total_stake in the first place.  This results in an incorrect reduction of total_stake, inflating the current round’s rate and delegating more rewards than allocated.  Additionally, the following else block should not decrease total_stake at all because, in this case, tokens are entirely removed from the overlapping amount, and the overlapping amount hasn’t been added to total_stake.  Currently, with this line of code present, whenever params.amount is less than overlap_amount, the instruction will fail. This happens because, in the other block, params.amount is subtracted from overlap_amount, resulting in a negative value.  This negative value is then subtracted from total_stake, which leads to an error, as subtracting a negative value from a u64 type results in an invalid operation.","pub fn remove_liquid_stake( ctx: Context<RemoveLiquidStake>, params: &RemoveLiquidStakeParams, ) -> Result<()> { [...] // In case of overlap, takes overlapped tokens first (last tokens put in staking) // if there are not enough tokens, takes it up from long lasting staked tokens reserve if params.amount > user_staking.liquid_stake.overlap_amount { user_staking.liquid_stake.overlap_amount = 0; staking.current_staking_round.total_stake -= params.amount - user_staking.liquid_stake.overlap_amount; } else { user_staking.liquid_stake.overlap_amount -= params.amount; staking.current_staking_round.total_stake -= params.amount - user_staking.liquid_stake.overlap_amount; } [",,Critical,"1 . S w i t c h t h e s e q u e n c e o f t h e s e t w o o p e r a t i o n s i n t h e if b l o c k , p e r f o r m i n g s u b t r a c t i o n f i r s t a n d t h e n s e t t i n g overlap_amount t o z e r o , e n s u r i n g t h a t o n l y t h e n o n - o v e r l a p p e d p o r t i o n o f params.amount i s s u b t r a c t e d f r o m total_stake . 2 . R e m o v e t h e o p e r a t o n o f d e c r e a s i n g t h e total_stake i n t h e else b l o c k",https://solodit.cyfrin.io/issues/unauthorized-owner-modification-ottersec-none-adrena-pdf,Medium
Sol-074,"There is a potential vulnerability in the add_genesis_liquidity instruction related to the interaction between claim_reserved_grant_amount and sanity_check within GenesisLock.  The reserved_grant_amounts variable stores the initial allocated grant amount for each reserved grant recipient, while reserved_amount represents the total reserved grant pool amount. When a recipient claims their reserved grant, claim_reserved_grant_amount correctly reduces the corresponding element in reserved_grant_amounts. However, reserved_amount remains unchanged after a successful claim.  If at least one private (insider) grant owner claims their entire allocation, the reserved_amount will no longer reflect the actual available reserved funds. Despite this, the sanity_check in add_genesis_liquidity will still pass because the sum of the potentially depleted reserved_grant_amounts might coincidentally still equal the (outdated) reserved_amount.  This inconsistency allows users who claim public grants (after a private grant has already been claimed) to potentially receive more than intended, exceeding the total reserved pool amount.  ","pub fn sanity_check(&self) -> Result<()> { [...] if !self.has_transitioned_to_fully_public() { [...] require!(total_reserved_grant_amounts == self.reserved_amount, AdrenaError::InvalidGenesisLockState ); } pub fn claim_reserved_grant_amount(&mut self, pubkey: &Pubkey, amount: u64) -> Result<u64> { [...] for i in 0..Self::RESERVED_GRANTS_COUNT { let amount_available = self.reserved_grant_amounts[i]; if amount <= amount_available && self.reserved_grant_owners[i] == *pubkey { self.reserved_grant_amounts[i] -= amount; return Ok(amount); } } Ok(0) }",,High,M o d i f y sanity_check t o c o m p a r e t h e s u m o f reserved_grant_amounts w i t h reserved_amount m i n u s reserved_amount_claimed .,https://solodit.cyfrin.io/issues/unauthorized-owner-modification-ottersec-none-adrena-pdf,Medium
Sol-075,"There is an inconsistency in how fees are determined based on the stability of tokens within the swap mechanism.  In the swap instruction logic, a specific adjustment is made if a token is high-confidence. If receiving_custody is a stable token, then fees.stable_swap_in is directly modified to potentially increase the fee.  In contrast, pool::get_swap_fees determines a stable_swap flag based on whether both custody tokens (custody_in and custody_out) are stable. This stable_swap flag then dictates whether to utilize fees.stable_swap_in or fees.swap_in for calculating fees.  Thus, while the swap instruction correctly adjusts fees based on the stability of the receiving token (fees.stable_swap_in), get_swap_fees uses a broader criterion. If a high-confidence token (receiving_custody) is involved in a swap where get_swap_fees utilizes fees.stable_swap_in (which may not have been adjusted), the calculated fee may not reflect the intended higher fee associated with high-confidence tokens.","i n s t r u c t i o n s / p u b l i c / l i q u i d i t y / s w a p . r s pub fn swap(ctx: Context<Swap>, params: &SwapParams) -> Result<()> { [...] // If the confidence_value is too high, add an extra fee to protect the protocol // both confidence_value and fee are expressed in BPS let ( high_confidence_value_protection_activated_in, high_confidence_value_protection_activated_out, ) = { let high_confidence_value_protection_activated_in = if (nominal_swap_in_fee == 0 && received_token_price.conf > 50) || (nominal_swap_in_fee != 0 && received_token_price.conf > nominal_swap_in_fee as ,→ u64) { [...] let fee = if receiving_custody.is_stable() { &mut receiving_custody.fees.stable_swap_in } else { &mut receiving_custody.fees.swap_in }; }[...] } [...] } s r c / s t a t e / p o o l . r s pub fn get_swap_fees( &self, token_id_in: usize, token_id_out: usize, amount_in: u64, amount_out: u64, custody_in: &Custody, token_price_in: &OraclePrice, custody_out: &Custody, token_price_out: &OraclePrice, ) -> Result<(u64, u64)> { let stable_swap = custody_in.is_stable() && custody_out.is_stable(); [",,High,E n s u r e t h a t f e e c a l c u l a t i o n s a c r o s s d i f f e r e n t p a r t s o f t h e s y s t e m a r e c o n s i s t e n t a n d r e f l e c t t h e i n t e n d e d f e e s t r u c t u r e b a s e d o n t o k e n s t a b i l i t y .,https://solodit.cyfrin.io/issues/unauthorized-owner-modification-ottersec-none-adrena-pdf,Medium
Sol-076,"In the current implementation of pool::get_fee, final_fee is calculated by taking the maximum value between the sum of fee_adjustment and base_fee, and zero. If fee_adjustment is a negative value (smaller than the negative of base_fee), the max function will return zero, and no fees will be charged.  If a user has high confidence about the price of a particular token in the pool, they may strategically add or remove a small amount of the token. This manipulation may slightly deviate the token’s ratio from the target. Due to the current implementation, if the calculated fee_adjustment is a minuscule negative value (due to the small change in the ratio), the final fee will be zero.  As a result, the user may:  Add tokens to the pool at a lower price than they believe is fair (since the price is based on the pool’s ratio), essentially buying at a discount. Remove tokens from the pool at a higher price than they believe is fair, profiting from the imbalanced ratio. Fees are meant to incentivize users to add or remove tokens in a way that maintains the target ratios for each token within the pool. By allowing users to avoid fees through minor manipulations, the system may become imbalanced, causing significant deviations from the target ratios over time.","fn get_fee( [...] ) -> Result<u64> { [...] let fee_adjustment: i64 = ((slope_numerator * new_ratio) + (fee_min * slope_denominator) - (target_ratio * slope_numerator)) / slope_denominator; let final_fee = math::checked_as_u16(std::cmp::max(fee_adjustment + base_fee, 0))?; [...] }",, High,"U t i l i z e t h e m a x i m u m v a l u e b e t w e e n fee_adjustment + base_fee a n d base_fee i n s t e a d o f z e r o . T h i s e n s u r e s t h a t e v e n i f t h e fee_adjustment i s n e g a t i v e , t h e r e w i l l a l w a y s b e a m i n i m u m f e e c h a r g e d , w h i c h i s t h e base_fee ",https://solodit.cyfrin.io/issues/unauthorized-owner-modification-ottersec-none-adrena-pdf,Medium
Sol-077,"The current implementation allows the input token mint to have a freeze authority, which can result in a potential denial of service (DoS) attack on the pool. If the input token mint’s freeze authority exercises control, the pool’s input token vault can be frozen, leading to a **permanent loss of funds** for users. This is a critical issue, as frozen token accounts cannot transfer tokens, rendering the pool inoperable. ","#[account(     mint::token_program = token_program, )] input_token_mint: Box<InterfaceAccount<'info, Mint>>,  #[account(     mut,     associated_token::authority = pool,     associated_token::mint = input_token_mint,     associated_token::token_program = token_program )] pool_input_token_vault: Box<InterfaceAccount<'info, TokenAccount>>,","#[account(     mint::freeze_authority = COption::None, // Ensure no freeze authority exists     mint::token_program = token_program, )] input_token_mint: Box<InterfaceAccount<'info, Mint>>,",Medium,"Ensure that the input token mint does not have a freeze authority or that the pool controls the freeze authority, preventing any external actor from freezing the pool's input token vault. ",https://solodit.cyfrin.io/issues/m-01-arbitrary-input-tokens-and-token-extensions-leading-to-invariant-manipulation-shieldify-none-adrastea-markdown,High
Sol-078,"There are no checks to ensure that the `deposit_token` matches the `allowed_token` in the `solana_vault::deposit` function. This allows an attacker to deposit any tokens and get minted USDC on the other chain. The system assumes that an allowed token is deposited every time and this assumption is wrong.  ### Root Cause  In [deposit.rs](https://github.com/sherlock-audit/2024-09-orderly-network-solana-contract/blob/main/solana-vault/packages/solana/contracts/programs/solana-vault/src/instructions/vault_instr/deposit.rs#L22), the `Deposit` struct lacks a constraint to verify that `deposit_token.key()` matches the `allowed_token.mint_account`.  This check could also be added inside the `solana_vault::deposit` or the `deposit.rs::apply` functions directly, but currently, none of these functions have this check either.  ","    #[account()]     pub deposit_token: Box<Account<'info, Mint>>, ","#[account(     constraint = deposit_token.key() == allowed_token.mint_account @ VaultError::TokenNotAllowed,     mint::token_program = token_program )]",Medium,Add a new `constraint` in `deposit.rs::Deposit` struct.  Update the `deposit_token` account definition in `deposit.rs` to include a `constraint` that ensures the `deposit_token` mint matches the `allowed_token.mint_account`. ,https://solodit.cyfrin.io/issues/h-1-h-1-sherlock-orderly-solana-vault-contract-git,High
Sol-079,"The implementation of the seeds function is incorrect because the correct seed needs to include the full seed phrase and the bump, but the seeds function does not include the bump.","use crate::constants::*; use crate::errors::ErrorCode; use anchor_lang::prelude::*;  pub const ADMIN_AUTH_MAX_LEN: usize = 5;  #[account] #[derive(InitSpace)] pub struct RebateManager {     pub authority: Pubkey, // 32      #[max_len(ADMIN_AUTH_MAX_LEN)]     pub admin_authority: Vec<Pubkey>,      pub quote_token_mint: Pubkey, // 32      pub token_vault: Pubkey, // 32 }  impl RebateManager {     pub fn seeds(&self) -> [&[u8]; 2] {         [             REBATEMANAGER_SEED.as_bytes(),             self.quote_token_mint.as_ref(),         ]     }      pub fn initialize(         &mut self,         authority: Pubkey,         quote_token_mint: Pubkey,         token_vault: Pubkey,     ) -> Result<()> {         self.authority = authority;         self.quote_token_mint = quote_token_mint;         self.token_vault = token_vault;          Ok(())     }      pub fn set_admin_authority(&mut self, admin_authority: Vec<Pubkey>) -> Result<()> {         require!(             admin_authority.len() <= ADMIN_AUTH_MAX_LEN,             ErrorCode::TooManyAuthorities         );         self.admin_authority = admin_authority;          Ok(())     } }","  * * MIT License * =========== * * Copyright (c) 2020 WooTrade * * Permission is hereby granted, free of charge, to any person obtaining a copy * of this software and associated documentation files (the ""Software""), to deal * in the Software without restriction, including without limitation the rights * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the Software is * furnished to do so, subject to the following conditions: * * The above copyright notice and this permission notice shall be included in all * copies or substantial portions of the Software. * * THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */  use crate::constants::*; use crate::errors::ErrorCode; use anchor_lang::prelude::*;  pub const ADMIN_AUTH_MAX_LEN: usize = 5;  #[account] #[derive(InitSpace)] pub struct RebateManager {     pub authority: Pubkey, // 32      #[max_len(ADMIN_AUTH_MAX_LEN)]     pub admin_authority: Vec<Pubkey>,      pub quote_token_mint: Pubkey, // 32      pub token_vault: Pubkey, // 32  +   pub rebate_manager_bump: [u8; 1], } impl RebateManager {      pub fn seeds(&self) -> [&[u8]; 2] {         [             REBATEMANAGER_SEED.as_bytes(),             self.quote_token_mint.as_ref(), +           self.rebate_manager_bump.as_ref(),         ]     }      pub fn initialize(         &mut self,         authority: Pubkey,         quote_token_mint: Pubkey,         token_vault: Pubkey, +       bump: u8.     ) -> Result<()> {         self.authority = authority;         self.quote_token_mint = quote_token_mint;         self.token_vault = token_vault; +       self.rebate_manager_bump = [bump];         Ok(())     } pub fn handler(ctx: Context<CreateRebateManager>) -> Result<()> {     let authority = ctx.accounts.authority.key();     let quote_token_mint = ctx.accounts.quote_token_mint.key();     let token_vault = ctx.accounts.token_vault.key(); +   let bump = ctx.bumps.rebate_manager;     let rebate_manager = &mut ctx.accounts.rebate_manager;  -   rebate_manager.initialize(authority, quote_token_mint, token_vault); +   rebate_manager.initialize(authority, quote_token_mint, token_vault, bump); }  }",Medium,The rebate_manager's bump is now stored in the account and included in its seeds(). The issue is fixed and transfers from the rebate_manager will succeed.,https://solodit.cyfrin.io/issues/h-1-rebate_info-and-rebate_manager-are-unable-to-sign-the-cpi-call-due-to-an-incorrect-implementation-of-the-seeds-function-sherlock-woofi-swap-on-solana-git,High
Sol-080,"Missing permission control in create_oracle. From the above code, it is clear that the permission control for create\_pool requires its authority to match wooracle.authority. However, since anyone can create an oracle, an attacker could create an oracle and then create a pool based on that oracle. This breaks the statement made in the README. ""Functions need admin authority: claim\_fee claim\_rebate\_fee create\_oracle create\_pool create\_rebate\_pool deposit set\_pool\_admin set\_pool\_state (all handlers in this file) set\_woo\_admin set\_woo\_state(all handlers in this file)"" ","#[derive(Accounts)] pub struct CreateWooracle<'info> {     pub wooconfig: Box<Account<'info, WooConfig>>,     pub token_mint: Account<'info, Mint>,      #[account(         init,         payer = admin,         space = 8 + Wooracle::INIT_SPACE,         seeds = [             WOORACLE_SEED.as_bytes(),             wooconfig.key().as_ref(),             token_mint.key().as_ref(),             feed_account.key().as_ref(),             price_update.key().as_ref()             ],         bump,     )]     wooracle: Account<'info, Wooracle>,     #[account(mut)] @>>    admin: Signer<'info>,     system_program: Program<'info, System>,     /// CHECK: This is the Pyth feed account     feed_account: AccountInfo<'info>,     // Add this account to any instruction Context that needs price data.     // Warning:     // users must ensure that the account passed to their instruction is owned by the Pyth pull oracle program.     // Using Anchor with the Account<'info, PriceUpdateV2> type will automatically perform this check.     // However, if you are not using Anchor, it is your responsibility to perform this check.     price_update: Account<'info, PriceUpdateV2>,      quote_token_mint: Account<'info, Mint>,     /// CHECK: This is the Quote token's pyth feed account     quote_feed_account: AccountInfo<'info>,     // Add this account to any instruction Context that needs price data.     // Warning:     // users must ensure that the account passed to their instruction is owned by the Pyth pull oracle program.     // Using Anchor with the Account<'info, PriceUpdateV2> type will automatically perform this check.     // However, if you are not using Anchor, it is your responsibility to perform this check.     quote_price_update: Account<'info, PriceUpdateV2>, }  pub fn handler(ctx: Context<CreateWooracle>, maximum_age: u64) -> Result<()> {     ctx.accounts.wooracle.wooconfig = ctx.accounts.wooconfig.key(); @>>    ctx.accounts.wooracle.authority = ctx.accounts.admin.key();     ctx.accounts.wooracle.token_mint = ctx.accounts.token_mint.key();     ctx.accounts.wooracle.feed_account = ctx.accounts.feed_account.key();     ctx.accounts.wooracle.price_update = ctx.accounts.price_update.key();     //----skip }","#[derive(Accounts)] pub struct CreateWooracle<'info> {     pub wooconfig: Box<Account<'info, WooConfig>>,     pub token_mint: Account<'info, Mint>,      #[account(         init,         payer = admin,         space = 8 + Wooracle::INIT_SPACE,         seeds = [             WOORACLE_SEED.as_bytes(),             wooconfig.key().as_ref(),             token_mint.key().as_ref(),             feed_account.key().as_ref(),             price_update.key().as_ref()             ],         bump,     )]     wooracle: Account<'info, Wooracle>,     #[account(mut)] @>>    admin: Signer<'info>,     system_program: Program<'info, System>,     /// CHECK: This is the Pyth feed account     feed_account: AccountInfo<'info>,     // Add this account to any instruction Context that needs price data.     // Warning:     // users must ensure that the account passed to their instruction is owned by the Pyth pull oracle program.     // Using Anchor with the Account<'info, PriceUpdateV2> type will automatically perform this check.     // However, if you are not using Anchor, it is your responsibility to perform this check.     price_update: Account<'info, PriceUpdateV2>,      quote_token_mint: Account<'info, Mint>,     /// CHECK: This is the Quote token's pyth feed account     quote_feed_account: AccountInfo<'info>,     // Add this account to any instruction Context that needs price data.     // Warning:     // users must ensure that the account passed to their instruction is owned by the Pyth pull oracle program.     // Using Anchor with the Account<'info, PriceUpdateV2> type will automatically perform this check.     // However, if you are not using Anchor, it is your responsibility to perform this check.     quote_price_update: Account<'info, PriceUpdateV2>, }  pub fn handler(ctx: Context<CreateWooracle>, maximum_age: u64) -> Result<()> {     ctx.accounts.wooracle.wooconfig = ctx.accounts.wooconfig.key(); ctx.accounts.wooracle.authority = ctx.accounts.wooconfig.authority();     ctx.accounts.wooracle.token_mint = ctx.accounts.token_mint.key();     ctx.accounts.wooracle.feed_account = ctx.accounts.feed_account.key();     ctx.accounts.wooracle.price_update = ctx.accounts.price_update.key();     //----skip }",Medium,Set the admin parameter in CreateWooracle to admin = wooconfig.authority.,https://solodit.cyfrin.io/issues/m-2-missing-permission-control-in-create_oracle-and-create_pool-sherlock-woofi-swap-on-solana-git,High
Sol-081,"Ability To Initialize Multiple Times. In the Initialize instruction, while initializing the staking parameters, the use of init_if_needed allows the staking parameters to be altered multiple times by anyone.  The ability to initialize the staking parameters repeatedly may result in security vulnerabilities. For example, an attacker could repeatedly call the Initialize instruction with different parameters, altering the staking configuration and disrupting the entire protocol.  ","#[derive(Accounts)] pub struct Initialize<'info> {     #[account(mut)]     pub admin: Signer<'info>,      #[account(init_if_needed, payer = admin, seeds = [STAKING_PARAMS_SEED, TEST_SEED], bump, space = 1024)]     pub staking_params: Account<'info, StakingParams>,      pub rewards_token_mint: Account<'info, Mint>,     #[account(init_if_needed, payer = admin, seeds = [REWARDS_SEED, TEST_SEED], bump, token::mint = rewards_token_mint, token::authority = staking_params)]     pub rewards_token_account: Account<'info, TokenAccount>,      token_program: Program<'info, Token>,     system_program: Program<'info, System>, }","#[derive(Accounts)] pub struct Initialize<'info> {     #[account(mut)]     pub admin: Signer<'info>,      #[account(init, payer = admin, seeds = [STAKING_PARAMS_SEED, TEST_SEED], bump, space = 1024)]     pub staking_params: Account<'info, StakingParams>,      pub rewards_token_mint: Account<'info, Mint>,     #[account(init, payer = admin, seeds = [REWARDS_SEED, TEST_SEED], bump, token::mint = rewards_token_mint, token::authority = staking_params)]     pub rewards_token_account: Account<'info, TokenAccount>,      token_program: Program<'info, Token>,     system_program: Program<'info, System>, }",Critical,Use init instead of init_if_needed for the Initialize instruction. This ensures that initialization can only happen once.,https://solodit.cyfrin.io/issues/discrepancies-in-deposit-functionality-ottersec-none-composablefi-pdf,High
Sol-082,"Discrepancies In Deposit  Functionality. The deposit function uses remaining_accounts for the CPI call to the guest chain program (solana_ibc::cpi::set_stake). However, the function lacks explicit validation checks on remaining_accounts within the deposit instruction. Similarly, solana_ibc::cpi::set_stake also lacks explicit validation checks for the accounts passed in the CpiContext.  Additionally, when invoking solana_ibc::cpi::set_stake, it is crucial to include parameters that identify the specific mint of the staked amount. Tokens on Solana may have different decimal places, and each mint may have a different scale. Without passing information about the mint of the staked amount, there is a risk of updating the stake value with an incorrect scale.","use solana_ibc::CHAIN_SEED;  pub mod constants;  mod token;  use constants::{ @@ -30,7 +31,7 @@ pub mod restaking {          staking_params.admin = ctx.accounts.admin.key();         staking_params.whitelisted_tokens = whitelisted_tokens;         staking_params.is_guest_chain_initialized = false;         staking_params.staking_cap = staking_cap;         staking_params.rewards_token_mint =             ctx.accounts.rewards_token_mint.key(); @@ -76,8 +77,8 @@ pub mod restaking {         }          let current_time = Clock::get()?.unix_timestamp;         let is_guest_chain_initialized =             staking_params.is_guest_chain_initialized;          vault_params.service = service;         vault_params.stake_timestamp_sec = current_time; @@ -99,7 +100,8 @@ pub mod restaking {         token::mint_nft(ctx.accounts.into(), seeds)?;          // Call Guest chain program to update the stake if the chain is initialized         if is_guest_chain_initialized {              let cpi_accounts = Chain {                 sender: ctx.accounts.depositor.to_account_info(),                 storage: ctx.remaining_accounts[0].clone(), @@ -122,7 +124,7 @@ pub mod restaking {         let staking_params = &mut ctx.accounts.staking_params;         let stake_token_mint = ctx.accounts.token_mint.key();          if !staking_params.is_guest_chain_initialized {             return Err(error!(ErrorCodes::OperationNotAllowed));         }  @@ -233,24 +235,28 @@ pub mod restaking {         Ok(())     }      /// Sets guest chain initialization status to true.     ///     /// After this method is called, CPI calls would be made to guest chain during deposit and stake would be     /// set to the validators. Users can also claim rewards or withdraw their stake     /// when the chain is initialized.     pub fn update_guest_chain_initialization(         ctx: Context<UpdateStakingParams>,      ) -> Result<()> {         let staking_params = &mut ctx.accounts.staking_params;         staking_params.is_guest_chain_initialized = true;             Ok(())     }      pub fn claim_rewards(ctx: Context<Claim>) -> Result<()> {         let staking_params = &ctx.accounts.staking_params;          if !staking_params.is_guest_chain_initialized {             return Err(error!(ErrorCodes::OperationNotAllowed));         }  @@ -562,7 +568,8 @@ pub struct StakingParams {     pub admin: Pubkey,     #[max_len(20)]     pub whitelisted_tokens: Vec<Pubkey>,     pub is_guest_chain_initialized: bool,      pub rewards_token_mint: Pubkey,     // None means there is not staking cap     pub staking_cap: u128, @@ -615,4 +622,8 @@ pub enum ErrorCodes {     StakingCapExceeded,     #[msg(""New staking cap should be more than existing one"")]     NewStakingCapShouldBeMoreThanExistingOne,     }","use solana_ibc::CHAIN_SEED;pub mod constants;mod validation;mod token;use constants::{@@ -30,7 +31,7 @@ pub mod restaking {        staking_params.admin = ctx.accounts.admin.key();        staking_params.whitelisted_tokens = whitelisted_tokens;        staking_params.guest_chain_program_id = None;        staking_params.staking_cap = staking_cap;        staking_params.rewards_token_mint =            ctx.accounts.rewards_token_mint.key();@@ -76,8 +77,8 @@ pub mod restaking {        }        let current_time = Clock::get()?.unix_timestamp;        let guest_chain_program_id =            staking_params.guest_chain_program_id;        vault_params.service = service;        vault_params.stake_timestamp_sec = current_time;@@ -99,7 +100,8 @@ pub mod restaking {        token::mint_nft(ctx.accounts.into(), seeds)?;        // Call Guest chain program to update the stake if the chain is initialized        if guest_chain_program_id.is_some() {            validation::validate_remaining_accounts(ctx.remaining_accounts, &guest_chain_program_id.unwrap())?;            let cpi_accounts = Chain {                sender: ctx.accounts.depositor.to_account_info(),                storage: ctx.remaining_accounts[0].clone(),@@ -122,7 +124,7 @@ pub mod restaking {        let staking_params = &mut ctx.accounts.staking_params;        let stake_token_mint = ctx.accounts.token_mint.key();        if staking_params.guest_chain_program_id.is_none() {            return Err(error!(ErrorCodes::OperationNotAllowed));        }@@ -233,24 +235,28 @@ pub mod restaking {        Ok(())    }    /// Sets guest chain program ID    ///    /// After this method is called, CPI calls would be made to guest chain during deposit and stake would be    /// set to the validators. Users can also claim rewards or withdraw their stake    /// when the chain is initialized.    pub fn update_guest_chain_initialization(        ctx: Context<UpdateStakingParams>,        guest_chain_program_id: Pubkey,     ) -> Result<()> {        let staking_params = &mut ctx.accounts.staking_params;        if staking_params.guest_chain_program_id.is_some() {            return Err(error!(ErrorCodes::GuestChainAlreadyInitialized));        }        staking_params.guest_chain_program_id = Some(guest_chain_program_id);        Ok(())    }    pub fn claim_rewards(ctx: Context<Claim>) -> Result<()> {        let staking_params = &ctx.accounts.staking_params;        if staking_params.guest_chain_program_id.is_none() {            return Err(error!(ErrorCodes::OperationNotAllowed));        }@@ -562,7 +568,8 @@ pub struct StakingParams {    pub admin: Pubkey,    #[max_len(20)]    pub whitelisted_tokens: Vec<Pubkey>,    /// None means the guest chain is not initialized yet.    pub guest_chain_program_id: Option<Pubkey>,    pub rewards_token_mint: Pubkey,    // None means there is not staking cap    pub staking_cap: u128,@@ -615,4 +622,8 @@ pub enum ErrorCodes {    StakingCapExceeded,    #[msg(""New staking cap should be more than existing one"")]    NewStakingCapShouldBeMoreThanExistingOne,    #[msg(""Guest chain can only be initialized once"")]    GuestChainAlreadyInitialized,    #[msg(""Account validation for CPI call to the guest chain"")]    AccountValidationFailedForCPI} ‎solana/restaking/programs/restaking/src/validation.rsCopy file name to clipboard+53Original file line numberOriginal file lineDiff line numberDiff line change@@ -0,0 +1,53 @@use anchor_lang::prelude::*;use anchor_spl::associated_token::get_associated_token_address_with_program_id;use solana_ibc::{CHAIN_SEED, SOLANA_IBC_STORAGE_SEED, TRIE_SEED};use crate::ErrorCodes;/// Validates accounts needed for CPI call to the guest chain./// /// Right now, this method would only validate accounts for calling `set_stake`/// method in the guest chain. Later when we expand to other services, we could/// extend this method below to do the validation for those accounts as well./// /// Accounts needed for calling `set_stake`/// - storage: PDA with seeds [""private""]/// - chain: PDA with seeds [""chain""]. Should be writable/// - trie: PDA with seeds [""trie""]/// - guest chain program ID: Should match the expected guest chain program ID/// /// Note: The accounts should be sent in above order.pub fn validate_remaining_accounts<'a>(accounts: &[AccountInfo<'a>], expected_guest_chain_program_id: &Pubkey) -> Result<()> {  // Storage Account  let seeds = [SOLANA_IBC_STORAGE_SEED];  let seeds = seeds.as_ref();  let (storage_account, _bump) = Pubkey::find_program_address(seeds, &expected_guest_chain_program_id);  if &storage_account != accounts[0].key {    return Err(error!(ErrorCodes::AccountValidationFailedForCPI));  }  // Chain account  let seeds = [CHAIN_SEED];  let seeds = seeds.as_ref();  let (storage_account, _bump) = Pubkey::find_program_address(seeds, &expected_guest_chain_program_id);  if &storage_account != accounts[1].key && accounts[1].is_writable {    return Err(error!(ErrorCodes::AccountValidationFailedForCPI));  }  // Trie account  let seeds = [TRIE_SEED];  let seeds = seeds.as_ref();  let (storage_account, _bump) = Pubkey::find_program_address(seeds, &expected_guest_chain_program_id);  if &storage_account != accounts[2].key && accounts[2].is_writable {    return Err(error!(ErrorCodes::AccountValidationFailedForCPI));  }   // Guest chain program ID  if expected_guest_chain_program_id != accounts[3].key {    return Err(error!(ErrorCodes::AccountValidationFailedForCPI));   }  Ok(())}",Critical,"Add validation checks in both deposit and solana_ibc::cpi::set_stake to ensure that the required accounts are present, have the correct ownership, and include the mint information as a parameter when calling set_stake.",https://solodit.cyfrin.io/issues/discrepancies-in-deposit-functionality-ottersec-none-composablefi-pdf,High
Sol-083,"Missing Receipt Token Balance Check In the implementation of the set_service instruction, there is a section of code that sets the service for a stake that was deposited before guest chain initialization, but it does not explicitly check whether the depositor’s receipt_token_account has a non-zero balance.  The code assumes that the depositor still holds a sufficient balance in their receipt_token_account to cover the stake, but fails to check for it explicitly. Proof of Concept A malicious user calls the set_service instruction using a genuine user’s vault_params and an arbitrary Service.  Since the code does not check for a non-zero balance in the receipt_token_account, the malicious user can abuse the system by setting an unauthorized stake for themselves using the original depositor’s vault_params.","    /// This method sets the service for the stake which was deposited before guest chain     /// initialization     ///     /// This method can only be called if the service was not set during the depositing and     /// can only be called once. Calling otherwise would panic.     ///     /// The accounts for CPI are sent as remaining accounts similar to `deposit` method.     pub fn set_service<'a, 'info>(         ctx: Context<'a, 'a, 'a, 'info, SetService<'info>>,         service: Service,     ) -> Result<()> {         let vault_params = &mut ctx.accounts.vault_params;         let staking_params = &mut ctx.accounts.staking_params;          if staking_params.guest_chain_program_id.is_none() {             return Err(error!(ErrorCodes::OperationNotAllowed));         }         if vault_params.service.is_some() {             return Err(error!(ErrorCodes::ServiceAlreadySet));         }              vault_params.service = Some(service);          let guest_chain_program_id =             staking_params.guest_chain_program_id.unwrap(); // Infallible         let amount = vault_params.stake_amount;          validation::validate_remaining_accounts(             ctx.remaining_accounts,             &guest_chain_program_id,         )?;         let bump = ctx.bumps.staking_params;         let seeds =             [STAKING_PARAMS_SEED, TEST_SEED, core::slice::from_ref(&bump)];         let seeds = seeds.as_ref();         let seeds = core::slice::from_ref(&seeds);         let cpi_accounts = SetStake {             sender: ctx.accounts.depositor.to_account_info(),             stake_mint: ctx.accounts.stake_mint.to_account_info(),             chain: ctx.remaining_accounts[0].clone(),             trie: ctx.remaining_accounts[1].clone(),             system_program: ctx.accounts.system_program.to_account_info(),             instruction: ctx.accounts.instruction.to_account_info(),         };         let cpi_program = ctx.remaining_accounts[2].clone();         let cpi_ctx =             CpiContext::new_with_signer(cpi_program, cpi_accounts, seeds);         solana_ibc::cpi::set_stake(cpi_ctx, amount as u128)?;          Ok(())     }","/// This method sets the service for the stake which was deposited before guest chain     /// initialization     ///     /// This method can only be called if the service was not set during the depositing and     /// can only be called once. Calling otherwise would panic.     ///     /// The accounts for CPI are sent as remaining accounts similar to `deposit` method.     pub fn set_service<'a, 'info>(         ctx: Context<'a, 'a, 'a, 'info, SetService<'info>>,         service: Service,     ) -> Result<()> {         let vault_params = &mut ctx.accounts.vault_params;         let staking_params = &mut ctx.accounts.staking_params;          if staking_params.guest_chain_program_id.is_none() {             return Err(error!(ErrorCodes::OperationNotAllowed));         }         if vault_params.service.is_some() {             return Err(error!(ErrorCodes::ServiceAlreadySet));         }         let token_account = &ctx.accounts.receipt_token_account;         if token_account.amount < 1 {             return Err(error!(ErrorCodes::InsufficientReceiptTokenBalance));         }          vault_params.service = Some(service);          let guest_chain_program_id =             staking_params.guest_chain_program_id.unwrap(); // Infallible         let amount = vault_params.stake_amount;          validation::validate_remaining_accounts(             ctx.remaining_accounts,             &guest_chain_program_id,         )?;         let bump = ctx.bumps.staking_params;         let seeds =             [STAKING_PARAMS_SEED, TEST_SEED, core::slice::from_ref(&bump)];         let seeds = seeds.as_ref();         let seeds = core::slice::from_ref(&seeds);         let cpi_accounts = SetStake {             sender: ctx.accounts.depositor.to_account_info(),             stake_mint: ctx.accounts.stake_mint.to_account_info(),             chain: ctx.remaining_accounts[0].clone(),             trie: ctx.remaining_accounts[1].clone(),             system_program: ctx.accounts.system_program.to_account_info(),             instruction: ctx.accounts.instruction.to_account_info(),         };         let cpi_program = ctx.remaining_accounts[2].clone();         let cpi_ctx =             CpiContext::new_with_signer(cpi_program, cpi_accounts, seeds);         solana_ibc::cpi::set_stake(cpi_ctx, amount as u128)?;          Ok(())     }",Critical,Explicitly check if the depositor’s receipt_token_account has a non-zero balance before proceeding with the stake setting. This check ensures that the depositor has access to their respective vault_params,https://github.com/ComposableFi/emulated-light-client/commit/e10222d8a13d420615c0e46b4ce5a66b7556f684,High
Sol-084,"Potential Fund Lockup  The deposit instruction includes an optional service parameter of type Option<Service>. This parameter is used to specify a service associated with a staking operation.  The vulnerability arises because the presence of the service parameter is later used as a condition during withdrawal. Specifically, the withdrawal logic includes a check that assumes service will always be Some(service).  However, if a deposit is made with None for the service parameter, this condition will not be met during withdrawal.  As a result, if the withdrawal logic unconditionally checks for service.is_some(), and the deposit was made with None, the user may be unable to withdraw funds, leading to a potential permanent lockup.","pub fn deposit<'a, 'info>( ctx: Context<'a, 'a, 'a, 'info, Deposit<'info>>, service: Option<Service>, amount: u64, ) -> Result<()> { [...] vault_params.service = if guest_chain_program_id.is_some() { service } else { None }; [...] }","/// This method sets the service for the stake which was deposited before guest chain     /// initialization     ///     /// This method can only be called if the service was not set during the depositing and     /// can only be called once. Calling otherwise would panic.     ///     /// The accounts for CPI are sent as remaining accounts similar to `deposit` method.     pub fn set_service<'a, 'info>(         ctx: Context<'a, 'a, 'a, 'info, SetService<'info>>,         service: Service,     ) -> Result<()> {         let vault_params = &mut ctx.accounts.vault_params;         let staking_params = &mut ctx.accounts.staking_params;          if staking_params.guest_chain_program_id.is_none() {             return Err(error!(ErrorCodes::OperationNotAllowed));         }         if vault_params.service.is_some() {             return Err(error!(ErrorCodes::ServiceAlreadySet));         }          vault_params.service = Some(service);          let guest_chain_program_id =             staking_params.guest_chain_program_id.unwrap(); // Infallible         let amount = vault_params.stake_amount;          validation::validate_remaining_accounts(             ctx.remaining_accounts,             &guest_chain_program_id,         )?;         let bump = ctx.bumps.staking_params;         let seeds =             [STAKING_PARAMS_SEED, TEST_SEED, core::slice::from_ref(&bump)];         let seeds = seeds.as_ref();         let seeds = core::slice::from_ref(&seeds);         let cpi_accounts = Chain {             sender: ctx.accounts.depositor.to_account_info(),             storage: ctx.remaining_accounts[0].clone(),             chain: ctx.remaining_accounts[1].clone(),             trie: ctx.remaining_accounts[2].clone(),             system_program: ctx.accounts.system_program.to_account_info(),             instruction: ctx.accounts.instruction.to_account_info(),         };         let cpi_program = ctx.remaining_accounts[3].clone();         let cpi_ctx =             CpiContext::new_with_signer(cpi_program, cpi_accounts, seeds);         solana_ibc::cpi::set_stake(cpi_ctx, amount as u128)?;          Ok(())     }",Low,Fixed by adding the set_service instruction to allow setting the service parameter after depositing funds.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/1441a8bd-31eb-44b7-b22d-0730dd0225c4/composable_audit_final.pdf?table=block&id=b924da7f-7c9e-4d03-b3db-b701ecbeab60&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742954400000&signature=Fs-jgCwXekywE6_iIh9BkPz4MhqR7d0SOwa0JlA3eRo&downloadName=composable_audit_final.pdf,High
Sol-085,"Lack of Instruction Sysvar Validation. The instruction sysvar account is passed to both the deposit and set_service instructions, but its validation is not performed in validate_remaining_accounts and set_stake.  As a result, it may be possible to replace or manipulate the instruction sysvar account. This could allow an attacker to inject unauthorized instructions into the CPI calls.","#[derive(Accounts)] pub struct SetService<'info> {     #[account(mut)]     depositor: Signer<'info>,      #[account(mut, seeds = [VAULT_PARAMS_SEED, receipt_token_mint.key().as_ref()], bump, has_one = stake_mint)]     pub vault_params: Box<Account<'info, Vault>>,     #[account(mut, seeds = [STAKING_PARAMS_SEED, TEST_SEED], bump)]     pub staking_params: Box<Account<'info, StakingParams>>,      #[account(mut, mint::decimals = 0)]     pub receipt_token_mint: Box<Account<'info, Mint>>,     #[account(mut, token::mint = receipt_token_mint, token::authority = depositor)]     pub receipt_token_account: Box<Account<'info, TokenAccount>>,      #[account(mut)]     pub stake_mint: Account<'info, Mint>,      ///CHECK:         pub instruction: AccountInfo<'info>,      pub system_program: Program<'info, System>, } #[derive(Accounts)] pub struct SetStake<'info> {     #[account(mut)]     sender: Signer<'info>,      /// The guest blockchain data.     #[account(mut, seeds = [CHAIN_SEED], bump)]     chain: Account<'info, chain::ChainData>,      /// The account holding the trie which corresponds to guest blockchain’s     /// state root.     ///     /// CHECK: Account’s owner is checked by [`storage::get_provable_from`]     /// function.     #[account(mut, seeds = [TRIE_SEED], bump)]     trie: UncheckedAccount<'info>,      /// We would support only SOL as stake which has decimal of 9     #[account(mut, mint::decimals = 9)]     stake_mint: Account<'info, Mint>,      system_program: Program<'info, System>,       /// CHECK: Used for getting the caller program id to verify if the right     /// program is calling the method.     instruction: AccountInfo<'info>, }","#[derive(Accounts)] pub struct SetService<'info> {     #[account(mut)]     depositor: Signer<'info>,      #[account(mut, seeds = [VAULT_PARAMS_SEED, receipt_token_mint.key().as_ref()], bump, has_one = stake_mint)]     pub vault_params: Box<Account<'info, Vault>>,     #[account(mut, seeds = [STAKING_PARAMS_SEED, TEST_SEED], bump)]     pub staking_params: Box<Account<'info, StakingParams>>,      #[account(mut, mint::decimals = 0)]     pub receipt_token_mint: Box<Account<'info, Mint>>,     #[account(mut, token::mint = receipt_token_mint, token::authority = depositor)]     pub receipt_token_account: Box<Account<'info, TokenAccount>>,      #[account(mut)]     pub stake_mint: Account<'info, Mint>,      ///CHECK:        #[account(address = solana_program::sysvar::instructions::ID)]     pub instruction: AccountInfo<'info>,      pub system_program: Program<'info, System>, } #[derive(Accounts)] pub struct SetStake<'info> {     #[account(mut)]     sender: Signer<'info>,      /// The guest blockchain data.     #[account(mut, seeds = [CHAIN_SEED], bump)]     chain: Account<'info, chain::ChainData>,      /// The account holding the trie which corresponds to guest blockchain’s     /// state root.     ///     /// CHECK: Account’s owner is checked by [`storage::get_provable_from`]     /// function.     #[account(mut, seeds = [TRIE_SEED], bump)]     trie: UncheckedAccount<'info>,      /// We would support only SOL as stake which has decimal of 9     #[account(mut, mint::decimals = 9)]     stake_mint: Account<'info, Mint>,      system_program: Program<'info, System>,      #[account(address = solana_program::sysvar::instructions::ID)]     /// CHECK: Used for getting the caller program id to verify if the right     /// program is calling the method.     instruction: AccountInfo<'info>, }",High,Both validation::validate_remaining_accounts and set_stake should include explicit validation for the instruction sysvar account. The validation should ensure that the account’s address matches the expected value.,https://github.com/ComposableFi/emulated-light-client/commit/b221448ddb53bab446d6f979395aebbcaa6594c9,High
Sol-086,"Inaccurate Reward Calculation. In withdrawal_request, the last_received_rewards_height parameter of vault_params is not updated to the current_height after rewards are calculated and transferred.  If a user cancels a withdrawal request and later requests withdrawal again, the function erroneously considers the last_received_rewards_height as the height when the last rewards were claimed, rather than the height when the last withdrawal request was raised.  This affects the reward calculation, as it will be based on outdated information.","/// Creates a withdrawal request by escrowing the receipt token. Once the unbonding     /// period ends, the token from the escrow would be burnt and returned to the user.     ///     /// This method transfers all the pending rewards to the user. The stake on the     /// guest chain is only updated after unbonding period ends in `withdraw` method.     ///     /// Closes the receipt token account.     pub fn withdrawal_request(ctx: Context<WithdrawalRequest>) -> Result<()> {         let vault_params = &mut ctx.accounts.vault_params;         let staking_params = &mut ctx.accounts.staking_params;         let stake_token_mint = ctx.accounts.token_mint.key();          if staking_params.guest_chain_program_id.is_none() {             return Err(error!(ErrorCodes::OperationNotAllowed));         }          if stake_token_mint != vault_params.stake_mint {             return Err(error!(ErrorCodes::InvalidTokenMint));         }          let current_timestamp = Clock::get()?.unix_timestamp as u64;         let withdrawal_request_params = WithdrawalRequestParams {             timestamp_in_sec: current_timestamp,             owner: ctx.accounts.withdrawer.key(),             token_account: ctx.accounts.withdrawer_token_account.key(),         };         vault_params.withdrawal_request = Some(withdrawal_request_params);          let chain = &ctx.accounts.guest_chain;         let service = vault_params             .service             .as_ref()             .ok_or_else(|| error!(ErrorCodes::MissingService))?;         let validator_key = match service {             Service::GuestChain { validator } => validator,         };          /*          * Get the rewards from guest blockchain.          */          let (rewards, _current_height) = chain.calculate_rewards(             vault_params.last_received_rewards_height,             *validator_key,             vault_params.stake_amount,         )?;            let bump = ctx.bumps.staking_params;         let seeds =             [STAKING_PARAMS_SEED, TEST_SEED, core::slice::from_ref(&bump)];         let seeds = seeds.as_ref();         let seeds = core::slice::from_ref(&seeds);          // Transfer rewards from platform wallet         token::transfer(             token::TransferAccounts {                 from: ctx                     .accounts                     .platform_rewards_token_account                     .to_account_info(),                 to: ctx                     .accounts                     .depositor_rewards_token_account                     .to_account_info(),                 authority: ctx.accounts.staking_params.to_account_info(),                 token_program: ctx.accounts.token_program.to_account_info(),             },             seeds,             rewards,         )?;          // Transfer receipt token to escrow         token::transfer(ctx.accounts.into(), &[], 1)?;          // Closing receipt NFT token account         let close_instruction = CloseAccount {             account: ctx.accounts.receipt_token_account.to_account_info(),             destination: ctx.accounts.withdrawer.to_account_info(),             authority: ctx.accounts.withdrawer.to_account_info(),         };          let cpi_ctx = CpiContext::new(             ctx.accounts.token_program.to_account_info(),             close_instruction,         );         anchor_spl::token::close_account(cpi_ctx)     }      /// Cancels the withdraw request and returns the receipt NFT.     ///     /// Even if the unbonding period is over and the withdraw is pending,     /// this method would cancel the withdrawal request and return back the","/// Creates a withdrawal request by escrowing the receipt token. Once the unbonding     /// period ends, the token from the escrow would be burnt and returned to the user.     ///     /// This method transfers all the pending rewards to the user. The stake on the     /// guest chain is only updated after unbonding period ends in `withdraw` method.     ///     /// Closes the receipt token account.     pub fn withdrawal_request(ctx: Context<WithdrawalRequest>) -> Result<()> {         let vault_params = &mut ctx.accounts.vault_params;         let staking_params = &mut ctx.accounts.staking_params;         let stake_token_mint = ctx.accounts.token_mint.key();          if staking_params.guest_chain_program_id.is_none() {             return Err(error!(ErrorCodes::OperationNotAllowed));         }          if stake_token_mint != vault_params.stake_mint {             return Err(error!(ErrorCodes::InvalidTokenMint));         }          let current_timestamp = Clock::get()?.unix_timestamp as u64;         let withdrawal_request_params = WithdrawalRequestParams {             timestamp_in_sec: current_timestamp,             owner: ctx.accounts.withdrawer.key(),             token_account: ctx.accounts.withdrawer_token_account.key(),         };         vault_params.withdrawal_request = Some(withdrawal_request_params);          let chain = &ctx.accounts.guest_chain;         let service = vault_params             .service             .as_ref()             .ok_or_else(|| error!(ErrorCodes::MissingService))?;         let validator_key = match service {             Service::GuestChain { validator } => validator,         };          /*          * Get the rewards from guest blockchain.          */          let (rewards, current_height) = chain.calculate_rewards(             vault_params.last_received_rewards_height,             *validator_key,             vault_params.stake_amount,         )?;          vault_params.last_received_rewards_height = current_height;          let bump = ctx.bumps.staking_params;         let seeds =             [STAKING_PARAMS_SEED, TEST_SEED, core::slice::from_ref(&bump)];         let seeds = seeds.as_ref();         let seeds = core::slice::from_ref(&seeds);          // Transfer rewards from platform wallet         token::transfer(             token::TransferAccounts {                 from: ctx                     .accounts                     .platform_rewards_token_account                     .to_account_info(),                 to: ctx                     .accounts                     .depositor_rewards_token_account                     .to_account_info(),                 authority: ctx.accounts.staking_params.to_account_info(),                 token_program: ctx.accounts.token_program.to_account_info(),             },             seeds,             rewards,         )?;          // Transfer receipt token to escrow         token::transfer(ctx.accounts.into(), &[], 1)?;          // Closing receipt NFT token account         let close_instruction = CloseAccount {             account: ctx.accounts.receipt_token_account.to_account_info(),             destination: ctx.accounts.withdrawer.to_account_info(),             authority: ctx.accounts.withdrawer.to_account_info(),         };          let cpi_ctx = CpiContext::new(             ctx.accounts.token_program.to_account_info(),             close_instruction,         );         anchor_spl::token::close_account(cpi_ctx)     } ",High,Update the last_received_rewards_height parameter to the current height after rewards are calculated and transferred within withdrawal_request.,https://github.com/ComposableFi/emulated-light-client/commit/e69bba333bffa3498edbf87d265f24409cbc0ad3,High
Sol-087,"Unauthorized Configuration Changes Description The redeemer_config account is declared with the init_if_needed attribute in InitializeBridgeV1. This attribute allows the creation of multiple bridges with a different pair of wrndr_mint and rndr_mint sharing the same underlying redeemer_config account. However, this poses a problem since every part of the codebase assumes that only one bridge exists.. This shared configuration may have unintended consequences, such as conflicts or misconfigurations, as multiple bridges may inadvertently utilize the same parameters. This may be suitable for one bridge, but not for others, resulting in the manipulation of shared configuration data. The most critical shared configuration between all the bridges is the ForeignContract account which allows the initialization of a BridgeV1 account with a random address and a malicious wrndr_mint that has the same chain value as the original one. This creates a BridgeV1 account in the same chain as the original, pointing to a different address. This address may call RegisterForeignContractV1, providing the same chain value as the original wrndr_mint, creating a ForeignContract with the same chain, essentially overwriting the address stored inside the program derived address.","#[derive(Accounts)] #[instruction(args: RegisterForeignContractArgsV1)] pub struct RegisterForeignContractV1<'info> { [...] #[account( init_if_needed, payer = owner, seeds = [ ForeignContract::SEED_PREFIX, &args.chain.to_le_bytes()[..] ], bump, space = ForeignContract::MAXIMUM_SIZE )] /// Foreign Contract account. Create this account if an emitter has not been /// registered yet for this Wormhole chain ID. If there already is a /// contract address saved in this account, overwrite it. pub foreign_contract: Box<Account<'info, ForeignContract>>, [...] }","pub struct InitializeBridgeV1<'info> { [...] #[account( - init_if_needed, + init, payer = owner, seeds = [RedeemerConfig::SEED_PREFIX], bump, space = RedeemerConfig::MAXIMUM_SIZE, )] /// Redeemer Config account, which saves program data useful for other /// instructions, specifically for inbound transfers. Also saves the payer /// of the [`initialize`](crate::initialize) instruction as the program's /// owner. pub redeemer_config: Box>, [...] }",High,Limit the creation of multiple bridges by changing init_if_needed to init.,https://solodit.cyfrin.io/issues/unauthorized-configuration-changes-ottersec-none-render-network-pdf,High
Sol-088,"Integer Overflow. There is a potential for integer overflow in the mechanism for calculating incentives for token transfers. The code tracks an incentive_counter, representing the cumulative incentives earned, and checks whether this cumulative amount exceeds a configured incentive_threshold. If it does, a new incentive epoch begins, and the incentives adjust accordingly.",let threshold = b.incentive_threshold; let inc = b.incentive_counter + transfer.amount; if inc >= threshold { // count towards the future epoch if inc - threshold > threshold - b.incentive_counter { epoch += 1 } b.incentive_counter = inc - threshold; b.incentive_epoch += 1; } else { b.incentive_counter += inc; },let threshold = b.incentive_threshold; let inc = b.incentive_counter + transfer.amount; if inc >= threshold { // count towards the future epoch - if inc - threshold > threshold - b.incentive_counter { + if inc - threshold > threshold.saturating_sub(b.incentive_counter) { epoch += 1 } b.incentive_counter = inc - threshold; b.incentive_epoch += 1; } else { b,High,Utilize saturating_sub to avoid the denial of service while keeping the original functionality.,https://solodit.cyfrin.io/issues/unauthorized-configuration-changes-ottersec-none-render-network-pdf,High
Sol-089,"The vulnerabilities pertain to specific edge cases when delta_fee is computed, where malicious provers may manipulate the parameters to create valid proofs that, when processed, result in a loss of funds from the destination account. This occurs as in both edge cases, proofs may be verified even though the value of fee_to_encrypt is greater than that of transfer_amount, thus resulting in the loss of funds scenario.","#[cfg(not(target_os = ""solana""))] use {     crate::{         encryption::{             elgamal::{ElGamalCiphertext, ElGamalKeypair, ElGamalPubkey, ElGamalSecretKey},             pedersen::{Pedersen, PedersenCommitment, PedersenOpening},         },         errors::{ProofGenerationError, ProofVerificationError},         instruction::{             errors::InstructionError,             transfer::{                 combine_lo_hi_ciphertexts, combine_lo_hi_commitments, combine_lo_hi_openings,                 combine_lo_hi_u64,                 encryption::{FeeEncryption, TransferAmountCiphertext},                 split_u64, FeeParameters, Role,             },         },         range_proof::RangeProof,         sigma_proofs::{             batched_grouped_ciphertext_validity_proof::BatchedGroupedCiphertext2HandlesValidityProof,             ciphertext_commitment_equality_proof::CiphertextCommitmentEqualityProof,             fee_proof::FeeSigmaProof,         },         transcript::TranscriptProtocol,     },     bytemuck::bytes_of,     curve25519_dalek::scalar::Scalar,     merlin::Transcript,     std::convert::TryInto,     subtle::{ConditionallySelectable, ConstantTimeGreater}, }; use {     crate::{         instruction::{ProofType, ZkProofData},         zk_token_elgamal::pod,     },     bytemuck::{Pod, Zeroable}, }; #[cfg(not(target_os = ""solana""))] const MAX_FEE_BASIS_POINTS: u64 = 10_000; #[cfg(not(target_os = ""solana""))] const ONE_IN_BASIS_POINTS: u128 = MAX_FEE_BASIS_POINTS as u128;  #[cfg(not(target_os = ""solana""))] const TRANSFER_SOURCE_AMOUNT_BITS: usize = 64;                                                  Expand All          @@ -51,7 +53,7 @@ const TRANSFER_AMOUNT_LO_NEGATED_BITS: usize = 16;    #[cfg(not(target_os = ""solana""))] const TRANSFER_AMOUNT_LO_BITS: usize = 16; #[cfg(not(target_os = ""solana""))] const TRANSFER_AMOUNT_LO_NEGATED_BITS: usize = 16; #[cfg(not(target_os = ""solana""))] const TRANSFER_AMOUNT_HI_BITS: usize = 32; #[cfg(not(target_os = ""solana""))] const TRANSFER_DELTA_BITS: usize = 48; #[cfg(not(target_os = ""solana""))] const FEE_AMOUNT_LO_BITS: usize = 16; #[cfg(not(target_os = ""solana""))]                                                  Expand All          @@ -62,6 +64,7 @@ lazy_static::lazy_static! {    const FEE_AMOUNT_HI_BITS: usize = 32; #[cfg(not(target_os = ""solana""))] lazy_static::lazy_static! {     pub static ref COMMITMENT_MAX: PedersenCommitment = Pedersen::encode((1_u64 <<                                                                          TRANSFER_AMOUNT_LO_NEGATED_BITS) - 1);     pub static ref COMMITMENT_MAX_FEE_BASIS_POINTS: PedersenCommitment = Pedersen::encode(MAX_FEE_BASIS_POINTS); }  /// The instruction data that is needed for the `ProofInstruction::TransferWithFee` instruction.                                                          Expand Down                                                    Expand Up          @@ -557,24 +560,41 @@ impl TransferWithFeeProof {    /// /// It includes the cryptographic proof as well as the context data information needed to verify /// the proof. #[derive(Clone, Copy, Pod, Zeroable)] #[repr(C)] pub struct TransferWithFeeData {     /// The context data for the transfer with fee proof     pub context: TransferWithFeeProofContext,     // transfer fee proof     pub proof: TransferWithFeeProof, } /// The context data needed to verify a transfer-with-fee proof. #[derive(Clone, Copy, Pod, Zeroable)] #[repr(C)] pub struct TransferWithFeeProofContext {     /// Group encryption of the low 16 bites of the transfer amount     pub ciphertext_lo: pod::TransferAmountCiphertext, // 128 bytes     /// Group encryption of the high 48 bits of the transfer amount     pub ciphertext_hi: pod::TransferAmountCiphertext, // 128 bytes     /// The public encryption keys associated with the transfer: source, dest, and auditor     pub transfer_with_fee_pubkeys: TransferWithFeePubkeys, // 128 bytes     /// The final spendable ciphertext after the transfer,     pub new_source_ciphertext: pod::ElGamalCiphertext, // 64 bytes     // transfer fee encryption of the low 16 bits of the transfer fee amount     pub fee_ciphertext_lo: pod::FeeEncryption, // 96 bytes     // transfer fee encryption of the hi 32 bits of the transfer fee amount     pub fee_ciphertext_hi: pod::FeeEncryption, // 96 bytes     // fee parameters     pub fee_parameters: pod::FeeParameters, // 10 bytes } /// The ElGamal public keys needed for a transfer with fee #[derive(Clone, Copy, Pod, Zeroable)] #[repr(C)] pub struct TransferWithFeePubkeys {     pub source: pod::ElGamalPubkey,     pub destination: pod::ElGamalPubkey,     pub auditor: pod::ElGamalPubkey,     pub withdraw_withheld_authority: pod::ElGamalPubkey, } #[cfg(not(target_os = ""solana""))] impl TransferWithFeeData {     pub fn new(         transfer_amount: u64,         (spendable_balance, old_source_ciphertext): (u64, &ElGamalCiphertext),         source_keypair: &ElGamalKeypair,         (destination_pubkey, auditor_pubkey): (&ElGamalPubkey, &ElGamalPubkey),         fee_parameters: FeeParameters,         withdraw_withheld_authority_pubkey: &ElGamalPubkey,     ) -> Result<Self, ProofGenerationError> {         // split and encrypt transfer amount         let (amount_lo, amount_hi) = split_u64(transfer_amount, TRANSFER_AMOUNT_LO_BITS);         let (ciphertext_lo, opening_lo) = TransferAmountCiphertext::new(             amount_lo,             source_keypair.pubkey(),             destination_pubkey,             auditor_pubkey,         );         let (ciphertext_hi, opening_hi) = TransferAmountCiphertext::new(             amount_hi,             source_keypair.pubkey(),             destination_pubkey,             auditor_pubkey,         );         // subtract transfer amount from the spendable ciphertext         let new_spendable_balance = spendable_balance             .checked_sub(transfer_amount)             .ok_or(ProofGenerationError::NotEnoughFunds)?;         let transfer_amount_lo_source = ElGamalCiphertext {             commitment: *ciphertext_lo.get_commitment(),             handle: *ciphertext_lo.get_source_handle(),         };         let transfer_amount_hi_source = ElGamalCiphertext {             commitment: *ciphertext_hi.get_commitment(),             handle: *ciphertext_hi.get_source_handle(),         };         let new_source_ciphertext = old_source_ciphertext             - combine_lo_hi_ciphertexts(                 &transfer_amount_lo_source,                 &transfer_amount_hi_source,                 TRANSFER_AMOUNT_LO_BITS,             );         // calculate fee         //         // TODO: add comment on delta fee         let (fee_amount, delta_fee) =             calculate_fee(transfer_amount, fee_parameters.fee_rate_basis_points)                 .ok_or(ProofGenerationError::FeeCalculation)?;         let below_max = u64::ct_gt(&fee_parameters.maximum_fee, &fee_amount);         let fee_to_encrypt =             u64::conditional_select(&fee_parameters.maximum_fee, &fee_amount, below_max);         // split and encrypt fee         let (fee_to_encrypt_lo, fee_to_encrypt_hi) = split_u64(fee_to_encrypt, FEE_AMOUNT_LO_BITS);         let (fee_ciphertext_lo, opening_fee_lo) = FeeEncryption::new(             fee_to_encrypt_lo,             destination_pubkey,             withdraw_withheld_authority_pubkey,         );         let (fee_ciphertext_hi, opening_fee_hi) = FeeEncryption::new(             fee_to_encrypt_hi,             destination_pubkey,             withdraw_withheld_authority_pubkey,         );         // generate transcript and append all public inputs         let pod_transfer_with_fee_pubkeys = TransferWithFeePubkeys {             source: (*source_keypair.pubkey()).into(),             destination: (*destination_pubkey).into(),             auditor: (*auditor_pubkey).into(),             withdraw_withheld_authority: (*withdraw_withheld_authority_pubkey).into(),         };         let pod_ciphertext_lo: pod::TransferAmountCiphertext = ciphertext_lo.into();         let pod_ciphertext_hi: pod::TransferAmountCiphertext = ciphertext_hi.into();         let pod_new_source_ciphertext: pod::ElGamalCiphertext = new_source_ciphertext.into();         let pod_fee_ciphertext_lo: pod::FeeEncryption = fee_ciphertext_lo.into();         let pod_fee_ciphertext_hi: pod::FeeEncryption = fee_ciphertext_hi.into();         let context = TransferWithFeeProofContext {             ciphertext_lo: pod_ciphertext_lo,             ciphertext_hi: pod_ciphertext_hi,             transfer_with_fee_pubkeys: pod_transfer_with_fee_pubkeys,             new_source_ciphertext: pod_new_source_ciphertext,             fee_ciphertext_lo: pod_fee_ciphertext_lo,             fee_ciphertext_hi: pod_fee_ciphertext_hi,             fee_parameters: fee_parameters.into(),         };         let mut transcript = context.new_transcript();         let proof = TransferWithFeeProof::new(             (amount_lo, &ciphertext_lo, &opening_lo),             (amount_hi, &ciphertext_hi, &opening_hi),             source_keypair,             (destination_pubkey, auditor_pubkey),             (new_spendable_balance, &new_source_ciphertext),             (fee_to_encrypt_lo, &fee_ciphertext_lo, &opening_fee_lo),             (fee_to_encrypt_hi, &fee_ciphertext_hi, &opening_fee_hi),             delta_fee,             withdraw_withheld_authority_pubkey,             fee_parameters,             &mut transcript,         )?;         Ok(Self { context, proof })     }     /// Extracts the lo ciphertexts associated with a transfer-with-fee data     fn ciphertext_lo(&self, role: Role) -> Result<ElGamalCiphertext, InstructionError> {         let ciphertext_lo: TransferAmountCiphertext = self             .context             .ciphertext_lo             .try_into()             .map_err(|_| InstructionError::Decryption)?;         let handle_lo = match role {             Role::Source => Some(ciphertext_lo.get_source_handle()),             Role::Destination => Some(ciphertext_lo.get_destination_handle()),             Role::Auditor => Some(ciphertext_lo.get_auditor_handle()),             Role::WithdrawWithheldAuthority => None,         };         if let Some(handle) = handle_lo {             Ok(ElGamalCiphertext {                 commitment: *ciphertext_lo.get_commitment(),                 handle: *handle,             })         } else {             Err(InstructionError::MissingCiphertext)         }     }     /// Extracts the lo ciphertexts associated with a transfer-with-fee data     fn ciphertext_hi(&self, role: Role) -> Result<ElGamalCiphertext, InstructionError> {         let ciphertext_hi: TransferAmountCiphertext = self             .context             .ciphertext_hi             .try_into()             .map_err(|_| InstructionError::Decryption)?;         let handle_hi = match role {             Role::Source => Some(ciphertext_hi.get_source_handle()),             Role::Destination => Some(ciphertext_hi.get_destination_handle()),             Role::Auditor => Some(ciphertext_hi.get_auditor_handle()),             Role::WithdrawWithheldAuthority => None,         };         if let Some(handle) = handle_hi {             Ok(ElGamalCiphertext {                 commitment: *ciphertext_hi.get_commitment(),                 handle: *handle,             })         } else {             Err(InstructionError::MissingCiphertext)         }     }     /// Extracts the lo fee ciphertexts associated with a transfer_with_fee data     fn fee_ciphertext_lo(&self, role: Role) -> Result<ElGamalCiphertext, InstructionError> {         let fee_ciphertext_lo: FeeEncryption = self             .context             .fee_ciphertext_lo             .try_into()             .map_err(|_| InstructionError::Decryption)?;         let fee_handle_lo = match role {             Role::Source => None,             Role::Destination => Some(fee_ciphertext_lo.get_destination_handle()),             Role::Auditor => None,             Role::WithdrawWithheldAuthority => {                 Some(fee_ciphertext_lo.get_withdraw_withheld_authority_handle())             }         };         if let Some(handle) = fee_handle_lo {             Ok(ElGamalCiphertext {                 commitment: *fee_ciphertext_lo.get_commitment(),                 handle: *handle,             })         } else {             Err(InstructionError::MissingCiphertext)         }     }     /// Extracts the hi fee ciphertexts associated with a transfer_with_fee data     fn fee_ciphertext_hi(&self, role: Role) -> Result<ElGamalCiphertext, InstructionError> {         let fee_ciphertext_hi: FeeEncryption = self             .context             .fee_ciphertext_hi             .try_into()             .map_err(|_| InstructionError::Decryption)?;         let fee_handle_hi = match role {             Role::Source => None,             Role::Destination => Some(fee_ciphertext_hi.get_destination_handle()),             Role::Auditor => None,             Role::WithdrawWithheldAuthority => {                 Some(fee_ciphertext_hi.get_withdraw_withheld_authority_handle())             }         };         if let Some(handle) = fee_handle_hi {             Ok(ElGamalCiphertext {                 commitment: *fee_ciphertext_hi.get_commitment(),                 handle: *handle,             })         } else {             Err(InstructionError::MissingCiphertext)         }     }     /// Decrypts transfer amount from transfer-with-fee data     pub fn decrypt_amount(         &self,         role: Role,         sk: &ElGamalSecretKey,     ) -> Result<u64, InstructionError> {         let ciphertext_lo = self.ciphertext_lo(role)?;         let ciphertext_hi = self.ciphertext_hi(role)?;         let amount_lo = ciphertext_lo.decrypt_u32(sk);         let amount_hi = ciphertext_hi.decrypt_u32(sk);         if let (Some(amount_lo), Some(amount_hi)) = (amount_lo, amount_hi) {             let shifted_amount_hi = amount_hi << TRANSFER_AMOUNT_LO_BITS;             Ok(amount_lo + shifted_amount_hi)         } else {             Err(InstructionError::Decryption)         }     }     /// Decrypts transfer amount from transfer-with-fee data     pub fn decrypt_fee_amount(         &self,         role: Role,         sk: &ElGamalSecretKey,     ) -> Result<u64, InstructionError> {         let ciphertext_lo = self.fee_ciphertext_lo(role)?;         let ciphertext_hi = self.fee_ciphertext_hi(role)?;         let fee_amount_lo = ciphertext_lo.decrypt_u32(sk);         let fee_amount_hi = ciphertext_hi.decrypt_u32(sk);         if let (Some(fee_amount_lo), Some(fee_amount_hi)) = (fee_amount_lo, fee_amount_hi) {             let shifted_fee_amount_hi = fee_amount_hi << FEE_AMOUNT_LO_BITS;             Ok(fee_amount_lo + shifted_fee_amount_hi)         } else {             Err(InstructionError::Decryption)         }     } } impl ZkProofData<TransferWithFeeProofContext> for TransferWithFeeData {     const PROOF_TYPE: ProofType = ProofType::TransferWithFee;     fn context_data(&self) -> &TransferWithFeeProofContext {         &self.context     }     #[cfg(not(target_os = ""solana""))]     fn verify_proof(&self) -> Result<(), ProofVerificationError> {         let mut transcript = self.context.new_transcript();         let source_pubkey = self.context.transfer_with_fee_pubkeys.source.try_into()?;         let destination_pubkey = self             .context             .transfer_with_fee_pubkeys             .destination             .try_into()?;         let auditor_pubkey = self.context.transfer_with_fee_pubkeys.auditor.try_into()?;         let withdraw_withheld_authority_pubkey = self             .context             .transfer_with_fee_pubkeys             .withdraw_withheld_authority             .try_into()?;         let ciphertext_lo = self.context.ciphertext_lo.try_into()?;         let ciphertext_hi = self.context.ciphertext_hi.try_into()?;         let new_source_ciphertext = self.context.new_source_ciphertext.try_into()?;         let fee_ciphertext_lo = self.context.fee_ciphertext_lo.try_into()?;         let fee_ciphertext_hi = self.context.fee_ciphertext_hi.try_into()?;         let fee_parameters = self.context.fee_parameters.into();         self.proof.verify(             &source_pubkey,             &destination_pubkey,             &auditor_pubkey,             &withdraw_withheld_authority_pubkey,             &ciphertext_lo,             &ciphertext_hi,             &new_source_ciphertext,             &fee_ciphertext_lo,             &fee_ciphertext_hi,             fee_parameters,             &mut transcript,         )     } } #[allow(non_snake_case)] #[cfg(not(target_os = ""solana""))] impl TransferWithFeeProofContext {     fn new_transcript(&self) -> Transcript {         let mut transcript = Transcript::new(b""transfer-with-fee-proof"");         transcript.append_message(b""ciphertext-lo"", bytes_of(&self.ciphertext_lo));         transcript.append_message(b""ciphertext-hi"", bytes_of(&self.ciphertext_hi));         transcript.append_message(             b""transfer-with-fee-pubkeys"",             bytes_of(&self.transfer_with_fee_pubkeys),         );         transcript.append_message(             b""new-source-ciphertext"",             bytes_of(&self.new_source_ciphertext),         );         transcript.append_message(b""fee-ciphertext-lo"", bytes_of(&self.fee_ciphertext_lo));         transcript.append_message(b""fee-ciphertext-hi"", bytes_of(&self.fee_ciphertext_hi));         transcript.append_message(b""fee-parameters"", bytes_of(&self.fee_parameters));         transcript     } } #[repr(C)] #[derive(Clone, Copy, Pod, Zeroable)] pub struct TransferWithFeeProof {     pub new_source_commitment: pod::PedersenCommitment,     pub claimed_commitment: pod::PedersenCommitment,     pub equality_proof: pod::CiphertextCommitmentEqualityProof,     pub ciphertext_amount_validity_proof: pod::BatchedGroupedCiphertext2HandlesValidityProof,     pub fee_sigma_proof: pod::FeeSigmaProof,     pub fee_ciphertext_validity_proof: pod::BatchedGroupedCiphertext2HandlesValidityProof,     pub range_proof: pod::RangeProofU256, } #[allow(non_snake_case)] #[cfg(not(target_os = ""solana""))] impl TransferWithFeeProof {     #[allow(clippy::too_many_arguments)]     #[allow(clippy::many_single_char_names)]     pub fn new(         transfer_amount_lo_data: (u64, &TransferAmountCiphertext, &PedersenOpening),         transfer_amount_hi_data: (u64, &TransferAmountCiphertext, &PedersenOpening),         source_keypair: &ElGamalKeypair,         (destination_pubkey, auditor_pubkey): (&ElGamalPubkey, &ElGamalPubkey),         (source_new_balance, new_source_ciphertext): (u64, &ElGamalCiphertext),         // fee parameters         (fee_amount_lo, fee_ciphertext_lo, opening_fee_lo): (u64, &FeeEncryption, &PedersenOpening),         (fee_amount_hi, fee_ciphertext_hi, opening_fee_hi): (u64, &FeeEncryption, &PedersenOpening),         delta_fee: u64,         withdraw_withheld_authority_pubkey: &ElGamalPubkey,         fee_parameters: FeeParameters,         transcript: &mut Transcript,     ) -> Result<Self, ProofGenerationError> {         let (transfer_amount_lo, ciphertext_lo, opening_lo) = transfer_amount_lo_data;         let (transfer_amount_hi, ciphertext_hi, opening_hi) = transfer_amount_hi_data;         // generate a Pedersen commitment for the remaining balance in source         let (new_source_commitment, opening_source) = Pedersen::new(source_new_balance);         let pod_new_source_commitment: pod::PedersenCommitment = new_source_commitment.into();         transcript.append_commitment(b""commitment-new-source"", &pod_new_source_commitment);         // generate equality_proof         let equality_proof = CiphertextCommitmentEqualityProof::new(             source_keypair,             new_source_ciphertext,             &opening_source,             source_new_balance,             transcript,         );         // generate ciphertext validity proof         let ciphertext_amount_validity_proof = BatchedGroupedCiphertext2HandlesValidityProof::new(             (destination_pubkey, auditor_pubkey),             (transfer_amount_lo, transfer_amount_hi),             (opening_lo, opening_hi),             transcript,         );         // compute claimed delta commitment         let (claimed_commitment, opening_claimed) = Pedersen::new(delta_fee);         let pod_claimed_commitment: pod::PedersenCommitment = claimed_commitment.into();         transcript.append_commitment(b""commitment-claimed"", &pod_claimed_commitment);         let combined_commitment = combine_lo_hi_commitments(             ciphertext_lo.get_commitment(),             ciphertext_hi.get_commitment(),             TRANSFER_AMOUNT_LO_BITS,         );         let combined_opening =             combine_lo_hi_openings(opening_lo, opening_hi, TRANSFER_AMOUNT_LO_BITS);         let combined_fee_amount =             combine_lo_hi_u64(fee_amount_lo, fee_amount_hi, TRANSFER_AMOUNT_LO_BITS);         let combined_fee_commitment = combine_lo_hi_commitments(             fee_ciphertext_lo.get_commitment(),             fee_ciphertext_hi.get_commitment(),             TRANSFER_AMOUNT_LO_BITS,         );         let combined_fee_opening =             combine_lo_hi_openings(opening_fee_lo, opening_fee_hi, TRANSFER_AMOUNT_LO_BITS);         // compute real delta commitment         let (delta_commitment, opening_delta) = compute_delta_commitment_and_opening(             (&combined_commitment, &combined_opening),             (&combined_fee_commitment, &combined_fee_opening),             fee_parameters.fee_rate_basis_points,         );         let pod_delta_commitment: pod::PedersenCommitment = delta_commitment.into();         transcript.append_commitment(b""commitment-delta"", &pod_delta_commitment);         // generate fee sigma proof         let fee_sigma_proof = FeeSigmaProof::new(             (                 combined_fee_amount,                 &combined_fee_commitment,                 &combined_fee_opening,             ),             (delta_fee, &delta_commitment, &opening_delta),             (&claimed_commitment, &opening_claimed),             fee_parameters.maximum_fee,             transcript,         );         // generate ciphertext validity proof for fee ciphertexts         let fee_ciphertext_validity_proof = BatchedGroupedCiphertext2HandlesValidityProof::new(             (destination_pubkey, withdraw_withheld_authority_pubkey),             (fee_amount_lo, fee_amount_hi),             (opening_fee_lo, opening_fee_hi),             transcript,         );          // generate the range proof         let opening_claimed_negated = &PedersenOpening::default() - &opening_claimed;         let range_proof = RangeProof::new(             vec![                 source_new_balance,                 transfer_amount_lo,                 transfer_amount_hi,                 delta_fee,                 MAX_FEE_BASIS_POINTS - delta_fee,                 fee_amount_lo,                 fee_amount_hi,             ],             vec![                 TRANSFER_SOURCE_AMOUNT_BITS, // 64                 TRANSFER_AMOUNT_LO_BITS,     // 16                 TRANSFER_AMOUNT_HI_BITS,     // 32                 TRANSFER_DELTA_BITS,         // 48                 TRANSFER_DELTA_BITS,         // 48                 FEE_AMOUNT_LO_BITS,          // 16                 FEE_AMOUNT_HI_BITS,          // 32             ],             vec![                 &opening_source,                                                  Expand All          @@ -584,6 +604,7 @@ impl TransferWithFeeProof {                    opening_lo,                 opening_hi,                 &opening_claimed,                 &opening_claimed_negated,                 opening_fee_lo,                 opening_fee_hi,             ],             transcript,         )?;                                                          Expand Down                                                    Expand Up          @@ -708,7 +729,8 @@ impl TransferWithFeeProof {            Ok(Self {             new_source_commitment: pod_new_source_commitment,             claimed_commitment: pod_claimed_commitment,             equality_proof: equality_proof.into(),             ciphertext_amount_validity_proof: ciphertext_amount_validity_proof.into(),             fee_sigma_proof: fee_sigma_proof.into(),             fee_ciphertext_validity_proof: fee_ciphertext_validity_proof.into(),             range_proof: range_proof                 .try_into()                 .map_err(|_| ProofGenerationError::ProofLength)?,         })     }     #[allow(clippy::too_many_arguments)]     pub fn verify(         &self,         source_pubkey: &ElGamalPubkey,         destination_pubkey: &ElGamalPubkey,         auditor_pubkey: &ElGamalPubkey,         withdraw_withheld_authority_pubkey: &ElGamalPubkey,         ciphertext_lo: &TransferAmountCiphertext,         ciphertext_hi: &TransferAmountCiphertext,         new_spendable_ciphertext: &ElGamalCiphertext,         // fee parameters         fee_ciphertext_lo: &FeeEncryption,         fee_ciphertext_hi: &FeeEncryption,         fee_parameters: FeeParameters,         transcript: &mut Transcript,     ) -> Result<(), ProofVerificationError> {         transcript.append_commitment(b""commitment-new-source"", &self.new_source_commitment);         let new_source_commitment: PedersenCommitment = self.new_source_commitment.try_into()?;         let claimed_commitment: PedersenCommitment = self.claimed_commitment.try_into()?;         let equality_proof: CiphertextCommitmentEqualityProof = self.equality_proof.try_into()?;         let ciphertext_amount_validity_proof: BatchedGroupedCiphertext2HandlesValidityProof =             self.ciphertext_amount_validity_proof.try_into()?;         let fee_sigma_proof: FeeSigmaProof = self.fee_sigma_proof.try_into()?;         let fee_ciphertext_validity_proof: BatchedGroupedCiphertext2HandlesValidityProof =             self.fee_ciphertext_validity_proof.try_into()?;         let range_proof: RangeProof = self.range_proof.try_into()?;         // verify equality proof         equality_proof.verify(             source_pubkey,             new_spendable_ciphertext,             &new_source_commitment,             transcript,         )?;         // verify that the transfer amount is encrypted correctly         ciphertext_amount_validity_proof.verify(             (destination_pubkey, auditor_pubkey),             (                 ciphertext_lo.get_commitment(),                 ciphertext_hi.get_commitment(),             ),             (                 ciphertext_lo.get_destination_handle(),                 ciphertext_hi.get_destination_handle(),             ),             (                 ciphertext_lo.get_auditor_handle(),                 ciphertext_hi.get_auditor_handle(),             ),             transcript,         )?;         // verify fee sigma proof         transcript.append_commitment(b""commitment-claimed"", &self.claimed_commitment);         let combined_commitment = combine_lo_hi_commitments(             ciphertext_lo.get_commitment(),             ciphertext_hi.get_commitment(),             TRANSFER_AMOUNT_LO_BITS,         );         let combined_fee_commitment = combine_lo_hi_commitments(             fee_ciphertext_lo.get_commitment(),             fee_ciphertext_hi.get_commitment(),             TRANSFER_AMOUNT_LO_BITS,         );         let delta_commitment = compute_delta_commitment(             &combined_commitment,             &combined_fee_commitment,             fee_parameters.fee_rate_basis_points,         );         let pod_delta_commitment: pod::PedersenCommitment = delta_commitment.into();         transcript.append_commitment(b""commitment-delta"", &pod_delta_commitment);         // verify fee sigma proof         fee_sigma_proof.verify(             &combined_fee_commitment,             &delta_commitment,             &claimed_commitment,             fee_parameters.maximum_fee,             transcript,         )?;         // verify ciphertext validity proof for fee ciphertexts         fee_ciphertext_validity_proof.verify(             (destination_pubkey, withdraw_withheld_authority_pubkey),             (                 fee_ciphertext_lo.get_commitment(),                 fee_ciphertext_hi.get_commitment(),             ),             (                 fee_ciphertext_lo.get_destination_handle(),                 fee_ciphertext_hi.get_destination_handle(),             ),             (                 fee_ciphertext_lo.get_withdraw_withheld_authority_handle(),                 fee_ciphertext_hi.get_withdraw_withheld_authority_handle(),             ),             transcript,         )?;          // verify range proof         let new_source_commitment = self.new_source_commitment.try_into()?;         let claimed_commitment_negated = &(*COMMITMENT_MAX_FEE_BASIS_POINTS) - &claimed_commitment;          range_proof.verify(             vec![                                                  Expand All          @@ -719,15 +741,17 @@ impl TransferWithFeeProof {                    &new_source_commitment,                 ciphertext_lo.get_commitment(),                 ciphertext_hi.get_commitment(),                 &claimed_commitment,                 &claimed_commitment_negated,                 fee_ciphertext_lo.get_commitment(),                 fee_ciphertext_hi.get_commitment(),             ],             vec![                 TRANSFER_SOURCE_AMOUNT_BITS, // 64                 TRANSFER_AMOUNT_LO_BITS,     // 16                 TRANSFER_AMOUNT_HI_BITS,     // 32                 TRANSFER_DELTA_BITS,         // 48                 TRANSFER_DELTA_BITS,         // 48                 FEE_AMOUNT_LO_BITS,          // 16                 FEE_AMOUNT_HI_BITS,          // 32             ],             transcript,         )?;                                                          Expand Down                      Ok(())     } } #[cfg(not(target_os = ""solana""))] fn calculate_fee(transfer_amount: u64, fee_rate_basis_points: u16) -> Option<(u64, u64)> {     let numerator = (transfer_amount as u128).checked_mul(fee_rate_basis_points as u128)?;     // Warning: Division may involve CPU opcodes that have variable execution times. This     // non-constant-time execution of the fee calculation can theoretically reveal information     // about the transfer amount. For transfers that invole extremely sensitive data, additional     // care should be put into how the fees are calculated.     let fee = numerator         .checked_add(ONE_IN_BASIS_POINTS)?         .checked_sub(1)?         .checked_div(ONE_IN_BASIS_POINTS)?;     let delta_fee = fee         .checked_mul(ONE_IN_BASIS_POINTS)?         .checked_sub(numerator)?;     Some((fee as u64, delta_fee as u64)) } #[cfg(not(target_os = ""solana""))] fn compute_delta_commitment_and_opening(     (combined_commitment, combined_opening): (&PedersenCommitment, &PedersenOpening),     (combined_fee_commitment, combined_fee_opening): (&PedersenCommitment, &PedersenOpening),     fee_rate_basis_points: u16, ) -> (PedersenCommitment, PedersenOpening) {     let fee_rate_scalar = Scalar::from(fee_rate_basis_points);     let delta_commitment = combined_fee_commitment * Scalar::from(MAX_FEE_BASIS_POINTS)         - combined_commitment * &fee_rate_scalar;     let delta_opening = combined_fee_opening * Scalar::from(MAX_FEE_BASIS_POINTS)         - combined_opening * &fee_rate_scalar;     (delta_commitment, delta_opening) } #[cfg(not(target_os = ""solana""))] fn compute_delta_commitment(     combined_commitment: &PedersenCommitment,     combined_fee_commitment: &PedersenCommitment,     fee_rate_basis_points: u16, ) -> PedersenCommitment {     let fee_rate_scalar = Scalar::from(fee_rate_basis_points);     combined_fee_commitment * Scalar::from(MAX_FEE_BASIS_POINTS)         - combined_commitment * &fee_rate_scalar } #[cfg(test)] mod test {     use super::*;     #[test]     fn test_fee_correctness() {         let source_keypair = ElGamalKeypair::new_rand();         let destination_keypair = ElGamalKeypair::new_rand();         let destination_pubkey = destination_keypair.pubkey();         let auditor_keypair = ElGamalKeypair::new_rand();         let auditor_pubkey = auditor_keypair.pubkey();         let withdraw_withheld_authority_keypair = ElGamalKeypair::new_rand();         let withdraw_withheld_authority_pubkey = withdraw_withheld_authority_keypair.pubkey();         // Case 1: transfer 0 amount         let spendable_balance: u64 = 120;         let spendable_ciphertext = source_keypair.pubkey().encrypt(spendable_balance);         let transfer_amount: u64 = 0;         let fee_parameters = FeeParameters {             fee_rate_basis_points: 400,             maximum_fee: 3,         };         let fee_data = TransferWithFeeData::new(             transfer_amount,             (spendable_balance, &spendable_ciphertext),             &source_keypair,             (destination_pubkey, auditor_pubkey),             fee_parameters,             withdraw_withheld_authority_pubkey,         )         .unwrap();         assert!(fee_data.verify_proof().is_ok());         // Case 2: transfer max amount         let spendable_balance: u64 = u64::max_value();         let spendable_ciphertext = source_keypair.pubkey().encrypt(spendable_balance);         let transfer_amount: u64 =             (1u64 << (TRANSFER_AMOUNT_LO_BITS + TRANSFER_AMOUNT_HI_BITS)) - 1;         let fee_parameters = FeeParameters {             fee_rate_basis_points: 400,             maximum_fee: 3,         };         let fee_data = TransferWithFeeData::new(             transfer_amount,             (spendable_balance, &spendable_ciphertext),             &source_keypair,             (destination_pubkey, auditor_pubkey),             fee_parameters,             withdraw_withheld_authority_pubkey,         )         .unwrap();         assert!(fee_data.verify_proof().is_ok());         // Case 3: general success case         let spendable_balance: u64 = 120;         let spendable_ciphertext = source_keypair.pubkey().encrypt(spendable_balance);         let transfer_amount: u64 = 100;         let fee_parameters = FeeParameters {             fee_rate_basis_points: 400,             maximum_fee: 3,         };         let fee_data = TransferWithFeeData::new(             transfer_amount,             (spendable_balance, &spendable_ciphertext),             &source_keypair,             (destination_pubkey, auditor_pubkey),             fee_parameters,             withdraw_withheld_authority_pubkey,         )         .unwrap();         assert!(fee_data.verify_proof().is_ok());         // Case 4: destination pubkey invalid         let spendable_balance: u64 = 120;         let spendable_ciphertext = source_keypair.pubkey().encrypt(spendable_balance);         let transfer_amount: u64 = 0;         let fee_parameters = FeeParameters {             fee_rate_basis_points: 400,             maximum_fee: 3,         };         // destination pubkey invalid         let destination_pubkey: ElGamalPubkey = pod::ElGamalPubkey::zeroed().try_into().unwrap();         let auditor_keypair = ElGamalKeypair::new_rand();         let auditor_pubkey = auditor_keypair.pubkey();         let withdraw_withheld_authority_keypair = ElGamalKeypair::new_rand();         let withdraw_withheld_authority_pubkey = withdraw_withheld_authority_keypair.pubkey();         let fee_data = TransferWithFeeData::new(             transfer_amount,             (spendable_balance, &spendable_ciphertext),             &source_keypair,             (&destination_pubkey, auditor_pubkey),             fee_parameters,             withdraw_withheld_authority_pubkey,         )         .unwrap();         assert!(fee_data.verify_proof().is_err());     } }","#[cfg(not(target_os = ""solana""))] use {     crate::{         encryption::{             elgamal::{ElGamalCiphertext, ElGamalKeypair, ElGamalPubkey, ElGamalSecretKey},             pedersen::{Pedersen, PedersenCommitment, PedersenOpening},         },         errors::{ProofGenerationError, ProofVerificationError},         instruction::{             errors::InstructionError,             transfer::{                 combine_lo_hi_ciphertexts, combine_lo_hi_commitments, combine_lo_hi_openings,                 combine_lo_hi_u64,                 encryption::{FeeEncryption, TransferAmountCiphertext},                 split_u64, FeeParameters, Role,             },         },         range_proof::RangeProof,         sigma_proofs::{             batched_grouped_ciphertext_validity_proof::BatchedGroupedCiphertext2HandlesValidityProof,             ciphertext_commitment_equality_proof::CiphertextCommitmentEqualityProof,             fee_proof::FeeSigmaProof,         },         transcript::TranscriptProtocol,     },     bytemuck::bytes_of,     curve25519_dalek::scalar::Scalar,     merlin::Transcript,     std::convert::TryInto,     subtle::{ConditionallySelectable, ConstantTimeGreater}, }; use {     crate::{         instruction::{ProofType, ZkProofData},         zk_token_elgamal::pod,     },     bytemuck::{Pod, Zeroable}, }; #[cfg(not(target_os = ""solana""))] const MAX_FEE_BASIS_POINTS: u64 = 10_000; #[cfg(not(target_os = ""solana""))] const ONE_IN_BASIS_POINTS: u128 = MAX_FEE_BASIS_POINTS as u128; #[cfg(not(target_os = ""solana""))] const MAX_DELTA_RANGE: u64 = MAX_FEE_BASIS_POINTS - 1;  #[cfg(not(target_os = ""solana""))] const TRANSFER_SOURCE_AMOUNT_BITS: usize = 64;                                                  Expand All          @@ -51,7 +53,7 @@ const TRANSFER_AMOUNT_LO_NEGATED_BITS: usize = 16;    #[cfg(not(target_os = ""solana""))] const TRANSFER_AMOUNT_LO_BITS: usize = 16; #[cfg(not(target_os = ""solana""))] const TRANSFER_AMOUNT_LO_NEGATED_BITS: usize = 16; #[cfg(not(target_os = ""solana""))] const TRANSFER_AMOUNT_HI_BITS: usize = 32; #[cfg(not(target_os = ""solana""))] const TRANSFER_DELTA_BITS: usize = 16; #[cfg(not(target_os = ""solana""))] const FEE_AMOUNT_LO_BITS: usize = 16; #[cfg(not(target_os = ""solana""))]                                                  Expand All          @@ -62,6 +64,7 @@ lazy_static::lazy_static! {    const FEE_AMOUNT_HI_BITS: usize = 32; #[cfg(not(target_os = ""solana""))] lazy_static::lazy_static! {     pub static ref COMMITMENT_MAX: PedersenCommitment = Pedersen::encode((1_u64 <<                                                                          TRANSFER_AMOUNT_LO_NEGATED_BITS) - 1);     pub static ref COMMITMENT_MAX_FEE_BASIS_POINTS: PedersenCommitment = Pedersen::encode(MAX_FEE_BASIS_POINTS);     pub static ref COMMITMENT_MAX_DELTA_RANGE: PedersenCommitment = Pedersen::encode(MAX_DELTA_RANGE); }  /// The instruction data that is needed for the `ProofInstruction::TransferWithFee` instruction.                                                          Expand Down                                                    Expand Up          @@ -557,24 +560,41 @@ impl TransferWithFeeProof {    /// /// It includes the cryptographic proof as well as the context data information needed to verify /// the proof. #[derive(Clone, Copy, Pod, Zeroable)] #[repr(C)] pub struct TransferWithFeeData {     /// The context data for the transfer with fee proof     pub context: TransferWithFeeProofContext,     // transfer fee proof     pub proof: TransferWithFeeProof, } /// The context data needed to verify a transfer-with-fee proof. #[derive(Clone, Copy, Pod, Zeroable)] #[repr(C)] pub struct TransferWithFeeProofContext {     /// Group encryption of the low 16 bites of the transfer amount     pub ciphertext_lo: pod::TransferAmountCiphertext, // 128 bytes     /// Group encryption of the high 48 bits of the transfer amount     pub ciphertext_hi: pod::TransferAmountCiphertext, // 128 bytes     /// The public encryption keys associated with the transfer: source, dest, and auditor     pub transfer_with_fee_pubkeys: TransferWithFeePubkeys, // 128 bytes     /// The final spendable ciphertext after the transfer,     pub new_source_ciphertext: pod::ElGamalCiphertext, // 64 bytes     // transfer fee encryption of the low 16 bits of the transfer fee amount     pub fee_ciphertext_lo: pod::FeeEncryption, // 96 bytes     // transfer fee encryption of the hi 32 bits of the transfer fee amount     pub fee_ciphertext_hi: pod::FeeEncryption, // 96 bytes     // fee parameters     pub fee_parameters: pod::FeeParameters, // 10 bytes } /// The ElGamal public keys needed for a transfer with fee #[derive(Clone, Copy, Pod, Zeroable)] #[repr(C)] pub struct TransferWithFeePubkeys {     pub source: pod::ElGamalPubkey,     pub destination: pod::ElGamalPubkey,     pub auditor: pod::ElGamalPubkey,     pub withdraw_withheld_authority: pod::ElGamalPubkey, } #[cfg(not(target_os = ""solana""))] impl TransferWithFeeData {     pub fn new(         transfer_amount: u64,         (spendable_balance, old_source_ciphertext): (u64, &ElGamalCiphertext),         source_keypair: &ElGamalKeypair,         (destination_pubkey, auditor_pubkey): (&ElGamalPubkey, &ElGamalPubkey),         fee_parameters: FeeParameters,         withdraw_withheld_authority_pubkey: &ElGamalPubkey,     ) -> Result<Self, ProofGenerationError> {         // split and encrypt transfer amount         let (amount_lo, amount_hi) = split_u64(transfer_amount, TRANSFER_AMOUNT_LO_BITS);         let (ciphertext_lo, opening_lo) = TransferAmountCiphertext::new(             amount_lo,             source_keypair.pubkey(),             destination_pubkey,             auditor_pubkey,         );         let (ciphertext_hi, opening_hi) = TransferAmountCiphertext::new(             amount_hi,             source_keypair.pubkey(),             destination_pubkey,             auditor_pubkey,         );         // subtract transfer amount from the spendable ciphertext         let new_spendable_balance = spendable_balance             .checked_sub(transfer_amount)             .ok_or(ProofGenerationError::NotEnoughFunds)?;         let transfer_amount_lo_source = ElGamalCiphertext {             commitment: *ciphertext_lo.get_commitment(),             handle: *ciphertext_lo.get_source_handle(),         };         let transfer_amount_hi_source = ElGamalCiphertext {             commitment: *ciphertext_hi.get_commitment(),             handle: *ciphertext_hi.get_source_handle(),         };         let new_source_ciphertext = old_source_ciphertext             - combine_lo_hi_ciphertexts(                 &transfer_amount_lo_source,                 &transfer_amount_hi_source,                 TRANSFER_AMOUNT_LO_BITS,             );         // calculate fee         //         // TODO: add comment on delta fee         let (fee_amount, delta_fee) =             calculate_fee(transfer_amount, fee_parameters.fee_rate_basis_points)                 .ok_or(ProofGenerationError::FeeCalculation)?;         let below_max = u64::ct_gt(&fee_parameters.maximum_fee, &fee_amount);         let fee_to_encrypt =             u64::conditional_select(&fee_parameters.maximum_fee, &fee_amount, below_max);         // split and encrypt fee         let (fee_to_encrypt_lo, fee_to_encrypt_hi) = split_u64(fee_to_encrypt, FEE_AMOUNT_LO_BITS);         let (fee_ciphertext_lo, opening_fee_lo) = FeeEncryption::new(             fee_to_encrypt_lo,             destination_pubkey,             withdraw_withheld_authority_pubkey,         );         let (fee_ciphertext_hi, opening_fee_hi) = FeeEncryption::new(             fee_to_encrypt_hi,             destination_pubkey,             withdraw_withheld_authority_pubkey,         );         // generate transcript and append all public inputs         let pod_transfer_with_fee_pubkeys = TransferWithFeePubkeys {             source: (*source_keypair.pubkey()).into(),             destination: (*destination_pubkey).into(),             auditor: (*auditor_pubkey).into(),             withdraw_withheld_authority: (*withdraw_withheld_authority_pubkey).into(),         };         let pod_ciphertext_lo: pod::TransferAmountCiphertext = ciphertext_lo.into();         let pod_ciphertext_hi: pod::TransferAmountCiphertext = ciphertext_hi.into();         let pod_new_source_ciphertext: pod::ElGamalCiphertext = new_source_ciphertext.into();         let pod_fee_ciphertext_lo: pod::FeeEncryption = fee_ciphertext_lo.into();         let pod_fee_ciphertext_hi: pod::FeeEncryption = fee_ciphertext_hi.into();         let context = TransferWithFeeProofContext {             ciphertext_lo: pod_ciphertext_lo,             ciphertext_hi: pod_ciphertext_hi,             transfer_with_fee_pubkeys: pod_transfer_with_fee_pubkeys,             new_source_ciphertext: pod_new_source_ciphertext,             fee_ciphertext_lo: pod_fee_ciphertext_lo,             fee_ciphertext_hi: pod_fee_ciphertext_hi,             fee_parameters: fee_parameters.into(),         };         let mut transcript = context.new_transcript();         let proof = TransferWithFeeProof::new(             (amount_lo, &ciphertext_lo, &opening_lo),             (amount_hi, &ciphertext_hi, &opening_hi),             source_keypair,             (destination_pubkey, auditor_pubkey),             (new_spendable_balance, &new_source_ciphertext),             (fee_to_encrypt_lo, &fee_ciphertext_lo, &opening_fee_lo),             (fee_to_encrypt_hi, &fee_ciphertext_hi, &opening_fee_hi),             delta_fee,             withdraw_withheld_authority_pubkey,             fee_parameters,             &mut transcript,         )?;         Ok(Self { context, proof })     }     /// Extracts the lo ciphertexts associated with a transfer-with-fee data     fn ciphertext_lo(&self, role: Role) -> Result<ElGamalCiphertext, InstructionError> {         let ciphertext_lo: TransferAmountCiphertext = self             .context             .ciphertext_lo             .try_into()             .map_err(|_| InstructionError::Decryption)?;         let handle_lo = match role {             Role::Source => Some(ciphertext_lo.get_source_handle()),             Role::Destination => Some(ciphertext_lo.get_destination_handle()),             Role::Auditor => Some(ciphertext_lo.get_auditor_handle()),             Role::WithdrawWithheldAuthority => None,         };         if let Some(handle) = handle_lo {             Ok(ElGamalCiphertext {                 commitment: *ciphertext_lo.get_commitment(),                 handle: *handle,             })         } else {             Err(InstructionError::MissingCiphertext)         }     }     /// Extracts the lo ciphertexts associated with a transfer-with-fee data     fn ciphertext_hi(&self, role: Role) -> Result<ElGamalCiphertext, InstructionError> {         let ciphertext_hi: TransferAmountCiphertext = self             .context             .ciphertext_hi             .try_into()             .map_err(|_| InstructionError::Decryption)?;         let handle_hi = match role {             Role::Source => Some(ciphertext_hi.get_source_handle()),             Role::Destination => Some(ciphertext_hi.get_destination_handle()),             Role::Auditor => Some(ciphertext_hi.get_auditor_handle()),             Role::WithdrawWithheldAuthority => None,         };         if let Some(handle) = handle_hi {             Ok(ElGamalCiphertext {                 commitment: *ciphertext_hi.get_commitment(),                 handle: *handle,             })         } else {             Err(InstructionError::MissingCiphertext)         }     }     /// Extracts the lo fee ciphertexts associated with a transfer_with_fee data     fn fee_ciphertext_lo(&self, role: Role) -> Result<ElGamalCiphertext, InstructionError> {         let fee_ciphertext_lo: FeeEncryption = self             .context             .fee_ciphertext_lo             .try_into()             .map_err(|_| InstructionError::Decryption)?;         let fee_handle_lo = match role {             Role::Source => None,             Role::Destination => Some(fee_ciphertext_lo.get_destination_handle()),             Role::Auditor => None,             Role::WithdrawWithheldAuthority => {                 Some(fee_ciphertext_lo.get_withdraw_withheld_authority_handle())             }         };         if let Some(handle) = fee_handle_lo {             Ok(ElGamalCiphertext {                 commitment: *fee_ciphertext_lo.get_commitment(),                 handle: *handle,             })         } else {             Err(InstructionError::MissingCiphertext)         }     }     /// Extracts the hi fee ciphertexts associated with a transfer_with_fee data     fn fee_ciphertext_hi(&self, role: Role) -> Result<ElGamalCiphertext, InstructionError> {         let fee_ciphertext_hi: FeeEncryption = self             .context             .fee_ciphertext_hi             .try_into()             .map_err(|_| InstructionError::Decryption)?;         let fee_handle_hi = match role {             Role::Source => None,             Role::Destination => Some(fee_ciphertext_hi.get_destination_handle()),             Role::Auditor => None,             Role::WithdrawWithheldAuthority => {                 Some(fee_ciphertext_hi.get_withdraw_withheld_authority_handle())             }         };         if let Some(handle) = fee_handle_hi {             Ok(ElGamalCiphertext {                 commitment: *fee_ciphertext_hi.get_commitment(),                 handle: *handle,             })         } else {             Err(InstructionError::MissingCiphertext)         }     }     /// Decrypts transfer amount from transfer-with-fee data     pub fn decrypt_amount(         &self,         role: Role,         sk: &ElGamalSecretKey,     ) -> Result<u64, InstructionError> {         let ciphertext_lo = self.ciphertext_lo(role)?;         let ciphertext_hi = self.ciphertext_hi(role)?;         let amount_lo = ciphertext_lo.decrypt_u32(sk);         let amount_hi = ciphertext_hi.decrypt_u32(sk);         if let (Some(amount_lo), Some(amount_hi)) = (amount_lo, amount_hi) {             let shifted_amount_hi = amount_hi << TRANSFER_AMOUNT_LO_BITS;             Ok(amount_lo + shifted_amount_hi)         } else {             Err(InstructionError::Decryption)         }     }     /// Decrypts transfer amount from transfer-with-fee data     pub fn decrypt_fee_amount(         &self,         role: Role,         sk: &ElGamalSecretKey,     ) -> Result<u64, InstructionError> {         let ciphertext_lo = self.fee_ciphertext_lo(role)?;         let ciphertext_hi = self.fee_ciphertext_hi(role)?;         let fee_amount_lo = ciphertext_lo.decrypt_u32(sk);         let fee_amount_hi = ciphertext_hi.decrypt_u32(sk);         if let (Some(fee_amount_lo), Some(fee_amount_hi)) = (fee_amount_lo, fee_amount_hi) {             let shifted_fee_amount_hi = fee_amount_hi << FEE_AMOUNT_LO_BITS;             Ok(fee_amount_lo + shifted_fee_amount_hi)         } else {             Err(InstructionError::Decryption)         }     } } impl ZkProofData<TransferWithFeeProofContext> for TransferWithFeeData {     const PROOF_TYPE: ProofType = ProofType::TransferWithFee;     fn context_data(&self) -> &TransferWithFeeProofContext {         &self.context     }     #[cfg(not(target_os = ""solana""))]     fn verify_proof(&self) -> Result<(), ProofVerificationError> {         let mut transcript = self.context.new_transcript();         let source_pubkey = self.context.transfer_with_fee_pubkeys.source.try_into()?;         let destination_pubkey = self             .context             .transfer_with_fee_pubkeys             .destination             .try_into()?;         let auditor_pubkey = self.context.transfer_with_fee_pubkeys.auditor.try_into()?;         let withdraw_withheld_authority_pubkey = self             .context             .transfer_with_fee_pubkeys             .withdraw_withheld_authority             .try_into()?;         let ciphertext_lo = self.context.ciphertext_lo.try_into()?;         let ciphertext_hi = self.context.ciphertext_hi.try_into()?;         let new_source_ciphertext = self.context.new_source_ciphertext.try_into()?;         let fee_ciphertext_lo = self.context.fee_ciphertext_lo.try_into()?;         let fee_ciphertext_hi = self.context.fee_ciphertext_hi.try_into()?;         let fee_parameters = self.context.fee_parameters.into();         self.proof.verify(             &source_pubkey,             &destination_pubkey,             &auditor_pubkey,             &withdraw_withheld_authority_pubkey,             &ciphertext_lo,             &ciphertext_hi,             &new_source_ciphertext,             &fee_ciphertext_lo,             &fee_ciphertext_hi,             fee_parameters,             &mut transcript,         )     } } #[allow(non_snake_case)] #[cfg(not(target_os = ""solana""))] impl TransferWithFeeProofContext {     fn new_transcript(&self) -> Transcript {         let mut transcript = Transcript::new(b""transfer-with-fee-proof"");         transcript.append_message(b""ciphertext-lo"", bytes_of(&self.ciphertext_lo));         transcript.append_message(b""ciphertext-hi"", bytes_of(&self.ciphertext_hi));         transcript.append_message(             b""transfer-with-fee-pubkeys"",             bytes_of(&self.transfer_with_fee_pubkeys),         );         transcript.append_message(             b""new-source-ciphertext"",             bytes_of(&self.new_source_ciphertext),         );         transcript.append_message(b""fee-ciphertext-lo"", bytes_of(&self.fee_ciphertext_lo));         transcript.append_message(b""fee-ciphertext-hi"", bytes_of(&self.fee_ciphertext_hi));         transcript.append_message(b""fee-parameters"", bytes_of(&self.fee_parameters));         transcript     } } #[repr(C)] #[derive(Clone, Copy, Pod, Zeroable)] pub struct TransferWithFeeProof {     pub new_source_commitment: pod::PedersenCommitment,     pub claimed_commitment: pod::PedersenCommitment,     pub equality_proof: pod::CiphertextCommitmentEqualityProof,     pub ciphertext_amount_validity_proof: pod::BatchedGroupedCiphertext2HandlesValidityProof,     pub fee_sigma_proof: pod::FeeSigmaProof,     pub fee_ciphertext_validity_proof: pod::BatchedGroupedCiphertext2HandlesValidityProof,     pub range_proof: pod::RangeProofU256, } #[allow(non_snake_case)] #[cfg(not(target_os = ""solana""))] impl TransferWithFeeProof {     #[allow(clippy::too_many_arguments)]     #[allow(clippy::many_single_char_names)]     pub fn new(         transfer_amount_lo_data: (u64, &TransferAmountCiphertext, &PedersenOpening),         transfer_amount_hi_data: (u64, &TransferAmountCiphertext, &PedersenOpening),         source_keypair: &ElGamalKeypair,         (destination_pubkey, auditor_pubkey): (&ElGamalPubkey, &ElGamalPubkey),         (source_new_balance, new_source_ciphertext): (u64, &ElGamalCiphertext),         // fee parameters         (fee_amount_lo, fee_ciphertext_lo, opening_fee_lo): (u64, &FeeEncryption, &PedersenOpening),         (fee_amount_hi, fee_ciphertext_hi, opening_fee_hi): (u64, &FeeEncryption, &PedersenOpening),         delta_fee: u64,         withdraw_withheld_authority_pubkey: &ElGamalPubkey,         fee_parameters: FeeParameters,         transcript: &mut Transcript,     ) -> Result<Self, ProofGenerationError> {         let (transfer_amount_lo, ciphertext_lo, opening_lo) = transfer_amount_lo_data;         let (transfer_amount_hi, ciphertext_hi, opening_hi) = transfer_amount_hi_data;         // generate a Pedersen commitment for the remaining balance in source         let (new_source_commitment, opening_source) = Pedersen::new(source_new_balance);         let pod_new_source_commitment: pod::PedersenCommitment = new_source_commitment.into();         transcript.append_commitment(b""commitment-new-source"", &pod_new_source_commitment);         // generate equality_proof         let equality_proof = CiphertextCommitmentEqualityProof::new(             source_keypair,             new_source_ciphertext,             &opening_source,             source_new_balance,             transcript,         );         // generate ciphertext validity proof         let ciphertext_amount_validity_proof = BatchedGroupedCiphertext2HandlesValidityProof::new(             (destination_pubkey, auditor_pubkey),             (transfer_amount_lo, transfer_amount_hi),             (opening_lo, opening_hi),             transcript,         );         // compute claimed delta commitment         let (claimed_commitment, opening_claimed) = Pedersen::new(delta_fee);         let pod_claimed_commitment: pod::PedersenCommitment = claimed_commitment.into();         transcript.append_commitment(b""commitment-claimed"", &pod_claimed_commitment);         let combined_commitment = combine_lo_hi_commitments(             ciphertext_lo.get_commitment(),             ciphertext_hi.get_commitment(),             TRANSFER_AMOUNT_LO_BITS,         );         let combined_opening =             combine_lo_hi_openings(opening_lo, opening_hi, TRANSFER_AMOUNT_LO_BITS);         let combined_fee_amount =             combine_lo_hi_u64(fee_amount_lo, fee_amount_hi, TRANSFER_AMOUNT_LO_BITS);         let combined_fee_commitment = combine_lo_hi_commitments(             fee_ciphertext_lo.get_commitment(),             fee_ciphertext_hi.get_commitment(),             TRANSFER_AMOUNT_LO_BITS,         );         let combined_fee_opening =             combine_lo_hi_openings(opening_fee_lo, opening_fee_hi, TRANSFER_AMOUNT_LO_BITS);         // compute real delta commitment         let (delta_commitment, opening_delta) = compute_delta_commitment_and_opening(             (&combined_commitment, &combined_opening),             (&combined_fee_commitment, &combined_fee_opening),             fee_parameters.fee_rate_basis_points,         );         let pod_delta_commitment: pod::PedersenCommitment = delta_commitment.into();         transcript.append_commitment(b""commitment-delta"", &pod_delta_commitment);         // generate fee sigma proof         let fee_sigma_proof = FeeSigmaProof::new(             (                 combined_fee_amount,                 &combined_fee_commitment,                 &combined_fee_opening,             ),             (delta_fee, &delta_commitment, &opening_delta),             (&claimed_commitment, &opening_claimed),             fee_parameters.maximum_fee,             transcript,         );         // generate ciphertext validity proof for fee ciphertexts         let fee_ciphertext_validity_proof = BatchedGroupedCiphertext2HandlesValidityProof::new(             (destination_pubkey, withdraw_withheld_authority_pubkey),             (fee_amount_lo, fee_amount_hi),             (opening_fee_lo, opening_fee_hi),             transcript,         );          // generate the range proof         let opening_claimed_negated = &PedersenOpening::default() - &opening_claimed;          let combined_amount = combine_lo_hi_u64(             transfer_amount_lo,             transfer_amount_hi,             TRANSFER_AMOUNT_LO_BITS,         );         let amount_sub_fee = combined_amount             .checked_sub(combined_fee_amount)             .ok_or(ProofGenerationError::FeeCalculation)?;         let amount_sub_fee_opening = combined_opening - combined_fee_opening;          let delta_negated = MAX_DELTA_RANGE             .checked_sub(delta_fee)             .ok_or(ProofGenerationError::FeeCalculation)?;          let range_proof = RangeProof::new(             vec![                 source_new_balance,                 transfer_amount_lo,                 transfer_amount_hi,                 delta_fee,                 delta_negated,                 fee_amount_lo,                 fee_amount_hi,                 amount_sub_fee,             ],             vec![                 TRANSFER_SOURCE_AMOUNT_BITS, // 64                 TRANSFER_AMOUNT_LO_BITS,     // 16                 TRANSFER_AMOUNT_HI_BITS,     // 32                 TRANSFER_DELTA_BITS,         // 16                 TRANSFER_DELTA_BITS,         // 16                 FEE_AMOUNT_LO_BITS,          // 16                 FEE_AMOUNT_HI_BITS,          // 32                 TRANSFER_SOURCE_AMOUNT_BITS, // 64             ],             vec![                 &opening_source,                                                  Expand All          @@ -584,6 +604,7 @@ impl TransferWithFeeProof {                    opening_lo,                 opening_hi,                 &opening_claimed,                 &opening_claimed_negated,                 opening_fee_lo,                 opening_fee_hi,                 &amount_sub_fee_opening,             ],             transcript,         )?;                                                          Expand Down                                                    Expand Up          @@ -708,7 +729,8 @@ impl TransferWithFeeProof {            Ok(Self {             new_source_commitment: pod_new_source_commitment,             claimed_commitment: pod_claimed_commitment,             equality_proof: equality_proof.into(),             ciphertext_amount_validity_proof: ciphertext_amount_validity_proof.into(),             fee_sigma_proof: fee_sigma_proof.into(),             fee_ciphertext_validity_proof: fee_ciphertext_validity_proof.into(),             range_proof: range_proof                 .try_into()                 .map_err(|_| ProofGenerationError::ProofLength)?,         })     }     #[allow(clippy::too_many_arguments)]     pub fn verify(         &self,         source_pubkey: &ElGamalPubkey,         destination_pubkey: &ElGamalPubkey,         auditor_pubkey: &ElGamalPubkey,         withdraw_withheld_authority_pubkey: &ElGamalPubkey,         ciphertext_lo: &TransferAmountCiphertext,         ciphertext_hi: &TransferAmountCiphertext,         new_spendable_ciphertext: &ElGamalCiphertext,         // fee parameters         fee_ciphertext_lo: &FeeEncryption,         fee_ciphertext_hi: &FeeEncryption,         fee_parameters: FeeParameters,         transcript: &mut Transcript,     ) -> Result<(), ProofVerificationError> {         transcript.append_commitment(b""commitment-new-source"", &self.new_source_commitment);         let new_source_commitment: PedersenCommitment = self.new_source_commitment.try_into()?;         let claimed_commitment: PedersenCommitment = self.claimed_commitment.try_into()?;         let equality_proof: CiphertextCommitmentEqualityProof = self.equality_proof.try_into()?;         let ciphertext_amount_validity_proof: BatchedGroupedCiphertext2HandlesValidityProof =             self.ciphertext_amount_validity_proof.try_into()?;         let fee_sigma_proof: FeeSigmaProof = self.fee_sigma_proof.try_into()?;         let fee_ciphertext_validity_proof: BatchedGroupedCiphertext2HandlesValidityProof =             self.fee_ciphertext_validity_proof.try_into()?;         let range_proof: RangeProof = self.range_proof.try_into()?;         // verify equality proof         equality_proof.verify(             source_pubkey,             new_spendable_ciphertext,             &new_source_commitment,             transcript,         )?;         // verify that the transfer amount is encrypted correctly         ciphertext_amount_validity_proof.verify(             (destination_pubkey, auditor_pubkey),             (                 ciphertext_lo.get_commitment(),                 ciphertext_hi.get_commitment(),             ),             (                 ciphertext_lo.get_destination_handle(),                 ciphertext_hi.get_destination_handle(),             ),             (                 ciphertext_lo.get_auditor_handle(),                 ciphertext_hi.get_auditor_handle(),             ),             transcript,         )?;         // verify fee sigma proof         transcript.append_commitment(b""commitment-claimed"", &self.claimed_commitment);         let combined_commitment = combine_lo_hi_commitments(             ciphertext_lo.get_commitment(),             ciphertext_hi.get_commitment(),             TRANSFER_AMOUNT_LO_BITS,         );         let combined_fee_commitment = combine_lo_hi_commitments(             fee_ciphertext_lo.get_commitment(),             fee_ciphertext_hi.get_commitment(),             TRANSFER_AMOUNT_LO_BITS,         );         let delta_commitment = compute_delta_commitment(             &combined_commitment,             &combined_fee_commitment,             fee_parameters.fee_rate_basis_points,         );         let pod_delta_commitment: pod::PedersenCommitment = delta_commitment.into();         transcript.append_commitment(b""commitment-delta"", &pod_delta_commitment);         // verify fee sigma proof         fee_sigma_proof.verify(             &combined_fee_commitment,             &delta_commitment,             &claimed_commitment,             fee_parameters.maximum_fee,             transcript,         )?;         // verify ciphertext validity proof for fee ciphertexts         fee_ciphertext_validity_proof.verify(             (destination_pubkey, withdraw_withheld_authority_pubkey),             (                 fee_ciphertext_lo.get_commitment(),                 fee_ciphertext_hi.get_commitment(),             ),             (                 fee_ciphertext_lo.get_destination_handle(),                 fee_ciphertext_hi.get_destination_handle(),             ),             (                 fee_ciphertext_lo.get_withdraw_withheld_authority_handle(),                 fee_ciphertext_hi.get_withdraw_withheld_authority_handle(),             ),             transcript,         )?;          // verify range proof         let new_source_commitment = self.new_source_commitment.try_into()?;         let claimed_commitment_negated = &(*COMMITMENT_MAX_DELTA_RANGE) - &claimed_commitment;         let amount_sub_fee_commitment = combined_commitment - combined_fee_commitment;          range_proof.verify(             vec![                                                  Expand All          @@ -719,15 +741,17 @@ impl TransferWithFeeProof {                    &new_source_commitment,                 ciphertext_lo.get_commitment(),                 ciphertext_hi.get_commitment(),                 &claimed_commitment,                 &claimed_commitment_negated,                 fee_ciphertext_lo.get_commitment(),                 fee_ciphertext_hi.get_commitment(),                 &amount_sub_fee_commitment,             ],             vec![                 TRANSFER_SOURCE_AMOUNT_BITS, // 64                 TRANSFER_AMOUNT_LO_BITS,     // 16                 TRANSFER_AMOUNT_HI_BITS,     // 32                 TRANSFER_DELTA_BITS,         // 16                 TRANSFER_DELTA_BITS,         // 16                 FEE_AMOUNT_LO_BITS,          // 16                 FEE_AMOUNT_HI_BITS,          // 32                 TRANSFER_SOURCE_AMOUNT_BITS, // 64             ],             transcript,         )?;                                                          Expand Down                      Ok(())     } } #[cfg(not(target_os = ""solana""))] fn calculate_fee(transfer_amount: u64, fee_rate_basis_points: u16) -> Option<(u64, u64)> {     let numerator = (transfer_amount as u128).checked_mul(fee_rate_basis_points as u128)?;     // Warning: Division may involve CPU opcodes that have variable execution times. This     // non-constant-time execution of the fee calculation can theoretically reveal information     // about the transfer amount. For transfers that invole extremely sensitive data, additional     // care should be put into how the fees are calculated.     let fee = numerator         .checked_add(ONE_IN_BASIS_POINTS)?         .checked_sub(1)?         .checked_div(ONE_IN_BASIS_POINTS)?;     let delta_fee = fee         .checked_mul(ONE_IN_BASIS_POINTS)?         .checked_sub(numerator)?;     Some((fee as u64, delta_fee as u64)) } #[cfg(not(target_os = ""solana""))] fn compute_delta_commitment_and_opening(     (combined_commitment, combined_opening): (&PedersenCommitment, &PedersenOpening),     (combined_fee_commitment, combined_fee_opening): (&PedersenCommitment, &PedersenOpening),     fee_rate_basis_points: u16, ) -> (PedersenCommitment, PedersenOpening) {     let fee_rate_scalar = Scalar::from(fee_rate_basis_points);     let delta_commitment = combined_fee_commitment * Scalar::from(MAX_FEE_BASIS_POINTS)         - combined_commitment * &fee_rate_scalar;     let delta_opening = combined_fee_opening * Scalar::from(MAX_FEE_BASIS_POINTS)         - combined_opening * &fee_rate_scalar;     (delta_commitment, delta_opening) } #[cfg(not(target_os = ""solana""))] fn compute_delta_commitment(     combined_commitment: &PedersenCommitment,     combined_fee_commitment: &PedersenCommitment,     fee_rate_basis_points: u16, ) -> PedersenCommitment {     let fee_rate_scalar = Scalar::from(fee_rate_basis_points);     combined_fee_commitment * Scalar::from(MAX_FEE_BASIS_POINTS)         - combined_commitment * &fee_rate_scalar } #[cfg(test)] mod test {     use super::*;     #[test]     fn test_fee_correctness() {         let source_keypair = ElGamalKeypair::new_rand();         let destination_keypair = ElGamalKeypair::new_rand();         let destination_pubkey = destination_keypair.pubkey();         let auditor_keypair = ElGamalKeypair::new_rand();         let auditor_pubkey = auditor_keypair.pubkey();         let withdraw_withheld_authority_keypair = ElGamalKeypair::new_rand();         let withdraw_withheld_authority_pubkey = withdraw_withheld_authority_keypair.pubkey();         // Case 1: transfer 0 amount         let spendable_balance: u64 = 120;         let spendable_ciphertext = source_keypair.pubkey().encrypt(spendable_balance);         let transfer_amount: u64 = 0;         let fee_parameters = FeeParameters {             fee_rate_basis_points: 400,             maximum_fee: 3,         };         let fee_data = TransferWithFeeData::new(             transfer_amount,             (spendable_balance, &spendable_ciphertext),             &source_keypair,             (destination_pubkey, auditor_pubkey),             fee_parameters,             withdraw_withheld_authority_pubkey,         )         .unwrap();         assert!(fee_data.verify_proof().is_ok());         // Case 2: transfer max amount         let spendable_balance: u64 = u64::max_value();         let spendable_ciphertext = source_keypair.pubkey().encrypt(spendable_balance);         let transfer_amount: u64 =             (1u64 << (TRANSFER_AMOUNT_LO_BITS + TRANSFER_AMOUNT_HI_BITS)) - 1;         let fee_parameters = FeeParameters {             fee_rate_basis_points: 400,             maximum_fee: 3,         };         let fee_data = TransferWithFeeData::new(             transfer_amount,             (spendable_balance, &spendable_ciphertext),             &source_keypair,             (destination_pubkey, auditor_pubkey),             fee_parameters,             withdraw_withheld_authority_pubkey,         )         .unwrap();         assert!(fee_data.verify_proof().is_ok());         // Case 3: general success case         let spendable_balance: u64 = 120;         let spendable_ciphertext = source_keypair.pubkey().encrypt(spendable_balance);         let transfer_amount: u64 = 100;         let fee_parameters = FeeParameters {             fee_rate_basis_points: 400,             maximum_fee: 3,         };         let fee_data = TransferWithFeeData::new(             transfer_amount,             (spendable_balance, &spendable_ciphertext),             &source_keypair,             (destination_pubkey, auditor_pubkey),             fee_parameters,             withdraw_withheld_authority_pubkey,         )         .unwrap();         assert!(fee_data.verify_proof().is_ok());         // Case 4: destination pubkey invalid         let spendable_balance: u64 = 120;         let spendable_ciphertext = source_keypair.pubkey().encrypt(spendable_balance);         let transfer_amount: u64 = 0;         let fee_parameters = FeeParameters {             fee_rate_basis_points: 400,             maximum_fee: 3,         };         // destination pubkey invalid         let destination_pubkey: ElGamalPubkey = pod::ElGamalPubkey::zeroed().try_into().unwrap();         let auditor_keypair = ElGamalKeypair::new_rand();         let auditor_pubkey = auditor_keypair.pubkey();         let withdraw_withheld_authority_keypair = ElGamalKeypair::new_rand();         let withdraw_withheld_authority_pubkey = withdraw_withheld_authority_keypair.pubkey();         let fee_data = TransferWithFeeData::new(             transfer_amount,             (spendable_balance, &spendable_ciphertext),             &source_keypair,             (&destination_pubkey, auditor_pubkey),             fee_parameters,             withdraw_withheld_authority_pubkey,         )         .unwrap();         assert!(fee_data.verify_proof().is_err());     } }",Critical,"Solution: Implement a range proof of transfer_amount - fee_to_encrypt or change the constant MAX_FEE_BASIS_POINTS to 9999. Fixed the off-by-one error Added an additional range proof to certify that the transfer fee is at most the transfer amount. Specifically, in the batched range proof condition, I added the condition transfer_amount - transfer_fee is a positive 64-bit number. Since the range proofs are batched, this additional condition does not increase the cost or size of the range proof itself. Removed unchecked arithmetic.",https://github.com/solana-labs/solana/pull/34314/files,High
Sol-090,"The vulnerability pertains to the potential risk of a dishonest prover creating a crafted proof containing more commitments (bit-lengths) than the maximum permissible limit, resulting in incorrect verification without raising any error. This situation may occur as the number of commitments is checked before creating a proof to ensure they do not exceed the limit specified in MAX_COMMITMENTS. However, the verifier does not adequately check the length of the bit_lengths vector to ensure it is less than or equal to MAX_COMMITMENTS before verification.","//! Errors related to proving and verifying proofs. use {     crate::{         encryption::elgamal::ElGamalError,         range_proof::errors::{RangeProofGenerationError, RangeProofVerificationError},         sigma_proofs::errors::*,     },     thiserror::Error, }; #[derive(Error, Clone, Debug, Eq, PartialEq)] pub enum ProofGenerationError {     #[error(""not enough funds in account"")]     NotEnoughFunds,     #[error(""transfer fee calculation error"")]     FeeCalculation,     #[error(""illegal number of commitments"")]     IllegalCommitmentLength,     #[error(""illegal amount bit length"")]     IllegalAmountBitLength,     #[error(""invalid commitment"")]     InvalidCommitment,     #[error(""range proof generation failed"")]     RangeProof(#[from] RangeProofGenerationError),     #[error(""unexpected proof length"")]     ProofLength, } #[derive(Error, Clone, Debug, Eq, PartialEq)] pub enum ProofVerificationError {     #[error(""range proof verification failed"")]     RangeProof(#[from] RangeProofVerificationError),     #[error(""sigma proof verification failed"")]     SigmaProof(SigmaProofType, SigmaProofVerificationError),     #[error(""ElGamal ciphertext or public key error"")]     ElGamal(#[from] ElGamalError),     #[error(""Invalid proof context"")]     ProofContext, }  #[derive(Clone, Debug, Eq, PartialEq)]                                                          Expand Down              pub enum SigmaProofType {     EqualityProof,     ValidityProof,     ZeroBalanceProof,     FeeSigmaProof,     PubkeyValidityProof, } #[derive(Error, Clone, Debug, Eq, PartialEq)] pub enum TranscriptError {     #[error(""point is the identity"")]     ValidationError, } impl From<EqualityProofVerificationError> for ProofVerificationError {     fn from(err: EqualityProofVerificationError) -> Self {         Self::SigmaProof(SigmaProofType::EqualityProof, err.0)     } } impl From<FeeSigmaProofVerificationError> for ProofVerificationError {     fn from(err: FeeSigmaProofVerificationError) -> Self {         Self::SigmaProof(SigmaProofType::FeeSigmaProof, err.0)     } } impl From<ZeroBalanceProofVerificationError> for ProofVerificationError {     fn from(err: ZeroBalanceProofVerificationError) -> Self {         Self::SigmaProof(SigmaProofType::ZeroBalanceProof, err.0)     } } impl From<ValidityProofVerificationError> for ProofVerificationError {     fn from(err: ValidityProofVerificationError) -> Self {         Self::SigmaProof(SigmaProofType::ValidityProof, err.0)     } } impl From<PubkeyValidityProofVerificationError> for ProofVerificationError {     fn from(err: PubkeyValidityProofVerificationError) -> Self {         Self::SigmaProof(SigmaProofType::PubkeyValidityProof, err.0)     } }","//! Errors related to proving and verifying proofs. use {     crate::{         encryption::elgamal::ElGamalError,         range_proof::errors::{RangeProofGenerationError, RangeProofVerificationError},         sigma_proofs::errors::*,     },     thiserror::Error, }; #[derive(Error, Clone, Debug, Eq, PartialEq)] pub enum ProofGenerationError {     #[error(""not enough funds in account"")]     NotEnoughFunds,     #[error(""transfer fee calculation error"")]     FeeCalculation,     #[error(""illegal number of commitments"")]     IllegalCommitmentLength,     #[error(""illegal amount bit length"")]     IllegalAmountBitLength,     #[error(""invalid commitment"")]     InvalidCommitment,     #[error(""range proof generation failed"")]     RangeProof(#[from] RangeProofGenerationError),     #[error(""unexpected proof length"")]     ProofLength, } #[derive(Error, Clone, Debug, Eq, PartialEq)] pub enum ProofVerificationError {     #[error(""range proof verification failed"")]     RangeProof(#[from] RangeProofVerificationError),     #[error(""sigma proof verification failed"")]     SigmaProof(SigmaProofType, SigmaProofVerificationError),     #[error(""ElGamal ciphertext or public key error"")]     ElGamal(#[from] ElGamalError),     #[error(""Invalid proof context"")]     ProofContext,     #[error(""illegal commitment length"")]     IllegalCommitmentLength, }  #[derive(Clone, Debug, Eq, PartialEq)]                                                          Expand Down              pub enum SigmaProofType {     EqualityProof,     ValidityProof,     ZeroBalanceProof,     FeeSigmaProof,     PubkeyValidityProof, } #[derive(Error, Clone, Debug, Eq, PartialEq)] pub enum TranscriptError {     #[error(""point is the identity"")]     ValidationError, } impl From<EqualityProofVerificationError> for ProofVerificationError {     fn from(err: EqualityProofVerificationError) -> Self {         Self::SigmaProof(SigmaProofType::EqualityProof, err.0)     } } impl From<FeeSigmaProofVerificationError> for ProofVerificationError {     fn from(err: FeeSigmaProofVerificationError) -> Self {         Self::SigmaProof(SigmaProofType::FeeSigmaProof, err.0)     } } impl From<ZeroBalanceProofVerificationError> for ProofVerificationError {     fn from(err: ZeroBalanceProofVerificationError) -> Self {         Self::SigmaProof(SigmaProofType::ZeroBalanceProof, err.0)     } } impl From<ValidityProofVerificationError> for ProofVerificationError {     fn from(err: ValidityProofVerificationError) -> Self {         Self::SigmaProof(SigmaProofType::ValidityProof, err.0)     } } impl From<PubkeyValidityProofVerificationError> for ProofVerificationError {     fn from(err: PubkeyValidityProofVerificationError) -> Self {         Self::SigmaProof(SigmaProofType::PubkeyValidityProof, err.0)     } }",High,"Ensure to verify the length of bit_lengths, such that it is not greater than MAX_COMMITMENTS.",https://github.com/solana-labs/solana/pull/34165/commits/8bb153b550b9df07622506427387a334acc172b7,High
Sol-091,"The ONFT implementation currently lacks explicit size checks for the `compose_msg` parameter in its encoding functions. This omission could potentially lead to the creation of oversized messages, which might cause issues with cross-chain communication and Solana transaction processing. Solana imposes a maximum transaction size limit of 1232 bytes, and exceeding this size can result in failed transactions. ","pub fn encode(     send_to: [u8; 32],     amount_sd: u64,     sender: Pubkey,     compose_msg: &Option<Vec<u8>>, ) -> Vec<u8> {     if let Some(msg) = compose_msg {         let mut encoded = Vec::with_capacity(72 + msg.len()); // 32 + 8 + 32         encoded.extend_from_slice(&send_to);         encoded.extend_from_slice(&amount_sd.to_be_bytes());         encoded.extend_from_slice(sender.to_bytes().as_ref());         encoded.extend_from_slice(&msg);         encoded     } else {         let mut encoded = Vec::with_capacity(40); // 32 + 8         encoded.extend_from_slice(&send_to);         encoded.extend_from_slice(&amount_sd.to_be_bytes());         encoded     } }","pub fn encode(     send_to: [u8; 32],     amount_sd: u64,     sender: Pubkey,     compose_msg: &Option<Vec<u8>>, ) -> Result<Vec<u8>, OFTError> {     if let Some(msg) = compose_msg {         if msg.len() > MAX_MSG_SIZE {             return Err(OFTError::MessageTooLarge);         }         let mut encoded = Vec::with_capacity(72 + msg.len());         encoded.extend_from_slice(&send_to);         encoded.extend_from_slice(&amount_sd.to_be_bytes());         encoded.extend_from_slice(sender.to_bytes().as_ref());         encoded.extend_from_slice(&msg);         Ok(encoded)     } else {         let mut encoded = Vec::with_capacity(40);         encoded.extend_from_slice(&send_to);         encoded.extend_from_slice(&amount_sd.to_be_bytes());         Ok(encoded)     } }",Medium,Implement a maximum size limit for the `compose_msg` parameter to avoid oversized messages. Add a constant to enforce the limit during message composition.,https://solodit.cyfrin.io/issues/m-03-missing-size-checks-for-compose_msg-can-lead-to-oversized-messages-and-transaction-failures-shieldify-none-kanpaipandas-lzapponft-markdown,High
Sol-092,"In the swap function's buy tokens validation, the code only checks if the user's total SOL balance is sufficient for the swap amount, without considering rent exemption.This check uses `get_lamports()` which returns the total balance including the rent exemption amount. The transaction will succeed even if it depletes the account below rent exemption, causing the account to:* Enter a non-rent-exempt state * Get charged rent over time by the Solana runtime, eventually be purged if the balance is fully depleted.  ","require!(     ctx.accounts.user.get_lamports() >= exact_in_amount,     ContractError::InsufficientUserSOL, );","let rent = Rent::get()?; let min_rent = rent.minimum_balance(0); // 0 for data size since this is just a native SOL account require!(     ctx.accounts.user.get_lamports() >= exact_in_amount.checked_add(min_rent).unwrap(),     ContractError::InsufficientUserSOL, );",Low,Add a more comprehensive balance check that accounts for rent exemption:,https://solodit.cyfrin.io/issues/l-01-insufficient-sol-balance-check-ignores-rent-exemption-pashov-audit-group-none-pumpscience_2024-12-24-markdown_,Medium
Sol-093,There are no checks to ensure that the `deposit_token` matches the `allowed_token` in the `solana_vault::deposit` function. This allows an attacker to deposit any tokens and get minted USDC on the other chain. The system assumes that an allowed token is deposited every time and this assumption is wrong.,"use anchor_lang::prelude::*; use anchor_spl::{ associated_token::AssociatedToken, token::{transfer, Mint, Token, TokenAccount, Transfer}, }; use oapp::endpoint::{instructions::SendParams as EndpointSendParams, MessagingReceipt}; use crate::instructions::{ LzMessage, MsgType, VaultDepositParams, BROKER_SEED, ENFORCED_OPTIONS_SEED, OAPP_SEED, PEER_SEED, TOKEN_SEED, VAULT_AUTHORITY_SEED, }; use crate::errors::VaultError; use crate::events::{OAppSent, VaultDeposited}; use crate::state::{ AllowedBroker, AllowedToken, EnforcedOptions, OAppConfig, Peer, VaultAuthority, }; #[derive(Accounts)] #[instruction(deposit_params: DepositParams, oapp_params: OAppSendParams)] pub struct Deposit<'info> { #[account(mut)] pub user: Signer<'info>, #[account( mut, associated_token::mint = deposit_token, associated_token::authority = user )] pub user_token_account: Box<Account<'info, TokenAccount>>, #[account( mut, seeds = [VAULT_AUTHORITY_SEED], bump = vault_authority.bump, )] pub vault_authority: Box<Account<'info, VaultAuthority>>, #[account( init_if_needed, payer = user, associated_token::mint = deposit_token, associated_token::authority = vault_authority )] pub vault_token_account: Box<Account<'info, TokenAccount>>, #[account()] pub deposit_token: Box<Account<'info, Mint>>, #[account( Expand Down Expand Up @@ -111,7 +114,7 @@ impl<'info> Deposit<'info> { seeds = [ PEER_SEED, &oapp_config.key().to_bytes(), &vault_authority.dst_eid.to_be_bytes() ], bump = peer.bump )] pub peer: Box<Account<'info, Peer>>, #[account( seeds = [ ENFORCED_OPTIONS_SEED, &oapp_config.key().to_bytes(), &vault_authority.dst_eid.to_be_bytes() ], bump = enforced_options.bump )] pub enforced_options: Box<Account<'info, EnforcedOptions>>, #[account( seeds = [OAPP_SEED], bump = oapp_config.bump )] pub oapp_config: Box<Account<'info, OAppConfig>>, #[account( seeds = [BROKER_SEED, deposit_params.broker_hash.as_ref()], bump = allowed_broker.bump, constraint = allowed_broker.allowed == true @ VaultError::BrokerNotAllowed )] pub allowed_broker: Box<Account<'info, AllowedBroker>>, #[account( seeds = [TOKEN_SEED, deposit_params.token_hash.as_ref()], bump = allowed_token.bump, constraint = allowed_token.allowed == true @ VaultError::TokenNotAllowed )] pub allowed_token: Box<Account<'info, AllowedToken>>, pub token_program: Program<'info, Token>, pub associated_token_program: Program<'info, AssociatedToken>, pub system_program: Program<'info, System>, } impl<'info> Deposit<'info> { pub fn transfer_token_ctx(&self) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> { let cpi_accounts = Transfer { from: self.user_token_account.to_account_info(), to: self.vault_token_account.to_account_info(), authority: self.user.to_account_info(), }; let cpi_program = self.token_program.to_account_info(); CpiContext::new(cpi_program, cpi_accounts) } pub fn apply( ctx: &mut Context<'_, '_, '_, 'info, Deposit<'info>>, deposit_params: &DepositParams, oapp_params: &OAppSendParams, ) -> Result<MessagingReceipt> { transfer( ctx.accounts.transfer_token_ctx(), deposit_params.token_amount as u128, )?; msg!(""User deposited : {}"", deposit_params.token_amount); Expand Down ctx.accounts.vault_authority.deposit_nonce += 1; let vault_deposit_params = VaultDepositParams { account_id: deposit_params.account_id, broker_hash: deposit_params.broker_hash, user_address: deposit_params.user_address, // token_hash: deposit_params.token_hash, src_chain_id: ctx.accounts.vault_authority.sol_chain_id, token_amount: deposit_params.token_amount as u128, src_chain_deposit_nonce: ctx.accounts.vault_authority.deposit_nonce, }; emit!(Into::<VaultDeposited>::into(vault_deposit_params.clone())); let seeds = &[OAPP_SEED, &[ctx.accounts.oapp_config.bump]]; let deposit_msg = VaultDepositParams::encode(&vault_deposit_params); let lz_message = LzMessage::encode(&LzMessage { msg_type: MsgType::Deposit as u8, payload: deposit_msg, }); let options = EnforcedOptions::get_enforced_options(&ctx.accounts.enforced_options, &None); let endpoint_send_params = EndpointSendParams { dst_eid: ctx.accounts.vault_authority.dst_eid, receiver: ctx.accounts.peer.address, message: lz_message, options: options, native_fee: oapp_params.native_fee, lz_token_fee: oapp_params.lz_token_fee, }; let receipt = oapp::endpoint_cpi::send( ctx.accounts.oapp_config.endpoint_program, ctx.accounts.oapp_config.key(), ctx.remaining_accounts, seeds, endpoint_send_params, )?; emit!(OAppSent { guid: receipt.guid, dst_eid: ctx.accounts.vault_authority.dst_eid, }); Ok(receipt) } } #[derive(Debug, Clone, AnchorSerialize, AnchorDeserialize)] pub struct DepositParams { pub account_id: [u8; 32], pub broker_hash: [u8; 32], pub token_hash: [u8; 32], pub user_address: [u8; 32], pub token_amount: u64, } #[derive(Clone, AnchorSerialize, AnchorDeserialize)] pub struct OAppSendParams { pub native_fee: u64, pub lz_token_fee: u64, }","use anchor_lang::prelude::*; use anchor_spl::{ associated_token::AssociatedToken, token::{transfer, Mint, Token, TokenAccount, Transfer}, }; use oapp::endpoint::{instructions::SendParams as EndpointSendParams, MessagingReceipt}; use crate::instructions::{ LzMessage, MsgType, VaultDepositParams, BROKER_SEED, ENFORCED_OPTIONS_SEED, OAPP_SEED, PEER_SEED, TOKEN_SEED, VAULT_AUTHORITY_SEED, }; use crate::errors::VaultError; use crate::events::{OAppSent, VaultDeposited}; use crate::state::{ AllowedBroker, AllowedToken, EnforcedOptions, OAppConfig, Peer, VaultAuthority, }; #[derive(Accounts)] #[instruction(deposit_params: DepositParams, oapp_params: OAppSendParams)] pub struct Deposit<'info> { #[account(mut)] pub user: Signer<'info>, #[account( mut, associated_token::mint = deposit_token, associated_token::authority = user )] pub user_token_account: Box<Account<'info, TokenAccount>>, #[account( mut, seeds = [VAULT_AUTHORITY_SEED], bump = vault_authority.bump, )] pub vault_authority: Box<Account<'info, VaultAuthority>>, #[account( init_if_needed, payer = user, associated_token::mint = deposit_token, associated_token::authority = vault_authority )] pub vault_token_account: Box<Account<'info, TokenAccount>>, #[account( constraint = deposit_token.key() == allowed_token.mint_account @ VaultError::TokenNotAllowed, mint::token_program = token_program )] pub deposit_token: Box<Account<'info, Mint>>, #[account( Expand Down Expand Up @@ -111,7 +114,7 @@ impl<'info> Deposit<'info> { seeds = [ PEER_SEED, &oapp_config.key().to_bytes(), &vault_authority.dst_eid.to_be_bytes() ], bump = peer.bump )] pub peer: Box<Account<'info, Peer>>, #[account( seeds = [ ENFORCED_OPTIONS_SEED, &oapp_config.key().to_bytes(), &vault_authority.dst_eid.to_be_bytes() ], bump = enforced_options.bump )] pub enforced_options: Box<Account<'info, EnforcedOptions>>, #[account( seeds = [OAPP_SEED], bump = oapp_config.bump )] pub oapp_config: Box<Account<'info, OAppConfig>>, #[account( seeds = [BROKER_SEED, deposit_params.broker_hash.as_ref()], bump = allowed_broker.bump, constraint = allowed_broker.allowed == true @ VaultError::BrokerNotAllowed )] pub allowed_broker: Box<Account<'info, AllowedBroker>>, #[account( seeds = [TOKEN_SEED, deposit_params.token_hash.as_ref()], bump = allowed_token.bump, constraint = allowed_token.allowed == true @ VaultError::TokenNotAllowed )] pub allowed_token: Box<Account<'info, AllowedToken>>, pub token_program: Program<'info, Token>, pub associated_token_program: Program<'info, AssociatedToken>, pub system_program: Program<'info, System>, } impl<'info> Deposit<'info> { pub fn transfer_token_ctx(&self) -> CpiContext<'_, '_, '_, 'info, Transfer<'info>> { let cpi_accounts = Transfer { from: self.user_token_account.to_account_info(), to: self.vault_token_account.to_account_info(), authority: self.user.to_account_info(), }; let cpi_program = self.token_program.to_account_info(); CpiContext::new(cpi_program, cpi_accounts) } pub fn apply( ctx: &mut Context<'_, '_, '_, 'info, Deposit<'info>>, deposit_params: &DepositParams, oapp_params: &OAppSendParams, ) -> Result<MessagingReceipt> { transfer( ctx.accounts.transfer_token_ctx(), deposit_params.token_amount as u128, // should be u64 here )?; msg!(""User deposited : {}"", deposit_params.token_amount); Expand Down ctx.accounts.vault_authority.deposit_nonce += 1; let vault_deposit_params = VaultDepositParams { account_id: deposit_params.account_id, broker_hash: deposit_params.broker_hash, user_address: deposit_params.user_address, // token_hash: deposit_params.token_hash, src_chain_id: ctx.accounts.vault_authority.sol_chain_id, token_amount: deposit_params.token_amount as u128, src_chain_deposit_nonce: ctx.accounts.vault_authority.deposit_nonce, }; emit!(Into::<VaultDeposited>::into(vault_deposit_params.clone())); let seeds = &[OAPP_SEED, &[ctx.accounts.oapp_config.bump]]; let deposit_msg = VaultDepositParams::encode(&vault_deposit_params); let lz_message = LzMessage::encode(&LzMessage { msg_type: MsgType::Deposit as u8, payload: deposit_msg, }); let options = EnforcedOptions::get_enforced_options(&ctx.accounts.enforced_options, &None); let endpoint_send_params = EndpointSendParams { dst_eid: ctx.accounts.vault_authority.dst_eid, receiver: ctx.accounts.peer.address, message: lz_message, options: options, native_fee: oapp_params.native_fee, lz_token_fee: oapp_params.lz_token_fee, }; let receipt = oapp::endpoint_cpi::send( ctx.accounts.oapp_config.endpoint_program, ctx.accounts.oapp_config.key(), ctx.remaining_accounts, seeds, endpoint_send_params, )?; emit!(OAppSent { guid: receipt.guid, dst_eid: ctx.accounts.vault_authority.dst_eid, }); Ok(receipt) } } #[derive(Debug, Clone, AnchorSerialize, AnchorDeserialize)] pub struct DepositParams { pub account_id: [u8; 32], pub broker_hash: [u8; 32], pub token_hash: [u8; 32], pub user_address: [u8; 32], pub token_amount: u64, } #[derive(Clone, AnchorSerialize, AnchorDeserialize)] pub struct OAppSendParams { pub native_fee: u64, pub lz_token_fee: u64, }",High,"Add a new `constraint` in `deposit.rs::Deposit` struct. Update the `deposit_token` account definition in `deposit.rs` to include a `constraint` that ensures the `deposit_token` mint matches the `allowed_token.mint_account`.
",https://solodit.cyfrin.io/issues/h-1-h-1-sherlock-orderly-solana-vault-contract-git,High
Sol-094,"A malicious user can withdrawals another user's money. A shared vault authority signing mechanism will cause unauthorized withdrawals for users, as User A can withdraw funds belonging to User B. In the OAppLzReceive, the vault_authority_seeds are shared across all users, allowing any user with valid withdrawal parameters to use the same PDA signing authority. As a result, any valid withdrawal request can be signed by the vault without distinguishing which user is performing the withdrawal. Also, there is no check that the wallet receiving the funds belongs to the same user for whom the withdrawal request was initiated. The system only checks that the withdrawal message comes from a valid sender (peer.address == params.sender), but does not verify that the user account corresponds to the sender.","pub fn apply(ctx: &mut Context<OAppLzReceive>, params: &OAppLzReceiveParams) -> Result<()> {","pub fn apply(ctx: &mut Context<OAppLzReceive>, params: &OAppLzReceiveParams) -> Result<()> {",High,A check was added to oapp_lz_receive() that validates that the recipient of the withdrawal is the receiver specified in the withdrawal payload.,https://github.com/OrderlyNetwork/solana-vault/commit/a9f56db5e63562df9eb6a39803f3df12b7959032,High
Sol-095,"There is a potential vulnerability related to the settlement instructions for auctions involving the Wormhole CCTP bridge. The code assumes that the total transferable amount equals order.amount_in retrieved from the fastVAA. However, during the settlement process, it does not verify whether this amount actually matches the funds in the prepared_custody_token account. Before settling the PrepareOrderResponse, if a small amount of tokens is transferred to the prepared_custody_token account, the settlement instruction fails when attempting to close the prepared_custody_token account via token::close_account. This failure occurs because only order.amount_in is transferred from the account instead of the total balance, leaving non-zero funds in the account and causing the closure to fail.","mod cctp; pub use cctp::*; mod local; pub use local::*; use crate::{ composite::*, error::MatchingEngineError, state::{Auction, AuctionStatus, PreparedOrderResponse}, }; use anchor_lang::prelude::*; use anchor_spl::token; use common::messages::Fill; struct SettleNoneAndPrepareFill<'ctx, 'info> { prepared_order_response: &'ctx mut Account<'info, PreparedOrderResponse>, prepared_custody_token: &'ctx UncheckedAccount<'info>, auction: &'ctx mut Account<'info, Auction>, fee_recipient_token: &'ctx Account<'info, token::TokenAccount>, custodian: &'ctx CheckedCustodian<'info>, token_program: &'ctx Program<'info, token::Token>, } struct SettledNone { user_amount: u64, fill: Fill, } fn settle_none_and_prepare_fill( accounts: SettleNoneAndPrepareFill<'_, '_>, auction_bump_seed: u8, ) -> Result<SettledNone> { let SettleNoneAndPrepareFill { prepared_order_response, prepared_custody_token, auction, fee_recipient_token, custodian, token_program, } = accounts; let prepared_order_response_signer_seeds = &[ PreparedOrderResponse::SEED_PREFIX, prepared_order_response.fast_vaa_hash.as_ref(), &[prepared_order_response.bump], ]; // Pay the `fee_recipient` the base fee and init auction fee. This ensures that the protocol // relayer is paid for relaying slow VAAs (which requires posting the fast order VAA) that do // not have an associated auction. let fee = prepared_order_response .base_fee .saturating_add(prepared_order_response.init_auction_fee); token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), token::Transfer { from: prepared_custody_token.to_account_info(), to: fee_recipient_token.to_account_info(), authority: prepared_order_response.to_account_info(), }, &[prepared_order_response_signer_seeds], ), fee, )?; // Set the authority of the custody token account to the custodian. He will take over from here. token::set_authority( CpiContext::new_with_signer( token_program.to_account_info(), token::SetAuthority { current_authority: prepared_order_response.to_account_info(), account_or_mint: prepared_custody_token.to_account_info(), }, &[prepared_order_response_signer_seeds], ), token::spl_token::instruction::AuthorityType::AccountOwner, Some(custodian.key()), )?; // This is a necessary security check. This will prevent a relayer from starting an auction with // the fast transfer VAA, even though the slow relayer already delivered the slow VAA. Not // setting this could lead to trapped funds (which would require an upgrade to fix). auction.set_inner(Auction { bump: auction_bump_seed, vaa_hash: prepared_order_response.fast_vaa_hash, vaa_timestamp: prepared_order_response.fast_vaa_timestamp, target_protocol: prepared_order_response.to_endpoint.protocol, status: AuctionStatus::Settled { fee, total_penalty: None, }, info: None, }); emit!(crate::events::AuctionSettled { auction: auction.key(), best_offer_token: Default::default(), token_balance_after: fee_recipient_token.amount.saturating_add(fee), }); Ok(SettledNone { user_amount: prepared_order_response.amount_in.saturating_sub(fee), fill: Fill { source_chain: prepared_order_response.source_chain, order_sender: prepared_order_response.sender, redeemer: prepared_order_response.redeemer, redeemer_message: std::mem::take(&mut prepared_order_response.redeemer_message) .try_into() .map_err(|_| MatchingEngineError::RedeemerMessageTooLarge)?, }, }) }","mod cctp; pub use cctp::*; mod local; pub use local::*; use crate::{ composite::*, error::MatchingEngineError, state::{Auction, AuctionStatus, PreparedOrderResponse}, }; use anchor_lang::prelude::*; use anchor_spl::token; use common::messages::Fill; struct SettleNoneAndPrepareFill<'ctx, 'info> { prepared_order_response: &'ctx mut Account<'info, PreparedOrderResponse>, prepared_custody_token: &'ctx Account<'info, token::TokenAccount>, auction: &'ctx mut Account<'info, Auction>, fee_recipient_token: &'ctx Account<'info, token::TokenAccount>, custodian: &'ctx CheckedCustodian<'info>, token_program: &'ctx Program<'info, token::Token>, } struct SettledNone { user_amount: u64, fill: Fill, } fn settle_none_and_prepare_fill( accounts: SettleNoneAndPrepareFill<'_, '_>, auction_bump_seed: u8, ) -> Result<SettledNone> { let SettleNoneAndPrepareFill { prepared_order_response, prepared_custody_token, auction, fee_recipient_token, custodian, token_program, } = accounts; let prepared_order_response_signer_seeds = &[ PreparedOrderResponse::SEED_PREFIX, prepared_order_response.fast_vaa_hash.as_ref(), &[prepared_order_response.bump], ]; // Pay the `fee_recipient` the base fee and init auction fee. This ensures that the protocol // relayer is paid for relaying slow VAAs (which requires posting the fast order VAA) that do // not have an associated auction. let fee = prepared_order_response .base_fee .saturating_add(prepared_order_response.init_auction_fee); token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), token::Transfer { from: prepared_custody_token.to_account_info(), to: fee_recipient_token.to_account_info(), authority: prepared_order_response.to_account_info(), }, &[prepared_order_response_signer_seeds], ), fee, )?; // Set the authority of the custody token account to the custodian. He will take over from here. token::set_authority( CpiContext::new_with_signer( token_program.to_account_info(), token::SetAuthority { current_authority: prepared_order_response.to_account_info(), account_or_mint: prepared_custody_token.to_account_info(), }, &[prepared_order_response_signer_seeds], ), token::spl_token::instruction::AuthorityType::AccountOwner, Some(custodian.key()), )?; // This is a necessary security check. This will prevent a relayer from starting an auction with // the fast transfer VAA, even though the slow relayer already delivered the slow VAA. Not // setting this could lead to trapped funds (which would require an upgrade to fix). auction.set_inner(Auction { bump: auction_bump_seed, vaa_hash: prepared_order_response.fast_vaa_hash, vaa_timestamp: prepared_order_response.fast_vaa_timestamp, target_protocol: prepared_order_response.to_endpoint.protocol, status: AuctionStatus::Settled { fee, total_penalty: None, }, info: None, }); emit!(crate::events::AuctionSettled { auction: auction.key(), best_offer_token: Default::default(), token_balance_after: fee_recipient_token.amount.saturating_add(fee), }); Ok(SettledNone { user_amount: prepared_custody_token.amount.saturating_sub(fee), fill: Fill { source_chain: prepared_order_response.source_chain, order_sender: prepared_order_response.sender, redeemer: prepared_order_response.redeemer, redeemer_message: std::mem::take(&mut prepared_order_response.redeemer_message) .try_into() .map_err(|_| MatchingEngineError::RedeemerMessageTooLarge)?, }, }) }",High,"Instead of relying solely on order.amount_in from the fastVAA, the code should use the actual token balance in the prepared_custody_token account before attempting to close it. This ensures that all funds are accounted for, preventing non-zero balance errors when calling token::close_account.",https://github.com/wormhole-foundation/example-liquidity-layer/commit/307cc2844b6aaf33d2df11ffd7821292114536a9,High
Sol-096,"There is a potential vulnerability related to the settlement instructions for auctions involving the Wormhole CCTP bridge. The code assumes that the total transferable amount equals order.amount_in retrieved from the fastVAA. However, during the settlement process, it does not verify whether this amount actually matches the funds in the prepared_custody_token account. Before settling the PrepareOrderResponse, if a small amount of tokens is transferred to the prepared_custody_token account, the settlement instruction fails when attempting to close the prepared_custody_token account via token::close_account. This failure occurs because only order.amount_in is transferred from the account instead of the total balance, leaving non-zero funds in the account and causing the closure to fail.","use std::ops::{Deref, DerefMut}; use crate::{ error::MatchingEngineError, state::{ Auction, AuctionStatus, Custodian, FastFillSequencer, MessageProtocol, PreparedOrderResponse, ReservedFastFillSequence, RouterEndpoint, }, utils::{self, VaaDigest}, }; use anchor_lang::prelude::*; use anchor_spl::token; use common::{ admin::utils::{assistant::only_authorized, ownable::only_owner}, messages::raw::LiquidityLayerMessage, wormhole_cctp_solana::{ cctp::{message_transmitter_program, token_messenger_minter_program}, wormhole::{core_bridge_program, VaaAccount}, }, }; #[derive(Accounts)] pub struct Usdc<'info> { /// CHECK: This address must equal [USDC_MINT](common::USDC_MINT). #[account(address = common::USDC_MINT)] pub mint: UncheckedAccount<'info>, } impl<'info> Deref for Usdc<'info> { type Target = UncheckedAccount<'info>; fn deref(&self) -> &Self::Target { &self.mint } } /// Mint recipient token account, which is encoded as the mint recipient in the CCTP message. /// The CCTP Token Messenger Minter program will transfer the amount encoded in the CCTP message /// from its custody account to this account. /// /// CHECK: Mutable. Seeds must be \[""custody""\]. /// /// NOTE: This account must be encoded as the mint recipient in the CCTP message. #[derive(Accounts)] pub struct CctpMintRecipientMut<'info> { #[account( mut, address = crate::CCTP_MINT_RECIPIENT )] pub mint_recipient: Box<Account<'info, token::TokenAccount>>, } impl<'info> Deref for CctpMintRecipientMut<'info> { type Target = Account<'info, token::TokenAccount>; fn deref(&self) -> &Self::Target { &self.mint_recipient } } #[derive(Accounts)] pub struct LiquidityLayerVaa<'info> { /// CHECK: This VAA account must be a posted VAA from the Wormhole Core Bridge program. #[account( constraint = { // NOTE: This load performs an owner check. let vaa = VaaAccount::load(&vaa)?; // Is it a legitimate LL message? LiquidityLayerMessage::try_from(vaa.payload()) .map_err(|_| MatchingEngineError::InvalidVaa)?; // Done. true } )] pub vaa: UncheckedAccount<'info>, } impl<'info> LiquidityLayerVaa<'info> { pub fn load_unchecked(&self) -> VaaAccount<'_> { VaaAccount::load_unchecked(self) } } impl<'info> Deref for LiquidityLayerVaa<'info> { type Target = UncheckedAccount<'info>; fn deref(&self) -> &Self::Target { &self.vaa } } #[derive(Accounts)] pub struct CheckedCustodian<'info> { #[account( seeds = [Custodian::SEED_PREFIX], bump = Custodian::BUMP, )] pub custodian: Account<'info, Custodian>, } impl<'info> Deref for CheckedCustodian<'info> { type Target = Account<'info, Custodian>; fn deref(&self) -> &Self::Target { &self.custodian } } #[derive(Accounts)] pub struct OwnerOnly<'info> { #[account( constraint = only_owner( &custodian, &owner, error!(MatchingEngineError::OwnerOnly) )? )] pub owner: Signer<'info>, pub custodian: CheckedCustodian<'info>, } #[derive(Accounts)] pub struct OwnerOnlyMut<'info> { #[account( constraint = only_owner( &custodian, &owner, error!(MatchingEngineError::OwnerOnly) )? )] pub owner: Signer<'info>, #[account( mut, seeds = [Custodian::SEED_PREFIX], bump = Custodian::BUMP, )] pub custodian: Account<'info, Custodian>, } #[derive(Accounts)] pub struct Admin<'info> { #[account( constraint = only_authorized( &custodian, &owner_or_assistant, error!(MatchingEngineError::OwnerOrAssistantOnly) )? )] pub owner_or_assistant: Signer<'info>, pub custodian: CheckedCustodian<'info>, } #[derive(Accounts)] pub struct AdminMut<'info> { #[account( constraint = only_authorized( &custodian, &owner_or_assistant, error!(MatchingEngineError::OwnerOrAssistantOnly) )? )] pub owner_or_assistant: Signer<'info>, #[account( mut, seeds = [Custodian::SEED_PREFIX], bump = Custodian::BUMP, )] pub custodian: Account<'info, Custodian>, } #[derive(Accounts)] pub struct LocalTokenRouter<'info> { /// CHECK: Must be an executable (the Token Router program), whose ID will be used to derive the /// emitter (router endpoint) address. #[account(executable)] pub token_router_program: UncheckedAccount<'info>, /// CHECK: The Token Router program's emitter PDA (a.k.a. its custodian) will have account data. #[account( seeds = [b""emitter""], bump, seeds::program = token_router_program, owner = token_router_program.key() @ MatchingEngineError::InvalidEndpoint, constraint = !token_router_emitter.data_is_empty() @ MatchingEngineError::InvalidEndpoint, )] pub token_router_emitter: UncheckedAccount<'info>, #[account( associated_token::mint = common::USDC_MINT, associated_token::authority = token_router_emitter, )] pub token_router_mint_recipient: Account<'info, token::TokenAccount>, } #[derive(Accounts)] pub struct ExistingMutRouterEndpoint<'info> { #[account( mut, seeds = [ RouterEndpoint::SEED_PREFIX, &endpoint.chain.to_be_bytes() ], bump = endpoint.bump, )] pub endpoint: Account<'info, RouterEndpoint>, } impl<'info> Deref for ExistingMutRouterEndpoint<'info> { type Target = Account<'info, RouterEndpoint>; fn deref(&self) -> &Self::Target { &self.endpoint } } impl<'info> DerefMut for ExistingMutRouterEndpoint<'info> { fn deref_mut(&mut self) -> &mut Self::Target { &mut self.endpoint } } #[derive(Accounts)] pub struct LiveRouterEndpoint<'info> { #[account( seeds = [ RouterEndpoint::SEED_PREFIX, &endpoint.chain.to_be_bytes() ], bump = endpoint.bump, constraint = { endpoint.protocol != MessageProtocol::None } @ MatchingEngineError::EndpointDisabled, )] pub endpoint: Box<Account<'info, RouterEndpoint>>, } impl<'info> Deref for LiveRouterEndpoint<'info> { type Target = Account<'info, RouterEndpoint>; fn deref(&self) -> &Self::Target { &self.endpoint } } #[derive(Accounts)] pub struct LiveRouterPath<'info> { pub from_endpoint: LiveRouterEndpoint<'info>, #[account( constraint = from_endpoint.chain != to_endpoint.chain @ MatchingEngineError::SameEndpoint )] pub to_endpoint: LiveRouterEndpoint<'info>, } #[derive(Accounts)] pub struct FastOrderPath<'info> { #[account( constraint = { let vaa = fast_vaa.load_unchecked(); require_eq!( path.from_endpoint.chain, vaa.emitter_chain(), MatchingEngineError::InvalidSourceRouter ); require!( path.from_endpoint.address == vaa.emitter_address(), MatchingEngineError::InvalidSourceRouter ); let message = LiquidityLayerMessage::try_from(vaa.payload()).unwrap(); let order = message .fast_market_order() .ok_or(MatchingEngineError::NotFastMarketOrder)?; require_eq!( path.to_endpoint.chain, order.target_chain(), MatchingEngineError::InvalidTargetRouter ); true } )] pub fast_vaa: LiquidityLayerVaa<'info>, pub path: LiveRouterPath<'info>, } impl<'info> Deref for FastOrderPath<'info> { type Target = LiveRouterPath<'info>; fn deref(&self) -> &Self::Target { &self.path } } #[derive(Accounts)] pub struct ActiveAuction<'info> { #[account( mut, seeds = [ Auction::SEED_PREFIX, auction.vaa_hash.as_ref(), ], bump = auction.bump, constraint = matches!(auction.status, AuctionStatus::Active) @ MatchingEngineError::AuctionNotActive, )] pub auction: Box<Account<'info, Auction>>, #[account( mut, seeds = [ crate::AUCTION_CUSTODY_TOKEN_SEED_PREFIX, auction.key().as_ref(), ], bump = auction.info.as_ref().unwrap().custody_token_bump, )] pub custody_token: Account<'info, anchor_spl::token::TokenAccount>, #[account( constraint = { require_eq!( auction.info.as_ref().unwrap().config_id, config.id, MatchingEngineError::AuctionConfigMismatch ); true }, )] pub config: Account<'info, crate::state::AuctionConfig>, /// CHECK: Mutable. Must have the same key in auction data. #[account( mut, address = auction.info.as_ref().unwrap().best_offer_token, )] pub best_offer_token: UncheckedAccount<'info>, } impl<'info> VaaDigest for ActiveAuction<'info> { fn digest(&self) -> [u8; 32] { self.auction.vaa_hash } } impl<'info> Deref for ActiveAuction<'info> { type Target = Account<'info, Auction>; fn deref(&self) -> &Self::Target { &self.auction } } impl<'info> DerefMut for ActiveAuction<'info> { fn deref_mut(&mut self) -> &mut Self::Target { &mut self.auction } } #[derive(Accounts)] pub struct ExecuteOrder<'info> { /// CHECK: Must be owned by the Wormhole Core Bridge program. #[account( constraint = utils::require_vaa_hash_equals(&active_auction, &fast_vaa.load_unchecked())? )] pub fast_vaa: LiquidityLayerVaa<'info>, #[account( constraint = { let info = active_auction.info.as_ref().unwrap(); require!( !info.within_auction_duration(&active_auction.config), MatchingEngineError::AuctionPeriodNotExpired ); true } )] pub active_auction: ActiveAuction<'info>, /// CHECK: Must be a token account, whose mint is [common::USDC_MINT]. #[account(mut)] pub executor_token: UncheckedAccount<'info>, /// CHECK: Mutable. Must equal [initial_offer](Auction::initial_offer). #[account( Expand Down mut, address = active_auction.info.as_ref().unwrap().initial_offer_token, )] pub initial_offer_token: UncheckedAccount<'info>, /// CHECK: Must be the owner of initial offer token account. If the initial offer token account /// does not exist anymore, we will attempt to perform this check. #[account(mut)] pub initial_participant: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct WormholePublishMessage<'info> { /// CHECK: Seeds must be \[""Bridge""\] (Wormhole Core Bridge program). #[account(mut)] pub config: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""Sequence""\, custodian] (Wormhole Core Bridge program). #[account(mut)] pub emitter_sequence: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""fee_collector""\] (Wormhole Core Bridge program). #[account(mut)] pub fee_collector: UncheckedAccount<'info>, /// CHECK: Must equal Wormhole Core Bridge program ID. #[account(address = core_bridge_program::id())] pub core_bridge_program: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct CctpDepositForBurn<'info> { /// Circle-supported mint. /// /// CHECK: Mutable. This token account's mint must be the same as the one found in the CCTP /// Token Messenger Minter program's local token account. #[account(mut)] pub mint: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""sender_authority""\] (CCTP Token Messenger Minter program). pub token_messenger_minter_sender_authority: UncheckedAccount<'info>, /// CHECK: Mutable. Seeds must be \[""message_transmitter""\] (CCTP Message Transmitter program). #[account(mut)] pub message_transmitter_config: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_messenger""\] (CCTP Token Messenger Minter program). pub token_messenger: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""remote_token_messenger""\, remote_domain.to_string()] (CCTP Token /// Messenger Minter program). pub remote_token_messenger: UncheckedAccount<'info>, /// CHECK Seeds must be \[""token_minter""\] (CCTP Token Messenger Minter program). pub token_minter: UncheckedAccount<'info>, /// Local token account, which this program uses to validate the `mint` used to burn. /// /// CHECK: Mutable. Seeds must be \[""local_token"", mint\] (CCTP Token Messenger Minter program). #[account(mut)] pub local_token: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""__event_authority""\] (CCTP Token Messenger Minter program). pub token_messenger_minter_event_authority: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Token Messenger Minter program ID. #[account(address = token_messenger_minter_program::id())] pub token_messenger_minter_program: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Message Transmitter program ID. #[account(address = message_transmitter_program::id())] pub message_transmitter_program: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct CctpReceiveMessage<'info> { pub mint_recipient: CctpMintRecipientMut<'info>, /// CHECK: Seeds must be \[""message_transmitter_authority""\] (CCTP Message Transmitter program). pub message_transmitter_authority: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""message_transmitter""\] (CCTP Message Transmitter program). pub message_transmitter_config: UncheckedAccount<'info>, /// CHECK: Mutable. Seeds must be \[""used_nonces"", remote_domain.to_string(), /// first_nonce.to_string()\] (CCTP Message Transmitter program). #[account(mut)] pub used_nonces: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""__event_authority""\] (CCTP Message Transmitter program)). pub message_transmitter_event_authority: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_messenger""\] (CCTP Token Messenger Minter program). pub token_messenger: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""remote_token_messenger""\, remote_domain.to_string()] (CCTP Token /// Messenger Minter program). pub remote_token_messenger: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_minter""\] (CCTP Token Messenger Minter program). pub token_minter: UncheckedAccount<'info>, /// Token Messenger Minter's Local Token account. This program uses the mint of this account to /// validate the `mint_recipient` token account's mint. /// /// CHECK: Mutable. Seeds must be \[""local_token"", mint\] (CCTP Token Messenger Minter program). #[account(mut)] pub local_token: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_pair"", remote_domain.to_string(), remote_token_address\] (CCTP /// Token Messenger Minter program). pub token_pair: UncheckedAccount<'info>, /// CHECK: Mutable. Seeds must be \[""custody"", mint\] (CCTP Token Messenger Minter program). #[account(mut)] pub token_messenger_minter_custody_token: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""__event_authority""\] (CCTP Token Messenger Minter program). pub token_messenger_minter_event_authority: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Token Messenger Minter program ID. #[account(address = token_messenger_minter_program::id())] pub token_messenger_minter_program: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Message Transmitter program ID. #[account(address = message_transmitter_program::id())] pub message_transmitter_program: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct ClosePreparedOrderResponse<'info> { /// CHECK: Must equal the prepared_by field in the prepared order response. #[account( mut, address = order_response.prepared_by, )] pub by: UncheckedAccount<'info>, #[account( mut, close = by, seeds = [ PreparedOrderResponse::SEED_PREFIX, order_response.seeds.fast_vaa_hash.as_ref() ], bump = order_response.seeds.bump, )] pub order_response: Box<Account<'info, PreparedOrderResponse>>, /// CHECK: Seeds must be \[""prepared-custody""\, prepared_order_response.key()]. #[account( mut, seeds = [ crate::PREPARED_CUSTODY_TOKEN_SEED_PREFIX, order_response.key().as_ref(), ], bump, )] pub custody_token: Box<Account<'info, token::TokenAccount>>, } impl<'info> VaaDigest for ClosePreparedOrderResponse<'info> { fn digest(&self) -> [u8; 32] { self.order_response.seeds.fast_vaa_hash } } #[derive(Accounts)] pub struct ReserveFastFillSequence<'info> { #[account(mut)] payer: Signer<'info>, pub fast_order_path: FastOrderPath<'info>, /// This sequencer determines the next reserved sequence. If it does not exist for a given /// source chain and sender, it will be created. /// /// Auction participants may want to consider pricing the creation of this account into their /// offer prices by checking whether this sequencer already exists for those orders destined for /// Solana. #[account( init_if_needed, payer = payer, space = 8 + FastFillSequencer::INIT_SPACE, seeds = [ FastFillSequencer::SEED_PREFIX, &fast_order_path.fast_vaa.load_unchecked().emitter_chain().to_be_bytes(), &{ let vaa = fast_order_path.fast_vaa.load_unchecked(); LiquidityLayerMessage::try_from(vaa.payload()) .unwrap() .to_fast_market_order_unchecked().sender() }, ], bump, )] pub sequencer: Box<Account<'info, FastFillSequencer>>, /// This account will be used to determine the sequence of the next fast fill. When a local /// order is executed or an non-existent auction is settled, this account will be closed. #[account( init, payer = payer, space = 8 + ReservedFastFillSequence::INIT_SPACE, seeds = [ ReservedFastFillSequence::SEED_PREFIX, fast_order_path.fast_vaa.load_unchecked().digest().as_ref(), ], bump, )] pub reserved: Box<Account<'info, ReservedFastFillSequence>>, /// CHECK: This auction account may not exist. If it does not exist, the prepared order response /// must have been created by this point. Otherwise the auction account must reflect a completed /// auction. #[account( init_if_needed, payer = payer, space = if auction.data_is_empty() { 8 + Auction::INIT_SPACE_NO_AUCTION } else { auction.data_len() }, seeds = [ Auction::SEED_PREFIX, fast_order_path.fast_vaa.load_unchecked().digest().as_ref(), ], bump, constraint = match &auction.info { Some(info) => { // Verify that the auction is active. require_eq!( &auction.status, &AuctionStatus::Active, MatchingEngineError::AuctionNotActive ); // Out of paranoia, check that the auction is for a local fill. require!( matches!(auction.target_protocol, MessageProtocol::Local { .. }), MatchingEngineError::InvalidTargetRouter ); true }, None => { // This check makes sure that the auction account did not exist before this // instruction was called. require!( auction.vaa_hash == [0; 32], MatchingEngineError::AuctionExists, ); true } }, )] pub auction: Account<'info, Auction>, system_program: Program<'info, System>, } /// NOTE: Keep this at the end in case Wormhole removes the need for these accounts. #[derive(Accounts)] pub struct RequiredSysvars<'info> { /// Wormhole Core Bridge needs the clock sysvar based on its legacy implementation. /// /// CHECK: Must equal clock ID. #[account(address = solana_program::sysvar::clock::id())] pub clock: UncheckedAccount<'info>, /// Wormhole Core Bridge needs the rent sysvar based on its legacy implementation. /// /// CHECK: Must equal rent ID. #[account(address = solana_program::sysvar::rent::id())] pub rent: UncheckedAccount<'info>, }","use std::ops::{Deref, DerefMut}; use crate::{ error::MatchingEngineError, state::{ Auction, AuctionStatus, Custodian, FastFillSequencer, MessageProtocol, PreparedOrderResponse, ReservedFastFillSequence, RouterEndpoint, }, utils::{self, VaaDigest}, }; use anchor_lang::prelude::*; use anchor_spl::token; use common::{ admin::utils::{assistant::only_authorized, ownable::only_owner}, messages::raw::LiquidityLayerMessage, wormhole_cctp_solana::{ cctp::{message_transmitter_program, token_messenger_minter_program}, wormhole::{core_bridge_program, VaaAccount}, }, }; #[derive(Accounts)] pub struct Usdc<'info> { /// CHECK: This address must equal [USDC_MINT](common::USDC_MINT). #[account(address = common::USDC_MINT)] pub mint: UncheckedAccount<'info>, } impl<'info> Deref for Usdc<'info> { type Target = UncheckedAccount<'info>; fn deref(&self) -> &Self::Target { &self.mint } } /// Mint recipient token account, which is encoded as the mint recipient in the CCTP message. /// The CCTP Token Messenger Minter program will transfer the amount encoded in the CCTP message /// from its custody account to this account. /// /// CHECK: Mutable. Seeds must be \[""custody""\]. /// /// NOTE: This account must be encoded as the mint recipient in the CCTP message. #[derive(Accounts)] pub struct CctpMintRecipientMut<'info> { #[account( mut, address = crate::CCTP_MINT_RECIPIENT )] pub mint_recipient: Box<Account<'info, token::TokenAccount>>, } impl<'info> Deref for CctpMintRecipientMut<'info> { type Target = Account<'info, token::TokenAccount>; fn deref(&self) -> &Self::Target { &self.mint_recipient } } #[derive(Accounts)] pub struct LiquidityLayerVaa<'info> { /// CHECK: This VAA account must be a posted VAA from the Wormhole Core Bridge program. #[account( constraint = { // NOTE: This load performs an owner check. let vaa = VaaAccount::load(&vaa)?; // Is it a legitimate LL message? LiquidityLayerMessage::try_from(vaa.payload()) .map_err(|_| MatchingEngineError::InvalidVaa)?; // Done. true } )] pub vaa: UncheckedAccount<'info>, } impl<'info> LiquidityLayerVaa<'info> { pub fn load_unchecked(&self) -> VaaAccount<'_> { VaaAccount::load_unchecked(self) } } impl<'info> Deref for LiquidityLayerVaa<'info> { type Target = UncheckedAccount<'info>; fn deref(&self) -> &Self::Target { &self.vaa } } #[derive(Accounts)] pub struct CheckedCustodian<'info> { #[account( seeds = [Custodian::SEED_PREFIX], bump = Custodian::BUMP, )] pub custodian: Account<'info, Custodian>, } impl<'info> Deref for CheckedCustodian<'info> { type Target = Account<'info, Custodian>; fn deref(&self) -> &Self::Target { &self.custodian } } #[derive(Accounts)] pub struct OwnerOnly<'info> { #[account( constraint = only_owner( &custodian, &owner, error!(MatchingEngineError::OwnerOnly) )? )] pub owner: Signer<'info>, pub custodian: CheckedCustodian<'info>, } #[derive(Accounts)] pub struct OwnerOnlyMut<'info> { #[account( constraint = only_owner( &custodian, &owner, error!(MatchingEngineError::OwnerOnly) )? )] pub owner: Signer<'info>, #[account( mut, seeds = [Custodian::SEED_PREFIX], bump = Custodian::BUMP, )] pub custodian: Account<'info, Custodian>, } #[derive(Accounts)] pub struct Admin<'info> { #[account( constraint = only_authorized( &custodian, &owner_or_assistant, error!(MatchingEngineError::OwnerOrAssistantOnly) )? )] pub owner_or_assistant: Signer<'info>, pub custodian: CheckedCustodian<'info>, } #[derive(Accounts)] pub struct AdminMut<'info> { #[account( constraint = only_authorized( &custodian, &owner_or_assistant, error!(MatchingEngineError::OwnerOrAssistantOnly) )? )] pub owner_or_assistant: Signer<'info>, #[account( mut, seeds = [Custodian::SEED_PREFIX], bump = Custodian::BUMP, )] pub custodian: Account<'info, Custodian>, } #[derive(Accounts)] pub struct LocalTokenRouter<'info> { /// CHECK: Must be an executable (the Token Router program), whose ID will be used to derive the /// emitter (router endpoint) address. #[account(executable)] pub token_router_program: UncheckedAccount<'info>, /// CHECK: The Token Router program's emitter PDA (a.k.a. its custodian) will have account data. #[account( seeds = [b""emitter""], bump, seeds::program = token_router_program, owner = token_router_program.key() @ MatchingEngineError::InvalidEndpoint, constraint = !token_router_emitter.data_is_empty() @ MatchingEngineError::InvalidEndpoint, )] pub token_router_emitter: UncheckedAccount<'info>, #[account( associated_token::mint = common::USDC_MINT, associated_token::authority = token_router_emitter, )] pub token_router_mint_recipient: Account<'info, token::TokenAccount>, } #[derive(Accounts)] pub struct ExistingMutRouterEndpoint<'info> { #[account( mut, seeds = [ RouterEndpoint::SEED_PREFIX, &endpoint.chain.to_be_bytes() ], bump = endpoint.bump, )] pub endpoint: Account<'info, RouterEndpoint>, } impl<'info> Deref for ExistingMutRouterEndpoint<'info> { type Target = Account<'info, RouterEndpoint>; fn deref(&self) -> &Self::Target { &self.endpoint } } impl<'info> DerefMut for ExistingMutRouterEndpoint<'info> { fn deref_mut(&mut self) -> &mut Self::Target { &mut self.endpoint } } #[derive(Accounts)] pub struct LiveRouterEndpoint<'info> { #[account( seeds = [ RouterEndpoint::SEED_PREFIX, &endpoint.chain.to_be_bytes() ], bump = endpoint.bump, constraint = { endpoint.protocol != MessageProtocol::None } @ MatchingEngineError::EndpointDisabled, )] pub endpoint: Box<Account<'info, RouterEndpoint>>, } impl<'info> Deref for LiveRouterEndpoint<'info> { type Target = Account<'info, RouterEndpoint>; fn deref(&self) -> &Self::Target { &self.endpoint } } #[derive(Accounts)] pub struct LiveRouterPath<'info> { pub from_endpoint: LiveRouterEndpoint<'info>, #[account( constraint = from_endpoint.chain != to_endpoint.chain @ MatchingEngineError::SameEndpoint )] pub to_endpoint: LiveRouterEndpoint<'info>, } #[derive(Accounts)] pub struct FastOrderPath<'info> { #[account( constraint = { let vaa = fast_vaa.load_unchecked(); require_eq!( path.from_endpoint.chain, vaa.emitter_chain(), MatchingEngineError::InvalidSourceRouter ); require!( path.from_endpoint.address == vaa.emitter_address(), MatchingEngineError::InvalidSourceRouter ); let message = LiquidityLayerMessage::try_from(vaa.payload()).unwrap(); let order = message .fast_market_order() .ok_or(MatchingEngineError::NotFastMarketOrder)?; require_eq!( path.to_endpoint.chain, order.target_chain(), MatchingEngineError::InvalidTargetRouter ); true } )] pub fast_vaa: LiquidityLayerVaa<'info>, pub path: LiveRouterPath<'info>, } impl<'info> Deref for FastOrderPath<'info> { type Target = LiveRouterPath<'info>; fn deref(&self) -> &Self::Target { &self.path } } #[derive(Accounts)] pub struct ActiveAuction<'info> { #[account( mut, seeds = [ Auction::SEED_PREFIX, auction.vaa_hash.as_ref(), ], bump = auction.bump, constraint = matches!(auction.status, AuctionStatus::Active) @ MatchingEngineError::AuctionNotActive, )] pub auction: Box<Account<'info, Auction>>, #[account( mut, seeds = [ crate::AUCTION_CUSTODY_TOKEN_SEED_PREFIX, auction.key().as_ref(), ], bump = auction.info.as_ref().unwrap().custody_token_bump, )] pub custody_token: Account<'info, anchor_spl::token::TokenAccount>, #[account( constraint = { require_eq!( auction.info.as_ref().unwrap().config_id, config.id, MatchingEngineError::AuctionConfigMismatch ); true }, )] pub config: Account<'info, crate::state::AuctionConfig>, /// CHECK: Mutable. Must have the same key in auction data. #[account( mut, address = auction.info.as_ref().unwrap().best_offer_token, )] pub best_offer_token: UncheckedAccount<'info>, } impl<'info> VaaDigest for ActiveAuction<'info> { fn digest(&self) -> [u8; 32] { self.auction.vaa_hash } } impl<'info> Deref for ActiveAuction<'info> { type Target = Account<'info, Auction>; fn deref(&self) -> &Self::Target { &self.auction } } impl<'info> DerefMut for ActiveAuction<'info> { fn deref_mut(&mut self) -> &mut Self::Target { &mut self.auction } } #[derive(Accounts)] pub struct ExecuteOrder<'info> { /// CHECK: Must be owned by the Wormhole Core Bridge program. #[account( constraint = utils::require_vaa_hash_equals(&active_auction, &fast_vaa.load_unchecked())? )] pub fast_vaa: LiquidityLayerVaa<'info>, #[account( constraint = { let info = active_auction.info.as_ref().unwrap(); require!( !info.within_auction_duration(&active_auction.config), MatchingEngineError::AuctionPeriodNotExpired ); true } )] pub active_auction: ActiveAuction<'info>, /// Must be a token account, whose mint is [common::USDC_MINT]. #[account( mut, token::mint = common::USDC_MINT, )] pub executor_token: Box<Account<'info, token::TokenAccount>>, /// CHECK: Mutable. Must equal [initial_offer](Auction::initial_offer). #[account( Expand Down mut, address = active_auction.info.as_ref().unwrap().initial_offer_token, )] pub initial_offer_token: UncheckedAccount<'info>, /// CHECK: Must be the owner of initial offer token account. If the initial offer token account /// does not exist anymore, we will attempt to perform this check. #[account(mut)] pub initial_participant: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct WormholePublishMessage<'info> { /// CHECK: Seeds must be \[""Bridge""\] (Wormhole Core Bridge program). #[account(mut)] pub config: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""Sequence""\, custodian] (Wormhole Core Bridge program). #[account(mut)] pub emitter_sequence: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""fee_collector""\] (Wormhole Core Bridge program). #[account(mut)] pub fee_collector: UncheckedAccount<'info>, /// CHECK: Must equal Wormhole Core Bridge program ID. #[account(address = core_bridge_program::id())] pub core_bridge_program: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct CctpDepositForBurn<'info> { /// Circle-supported mint. /// /// CHECK: Mutable. This token account's mint must be the same as the one found in the CCTP /// Token Messenger Minter program's local token account. #[account(mut)] pub mint: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""sender_authority""\] (CCTP Token Messenger Minter program). pub token_messenger_minter_sender_authority: UncheckedAccount<'info>, /// CHECK: Mutable. Seeds must be \[""message_transmitter""\] (CCTP Message Transmitter program). #[account(mut)] pub message_transmitter_config: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_messenger""\] (CCTP Token Messenger Minter program). pub token_messenger: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""remote_token_messenger""\, remote_domain.to_string()] (CCTP Token /// Messenger Minter program). pub remote_token_messenger: UncheckedAccount<'info>, /// CHECK Seeds must be \[""token_minter""\] (CCTP Token Messenger Minter program). pub token_minter: UncheckedAccount<'info>, /// Local token account, which this program uses to validate the `mint` used to burn. /// /// CHECK: Mutable. Seeds must be \[""local_token"", mint\] (CCTP Token Messenger Minter program). #[account(mut)] pub local_token: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""__event_authority""\] (CCTP Token Messenger Minter program). pub token_messenger_minter_event_authority: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Token Messenger Minter program ID. #[account(address = token_messenger_minter_program::id())] pub token_messenger_minter_program: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Message Transmitter program ID. #[account(address = message_transmitter_program::id())] pub message_transmitter_program: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct CctpReceiveMessage<'info> { pub mint_recipient: CctpMintRecipientMut<'info>, /// CHECK: Seeds must be \[""message_transmitter_authority""\] (CCTP Message Transmitter program). pub message_transmitter_authority: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""message_transmitter""\] (CCTP Message Transmitter program). pub message_transmitter_config: UncheckedAccount<'info>, /// CHECK: Mutable. Seeds must be \[""used_nonces"", remote_domain.to_string(), /// first_nonce.to_string()\] (CCTP Message Transmitter program). #[account(mut)] pub used_nonces: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""__event_authority""\] (CCTP Message Transmitter program)). pub message_transmitter_event_authority: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_messenger""\] (CCTP Token Messenger Minter program). pub token_messenger: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""remote_token_messenger""\, remote_domain.to_string()] (CCTP Token /// Messenger Minter program). pub remote_token_messenger: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_minter""\] (CCTP Token Messenger Minter program). pub token_minter: UncheckedAccount<'info>, /// Token Messenger Minter's Local Token account. This program uses the mint of this account to /// validate the `mint_recipient` token account's mint. /// /// CHECK: Mutable. Seeds must be \[""local_token"", mint\] (CCTP Token Messenger Minter program). #[account(mut)] pub local_token: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_pair"", remote_domain.to_string(), remote_token_address\] (CCTP /// Token Messenger Minter program). pub token_pair: UncheckedAccount<'info>, /// CHECK: Mutable. Seeds must be \[""custody"", mint\] (CCTP Token Messenger Minter program). #[account(mut)] pub token_messenger_minter_custody_token: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""__event_authority""\] (CCTP Token Messenger Minter program). pub token_messenger_minter_event_authority: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Token Messenger Minter program ID. #[account(address = token_messenger_minter_program::id())] pub token_messenger_minter_program: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Message Transmitter program ID. #[account(address = message_transmitter_program::id())] pub message_transmitter_program: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct ClosePreparedOrderResponse<'info> { /// CHECK: Must equal the prepared_by field in the prepared order response. #[account( mut, address = order_response.prepared_by, )] pub by: UncheckedAccount<'info>, #[account( mut, close = by, seeds = [ PreparedOrderResponse::SEED_PREFIX, order_response.seeds.fast_vaa_hash.as_ref() ], bump = order_response.seeds.bump, )] pub order_response: Box<Account<'info, PreparedOrderResponse>>, /// CHECK: Seeds must be \[""prepared-custody""\, prepared_order_response.key()]. #[account( mut, seeds = [ crate::PREPARED_CUSTODY_TOKEN_SEED_PREFIX, order_response.key().as_ref(), ], bump, )] pub custody_token: Box<Account<'info, token::TokenAccount>>, } impl<'info> VaaDigest for ClosePreparedOrderResponse<'info> { fn digest(&self) -> [u8; 32] { self.order_response.seeds.fast_vaa_hash } } #[derive(Accounts)] pub struct ReserveFastFillSequence<'info> { #[account(mut)] payer: Signer<'info>, pub fast_order_path: FastOrderPath<'info>, /// This sequencer determines the next reserved sequence. If it does not exist for a given /// source chain and sender, it will be created. /// /// Auction participants may want to consider pricing the creation of this account into their /// offer prices by checking whether this sequencer already exists for those orders destined for /// Solana. #[account( init_if_needed, payer = payer, space = 8 + FastFillSequencer::INIT_SPACE, seeds = [ FastFillSequencer::SEED_PREFIX, &fast_order_path.fast_vaa.load_unchecked().emitter_chain().to_be_bytes(), &{ let vaa = fast_order_path.fast_vaa.load_unchecked(); LiquidityLayerMessage::try_from(vaa.payload()) .unwrap() .to_fast_market_order_unchecked().sender() }, ], bump, )] pub sequencer: Box<Account<'info, FastFillSequencer>>, /// This account will be used to determine the sequence of the next fast fill. When a local /// order is executed or an non-existent auction is settled, this account will be closed. #[account( init, payer = payer, space = 8 + ReservedFastFillSequence::INIT_SPACE, seeds = [ ReservedFastFillSequence::SEED_PREFIX, fast_order_path.fast_vaa.load_unchecked().digest().as_ref(), ], bump, )] pub reserved: Box<Account<'info, ReservedFastFillSequence>>, /// CHECK: This auction account may not exist. If it does not exist, the prepared order response /// must have been created by this point. Otherwise the auction account must reflect a completed /// auction. #[account( init_if_needed, payer = payer, space = if auction.data_is_empty() { 8 + Auction::INIT_SPACE_NO_AUCTION } else { auction.data_len() }, seeds = [ Auction::SEED_PREFIX, fast_order_path.fast_vaa.load_unchecked().digest().as_ref(), ], bump, constraint = match &auction.info { Some(info) => { // Verify that the auction is active. require_eq!( &auction.status, &AuctionStatus::Active, MatchingEngineError::AuctionNotActive ); // Out of paranoia, check that the auction is for a local fill. require!( matches!(auction.target_protocol, MessageProtocol::Local { .. }), MatchingEngineError::InvalidTargetRouter ); true }, None => { // This check makes sure that the auction account did not exist before this // instruction was called. require!( auction.vaa_hash == [0; 32], MatchingEngineError::AuctionExists, ); true } }, )] pub auction: Account<'info, Auction>, system_program: Program<'info, System>, } /// NOTE: Keep this at the end in case Wormhole removes the need for these accounts. #[derive(Accounts)] pub struct RequiredSysvars<'info> { /// Wormhole Core Bridge needs the clock sysvar based on its legacy implementation. /// /// CHECK: Must equal clock ID. #[account(address = solana_program::sysvar::clock::id())] pub clock: UncheckedAccount<'info>, /// Wormhole Core Bridge needs the rent sysvar based on its legacy implementation. /// /// CHECK: Must equal rent ID. #[account(address = solana_program::sysvar::rent::id())] pub rent: UncheckedAccount<'info>, }",High,"Implement checks to ensure that the account is a valid token account and explicitly verify the mint for the token accounts, rather than relying solely on data_is_empty: pub fn checked_deserialize_token_account( acc_info: &AccountInfo, expected_mint: &Pubkey, ) -> Option<token::TokenAccount> { if acc_info.owner != &token::ID { None } else { let data = acc_info.try_borrow_data().ok()?; token::TokenAccount::try_deserialize(&mut &data[..]) .ok() .filter(|token_data| &token_data.mint == expected_mint && !token_data.is_frozen()) } }",https://github.com/wormhole-foundation/example-liquidity-layer/pull/188/files,High
Sol-097,"There is a potential vulnerability related to the settlement instructions for auctions involving the Wormhole CCTP bridge. The code assumes that the total transferable amount equals order.amount_in retrieved from the fastVAA. However, during the settlement process, it does not verify whether this amount actually matches the funds in the prepared_custody_token account. Before settling the PrepareOrderResponse, if a small amount of tokens is transferred to the prepared_custody_token account, the settlement instruction fails when attempting to close the prepared_custody_token account via token::close_account. This failure occurs because only order.amount_in is transferred from the account instead of the total balance, leaving non-zero funds in the account and causing the closure to fail.","mod cctp; pub use cctp::*; mod local; pub use local::*; use crate::{ composite::*, error::MatchingEngineError, state::{Auction, AuctionStatus, MessageProtocol}, utils::{self, auction::DepositPenalty}, }; use anchor_lang::prelude::*; use anchor_spl::token; use common::messages::{ raw::{LiquidityLayerMessage, MessageToVec}, Fill, }; struct PrepareFastExecution<'ctx, 'info> { execute_order: &'ctx mut ExecuteOrder<'info>, custodian: &'ctx CheckedCustodian<'info>, token_program: &'ctx Program<'info, token::Token>, } struct PreparedOrderExecution<'info> { pub user_amount: u64, pub fill: Fill, pub beneficiary: Option<AccountInfo<'info>>, } fn prepare_order_execution<'info>( accounts: PrepareFastExecution<'_, 'info>, ) -> Result<PreparedOrderExecution<'info>> { let PrepareFastExecution { execute_order, custodian, token_program, } = accounts; let auction = &mut execute_order.active_auction.auction; let fast_vaa = &execute_order.fast_vaa; let custody_token = &execute_order.active_auction.custody_token; let config = &execute_order.active_auction.config; let executor_token = &execute_order.executor_token; let best_offer_token = &execute_order.active_auction.best_offer_token; let initial_offer_token = &execute_order.initial_offer_token; let initial_participant = &execute_order.initial_participant; let vaa = fast_vaa.load_unchecked(); let order = LiquidityLayerMessage::try_from(vaa.payload()) .unwrap() .to_fast_market_order_unchecked(); let (user_amount, new_status, beneficiary) = { let auction_info = auction.info.as_ref().unwrap(); let current_slot = Clock::get().unwrap().slot; // We extend the grace period for locally executed orders. Reserving a sequence number for // the fast fill will most likely require an additional transaction, so this buffer allows // the best offer participant to perform his duty without the risk of getting slashed by // another executor. let additional_grace_period = match auction.target_protocol { MessageProtocol::Local { .. } => { crate::EXECUTE_FAST_ORDER_LOCAL_ADDITIONAL_GRACE_PERIOD.into() } _ => None, }; let DepositPenalty { penalty, user_reward, } = utils::auction::compute_deposit_penalty( config, auction_info, current_slot, additional_grace_period, ); let init_auction_fee = order.init_auction_fee(); let user_amount = auction_info .amount_in .saturating_sub(auction_info.offer_price) .saturating_sub(init_auction_fee) .saturating_add(user_reward); // Keep track of the remaining amount in the custody token account. Whatever remains will go // to the executor. let mut remaining_custodied_amount = custody_token.amount.saturating_sub(user_amount); // Offer price + security deposit was checked in placing the initial offer. let mut deposit_and_fee = auction_info .offer_price .saturating_add(auction_info.security_deposit) .saturating_sub(user_reward); let auction_signer_seeds = &[ Auction::SEED_PREFIX, auction.vaa_hash.as_ref(), &[auction.bump], ]; let penalized = penalty > 0; if penalized && best_offer_token.key() != executor_token.key() { deposit_and_fee = deposit_and_fee.saturating_sub(penalty); } let mut beneficiary = None; // If the initial offer token account doesn't exist anymore, we have nowhere to send the // init auction fee. The executor will get these funds instead. if !initial_offer_token.data_is_empty() { // Deserialize to token account to find owner. We know this is a legitimate token // account, so it is safe to borrow and unwrap here. { let mut acc_data: &[_] = &initial_offer_token.data.borrow(); let token_data = token::TokenAccount::try_deserialize(&mut acc_data).unwrap(); require_keys_eq!( token_data.owner, initial_participant.key(), ErrorCode::ConstraintTokenOwner ); beneficiary.replace(initial_participant.to_account_info()); } if best_offer_token.key() != initial_offer_token.key() { // Pay the auction initiator their fee. Expand Down Expand Up @@ -155,8 +156,8 @@ fn prepare_order_execution<'info>( token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), anchor_spl::token::Transfer { from: custody_token.to_account_info(), to: initial_offer_token.to_account_info(), authority: auction.to_account_info(), }, &[auction_signer_seeds], ), init_auction_fee, )?; // Because the initial offer token was paid this fee, we account for it here. remaining_custodied_amount = remaining_custodied_amount.saturating_sub(init_auction_fee); } else { // Add it to the reimbursement. deposit_and_fee = deposit_and_fee .checked_add(init_auction_fee) .ok_or(MatchingEngineError::U64Overflow)?; } } // Return the security deposit and the fee to the highest bidder. // if best_offer_token.key() == executor_token.key() { // If the best offer token is equal to the executor token, just send whatever remains in the // custody token account. // // NOTE: This will revert if the best offer token does not exist. But this will present // an opportunity for another executor to execute this order and take what the best Expand All @@ -177,7 +178,9 @@ fn prepare_order_execution<'info>( // offer token would have received. token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), anchor_spl::token::Transfer { from: custody_token.to_account_info(), to: best_offer_token.to_account_info(), authority: auction.to_account_info(), }, &[auction_signer_seeds], ), remaining_custodied_amount, )?; } else { // Otherwise, send the deposit and fee to the best offer token. If the best offer token // doesn't exist at this point (which would be unusual), we will reserve these funds // for the executor token. if !best_offer_token.data_is_empty() { token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), Expand Down anchor_spl::token::Transfer { from: custody_token.to_account_info(), to: best_offer_token.to_account_info(), authority: auction.to_account_info(), }, &[auction_signer_seeds], ), deposit_and_fee, )?; remaining_custodied_amount = remaining_custodied_amount.saturating_sub(deposit_and_fee); } // And pay the executor whatever remains in the auction custody token account. if remaining_custodied_amount > 0 { token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), anchor_spl::token::Transfer { from: custody_token.to_account_info(), to: executor_token.to_account_info(), authority: auction.to_account_info(), }, &[auction_signer_seeds], ), remaining_custodied_amount, )?; } } // Set the authority of the custody token account to the custodian. He will take over from // here. token::set_authority( CpiContext::new_with_signer( token_program.to_account_info(), token::SetAuthority { current_authority: auction.to_account_info(), account_or_mint: custody_token.to_account_info(), }, &[auction_signer_seeds], ), token::spl_token::instruction::AuthorityType::AccountOwner, custodian.key().into(), )?; // Emit the order executed event, which liquidators can listen to if this execution ended up // being penalized so they can collect the base fee at settlement. emit!(crate::events::OrderExecuted { auction: auction.key(), vaa: fast_vaa.key(), source_chain: auction_info.source_chain, target_protocol: auction.target_protocol, penalized, }); ( user_amount, AuctionStatus::Completed { slot: current_slot, execute_penalty: if penalized { penalty.into() } else { None }, }, beneficiary, ) }; // Set the auction status to completed. auction.status = new_status; Ok(PreparedOrderExecution { user_amount, fill: Fill { source_chain: vaa.emitter_chain(), order_sender: order.sender(), redeemer: order.redeemer(), redeemer_message: order .message_to_vec() .try_into() .map_err(|_| MatchingEngineError::RedeemerMessageTooLarge)?, }, beneficiary, }) }","mod cctp; pub use cctp::*; mod local; pub use local::*; use crate::{ composite::*, error::MatchingEngineError, state::{Auction, AuctionStatus, MessageProtocol}, utils::{self, auction::DepositPenalty}, }; use anchor_lang::prelude::*; use anchor_spl::token; use common::messages::{ raw::{LiquidityLayerMessage, MessageToVec}, Fill, }; struct PrepareFastExecution<'ctx, 'info> { execute_order: &'ctx mut ExecuteOrder<'info>, custodian: &'ctx CheckedCustodian<'info>, token_program: &'ctx Program<'info, token::Token>, } struct PreparedOrderExecution<'info> { pub user_amount: u64, pub fill: Fill, pub beneficiary: Option<AccountInfo<'info>>, } fn prepare_order_execution<'info>( accounts: PrepareFastExecution<'_, 'info>, ) -> Result<PreparedOrderExecution<'info>> { let PrepareFastExecution { execute_order, custodian, token_program, } = accounts; let auction = &mut execute_order.active_auction.auction; let fast_vaa = &execute_order.fast_vaa; let custody_token = &execute_order.active_auction.custody_token; let config = &execute_order.active_auction.config; let executor_token = &execute_order.executor_token; let best_offer_token = &execute_order.active_auction.best_offer_token; let initial_offer_token = &execute_order.initial_offer_token; let initial_participant = &execute_order.initial_participant; let vaa = fast_vaa.load_unchecked(); let order = LiquidityLayerMessage::try_from(vaa.payload()) .unwrap() .to_fast_market_order_unchecked(); let (user_amount, new_status, beneficiary) = { let auction_info = auction.info.as_ref().unwrap(); let current_slot = Clock::get().unwrap().slot; // We extend the grace period for locally executed orders. Reserving a sequence number for // the fast fill will most likely require an additional transaction, so this buffer allows // the best offer participant to perform his duty without the risk of getting slashed by // another executor. let additional_grace_period = match auction.target_protocol { MessageProtocol::Local { .. } => { crate::EXECUTE_FAST_ORDER_LOCAL_ADDITIONAL_GRACE_PERIOD.into() } _ => None, }; let DepositPenalty { penalty, user_reward, } = utils::auction::compute_deposit_penalty( config, auction_info, current_slot, additional_grace_period, ); let init_auction_fee = order.init_auction_fee(); let user_amount = auction_info .amount_in .saturating_sub(auction_info.offer_price) .saturating_sub(init_auction_fee) .saturating_add(user_reward); // Keep track of the remaining amount in the custody token account. Whatever remains will go // to the executor. let mut remaining_custodied_amount = custody_token.amount.saturating_sub(user_amount); // Offer price + security deposit was checked in placing the initial offer. let mut deposit_and_fee = auction_info .offer_price .saturating_add(auction_info.security_deposit) .saturating_sub(user_reward); let auction_signer_seeds = &[ Auction::SEED_PREFIX, auction.vaa_hash.as_ref(), &[auction.bump], ]; let penalized = penalty > 0; if penalized && best_offer_token.key() != executor_token.key() { deposit_and_fee = deposit_and_fee.saturating_sub(penalty); } let mut beneficiary = None; // If the initial offer token account doesn't exist anymore, we have nowhere to send the // init auction fee. The executor will get these funds instead. // // Deserialize to token account to find owner. We check that this is a legitimate token // account. if let Some(token_data) = utils::checked_deserialize_token_account(initial_offer_token, &custody_token.mint) { // Before setting the beneficiary to the initial participant, we need to make sure that // he is the owner of this token account. require_keys_eq!( token_data.owner, initial_participant.key(), ErrorCode::ConstraintTokenOwner ); beneficiary.replace(initial_participant.to_account_info()); if best_offer_token.key() != initial_offer_token.key() { // Pay the auction initiator their fee. Expand Down Expand Up @@ -155,8 +156,8 @@ fn prepare_order_execution<'info>( token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), anchor_spl::token::Transfer { from: custody_token.to_account_info(), to: initial_offer_token.to_account_info(), authority: auction.to_account_info(), }, &[auction_signer_seeds], ), init_auction_fee, )?; // Because the initial offer token was paid this fee, we account for it here. remaining_custodied_amount = remaining_custodied_amount.saturating_sub(init_auction_fee); } else { // Add it to the reimbursement. deposit_and_fee = deposit_and_fee .checked_add(init_auction_fee) .ok_or(MatchingEngineError::U64Overflow)?; } } // Return the security deposit and the fee to the highest bidder. // if best_offer_token.key() == executor_token.key() { // If the best offer token is equal to the executor token, just send whatever remains in // the custody token account. // // NOTE: This will revert if the best offer token does not exist. But this will present // an opportunity for another executor to execute this order and take what the best Expand All @@ -177,7 +178,9 @@ fn prepare_order_execution<'info>( // offer token would have received. token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), anchor_spl::token::Transfer { from: custody_token.to_account_info(), to: best_offer_token.to_account_info(), authority: auction.to_account_info(), }, &[auction_signer_seeds], ), remaining_custodied_amount, )?; } else { // Otherwise, send the deposit and fee to the best offer token. If the best offer token // doesn't exist at this point (which would be unusual), we will reserve these funds // for the executor token. if utils::checked_deserialize_token_account(best_offer_token, &custody_token.mint) .is_some() { token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), Expand Down anchor_spl::token::Transfer { from: custody_token.to_account_info(), to: best_offer_token.to_account_info(), authority: auction.to_account_info(), }, &[auction_signer_seeds], ), deposit_and_fee, )?; remaining_custodied_amount = remaining_custodied_amount.saturating_sub(deposit_and_fee); } // And pay the executor whatever remains in the auction custody token account. if remaining_custodied_amount > 0 { token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), anchor_spl::token::Transfer { from: custody_token.to_account_info(), to: executor_token.to_account_info(), authority: auction.to_account_info(), }, &[auction_signer_seeds], ), remaining_custodied_amount, )?; } } // Set the authority of the custody token account to the custodian. He will take over from // here. token::set_authority( CpiContext::new_with_signer( token_program.to_account_info(), token::SetAuthority { current_authority: auction.to_account_info(), account_or_mint: custody_token.to_account_info(), }, &[auction_signer_seeds], ), token::spl_token::instruction::AuthorityType::AccountOwner, custodian.key().into(), )?; // Emit the order executed event, which liquidators can listen to if this execution ended up // being penalized so they can collect the base fee at settlement. emit!(crate::events::OrderExecuted { auction: auction.key(), vaa: fast_vaa.key(), source_chain: auction_info.source_chain, target_protocol: auction.target_protocol, penalized, }); ( user_amount, AuctionStatus::Completed { slot: current_slot, execute_penalty: if penalized { penalty.into() } else { None }, }, beneficiary, ) }; // Set the auction status to completed. auction.status = new_status; Ok(PreparedOrderExecution { user_amount, fill: Fill { source_chain: vaa.emitter_chain(), order_sender: order.sender(), redeemer: order.redeemer(), redeemer_message: order .message_to_vec() .try_into() .map_err(|_| MatchingEngineError::RedeemerMessageTooLarge)?, }, beneficiary, }) }",High,"Implement checks to ensure that the account is a valid token account and explicitly verify the mint for the token accounts, rather than relying solely on data_is_empty: pub fn checked_deserialize_token_account( acc_info: &AccountInfo, expected_mint: &Pubkey, ) -> Option<token::TokenAccount> { if acc_info.owner != &token::ID { None } else { let data = acc_info.try_borrow_data().ok()?; token::TokenAccount::try_deserialize(&mut &data[..]) .ok() .filter(|token_data| &token_data.mint == expected_mint && !token_data.is_frozen()) } }",https://github.com/wormhole-foundation/example-liquidity-layer/pull/188/files,High
Sol-098,"There is a potential vulnerability related to the settlement instructions for auctions involving the Wormhole CCTP bridge. The code assumes that the total transferable amount equals order.amount_in retrieved from the fastVAA. However, during the settlement process, it does not verify whether this amount actually matches the funds in the prepared_custody_token account. Before settling the PrepareOrderResponse, if a small amount of tokens is transferred to the prepared_custody_token account, the settlement instruction fails when attempting to close the prepared_custody_token account via token::close_account. This failure occurs because only order.amount_in is transferred from the account instead of the total balance, leaving non-zero funds in the account and causing the closure to fail.","use crate::{composite::*, error::MatchingEngineError, state::Auction, utils}; use anchor_lang::prelude::*; use anchor_spl::token; use common::TRANSFER_AUTHORITY_SEED_PREFIX; #[derive(Accounts)] #[instruction(offer_price: u64)] pub struct ImproveOffer<'info> { /// The auction participant needs to set approval to this PDA. /// /// CHECK: Seeds must be \[""transfer-authority"", auction.key(), offer_price.to_be_bytes()\]. #[account( seeds = [ TRANSFER_AUTHORITY_SEED_PREFIX, active_auction.key().as_ref(), &offer_price.to_be_bytes() ], bump )] transfer_authority: UncheckedAccount<'info>, #[account( constraint = { // This is safe because we know that this is an active auction. let info = active_auction.info.as_ref().unwrap(); require!( info.within_auction_duration(&active_auction.config), MatchingEngineError::AuctionPeriodExpired ); require!( offer_price < utils::auction::compute_min_allowed_offer(&active_auction.config, info), MatchingEngineError::CarpingNotAllowed ); true } )] active_auction: ActiveAuction<'info>, #[account( constraint = { offer_token.key() != active_auction.custody_token.key() } @ MatchingEngineError::InvalidOfferToken, )] offer_token: Account<'info, token::TokenAccount>, token_program: Program<'info, token::Token>, } pub fn improve_offer(ctx: Context<ImproveOffer>, offer_price: u64) -> Result<()> { let offer_token = &ctx.accounts.offer_token; { let ActiveAuction { auction, custody_token, best_offer_token, config: _, } = &ctx.accounts.active_auction; let token_program = &ctx.accounts.token_program; // Transfer funds from the `offer_token` token account to the `best_offer_token` token account, // but only if the pubkeys are different. if offer_token.key() != best_offer_token.key() { // These operations will seem silly, but we do this as a safety measure to ensure that // nothing terrible happened with the auction's custody account. let total_deposit = ctx .accounts .active_auction .info .as_ref() .unwrap() .total_deposit(); // If the best offer token happens to be closed, we will just keep the funds in the // auction custody account. The executor token account will collect these funds when the // order is executed. if !best_offer_token.data_is_empty() { token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), Expand Down anchor_spl::token::Transfer { from: custody_token.to_account_info(), to: best_offer_token.to_account_info(), authority: auction.to_account_info(), }, &[&[ Auction::SEED_PREFIX, auction.vaa_hash.as_ref(), &[auction.bump], ]], ), total_deposit, )?; } token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), anchor_spl::token::Transfer { from: offer_token.to_account_info(), to: custody_token.to_account_info(), authority: ctx.accounts.transfer_authority.to_account_info(), }, &[&[ TRANSFER_AUTHORITY_SEED_PREFIX, auction.key().as_ref(), &offer_price.to_be_bytes(), &[ctx.bumps.transfer_authority], ]], ), total_deposit, )?; } } // Update info before we emit event. { let info = ctx.accounts.active_auction.info.as_mut().unwrap(); info.best_offer_token = offer_token.key(); info.offer_price = offer_price; } // Emit the auction updated event. { let auction = &ctx.accounts.active_auction; let config = &auction.config; let info = auction.info.as_ref().unwrap(); // Emit event for auction participants to listen to. emit!(crate::events::AuctionUpdated { config_id: info.config_id, auction: auction.key(), vaa: Default::default(), source_chain: info.source_chain, target_protocol: auction.target_protocol, redeemer_message_len: info.redeemer_message_len, end_slot: info.auction_end_slot(config), best_offer_token: offer_token.key(), token_balance_before: offer_token.amount, amount_in: info.amount_in, total_deposit: info.total_deposit(), max_offer_price_allowed: utils::auction::compute_min_allowed_offer(config, info) .checked_sub(1), }); } // Done. Ok(()) }","use crate::{composite::*, error::MatchingEngineError, state::Auction, utils}; use anchor_lang::prelude::*; use anchor_spl::token; use common::TRANSFER_AUTHORITY_SEED_PREFIX; #[derive(Accounts)] #[instruction(offer_price: u64)] pub struct ImproveOffer<'info> { /// The auction participant needs to set approval to this PDA. /// /// CHECK: Seeds must be \[""transfer-authority"", auction.key(), offer_price.to_be_bytes()\]. #[account( seeds = [ TRANSFER_AUTHORITY_SEED_PREFIX, active_auction.key().as_ref(), &offer_price.to_be_bytes() ], bump )] transfer_authority: UncheckedAccount<'info>, #[account( constraint = { // This is safe because we know that this is an active auction. let info = active_auction.info.as_ref().unwrap(); require!( info.within_auction_duration(&active_auction.config), MatchingEngineError::AuctionPeriodExpired ); require!( offer_price < utils::auction::compute_min_allowed_offer(&active_auction.config, info), MatchingEngineError::CarpingNotAllowed ); true } )] active_auction: ActiveAuction<'info>, #[account( constraint = { offer_token.key() != active_auction.custody_token.key() } @ MatchingEngineError::InvalidOfferToken, )] offer_token: Account<'info, token::TokenAccount>, token_program: Program<'info, token::Token>, } pub fn improve_offer(ctx: Context<ImproveOffer>, offer_price: u64) -> Result<()> { let offer_token = &ctx.accounts.offer_token; { let ActiveAuction { auction, custody_token, best_offer_token, config: _, } = &ctx.accounts.active_auction; let token_program = &ctx.accounts.token_program; // Transfer funds from the `offer_token` token account to the `best_offer_token` token account, // but only if the pubkeys are different. if offer_token.key() != best_offer_token.key() { // These operations will seem silly, but we do this as a safety measure to ensure that // nothing terrible happened with the auction's custody account. let total_deposit = ctx .accounts .active_auction .info .as_ref() .unwrap() .total_deposit(); // If the best offer token happens to be closed, we will just keep the funds in the // auction custody account. The executor token account will collect these funds when the // order is executed. if utils::checked_deserialize_token_account(best_offer_token, &custody_token.mint) .is_some() { token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), Expand Down anchor_spl::token::Transfer { from: custody_token.to_account_info(), to: best_offer_token.to_account_info(), authority: auction.to_account_info(), }, &[&[ Auction::SEED_PREFIX, auction.vaa_hash.as_ref(), &[auction.bump], ]], ), total_deposit, )?; } token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), anchor_spl::token::Transfer { from: offer_token.to_account_info(), to: custody_token.to_account_info(), authority: ctx.accounts.transfer_authority.to_account_info(), }, &[&[ TRANSFER_AUTHORITY_SEED_PREFIX, auction.key().as_ref(), &offer_price.to_be_bytes(), &[ctx.bumps.transfer_authority], ]], ), total_deposit, )?; } } // Update info before we emit event. { let info = ctx.accounts.active_auction.info.as_mut().unwrap(); info.best_offer_token = offer_token.key(); info.offer_price = offer_price; } // Emit the auction updated event. { let auction = &ctx.accounts.active_auction; let config = &auction.config; let info = auction.info.as_ref().unwrap(); // Emit event for auction participants to listen to. emit!(crate::events::AuctionUpdated { config_id: info.config_id, auction: auction.key(), vaa: Default::default(), source_chain: info.source_chain, target_protocol: auction.target_protocol, redeemer_message_len: info.redeemer_message_len, end_slot: info.auction_end_slot(config), best_offer_token: offer_token.key(), token_balance_before: offer_token.amount, amount_in: info.amount_in, total_deposit: info.total_deposit(), max_offer_price_allowed: utils::auction::compute_min_allowed_offer(config, info) .checked_sub(1), }); } // Done. Ok(()) }",High,"Implement checks to ensure that the account is a valid token account and explicitly verify the mint for the token accounts, rather than relying solely on data_is_empty: pub fn checked_deserialize_token_account( acc_info: &AccountInfo, expected_mint: &Pubkey, ) -> Option<token::TokenAccount> { if acc_info.owner != &token::ID { None } else { let data = acc_info.try_borrow_data().ok()?; token::TokenAccount::try_deserialize(&mut &data[..]) .ok() .filter(|token_data| &token_data.mint == expected_mint && !token_data.is_frozen()) } }",https://github.com/wormhole-foundation/example-liquidity-layer/pull/188/files,High
Sol-099,"The settle_auction_none_local function fails to verify the endpoint information within the PreparedOrderResponse account. Specifically, it does not check whether the to_endpoint field in the PreparedOrderResponse account is set to Local before proceeding with settlement on the Solana chain.","use std::ops::{Deref, DerefMut}; use crate::{ error::MatchingEngineError, state::{ Auction, AuctionStatus, Custodian, FastFillSequencer, MessageProtocol, PreparedOrderResponse, ReservedFastFillSequence, RouterEndpoint, }, utils::{self, VaaDigest}, }; use anchor_lang::prelude::*; use anchor_spl::token; use common::{ admin::utils::{assistant::only_authorized, ownable::only_owner}, messages::raw::LiquidityLayerMessage, wormhole_cctp_solana::{ cctp::{message_transmitter_program, token_messenger_minter_program}, wormhole::{core_bridge_program, VaaAccount}, }, }; #[derive(Accounts)] pub struct Usdc<'info> { /// CHECK: This address must equal [USDC_MINT](common::USDC_MINT). #[account(address = common::USDC_MINT)] pub mint: UncheckedAccount<'info>, } impl<'info> Deref for Usdc<'info> { type Target = UncheckedAccount<'info>; fn deref(&self) -> &Self::Target { &self.mint } } /// Mint recipient token account, which is encoded as the mint recipient in the CCTP message. /// The CCTP Token Messenger Minter program will transfer the amount encoded in the CCTP message /// from its custody account to this account. /// /// CHECK: Mutable. Seeds must be \[""custody""\]. /// /// NOTE: This account must be encoded as the mint recipient in the CCTP message. #[derive(Accounts)] pub struct CctpMintRecipientMut<'info> { #[account( mut, address = crate::CCTP_MINT_RECIPIENT )] pub mint_recipient: Box<Account<'info, token::TokenAccount>>, } impl<'info> Deref for CctpMintRecipientMut<'info> { type Target = Account<'info, token::TokenAccount>; fn deref(&self) -> &Self::Target { &self.mint_recipient } } #[derive(Accounts)] pub struct LiquidityLayerVaa<'info> { /// CHECK: This VAA account must be a posted VAA from the Wormhole Core Bridge program. #[account( constraint = { // NOTE: This load performs an owner check. let vaa = VaaAccount::load(&vaa)?; // Is it a legitimate LL message? LiquidityLayerMessage::try_from(vaa.payload()) .map_err(|_| MatchingEngineError::InvalidVaa)?; // Done. true } )] pub vaa: UncheckedAccount<'info>, } impl<'info> LiquidityLayerVaa<'info> { pub fn load_unchecked(&self) -> VaaAccount<'_> { VaaAccount::load_unchecked(self) } } impl<'info> Deref for LiquidityLayerVaa<'info> { type Target = UncheckedAccount<'info>; fn deref(&self) -> &Self::Target { &self.vaa } } #[derive(Accounts)] pub struct CheckedCustodian<'info> { #[account( seeds = [Custodian::SEED_PREFIX], bump = Custodian::BUMP, )] pub custodian: Account<'info, Custodian>, } impl<'info> Deref for CheckedCustodian<'info> { type Target = Account<'info, Custodian>; fn deref(&self) -> &Self::Target { &self.custodian } } #[derive(Accounts)] pub struct OwnerOnly<'info> { #[account( constraint = only_owner( &custodian, &owner, error!(MatchingEngineError::OwnerOnly) )? )] pub owner: Signer<'info>, pub custodian: CheckedCustodian<'info>, } #[derive(Accounts)] pub struct OwnerOnlyMut<'info> { #[account( constraint = only_owner( &custodian, &owner, error!(MatchingEngineError::OwnerOnly) )? )] pub owner: Signer<'info>, #[account( mut, seeds = [Custodian::SEED_PREFIX], bump = Custodian::BUMP, )] pub custodian: Account<'info, Custodian>, } #[derive(Accounts)] pub struct Admin<'info> { #[account( constraint = only_authorized( &custodian, &owner_or_assistant, error!(MatchingEngineError::OwnerOrAssistantOnly) )? )] pub owner_or_assistant: Signer<'info>, pub custodian: CheckedCustodian<'info>, } #[derive(Accounts)] pub struct AdminMut<'info> { #[account( constraint = only_authorized( &custodian, &owner_or_assistant, error!(MatchingEngineError::OwnerOrAssistantOnly) )? )] pub owner_or_assistant: Signer<'info>, #[account( mut, seeds = [Custodian::SEED_PREFIX], bump = Custodian::BUMP, )] pub custodian: Account<'info, Custodian>, } #[derive(Accounts)] pub struct LocalTokenRouter<'info> { /// CHECK: Must be an executable (the Token Router program), whose ID will be used to derive the /// emitter (router endpoint) address. #[account(executable)] pub token_router_program: UncheckedAccount<'info>, /// CHECK: The Token Router program's emitter PDA (a.k.a. its custodian) will have account data. #[account( seeds = [b""emitter""], bump, seeds::program = token_router_program, owner = token_router_program.key() @ MatchingEngineError::InvalidEndpoint, constraint = !token_router_emitter.data_is_empty() @ MatchingEngineError::InvalidEndpoint, )] pub token_router_emitter: UncheckedAccount<'info>, #[account( associated_token::mint = common::USDC_MINT, associated_token::authority = token_router_emitter, )] pub token_router_mint_recipient: Account<'info, token::TokenAccount>, } #[derive(Accounts)] pub struct ExistingMutRouterEndpoint<'info> { #[account( mut, seeds = [ RouterEndpoint::SEED_PREFIX, &endpoint.chain.to_be_bytes() ], bump = endpoint.bump, )] pub endpoint: Account<'info, RouterEndpoint>, } impl<'info> Deref for ExistingMutRouterEndpoint<'info> { type Target = Account<'info, RouterEndpoint>; fn deref(&self) -> &Self::Target { &self.endpoint } } impl<'info> DerefMut for ExistingMutRouterEndpoint<'info> { fn deref_mut(&mut self) -> &mut Self::Target { &mut self.endpoint } } #[derive(Accounts)] pub struct LiveRouterEndpoint<'info> { #[account( seeds = [ RouterEndpoint::SEED_PREFIX, &endpoint.chain.to_be_bytes() ], bump = endpoint.bump, constraint = { endpoint.protocol != MessageProtocol::None } @ MatchingEngineError::EndpointDisabled, )] pub endpoint: Box<Account<'info, RouterEndpoint>>, } impl<'info> Deref for LiveRouterEndpoint<'info> { type Target = Account<'info, RouterEndpoint>; fn deref(&self) -> &Self::Target { &self.endpoint } } #[derive(Accounts)] pub struct LiveRouterPath<'info> { pub from_endpoint: LiveRouterEndpoint<'info>, #[account( constraint = from_endpoint.chain != to_endpoint.chain @ MatchingEngineError::SameEndpoint )] pub to_endpoint: LiveRouterEndpoint<'info>, } #[derive(Accounts)] pub struct FastOrderPath<'info> { #[account( constraint = { let vaa = fast_vaa.load_unchecked(); require_eq!( path.from_endpoint.chain, vaa.emitter_chain(), MatchingEngineError::InvalidSourceRouter ); require!( path.from_endpoint.address == vaa.emitter_address(), MatchingEngineError::InvalidSourceRouter ); let message = LiquidityLayerMessage::try_from(vaa.payload()).unwrap(); let order = message .fast_market_order() .ok_or_else(|| MatchingEngineError::NotFastMarketOrder)?; require_eq!( path.to_endpoint.chain, order.target_chain(), MatchingEngineError::InvalidTargetRouter ); true } )] pub fast_vaa: LiquidityLayerVaa<'info>, pub path: LiveRouterPath<'info>, } impl<'info> Deref for FastOrderPath<'info> { type Target = LiveRouterPath<'info>; fn deref(&self) -> &Self::Target { &self.path } } #[derive(Accounts)] pub struct ActiveAuction<'info> { #[account( mut, seeds = [ Auction::SEED_PREFIX, auction.vaa_hash.as_ref(), ], bump = auction.bump, constraint = matches!(auction.status, AuctionStatus::Active) @ MatchingEngineError::AuctionNotActive, )] pub auction: Box<Account<'info, Auction>>, #[account( mut, seeds = [ crate::AUCTION_CUSTODY_TOKEN_SEED_PREFIX, auction.key().as_ref(), ], bump = auction.info.as_ref().unwrap().custody_token_bump, )] pub custody_token: Box<Account<'info, token::TokenAccount>>, #[account( constraint = { require_eq!( auction.info.as_ref().unwrap().config_id, config.id, MatchingEngineError::AuctionConfigMismatch ); true }, )] pub config: Box<Account<'info, crate::state::AuctionConfig>>, /// CHECK: Mutable. Must have the same key in auction data. #[account( mut, address = auction.info.as_ref().unwrap().best_offer_token, )] pub best_offer_token: UncheckedAccount<'info>, } impl<'info> VaaDigest for ActiveAuction<'info> { fn digest(&self) -> [u8; 32] { self.auction.vaa_hash } } impl<'info> Deref for ActiveAuction<'info> { type Target = Account<'info, Auction>; fn deref(&self) -> &Self::Target { &self.auction } } impl<'info> DerefMut for ActiveAuction<'info> { fn deref_mut(&mut self) -> &mut Self::Target { &mut self.auction } } #[derive(Accounts)] pub struct ExecuteOrder<'info> { /// CHECK: Must be owned by the Wormhole Core Bridge program. #[account( constraint = utils::require_vaa_hash_equals(&active_auction, &fast_vaa.load_unchecked())? )] pub fast_vaa: LiquidityLayerVaa<'info>, #[account( constraint = { let info = active_auction.info.as_ref().unwrap(); require!( !info.within_auction_duration(&active_auction.config), MatchingEngineError::AuctionPeriodNotExpired ); true } )] pub active_auction: ActiveAuction<'info>, /// Must be a token account, whose mint is [common::USDC_MINT]. #[account( mut, token::mint = common::USDC_MINT, )] pub executor_token: Box<Account<'info, token::TokenAccount>>, /// CHECK: Mutable. Must equal [initial_offer](Auction::initial_offer). #[account( mut, address = active_auction.info.as_ref().unwrap().initial_offer_token, )] pub initial_offer_token: UncheckedAccount<'info>, /// CHECK: Must be the payer of the initial auction (see [Auction::prepared_by]). #[account( mut, address = active_auction.prepared_by, )] pub initial_participant: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct WormholePublishMessage<'info> { /// CHECK: Seeds must be \[""Bridge""\] (Wormhole Core Bridge program). #[account(mut)] pub config: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""Sequence""\, custodian] (Wormhole Core Bridge program). #[account(mut)] pub emitter_sequence: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""fee_collector""\] (Wormhole Core Bridge program). #[account(mut)] pub fee_collector: UncheckedAccount<'info>, /// CHECK: Must equal Wormhole Core Bridge program ID. #[account(address = core_bridge_program::id())] pub core_bridge_program: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct CctpDepositForBurn<'info> { /// Circle-supported mint. /// /// CHECK: Mutable. This token account's mint must be the same as the one found in the CCTP /// Token Messenger Minter program's local token account. #[account(mut)] pub mint: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""sender_authority""\] (CCTP Token Messenger Minter program). pub token_messenger_minter_sender_authority: UncheckedAccount<'info>, /// CHECK: Mutable. Seeds must be \[""message_transmitter""\] (CCTP Message Transmitter program). #[account(mut)] pub message_transmitter_config: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_messenger""\] (CCTP Token Messenger Minter program). pub token_messenger: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""remote_token_messenger""\, remote_domain.to_string()] (CCTP Token /// Messenger Minter program). pub remote_token_messenger: UncheckedAccount<'info>, /// CHECK Seeds must be \[""token_minter""\] (CCTP Token Messenger Minter program). pub token_minter: UncheckedAccount<'info>, /// Local token account, which this program uses to validate the `mint` used to burn. /// /// CHECK: Mutable. Seeds must be \[""local_token"", mint\] (CCTP Token Messenger Minter program). #[account(mut)] pub local_token: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""__event_authority""\] (CCTP Token Messenger Minter program). pub token_messenger_minter_event_authority: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Token Messenger Minter program ID. #[account(address = token_messenger_minter_program::id())] pub token_messenger_minter_program: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Message Transmitter program ID. #[account(address = message_transmitter_program::id())] pub message_transmitter_program: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct CctpReceiveMessage<'info> { pub mint_recipient: CctpMintRecipientMut<'info>, /// CHECK: Seeds must be \[""message_transmitter_authority""\] (CCTP Message Transmitter program). pub message_transmitter_authority: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""message_transmitter""\] (CCTP Message Transmitter program). pub message_transmitter_config: UncheckedAccount<'info>, /// CHECK: Mutable. Seeds must be \[""used_nonces"", remote_domain.to_string(), /// first_nonce.to_string()\] (CCTP Message Transmitter program). #[account(mut)] pub used_nonces: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""__event_authority""\] (CCTP Message Transmitter program)). pub message_transmitter_event_authority: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_messenger""\] (CCTP Token Messenger Minter program). pub token_messenger: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""remote_token_messenger""\, remote_domain.to_string()] (CCTP Token /// Messenger Minter program). pub remote_token_messenger: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_minter""\] (CCTP Token Messenger Minter program). pub token_minter: UncheckedAccount<'info>, /// Token Messenger Minter's Local Token account. This program uses the mint of this account to /// validate the `mint_recipient` token account's mint. /// /// CHECK: Mutable. Seeds must be \[""local_token"", mint\] (CCTP Token Messenger Minter program). #[account(mut)] pub local_token: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_pair"", remote_domain.to_string(), remote_token_address\] (CCTP /// Token Messenger Minter program). pub token_pair: UncheckedAccount<'info>, /// CHECK: Mutable. Seeds must be \[""custody"", mint\] (CCTP Token Messenger Minter program). #[account(mut)] pub token_messenger_minter_custody_token: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""__event_authority""\] (CCTP Token Messenger Minter program). pub token_messenger_minter_event_authority: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Token Messenger Minter program ID. #[account(address = token_messenger_minter_program::id())] pub token_messenger_minter_program: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Message Transmitter program ID. #[account(address = message_transmitter_program::id())] pub message_transmitter_program: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct ClosePreparedOrderResponse<'info> { /// CHECK: Must equal the prepared_by field in the prepared order response. #[account( mut, address = order_response.prepared_by, )] pub by: UncheckedAccount<'info>, #[account( mut, close = by, seeds = [ PreparedOrderResponse::SEED_PREFIX, order_response.seeds.fast_vaa_hash.as_ref() ], bump = order_response.seeds.bump, )] pub order_response: Box<Account<'info, PreparedOrderResponse>>, /// CHECK: Seeds must be \[""prepared-custody""\, prepared_order_response.key()]. #[account( mut, seeds = [ crate::PREPARED_CUSTODY_TOKEN_SEED_PREFIX, order_response.key().as_ref(), ], bump, )] pub custody_token: Box<Account<'info, token::TokenAccount>>, } impl<'info> VaaDigest for ClosePreparedOrderResponse<'info> { fn digest(&self) -> [u8; 32] { self.order_response.seeds.fast_vaa_hash } } #[derive(Accounts)] pub struct ReserveFastFillSequence<'info> { #[account(mut)] pub payer: Signer<'info>, pub fast_order_path: FastOrderPath<'info>, /// This sequencer determines the next reserved sequence. If it does not exist for a given Expand Down /// source chain and sender, it will be created. /// /// Auction participants may want to consider pricing the creation of this account into their /// offer prices by checking whether this sequencer already exists for those orders destined for /// Solana. #[account( init_if_needed, payer = payer, space = 8 + FastFillSequencer::INIT_SPACE, seeds = [ FastFillSequencer::SEED_PREFIX, &fast_order_path.fast_vaa.load_unchecked().emitter_chain().to_be_bytes(), &{ let vaa = fast_order_path.fast_vaa.load_unchecked(); LiquidityLayerMessage::try_from(vaa.payload()) .unwrap() .to_fast_market_order_unchecked().sender() }, ], bump, )] pub sequencer: Box<Account<'info, FastFillSequencer>>, /// This account will be used to determine the sequence of the next fast fill. When a local /// order is executed or an non-existent auction is settled, this account will be closed. #[account( init, payer = payer, space = 8 + ReservedFastFillSequence::INIT_SPACE, seeds = [ ReservedFastFillSequence::SEED_PREFIX, fast_order_path.fast_vaa.load_unchecked().digest().as_ref(), ], bump, )] pub reserved: Box<Account<'info, ReservedFastFillSequence>>, /// CHECK: This auction account may not exist. If it does not exist, the prepared order response /// must have been created by this point. Otherwise the auction account must reflect a completed /// auction. #[account( init_if_needed, payer = payer, space = if auction.data_is_empty() { 8 + Auction::INIT_SPACE_NO_AUCTION } else { auction.data_len() }, seeds = [ Auction::SEED_PREFIX, fast_order_path.fast_vaa.load_unchecked().digest().as_ref(), ], bump, constraint = match &auction.info { Some(info) => { // Verify that the auction is active. require_eq!( &auction.status, &AuctionStatus::Active, MatchingEngineError::AuctionNotActive ); // Out of paranoia, check that the auction is for a local fill. require!( matches!(auction.target_protocol, MessageProtocol::Local { .. }), MatchingEngineError::InvalidTargetRouter ); true }, None => { // This check makes sure that the auction account did not exist before this // instruction was called. require!( auction.vaa_hash == [0; 32], MatchingEngineError::AuctionExists, ); true } }, )] pub auction: Box<Account<'info, Auction>>, system_program: Program<'info, System>, } /// NOTE: Keep this at the end in case Wormhole removes the need for these accounts. #[derive(Accounts)] pub struct RequiredSysvars<'info> { /// Wormhole Core Bridge needs the clock sysvar based on its legacy implementation. /// /// CHECK: Must equal clock ID. #[account(address = solana_program::sysvar::clock::id())] pub clock: UncheckedAccount<'info>, /// Wormhole Core Bridge needs the rent sysvar based on its legacy implementation. /// /// CHECK: Must equal rent ID. #[account(address = solana_program::sysvar::rent::id())] pub rent: UncheckedAccount<'info>, }","use std::ops::{Deref, DerefMut}; use crate::{ error::MatchingEngineError, state::{ Auction, AuctionStatus, Custodian, FastFillSequencer, MessageProtocol, PreparedOrderResponse, ReservedFastFillSequence, RouterEndpoint, }, utils::{self, VaaDigest}, }; use anchor_lang::prelude::*; use anchor_spl::token; use common::{ admin::utils::{assistant::only_authorized, ownable::only_owner}, messages::raw::LiquidityLayerMessage, wormhole_cctp_solana::{ cctp::{message_transmitter_program, token_messenger_minter_program}, wormhole::{core_bridge_program, VaaAccount}, }, }; #[derive(Accounts)] pub struct Usdc<'info> { /// CHECK: This address must equal [USDC_MINT](common::USDC_MINT). #[account(address = common::USDC_MINT)] pub mint: UncheckedAccount<'info>, } impl<'info> Deref for Usdc<'info> { type Target = UncheckedAccount<'info>; fn deref(&self) -> &Self::Target { &self.mint } } /// Mint recipient token account, which is encoded as the mint recipient in the CCTP message. /// The CCTP Token Messenger Minter program will transfer the amount encoded in the CCTP message /// from its custody account to this account. /// /// CHECK: Mutable. Seeds must be \[""custody""\]. /// /// NOTE: This account must be encoded as the mint recipient in the CCTP message. #[derive(Accounts)] pub struct CctpMintRecipientMut<'info> { #[account( mut, address = crate::CCTP_MINT_RECIPIENT )] pub mint_recipient: Box<Account<'info, token::TokenAccount>>, } impl<'info> Deref for CctpMintRecipientMut<'info> { type Target = Account<'info, token::TokenAccount>; fn deref(&self) -> &Self::Target { &self.mint_recipient } } #[derive(Accounts)] pub struct LiquidityLayerVaa<'info> { /// CHECK: This VAA account must be a posted VAA from the Wormhole Core Bridge program. #[account( constraint = { // NOTE: This load performs an owner check. let vaa = VaaAccount::load(&vaa)?; // Is it a legitimate LL message? LiquidityLayerMessage::try_from(vaa.payload()) .map_err(|_| MatchingEngineError::InvalidVaa)?; // Done. true } )] pub vaa: UncheckedAccount<'info>, } impl<'info> LiquidityLayerVaa<'info> { pub fn load_unchecked(&self) -> VaaAccount<'_> { VaaAccount::load_unchecked(self) } } impl<'info> Deref for LiquidityLayerVaa<'info> { type Target = UncheckedAccount<'info>; fn deref(&self) -> &Self::Target { &self.vaa } } #[derive(Accounts)] pub struct CheckedCustodian<'info> { #[account( seeds = [Custodian::SEED_PREFIX], bump = Custodian::BUMP, )] pub custodian: Account<'info, Custodian>, } impl<'info> Deref for CheckedCustodian<'info> { type Target = Account<'info, Custodian>; fn deref(&self) -> &Self::Target { &self.custodian } } #[derive(Accounts)] pub struct OwnerOnly<'info> { #[account( constraint = only_owner( &custodian, &owner, error!(MatchingEngineError::OwnerOnly) )? )] pub owner: Signer<'info>, pub custodian: CheckedCustodian<'info>, } #[derive(Accounts)] pub struct OwnerOnlyMut<'info> { #[account( constraint = only_owner( &custodian, &owner, error!(MatchingEngineError::OwnerOnly) )? )] pub owner: Signer<'info>, #[account( mut, seeds = [Custodian::SEED_PREFIX], bump = Custodian::BUMP, )] pub custodian: Account<'info, Custodian>, } #[derive(Accounts)] pub struct Admin<'info> { #[account( constraint = only_authorized( &custodian, &owner_or_assistant, error!(MatchingEngineError::OwnerOrAssistantOnly) )? )] pub owner_or_assistant: Signer<'info>, pub custodian: CheckedCustodian<'info>, } #[derive(Accounts)] pub struct AdminMut<'info> { #[account( constraint = only_authorized( &custodian, &owner_or_assistant, error!(MatchingEngineError::OwnerOrAssistantOnly) )? )] pub owner_or_assistant: Signer<'info>, #[account( mut, seeds = [Custodian::SEED_PREFIX], bump = Custodian::BUMP, )] pub custodian: Account<'info, Custodian>, } #[derive(Accounts)] pub struct LocalTokenRouter<'info> { /// CHECK: Must be an executable (the Token Router program), whose ID will be used to derive the /// emitter (router endpoint) address. #[account(executable)] pub token_router_program: UncheckedAccount<'info>, /// CHECK: The Token Router program's emitter PDA (a.k.a. its custodian) will have account data. #[account( seeds = [b""emitter""], bump, seeds::program = token_router_program, owner = token_router_program.key() @ MatchingEngineError::InvalidEndpoint, constraint = !token_router_emitter.data_is_empty() @ MatchingEngineError::InvalidEndpoint, )] pub token_router_emitter: UncheckedAccount<'info>, #[account( associated_token::mint = common::USDC_MINT, associated_token::authority = token_router_emitter, )] pub token_router_mint_recipient: Account<'info, token::TokenAccount>, } #[derive(Accounts)] pub struct ExistingMutRouterEndpoint<'info> { #[account( mut, seeds = [ RouterEndpoint::SEED_PREFIX, &endpoint.chain.to_be_bytes() ], bump = endpoint.bump, )] pub endpoint: Account<'info, RouterEndpoint>, } impl<'info> Deref for ExistingMutRouterEndpoint<'info> { type Target = Account<'info, RouterEndpoint>; fn deref(&self) -> &Self::Target { &self.endpoint } } impl<'info> DerefMut for ExistingMutRouterEndpoint<'info> { fn deref_mut(&mut self) -> &mut Self::Target { &mut self.endpoint } } #[derive(Accounts)] pub struct LiveRouterEndpoint<'info> { #[account( seeds = [ RouterEndpoint::SEED_PREFIX, &endpoint.chain.to_be_bytes() ], bump = endpoint.bump, constraint = { endpoint.protocol != MessageProtocol::None } @ MatchingEngineError::EndpointDisabled, )] pub endpoint: Box<Account<'info, RouterEndpoint>>, } impl<'info> Deref for LiveRouterEndpoint<'info> { type Target = Account<'info, RouterEndpoint>; fn deref(&self) -> &Self::Target { &self.endpoint } } #[derive(Accounts)] pub struct LiveRouterPath<'info> { pub from_endpoint: LiveRouterEndpoint<'info>, #[account( constraint = from_endpoint.chain != to_endpoint.chain @ MatchingEngineError::SameEndpoint )] pub to_endpoint: LiveRouterEndpoint<'info>, } #[derive(Accounts)] pub struct FastOrderPath<'info> { #[account( constraint = { let vaa = fast_vaa.load_unchecked(); require_eq!( path.from_endpoint.chain, vaa.emitter_chain(), MatchingEngineError::InvalidSourceRouter ); require!( path.from_endpoint.address == vaa.emitter_address(), MatchingEngineError::InvalidSourceRouter ); let message = LiquidityLayerMessage::try_from(vaa.payload()).unwrap(); let order = message .fast_market_order() .ok_or_else(|| MatchingEngineError::NotFastMarketOrder)?; require_eq!( path.to_endpoint.chain, order.target_chain(), MatchingEngineError::InvalidTargetRouter ); true } )] pub fast_vaa: LiquidityLayerVaa<'info>, pub path: LiveRouterPath<'info>, } impl<'info> Deref for FastOrderPath<'info> { type Target = LiveRouterPath<'info>; fn deref(&self) -> &Self::Target { &self.path } } #[derive(Accounts)] pub struct ActiveAuction<'info> { #[account( mut, seeds = [ Auction::SEED_PREFIX, auction.vaa_hash.as_ref(), ], bump = auction.bump, constraint = matches!(auction.status, AuctionStatus::Active) @ MatchingEngineError::AuctionNotActive, )] pub auction: Box<Account<'info, Auction>>, #[account( mut, seeds = [ crate::AUCTION_CUSTODY_TOKEN_SEED_PREFIX, auction.key().as_ref(), ], bump = auction.info.as_ref().unwrap().custody_token_bump, )] pub custody_token: Box<Account<'info, token::TokenAccount>>, #[account( constraint = { require_eq!( auction.info.as_ref().unwrap().config_id, config.id, MatchingEngineError::AuctionConfigMismatch ); true }, )] pub config: Box<Account<'info, crate::state::AuctionConfig>>, /// CHECK: Mutable. Must have the same key in auction data. #[account( mut, address = auction.info.as_ref().unwrap().best_offer_token, )] pub best_offer_token: UncheckedAccount<'info>, } impl<'info> VaaDigest for ActiveAuction<'info> { fn digest(&self) -> [u8; 32] { self.auction.vaa_hash } } impl<'info> Deref for ActiveAuction<'info> { type Target = Account<'info, Auction>; fn deref(&self) -> &Self::Target { &self.auction } } impl<'info> DerefMut for ActiveAuction<'info> { fn deref_mut(&mut self) -> &mut Self::Target { &mut self.auction } } #[derive(Accounts)] pub struct ExecuteOrder<'info> { /// CHECK: Must be owned by the Wormhole Core Bridge program. #[account( constraint = utils::require_vaa_hash_equals(&active_auction, &fast_vaa.load_unchecked())? )] pub fast_vaa: LiquidityLayerVaa<'info>, #[account( constraint = { let info = active_auction.info.as_ref().unwrap(); require!( !info.within_auction_duration(&active_auction.config), MatchingEngineError::AuctionPeriodNotExpired ); true } )] pub active_auction: ActiveAuction<'info>, /// Must be a token account, whose mint is [common::USDC_MINT]. #[account( mut, token::mint = common::USDC_MINT, )] pub executor_token: Box<Account<'info, token::TokenAccount>>, /// CHECK: Mutable. Must equal [initial_offer](Auction::initial_offer). #[account( mut, address = active_auction.info.as_ref().unwrap().initial_offer_token, )] pub initial_offer_token: UncheckedAccount<'info>, /// CHECK: Must be the payer of the initial auction (see [Auction::prepared_by]). #[account( mut, address = active_auction.prepared_by, )] pub initial_participant: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct WormholePublishMessage<'info> { /// CHECK: Seeds must be \[""Bridge""\] (Wormhole Core Bridge program). #[account(mut)] pub config: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""Sequence""\, custodian] (Wormhole Core Bridge program). #[account(mut)] pub emitter_sequence: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""fee_collector""\] (Wormhole Core Bridge program). #[account(mut)] pub fee_collector: UncheckedAccount<'info>, /// CHECK: Must equal Wormhole Core Bridge program ID. #[account(address = core_bridge_program::id())] pub core_bridge_program: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct CctpDepositForBurn<'info> { /// Circle-supported mint. /// /// CHECK: Mutable. This token account's mint must be the same as the one found in the CCTP /// Token Messenger Minter program's local token account. #[account(mut)] pub mint: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""sender_authority""\] (CCTP Token Messenger Minter program). pub token_messenger_minter_sender_authority: UncheckedAccount<'info>, /// CHECK: Mutable. Seeds must be \[""message_transmitter""\] (CCTP Message Transmitter program). #[account(mut)] pub message_transmitter_config: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_messenger""\] (CCTP Token Messenger Minter program). pub token_messenger: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""remote_token_messenger""\, remote_domain.to_string()] (CCTP Token /// Messenger Minter program). pub remote_token_messenger: UncheckedAccount<'info>, /// CHECK Seeds must be \[""token_minter""\] (CCTP Token Messenger Minter program). pub token_minter: UncheckedAccount<'info>, /// Local token account, which this program uses to validate the `mint` used to burn. /// /// CHECK: Mutable. Seeds must be \[""local_token"", mint\] (CCTP Token Messenger Minter program). #[account(mut)] pub local_token: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""__event_authority""\] (CCTP Token Messenger Minter program). pub token_messenger_minter_event_authority: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Token Messenger Minter program ID. #[account(address = token_messenger_minter_program::id())] pub token_messenger_minter_program: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Message Transmitter program ID. #[account(address = message_transmitter_program::id())] pub message_transmitter_program: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct CctpReceiveMessage<'info> { pub mint_recipient: CctpMintRecipientMut<'info>, /// CHECK: Seeds must be \[""message_transmitter_authority""\] (CCTP Message Transmitter program). pub message_transmitter_authority: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""message_transmitter""\] (CCTP Message Transmitter program). pub message_transmitter_config: UncheckedAccount<'info>, /// CHECK: Mutable. Seeds must be \[""used_nonces"", remote_domain.to_string(), /// first_nonce.to_string()\] (CCTP Message Transmitter program). #[account(mut)] pub used_nonces: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""__event_authority""\] (CCTP Message Transmitter program)). pub message_transmitter_event_authority: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_messenger""\] (CCTP Token Messenger Minter program). pub token_messenger: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""remote_token_messenger""\, remote_domain.to_string()] (CCTP Token /// Messenger Minter program). pub remote_token_messenger: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_minter""\] (CCTP Token Messenger Minter program). pub token_minter: UncheckedAccount<'info>, /// Token Messenger Minter's Local Token account. This program uses the mint of this account to /// validate the `mint_recipient` token account's mint. /// /// CHECK: Mutable. Seeds must be \[""local_token"", mint\] (CCTP Token Messenger Minter program). #[account(mut)] pub local_token: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""token_pair"", remote_domain.to_string(), remote_token_address\] (CCTP /// Token Messenger Minter program). pub token_pair: UncheckedAccount<'info>, /// CHECK: Mutable. Seeds must be \[""custody"", mint\] (CCTP Token Messenger Minter program). #[account(mut)] pub token_messenger_minter_custody_token: UncheckedAccount<'info>, /// CHECK: Seeds must be \[""__event_authority""\] (CCTP Token Messenger Minter program). pub token_messenger_minter_event_authority: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Token Messenger Minter program ID. #[account(address = token_messenger_minter_program::id())] pub token_messenger_minter_program: UncheckedAccount<'info>, /// CHECK: Must equal CCTP Message Transmitter program ID. #[account(address = message_transmitter_program::id())] pub message_transmitter_program: UncheckedAccount<'info>, } #[derive(Accounts)] pub struct ClosePreparedOrderResponse<'info> { /// CHECK: Must equal the prepared_by field in the prepared order response. #[account( mut, address = order_response.prepared_by, )] pub by: UncheckedAccount<'info>, #[account( mut, close = by, seeds = [ PreparedOrderResponse::SEED_PREFIX, order_response.seeds.fast_vaa_hash.as_ref() ], bump = order_response.seeds.bump, )] pub order_response: Box<Account<'info, PreparedOrderResponse>>, /// CHECK: Seeds must be \[""prepared-custody""\, prepared_order_response.key()]. #[account( mut, seeds = [ crate::PREPARED_CUSTODY_TOKEN_SEED_PREFIX, order_response.key().as_ref(), ], bump, )] pub custody_token: Box<Account<'info, token::TokenAccount>>, } impl<'info> VaaDigest for ClosePreparedOrderResponse<'info> { fn digest(&self) -> [u8; 32] { self.order_response.seeds.fast_vaa_hash } } #[derive(Accounts)] pub struct ReserveFastFillSequence<'info> { #[account(mut)] pub payer: Signer<'info>, #[account( constraint = { // Destination endpoint must be for Solana. require!( matches!( fast_order_path.to_endpoint.protocol, MessageProtocol::Local { .. } ), MatchingEngineError::InvalidTargetRouter ); true }, )] pub fast_order_path: FastOrderPath<'info>, /// This sequencer determines the next reserved sequence. If it does not exist for a given Expand Down /// source chain and sender, it will be created. /// /// Auction participants may want to consider pricing the creation of this account into their /// offer prices by checking whether this sequencer already exists for those orders destined for /// Solana. #[account( init_if_needed, payer = payer, space = 8 + FastFillSequencer::INIT_SPACE, seeds = [ FastFillSequencer::SEED_PREFIX, &fast_order_path.fast_vaa.load_unchecked().emitter_chain().to_be_bytes(), &{ let vaa = fast_order_path.fast_vaa.load_unchecked(); LiquidityLayerMessage::try_from(vaa.payload()) .unwrap() .to_fast_market_order_unchecked().sender() }, ], bump, )] pub sequencer: Box<Account<'info, FastFillSequencer>>, /// This account will be used to determine the sequence of the next fast fill. When a local /// order is executed or an non-existent auction is settled, this account will be closed. #[account( init, payer = payer, space = 8 + ReservedFastFillSequence::INIT_SPACE, seeds = [ ReservedFastFillSequence::SEED_PREFIX, fast_order_path.fast_vaa.load_unchecked().digest().as_ref(), ], bump, )] pub reserved: Box<Account<'info, ReservedFastFillSequence>>, /// CHECK: This auction account may not exist. If it does not exist, the prepared order response /// must have been created by this point. Otherwise the auction account must reflect a completed /// auction. #[account( init_if_needed, payer = payer, space = if auction.data_is_empty() { 8 + Auction::INIT_SPACE_NO_AUCTION } else { auction.data_len() }, seeds = [ Auction::SEED_PREFIX, fast_order_path.fast_vaa.load_unchecked().digest().as_ref(), ], bump, constraint = match &auction.info { Some(info) => { // Verify that the auction is active. require_eq!( &auction.status, &AuctionStatus::Active, MatchingEngineError::AuctionNotActive ); // Out of paranoia, check that the auction is for a local fill. require!( matches!(auction.target_protocol, MessageProtocol::Local { .. }), MatchingEngineError::InvalidTargetRouter ); true }, None => { // This check makes sure that the auction account did not exist before this // instruction was called. require!( auction.vaa_hash == [0; 32], MatchingEngineError::AuctionExists, ); true } }, )] pub auction: Box<Account<'info, Auction>>, system_program: Program<'info, System>, } /// NOTE: Keep this at the end in case Wormhole removes the need for these accounts. #[derive(Accounts)] pub struct RequiredSysvars<'info> { /// Wormhole Core Bridge needs the clock sysvar based on its legacy implementation. /// /// CHECK: Must equal clock ID. #[account(address = solana_program::sysvar::clock::id())] pub clock: UncheckedAccount<'info>, /// Wormhole Core Bridge needs the rent sysvar based on its legacy implementation. /// /// CHECK: Must equal rent ID. #[account(address = solana_program::sysvar::rent::id())] pub rent: UncheckedAccount<'info>, }",High,The settle_auction_none_local function should verify that order_response.to_endpoint is set to Local before proceeding with settlement.,https://github.com/wormhole-foundation/example-liquidity-layer/pull/194/files,High
Sol-100,"The prepare_market_order function calculates a hash based on several order details to generate a temporary Program-Derived Address (PDA) (transfer_authority) for token transfer authorization. However, this hash calculation does not include the refund_token field (the user’s designated token account for refunds).","use crate::{ composite::*, error::TokenRouterError, state::{OrderType, PreparedOrder, PreparedOrderInfo}, }; use anchor_lang::prelude::*; use anchor_spl::token; use common::TRANSFER_AUTHORITY_SEED_PREFIX; use solana_program::keccak; /// Accounts required for [prepare_market_order]. #[derive(Accounts)] #[instruction(args: PrepareMarketOrderArgs)] pub struct PrepareMarketOrder<'info> { #[account(mut)] payer: Signer<'info>, custodian: CheckedCustodian<'info>, /// The auction participant needs to set approval to this PDA if the sender (signer) is not /// provided. The delegated amount must equal the amount in or this instruction will revert. /// /// NOTE: If this account is provided, the sender token's owner will be encoded as the order /// sender. /// /// CHECK: Seeds must be \[""transfer-authority"", prepared_order.key(), args.hash()\]. #[account( seeds = [ TRANSFER_AUTHORITY_SEED_PREFIX, prepared_order.key().as_ref(), &args.hash().0, ], bump, constraint = { require_eq!( sender_token.delegated_amount, args.amount_in, TokenRouterError::DelegatedAmountMismatch, ); true } )] program_transfer_authority: Option<UncheckedAccount<'info>>, /// Sender, who has the authority to transfer assets from the sender token account. If this /// account is not provided, the program transfer authority account must be some account. /// /// NOTE: If this account is provided, this pubkey will be encoded as the order sender. sender: Option<Signer<'info>>, #[account( init, payer = payer, space = PreparedOrder::compute_size(args.redeemer_message.len()), constraint = { require!(args.amount_in > 0, TokenRouterError::InsufficientAmount); // Cannot send to zero address. require!(args.redeemer != [0; 32], TokenRouterError::InvalidRedeemer); // Max message size. This constraint is enforced on every token router due to Solana's // inbound payload size restriction. require!( args.redeemer_message.len() <= crate::MAX_REDEEMER_MESSAGE_SIZE, TokenRouterError::RedeemerMessageTooLarge ); // If provided, validate min amount out. if let Some(min_amount_out) = args.min_amount_out { require!( min_amount_out <= args.amount_in, TokenRouterError::MinAmountOutTooHigh, ); } true } )] prepared_order: Account<'info, PreparedOrder>, /// Token account where assets are burned from. The CCTP Token Messenger Minter program will /// burn the configured [amount](TransferTokensWithPayloadArgs::amount) from this account. /// /// CHECK: This account must have delegated authority or be owned by the /// [burn_source_authority](Self::burn_source_authority). Its mint must be USDC. /// /// NOTE: This token account must have delegated transfer authority to the custodian prior to /// invoking this instruction. #[account(mut)] sender_token: Box<Account<'info, token::TokenAccount>>, // TODO: Do we add a restriction that the refund token account must be the same owner as the // sender token account? #[account( token::mint = usdc, )] refund_token: Account<'info, token::TokenAccount>, /// Custody token account. This account will be closed at the end of this instruction. It just /// acts as a conduit to allow this program to be the transfer initiator in the CCTP message. /// /// CHECK: Mutable. Seeds must be \[""custody""\]. #[account( init, payer = payer, token::mint = usdc, token::authority = custodian, seeds = [ crate::PREPARED_CUSTODY_TOKEN_SEED_PREFIX, prepared_order.key().as_ref(), ], bump, )] prepared_custody_token: Account<'info, token::TokenAccount>, usdc: Usdc<'info>, token_program: Program<'info, token::Token>, system_program: Program<'info, System>, } /// Arguments for [prepare_market_order]. #[derive(Debug, AnchorSerialize, AnchorDeserialize, Clone)] pub struct PrepareMarketOrderArgs { /// Amount of tokens to transfer. pub amount_in: u64, /// If provided, minimum amount of tokens to receive in exchange for /// [amount_in](Self::amount_in). pub min_amount_out: Option<u64>, /// The Wormhole chain ID of the network to transfer tokens to. pub target_chain: u16, /// The address of the redeeming contract on the target chain. pub redeemer: [u8; 32], /// Arbitrary payload to be sent to the [redeemer](Self::redeemer), which can be used to encode /// instructions or data for another network's smart contract. pub redeemer_message: Vec<u8>, } impl PrepareMarketOrderArgs { pub fn hash(&self) -> keccak::Hash { match self.min_amount_out { Some(min_amount_out) => keccak::hashv(&[ &self.amount_in.to_be_bytes(), &min_amount_out.to_be_bytes(), &self.target_chain.to_be_bytes(), &self.redeemer, &self.redeemer_message, ]), None => keccak::hashv(&[ &self.amount_in.to_be_bytes(), &self.target_chain.to_be_bytes(), &self.redeemer, &self.redeemer_message, ]), } } } pub fn prepare_market_order( ctx: Context<PrepareMarketOrder>, args: PrepareMarketOrderArgs, ) -> Result<()> { let hashed_args = args.hash(); let PrepareMarketOrderArgs { amount_in, min_amount_out, target_chain, redeemer, redeemer_message, } = args; // Finally transfer amount to custody token account. We perform exclusive or because we do not // want to allow specifying more than one authority. let order_sender = match ( ctx.accounts.sender.as_ref(), ctx.accounts.program_transfer_authority.as_ref(), ) { (Some(sender), None) => { token::transfer( CpiContext::new( ctx.accounts.token_program.to_account_info(), token::Transfer { from: ctx.accounts.sender_token.to_account_info(), to: ctx.accounts.prepared_custody_token.to_account_info(), authority: sender.to_account_info(), }, ), amount_in, )?; sender.key() } (None, Some(program_transfer_authority)) => { let sender_token = &ctx.accounts.sender_token; token::transfer( CpiContext::new_with_signer( ctx.accounts.token_program.to_account_info(), token::Transfer { from: sender_token.to_account_info(), to: ctx.accounts.prepared_custody_token.to_account_info(), authority: program_transfer_authority.to_account_info(), }, &[&[ TRANSFER_AUTHORITY_SEED_PREFIX, ctx.accounts.prepared_order.key().as_ref(), &hashed_args.0, &[ctx.bumps.program_transfer_authority.unwrap()], ]], ), amount_in, )?; sender_token.owner } _ => return err!(TokenRouterError::EitherSenderOrProgramTransferAuthority), }; // Set the values in prepared order account. ctx.accounts.prepared_order.set_inner(PreparedOrder { info: PreparedOrderInfo { order_sender, prepared_by: ctx.accounts.payer.key(), order_type: OrderType::Market { min_amount_out }, src_token: ctx.accounts.sender_token.key(), refund_token: ctx.accounts.refund_token.key(), target_chain, redeemer, prepared_custody_token_bump: ctx.bumps.prepared_custody_token, }, redeemer_message, }); // Done. Ok(()) }","use crate::{ composite::*, error::TokenRouterError, state::{OrderType, PreparedOrder, PreparedOrderInfo}, }; use anchor_lang::prelude::*; use anchor_spl::token; use common::TRANSFER_AUTHORITY_SEED_PREFIX; use solana_program::keccak; /// Accounts required for [prepare_market_order]. #[derive(Accounts)] #[instruction(args: PrepareMarketOrderArgs)] pub struct PrepareMarketOrder<'info> { #[account(mut)] payer: Signer<'info>, custodian: CheckedCustodian<'info>, /// The auction participant needs to set approval to this PDA if the sender (signer) is not /// provided. The delegated amount must equal the amount in or this instruction will revert. /// /// NOTE: If this account is provided, the sender token's owner will be encoded as the order /// sender. /// /// CHECK: Seeds must be \[""transfer-authority"", prepared_order.key(), args.hash()\]. #[account( seeds = [ TRANSFER_AUTHORITY_SEED_PREFIX, prepared_order.key().as_ref(), &args.hash().0, refund_token.key().as_ref() ], bump, constraint = { require_eq!( sender_token.delegated_amount, args.amount_in, TokenRouterError::DelegatedAmountMismatch, ); true } )] program_transfer_authority: Option<UncheckedAccount<'info>>, /// Sender, who has the authority to transfer assets from the sender token account. If this /// account is not provided, the program transfer authority account must be some account. /// /// NOTE: If this account is provided, this pubkey will be encoded as the order sender. sender: Option<Signer<'info>>, #[account( init, payer = payer, space = PreparedOrder::compute_size(args.redeemer_message.len()), constraint = { require!(args.amount_in > 0, TokenRouterError::InsufficientAmount); // Cannot send to zero address. require!(args.redeemer != [0; 32], TokenRouterError::InvalidRedeemer); // Max message size. This constraint is enforced on every token router due to Solana's // inbound payload size restriction. require!( args.redeemer_message.len() <= crate::MAX_REDEEMER_MESSAGE_SIZE, TokenRouterError::RedeemerMessageTooLarge ); // If provided, validate min amount out. if let Some(min_amount_out) = args.min_amount_out { require!( min_amount_out <= args.amount_in, TokenRouterError::MinAmountOutTooHigh, ); } true } )] prepared_order: Account<'info, PreparedOrder>, /// Token account where assets are burned from. The CCTP Token Messenger Minter program will /// burn the configured [amount](TransferTokensWithPayloadArgs::amount) from this account. /// /// CHECK: This account must have delegated authority or be owned by the /// [burn_source_authority](Self::burn_source_authority). Its mint must be USDC. /// /// NOTE: This token account must have delegated transfer authority to the custodian prior to /// invoking this instruction. #[account(mut)] sender_token: Box<Account<'info, token::TokenAccount>>, // TODO: Do we add a restriction that the refund token account must be the same owner as the // sender token account? #[account( token::mint = usdc, )] refund_token: Account<'info, token::TokenAccount>, /// Custody token account. This account will be closed at the end of this instruction. It just /// acts as a conduit to allow this program to be the transfer initiator in the CCTP message. /// /// CHECK: Mutable. Seeds must be \[""custody""\]. #[account( init, payer = payer, token::mint = usdc, token::authority = custodian, seeds = [ crate::PREPARED_CUSTODY_TOKEN_SEED_PREFIX, prepared_order.key().as_ref(), ], bump, )] prepared_custody_token: Account<'info, token::TokenAccount>, usdc: Usdc<'info>, token_program: Program<'info, token::Token>, system_program: Program<'info, System>, } /// Arguments for [prepare_market_order]. #[derive(Debug, AnchorSerialize, AnchorDeserialize, Clone)] pub struct PrepareMarketOrderArgs { /// Amount of tokens to transfer. pub amount_in: u64, /// If provided, minimum amount of tokens to receive in exchange for /// [amount_in](Self::amount_in). pub min_amount_out: Option<u64>, /// The Wormhole chain ID of the network to transfer tokens to. pub target_chain: u16, /// The address of the redeeming contract on the target chain. pub redeemer: [u8; 32], /// Arbitrary payload to be sent to the [redeemer](Self::redeemer), which can be used to encode /// instructions or data for another network's smart contract. pub redeemer_message: Vec<u8>, } impl PrepareMarketOrderArgs { pub fn hash(&self) -> keccak::Hash { match self.min_amount_out { Some(min_amount_out) => keccak::hashv(&[ &self.amount_in.to_be_bytes(), &min_amount_out.to_be_bytes(), &self.target_chain.to_be_bytes(), &self.redeemer, &self.redeemer_message, ]), None => keccak::hashv(&[ &self.amount_in.to_be_bytes(), &self.target_chain.to_be_bytes(), &self.redeemer, &self.redeemer_message, ]), } } } pub fn prepare_market_order( ctx: Context<PrepareMarketOrder>, args: PrepareMarketOrderArgs, ) -> Result<()> { let hashed_args = args.hash(); let PrepareMarketOrderArgs { amount_in, min_amount_out, target_chain, redeemer, redeemer_message, } = args; let token_program = &ctx.accounts.token_program; let sender_token = &ctx.accounts.sender_token; let custody_token = &ctx.accounts.prepared_custody_token; let refund_token = &ctx.accounts.refund_token; let prepared_order = &mut ctx.accounts.prepared_order; let prepared_order_key = prepared_order.key(); // Finally transfer amount to custody token account. We perform exclusive or because we do not // want to allow specifying more than one authority. let order_sender = match ( ctx.accounts.sender.as_ref(), ctx.accounts.program_transfer_authority.as_ref(), ) { (Some(sender), None) => { token::transfer( CpiContext::new( token_program.to_account_info(), token::Transfer { from: sender_token.to_account_info(), to: custody_token.to_account_info(), authority: sender.to_account_info(), }, ), amount_in, )?; sender.key() } (None, Some(program_transfer_authority)) => { token::transfer( CpiContext::new_with_signer( token_program.to_account_info(), token::Transfer { from: sender_token.to_account_info(), to: custody_token.to_account_info(), authority: program_transfer_authority.to_account_info(), }, &[&[ TRANSFER_AUTHORITY_SEED_PREFIX, prepared_order_key.as_ref(), &hashed_args.0, refund_token.key().as_ref(), &[ctx.bumps.program_transfer_authority.unwrap()], ]], ), amount_in, )?; sender_token.owner } _ => return err!(TokenRouterError::EitherSenderOrProgramTransferAuthority), }; // Set the values in prepared order account. prepared_order.set_inner(PreparedOrder { info: PreparedOrderInfo { order_sender, prepared_by: ctx.accounts.payer.key(), order_type: OrderType::Market { min_amount_out }, src_token: sender_token.key(), refund_token: refund_token.key(), target_chain, redeemer, prepared_custody_token_bump: ctx.bumps.prepared_custody_token, }, redeemer_message, }); // Done. Ok(()) }",Medium,"To prevent tampering with the refund_token account utilized for the prepared_order, the refund_token field must be included in the hash calculation used for generating the transfer_authority PDA.",https://github.com/wormhole-foundation/example-liquidity-layer/commit/ed87b5bb9f3ad63e597fdfbafc59ce0fc6905fcb,High
Sol-101,"In machine_engine::AuctionHistory, the code aims to calculate the maximum number of AuctionEntry objects that can fit within an AuctionHistory account. It takes the maximum account size as 10 * 1024 * 1000. However, based on MAX_PERMITTED_DATA_LENGTH defined by Solana, it should be 10 * 1024 * 1024. This underestimates the actual available space for storing auction entries, as the calculated MAX_ENTRIES will be lower than the actual maximum number of entries that would fit in the account.","//! The auction history state does not follow the same pattern as the other account schemas. Because //! we do not lean on [AccountSerialize] and [AccountDeserialize] in account contexts for the full //! auction history, we will be using a header to perform these operations to validate just the //! beginning of each of these accounts. The history itself will be read in using [UncheckedAccount]. use std::ops::{Deref, DerefMut}; use anchor_lang::{prelude::*, Discriminator}; use super::AuctionInfo; #[account] #[derive(Debug, Default)] pub struct AuctionHistory { pub header: AuctionHistoryHeader, pub data: Vec<AuctionEntry>, } impl Deref for AuctionHistory { type Target = AuctionHistoryHeader; fn deref(&self) -> &Self::Target { &self.header } } #[derive(Debug, AnchorSerialize, AnchorDeserialize, Clone, InitSpace)] pub struct AuctionEntry { pub vaa_hash: [u8; 32], pub vaa_timestamp: u32, pub info: AuctionInfo, } #[derive(Debug, AnchorSerialize, AnchorDeserialize, Clone, InitSpace, Default)] pub struct AuctionHistoryHeader { pub id: u64, pub min_timestamp: Option<u32>, pub max_timestamp: Option<u32>, } impl AuctionHistoryHeader { pub fn new(id: u64) -> Self { Self { id, min_timestamp: Default::default(), max_timestamp: Default::default(), } } } impl AuctionHistory { pub const SEED_PREFIX: &'static [u8] = b""auction-history""; pub const START: usize = 8 // DISCRIMINATOR + AuctionHistoryHeader::INIT_SPACE + 4 // data len ; cfg_if::cfg_if! { if #[cfg(feature = ""integration-test"")] { pub const MAX_ENTRIES: u32 = 2; } else { /// This value is calculated based on the maximum account size of 10MB. /// /// NOTE: This value is guaranteed to be less than u32::MAX. #[allow(clippy::as_conversions)] #[allow(clippy::cast_possible_truncation)] #[allow(clippy::integer_division)] pub const MAX_ENTRIES: u32 = ((10 * 1024 * 1000 - Self::START) / AuctionEntry::INIT_SPACE) as u32; } } } Expand Down Expand Up @@ -136,7 +136,7 @@ mod test { #[derive(Debug, AnchorSerialize, AnchorDeserialize, Clone)] pub struct AuctionHistoryInternal { pub header: AuctionHistoryHeader, pub num_entries: u32, } impl Discriminator for AuctionHistoryInternal { const DISCRIMINATOR: [u8; 8] = AuctionHistory::DISCRIMINATOR; } impl AccountDeserialize for AuctionHistoryInternal { fn try_deserialize(buf: &mut &[u8]) -> Result<Self> { if buf[..8] != Self::DISCRIMINATOR { err!(ErrorCode::AccountDiscriminatorMismatch) } else { Self::try_deserialize_unchecked(buf) } } fn try_deserialize_unchecked(buf: &mut &[u8]) -> Result<Self> { *buf = &buf[8..]; Ok(Self { header: AnchorDeserialize::deserialize(buf)?, num_entries: AnchorDeserialize::deserialize(buf)?, }) } } impl AccountSerialize for AuctionHistoryInternal { fn try_serialize<W: std::io::prelude::Write>(&self, writer: &mut W) -> Result<()> { <AuctionHistory as anchor_lang::Discriminator>::DISCRIMINATOR.serialize(writer)?; self.header.serialize(writer)?; self.num_entries.serialize(writer)?; Ok(()) } } impl Owner for AuctionHistoryInternal { fn owner() -> Pubkey { crate::id() } } impl Deref for AuctionHistoryInternal { type Target = AuctionHistoryHeader; fn deref(&self) -> &Self::Target { &self.header } } impl DerefMut for AuctionHistoryInternal { fn deref_mut(&mut self) -> &mut Self::Target { &mut self.header } } #[cfg(test)] mod test { #![allow(clippy::integer_division)] use super::*; #[test] fn check_max_entries() { const MAX: usize = (10 * 1024 * 1000 - AuctionHistory::START) / AuctionEntry::INIT_SPACE; assert!(MAX <= u32::MAX.try_into().unwrap()); } }","//! The auction history state does not follow the same pattern as the other account schemas. Because //! we do not lean on [AccountSerialize] and [AccountDeserialize] in account contexts for the full //! auction history, we will be using a header to perform these operations to validate just the //! beginning of each of these accounts. The history itself will be read in using [UncheckedAccount]. use std::ops::{Deref, DerefMut}; use anchor_lang::{prelude::*, Discriminator}; use super::AuctionInfo; #[account] #[derive(Debug, Default)] pub struct AuctionHistory { pub header: AuctionHistoryHeader, pub data: Vec<AuctionEntry>, } impl Deref for AuctionHistory { type Target = AuctionHistoryHeader; fn deref(&self) -> &Self::Target { &self.header } } #[derive(Debug, AnchorSerialize, AnchorDeserialize, Clone, InitSpace)] pub struct AuctionEntry { pub vaa_hash: [u8; 32], pub vaa_timestamp: u32, pub info: AuctionInfo, } #[derive(Debug, AnchorSerialize, AnchorDeserialize, Clone, InitSpace, Default)] pub struct AuctionHistoryHeader { pub id: u64, pub min_timestamp: Option<u32>, pub max_timestamp: Option<u32>, } impl AuctionHistoryHeader { pub fn new(id: u64) -> Self { Self { id, min_timestamp: Default::default(), max_timestamp: Default::default(), } } } impl AuctionHistory { pub const SEED_PREFIX: &'static [u8] = b""auction-history""; pub const START: usize = 8 // DISCRIMINATOR + AuctionHistoryHeader::INIT_SPACE + 4 // data len ; cfg_if::cfg_if! { if #[cfg(feature = ""integration-test"")] { pub const MAX_ENTRIES: u32 = 2; } else { /// This value is calculated based on the maximum account size of 10MB. /// /// NOTE: This value is guaranteed to be less than u32::MAX. #[allow(clippy::as_conversions)] #[allow(clippy::cast_possible_truncation)] #[allow(clippy::integer_division)] pub const MAX_ENTRIES: u32 = ((10 * 1024 * 1024 - Self::START) / AuctionEntry::INIT_SPACE) as u32; } } } Expand Down Expand Up @@ -136,7 +136,7 @@ mod test { #[derive(Debug, AnchorSerialize, AnchorDeserialize, Clone)] pub struct AuctionHistoryInternal { pub header: AuctionHistoryHeader, pub num_entries: u32, } impl Discriminator for AuctionHistoryInternal { const DISCRIMINATOR: [u8; 8] = AuctionHistory::DISCRIMINATOR; } impl AccountDeserialize for AuctionHistoryInternal { fn try_deserialize(buf: &mut &[u8]) -> Result<Self> { if buf[..8] != Self::DISCRIMINATOR { err!(ErrorCode::AccountDiscriminatorMismatch) } else { Self::try_deserialize_unchecked(buf) } } fn try_deserialize_unchecked(buf: &mut &[u8]) -> Result<Self> { *buf = &buf[8..]; Ok(Self { header: AnchorDeserialize::deserialize(buf)?, num_entries: AnchorDeserialize::deserialize(buf)?, }) } } impl AccountSerialize for AuctionHistoryInternal { fn try_serialize<W: std::io::prelude::Write>(&self, writer: &mut W) -> Result<()> { <AuctionHistory as anchor_lang::Discriminator>::DISCRIMINATOR.serialize(writer)?; self.header.serialize(writer)?; self.num_entries.serialize(writer)?; Ok(()) } } impl Owner for AuctionHistoryInternal { fn owner() -> Pubkey { crate::id() } } impl Deref for AuctionHistoryInternal { type Target = AuctionHistoryHeader; fn deref(&self) -> &Self::Target { &self.header } } impl DerefMut for AuctionHistoryInternal { fn deref_mut(&mut self) -> &mut Self::Target { &mut self.header } } #[cfg(test)] mod test { #![allow(clippy::integer_division)] use super::*; #[test] fn check_max_entries() { const MAX: usize = (10 * 1024 * 1024 - AuctionHistory::START) / AuctionEntry::INIT_SPACE; assert!(MAX <= u32::MAX.try_into().unwrap()); } }",Low,"The calculation of MAX_ENTRIES should be updated to use the correct value based on the maximum account size to prevent overflows, underflows, or unintended memory constraints.",https://github.com/wormhole-foundation/example-liquidity-layer/pull/189/files,High
Sol-102,"In matching_engine::update_cctp_router_endpoint, there is no proper validation to ensure that args.chain equals the existing chain ID router_endpoint.chain before invoking handle_add_cctp_router_endpoint, which updates the router endpoint with args. Consequently, when any instruction attempts to access the router_endpoint account using the ExistingMutRouterEndpoint accounts, the PDA address derivation will fail if router_endpoint.chain is incorrect since it was used as a seed. Allowing router_endpoint.chain to update without proper validation could lead to a denial-of-service attack, preventing multiple instructions from functioning correctly.","use crate::{ composite::*, utils::{self, admin::AddCctpRouterEndpointArgs}, }; use anchor_lang::prelude::*; use common::wormhole_cctp_solana::cctp::token_messenger_minter_program::{ self, RemoteTokenMessenger, }; #[derive(Accounts)] #[instruction(args: AddCctpRouterEndpointArgs)] pub struct UpdateCctpRouterEndpoint<'info> { admin: OwnerOnly<'info>, router_endpoint: ExistingMutRouterEndpoint<'info>, /// CHECK: Seeds must be \[""remote_token_messenger""\, remote_domain.to_string()] (CCTP Token Expand Down /// Messenger Minter program). #[account( seeds = [ RemoteTokenMessenger::SEED_PREFIX, args.cctp_domain.to_string().as_ref() ], bump, seeds::program = token_messenger_minter_program::id(), )] remote_token_messenger: Account<'info, RemoteTokenMessenger>, } pub fn update_cctp_router_endpoint( ctx: Context<UpdateCctpRouterEndpoint>, args: AddCctpRouterEndpointArgs, ) -> Result<()> { utils::admin::handle_add_cctp_router_endpoint(&mut ctx.accounts.router_endpoint, args, None) }","use crate::{ composite::*, utils::{self, admin::AddCctpRouterEndpointArgs}, }; use anchor_lang::prelude::*; use common::wormhole_cctp_solana::cctp::token_messenger_minter_program::{ self, RemoteTokenMessenger, }; #[derive(Accounts)] #[instruction(args: AddCctpRouterEndpointArgs)] pub struct UpdateCctpRouterEndpoint<'info> { admin: OwnerOnly<'info>, #[account( constraint = { require_eq!( args.chain, router_endpoint.chain, crate::error::MatchingEngineError::InvalidEndpoint, ); true } )] router_endpoint: ExistingMutRouterEndpoint<'info>, /// CHECK: Seeds must be \[""remote_token_messenger""\, remote_domain.to_string()] (CCTP Token Expand Down /// Messenger Minter program). #[account( seeds = [ RemoteTokenMessenger::SEED_PREFIX, args.cctp_domain.to_string().as_ref() ], bump, seeds::program = token_messenger_minter_program::id(), )] remote_token_messenger: Account<'info, RemoteTokenMessenger>, } pub fn update_cctp_router_endpoint( ctx: Context<UpdateCctpRouterEndpoint>, args: AddCctpRouterEndpointArgs, ) -> Result<()> { utils::admin::handle_add_cctp_router_endpoint(&mut ctx.accounts.router_endpoint, args, None) }",Low,"Ensure to explicitly check if args.chain matches router_endpoint.chain before proceeding in update_cctp_router_endpoint. This validation will prevent incorrect updates to the router_endpoint.chain field, ensuring that PDA derivation remains valid and mitigating potential denial-of-service vulnerabilities.",https://github.com/wormhole-foundation/example-liquidity-layer/pull/190/files,High
Sol-103,"Lack Of Mint Account Verification. process_approve_account ensures that a given token account is configured correctly for confidential transfers by authorizing the account’s authority. However, it lacks a crucial check to validate that the associated mint of the token account (token_account.base.mint) matches the mint for which the confidential transfer approval is being granted (mint_info.key). Thus, this enables the approval of a token account for confidential transfers, even if it is associated with a different mint. Ideally, token accounts should only be allowed to hold tokens from the specific mint they are associated with. By not checking the mint consistency, the function effectively approves arbitrary token accounts for confidential transfers. Such unauthorized token mixing may have security and financial implications, as it could result in loss of value or assets for users who rely on the token system’s integrity.",/// Processes an [ApproveAccount] instruction. fn process_approve_account(accounts: &[AccountInfo]) -> ProgramResult {     let account_info_iter = &mut accounts.iter();     let token_account_info = next_account_info(account_info_iter)?;     let mint_info = next_account_info(account_info_iter)?;     let authority_info = next_account_info(account_info_iter)?;     check_program_account(token_account_info.owner)?;     let token_account_data = &mut token_account_info.data.borrow_mut();     let mut token_account = StateWithExtensionsMut::<Account>::unpack(token_account_data)?;      check_program_account(mint_info.owner)?;     let mint_data = &mint_info.data.borrow_mut();     let mint = StateWithExtensions::<Mint>::unpack(mint_data)?;     let confidential_transfer_mint = mint.get_extension::<ConfidentialTransferMint>()?;     let maybe_confidential_transfer_mint_authority: Option<Pubkey> =         confidential_transfer_mint.authority.into();     let confidential_transfer_mint_authority =         maybe_confidential_transfer_mint_authority.ok_or(TokenError::NoAuthorityExists)?;     if authority_info.is_signer && *authority_info.key == confidential_transfer_mint_authority {         let confidential_transfer_state =             token_account.get_extension_mut::<ConfidentialTransferAccount>()?;         confidential_transfer_state.approved = true.into();         Ok(())     } else {         Err(ProgramError::MissingRequiredSignature)     } },/// Processes an [ApproveAccount] instruction. fn process_approve_account(accounts: &[AccountInfo]) -> ProgramResult {     let account_info_iter = &mut accounts.iter();     let token_account_info = next_account_info(account_info_iter)?;     let mint_info = next_account_info(account_info_iter)?;     let authority_info = next_account_info(account_info_iter)?;     check_program_account(token_account_info.owner)?;     let token_account_data = &mut token_account_info.data.borrow_mut();     let mut token_account = StateWithExtensionsMut::<Account>::unpack(token_account_data)?;      if *mint_info.key != token_account.base.mint {         return Err(TokenError::MintMismatch.into());     }      check_program_account(mint_info.owner)?;     let mint_data = &mint_info.data.borrow_mut();     let mint = StateWithExtensions::<Mint>::unpack(mint_data)?;     let confidential_transfer_mint = mint.get_extension::<ConfidentialTransferMint>()?;     let maybe_confidential_transfer_mint_authority: Option<Pubkey> =         confidential_transfer_mint.authority.into();     let confidential_transfer_mint_authority =         maybe_confidential_transfer_mint_authority.ok_or(TokenError::NoAuthorityExists)?;     if authority_info.is_signer && *authority_info.key == confidential_transfer_mint_authority {         let confidential_transfer_state =             token_account.get_extension_mut::<ConfidentialTransferAccount>()?;         confidential_transfer_state.approved = true.into();         Ok(())     } else {         Err(ProgramError::MissingRequiredSignature)     } },Medium,Incorporate the following verification within process_approve_account to confirm that the token account’s associated mint aligns with the mint for which the confidential transfer approval is sought.,"https://github.com/solana-labs/solana-program-library/pull/5901/files#diff-8a2747b10b71ae983dd511b549f3ffcbdcf328a23e655ea79a7c38e01ec383d9, https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/e21cbb09-5ce7-48c8-954e-5077c486a579/solana_token22_audit_final.pdf?table=block&id=88fc9b14-b183-49ee-aa0a-29c29c1eaf89&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742961600000&signature=H_I1MmWaBTT1ZTabCmBV6FDaHowAV7WGiNbDzY0_3Yc&downloadName=solana_token22_audit_final.pdf",High
Sol-104,"Missing Signer Check On Accounts. The vulnerability pertains to the management of multi-signature accounts when constructing withdrawal instructions for withheld tokens within the confidential transfer fee extension in both withdraw_withheld_tokens_from_mint and withdraw_withheld_tokens_from_accounts. The problem concerns the handling of multi-signature accounts as non-signer accounts within inner_withdraw_withheld_tokens_from_mint and inner_withdraw_withheld_tokens_from_accounts. In the context of the withdrawal operation, the program should recognize multi-signature accounts as signers, but currently, it treats them incorrectly as non-signers. This may result in transaction failures when multiple signers are involved, primarily during the owner check for multi-signature accounts. Proof of Concept 1. There exists a multi signature account named multisig_account configured to require three signers: signer1, signer2, and signer3. The purpose of this multi-signature account is to authorize the withdrawal of withheld tokens. 2. When creating the withdrawal instruction through inner_withdraw_withheld_tokens_from_mint, multisig_account is specified as a read-only, non-signer account. 3. In a transaction, if signer1, signer2, and signer3 provide their signatures to authorize the withdrawal, the Solana runtime may fail to recognize their authorization due to the way the instruction was constructed. 4. Consequently, this may result in transaction failure as the code incorrectly categorizes the multisignature account as a non-signer account.","/// Create an inner `WithdrawWithheldTokensFromMint` instruction /// /// This instruction is suitable for use with a cross-program `invoke` pub fn inner_withdraw_withheld_tokens_from_mint(     token_program_id: &Pubkey,     mint: &Pubkey,     destination: &Pubkey,     new_decryptable_available_balance: &DecryptableBalance,     authority: &Pubkey,     multisig_signers: &[&Pubkey],     proof_data_location: ProofLocation<CiphertextCiphertextEqualityProofData>, ) -> Result<Instruction, ProgramError> {     check_program_account(token_program_id)?;     let mut accounts = vec![         AccountMeta::new(*mint, false),         AccountMeta::new(*destination, false),     ];     let proof_instruction_offset = match proof_data_location {         ProofLocation::InstructionOffset(proof_instruction_offset, _) => {             accounts.push(AccountMeta::new_readonly(sysvar::instructions::id(), false));             proof_instruction_offset.into()         }         ProofLocation::ContextStateAccount(context_state_account) => {             accounts.push(AccountMeta::new_readonly(*context_state_account, false));             0         }     };     accounts.push(AccountMeta::new_readonly(         *authority,         multisig_signers.is_empty(),     ));      for multisig_signer in multisig_signers.iter() {         accounts.push(AccountMeta::new(**multisig_signer, false));     }      Ok(encode_instruction(         token_program_id,         accounts,         TokenInstruction::ConfidentialTransferFeeExtension,         ConfidentialTransferFeeInstruction::WithdrawWithheldTokensFromMint,         &WithdrawWithheldTokensFromMintData {             proof_instruction_offset,             new_decryptable_available_balance: *new_decryptable_available_balance,         },     )) }  /// Create an inner `WithdrawWithheldTokensFromMint` instruction /// /// This instruction is suitable for use with a cross-program `invoke` #[allow(clippy::too_many_arguments)] pub fn inner_withdraw_withheld_tokens_from_accounts(     token_program_id: &Pubkey,     mint: &Pubkey,     destination: &Pubkey,     new_decryptable_available_balance: &DecryptableBalance,     authority: &Pubkey,     multisig_signers: &[&Pubkey],     sources: &[&Pubkey],     proof_data_location: ProofLocation<CiphertextCiphertextEqualityProofData>, ) -> Result<Instruction, ProgramError> {     check_program_account(token_program_id)?;     let num_token_accounts =         u8::try_from(sources.len()).map_err(|_| ProgramError::InvalidInstructionData)?;     let mut accounts = vec![         AccountMeta::new(*mint, false),         AccountMeta::new(*destination, false),     ];     let proof_instruction_offset = match proof_data_location {         ProofLocation::InstructionOffset(proof_instruction_offset, _) => {             accounts.push(AccountMeta::new_readonly(sysvar::instructions::id(), false));             proof_instruction_offset.into()         }         ProofLocation::ContextStateAccount(context_state_account) => {             accounts.push(AccountMeta::new_readonly(*context_state_account, false));             0         }     };     accounts.push(AccountMeta::new_readonly(         *authority,         multisig_signers.is_empty(),     ));      for multisig_signer in multisig_signers.iter() {         accounts.push(AccountMeta::new(**multisig_signer, false));     }      for source in sources.iter() {         accounts.push(AccountMeta::new(**source, false));     }     Ok(encode_instruction(         token_program_id,         accounts,         TokenInstruction::ConfidentialTransferFeeExtension,         ConfidentialTransferFeeInstruction::WithdrawWithheldTokensFromAccounts,         &WithdrawWithheldTokensFromAccountsData {             proof_instruction_offset,             num_token_accounts,             new_decryptable_available_balance: *new_decryptable_available_balance,         },     )) }","/// Create an inner `WithdrawWithheldTokensFromMint` instruction /// /// This instruction is suitable for use with a cross-program `invoke` pub fn inner_withdraw_withheld_tokens_from_mint(     token_program_id: &Pubkey,     mint: &Pubkey,     destination: &Pubkey,     new_decryptable_available_balance: &DecryptableBalance,     authority: &Pubkey,     multisig_signers: &[&Pubkey],     proof_data_location: ProofLocation<CiphertextCiphertextEqualityProofData>, ) -> Result<Instruction, ProgramError> {     check_program_account(token_program_id)?;     let mut accounts = vec![         AccountMeta::new(*mint, false),         AccountMeta::new(*destination, false),     ];     let proof_instruction_offset = match proof_data_location {         ProofLocation::InstructionOffset(proof_instruction_offset, _) => {             accounts.push(AccountMeta::new_readonly(sysvar::instructions::id(), false));             proof_instruction_offset.into()         }         ProofLocation::ContextStateAccount(context_state_account) => {             accounts.push(AccountMeta::new_readonly(*context_state_account, false));             0         }     };     accounts.push(AccountMeta::new_readonly(         *authority,         multisig_signers.is_empty(),     ));      for multisig_signer in multisig_signers.iter() {         accounts.push(AccountMeta::new_readonly(**multisig_signer, true));     }      Ok(encode_instruction(         token_program_id,         accounts,         TokenInstruction::ConfidentialTransferFeeExtension,         ConfidentialTransferFeeInstruction::WithdrawWithheldTokensFromMint,         &WithdrawWithheldTokensFromMintData {             proof_instruction_offset,             new_decryptable_available_balance: *new_decryptable_available_balance,         },     )) }  /// Create an inner `WithdrawWithheldTokensFromMint` instruction /// /// This instruction is suitable for use with a cross-program `invoke` #[allow(clippy::too_many_arguments)] pub fn inner_withdraw_withheld_tokens_from_accounts(     token_program_id: &Pubkey,     mint: &Pubkey,     destination: &Pubkey,     new_decryptable_available_balance: &DecryptableBalance,     authority: &Pubkey,     multisig_signers: &[&Pubkey],     sources: &[&Pubkey],     proof_data_location: ProofLocation<CiphertextCiphertextEqualityProofData>, ) -> Result<Instruction, ProgramError> {     check_program_account(token_program_id)?;     let num_token_accounts =         u8::try_from(sources.len()).map_err(|_| ProgramError::InvalidInstructionData)?;     let mut accounts = vec![         AccountMeta::new(*mint, false),         AccountMeta::new(*destination, false),     ];     let proof_instruction_offset = match proof_data_location {         ProofLocation::InstructionOffset(proof_instruction_offset, _) => {             accounts.push(AccountMeta::new_readonly(sysvar::instructions::id(), false));             proof_instruction_offset.into()         }         ProofLocation::ContextStateAccount(context_state_account) => {             accounts.push(AccountMeta::new_readonly(*context_state_account, false));             0         }     };     accounts.push(AccountMeta::new_readonly(         *authority,         multisig_signers.is_empty(),     ));      for multisig_signer in multisig_signers.iter() {         accounts.push(AccountMeta::new_readonly(**multisig_signer, true));     }      for source in sources.iter() {         accounts.push(AccountMeta::new(**source, false));     }     Ok(encode_instruction(         token_program_id,         accounts,         TokenInstruction::ConfidentialTransferFeeExtension,         ConfidentialTransferFeeInstruction::WithdrawWithheldTokensFromAccounts,         &WithdrawWithheldTokensFromAccountsData {             proof_instruction_offset,             num_token_accounts,             new_decryptable_available_balance: *new_decryptable_available_balance,         },     )) }",Low,Designate multi-signature accounts as signers for authorizing transactions.,"https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/e21cbb09-5ce7-48c8-954e-5077c486a579/solana_token22_audit_final.pdf?table=block&id=88fc9b14-b183-49ee-aa0a-29c29c1eaf89&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742961600000&signature=H_I1MmWaBTT1ZTabCmBV6FDaHowAV7WGiNbDzY0_3Yc&downloadName=solana_token22_audit_final.pdf, https://github.com/solana-labs/solana-program-library/pull/5900/files",High
Sol-105,"BatchedRangeProofU128Data::new creates a new BatchedRangeProofU128Data instance, which includes generating a batched range proof for a set of commitments, values, bit lengths, and openings. It performs validation to ensure that the sum of bit lengths is 128 (128 bits in a 128-bit value), and it checks for potential overflows during bit length calculations. It is similar in BatchedRangeProofU256Data::new. In BatchedRangeProofU128Data::new, a calculation of batched_bit_length represents the total number of bits required to represent the batched range of values. This calculation is performed by iterating through the the bit_lengths vector and summing all the bit lengths. The issue is related to the potential of right shift operations (>>) causing an overflow panic when dealing with u128 and u256 range proofs, especially when elements in the bit_lengths vector are greater than 64. This occurs as bit lengths are not validated, as shown in BatchedRangeProofU128Data::new above. Proof of Concept 1. The protocol accepts a list of commitments that is less than or equal to MAX_COMMITMENTS. 2. Suppose we need to create a batched u128 range proof for a set of 3 commitments where one commitment has a bit length greater than 64. 3. Here is a simplified example of such data: let bit_lengths = vec![70, 30, 28]; 4. In this case, the bit_lengths vector contains three elements: 70, 30, and 28. 5. When the batched_bit_length is calculated, it will sum up these values: let batched_bit_length = 70 + 30 + 28; 6. The value of batched_bit_length will be 128, which satisfies the u128 type, but the bit length for the first commitment is 70, which is greater than 64, which will cause a panic. 7. Attempting to perform a right shift operation (>>) on this element would cause an overflow panic as u128 may only represent values up to 2 128 − 1.","use { crate::{ range_proof::{ errors::{RangeProofGenerationError, RangeProofVerificationError}, util, }, transcript::TranscriptProtocol, }, core::iter, curve25519_dalek::{ ristretto::{CompressedRistretto, RistrettoPoint}, scalar::Scalar, traits::{MultiscalarMul, VartimeMultiscalarMul}, }, merlin::Transcript, std::borrow::Borrow, }; #[allow(non_snake_case)] #[derive(Clone)] pub struct InnerProductProof { pub L_vec: Vec<CompressedRistretto>, // 32 * log(bit_length) pub R_vec: Vec<CompressedRistretto>, // 32 * log(bit_length) pub a: Scalar, // 32 bytes pub b: Scalar, // 32 bytes } #[allow(non_snake_case)] impl InnerProductProof { /// Create an inner-product proof. /// /// The proof is created with respect to the bases \\(G\\), \\(H'\\), /// where \\(H'\_i = H\_i \cdot \texttt{Hprime\\_factors}\_i\\). /// /// The `verifier` is passed in as a parameter so that the /// challenges depend on the *entire* transcript (including parent /// protocols). /// /// The lengths of the vectors must all be the same, and must all be /// a power of 2. #[allow(clippy::too_many_arguments)] pub fn new( Q: &RistrettoPoint, G_factors: &[Scalar], H_factors: &[Scalar], mut G_vec: Vec<RistrettoPoint>, mut H_vec: Vec<RistrettoPoint>, mut a_vec: Vec<Scalar>, mut b_vec: Vec<Scalar>, transcript: &mut Transcript, ) -> Result<Self, RangeProofGenerationError> { // Create slices G, H, a, b backed by their respective // vectors. This lets us reslice as we compress the lengths // of the vectors in the main loop below. let mut G = &mut G_vec[..]; let mut H = &mut H_vec[..]; let mut a = &mut a_vec[..]; let mut b = &mut b_vec[..]; let mut n = G.len(); // All of the input vectors must have the same length. if G.len() != n || H.len() != n || a.len() != n || b.len() != n || G_factors.len() != n || H_factors.len() != n { return Err(RangeProofGenerationError::GeneratorLengthMismatch); } // All of the input vectors must have a length that is a power of two. if !n.is_power_of_two() { return Err(RangeProofGenerationError::InvalidBitSize); } transcript.innerproduct_domain_separator(n as u64); let lg_n = n.next_power_of_two().trailing_zeros() as usize; let mut L_vec = Vec::with_capacity(lg_n); let mut R_vec = Vec::with_capacity(lg_n); // If it's the first iteration, unroll the Hprime = H*y_inv scalar mults // into multiscalar muls, for performance. if n != 1 { n /= 2; let (a_L, a_R) = a.split_at_mut(n); let (b_L, b_R) = b.split_at_mut(n); let (G_L, G_R) = G.split_at_mut(n); Expand All @@ -95,7 +95,7 @@ impl InnerProductProof { let (H_L, H_R) = H.split_at_mut(n); let c_L = util::inner_product(a_L, b_R); let c_R = util::inner_product(a_R, b_L); let L = RistrettoPoint::multiscalar_mul( a_L.iter() .zip(G_factors[n..2 * n].iter()) .map(|(a_L_i, g)| a_L_i * g) .chain( b_R.iter() Expand All @@ -113,7 +113,7 @@ impl InnerProductProof { .zip(H_factors[0..n].iter()) .map(|(b_R_i, h)| b_R_i * h), ) .chain(iter::once(c_L)), G_R.iter().chain(H_L.iter()).chain(iter::once(Q)), ) .compress(); let R = RistrettoPoint::multiscalar_mul( a_R.iter() .zip(G_factors[0..n].iter()) .map(|(a_R_i, g)| a_R_i * g) .chain( b_L.iter() .zip(H_factors[n..2 * n].iter()) .map(|(b_L_i, h)| b_L_i * h), ) .chain(iter::once(c_R)), Expand All @@ -134,11 +134,17 @@ impl InnerProductProof { G_L.iter().chain(H_R.iter()).chain(iter::once(Q)), ) .compress(); L_vec.push(L); R_vec.push(R); transcript.append_point(b""L"", &L); transcript.append_point(b""R"", &R); let u = transcript.challenge_scalar(b""u""); let u_inv = u.invert(); for i in 0..n { a_L[i] = a_L[i] * u + u_inv * a_R[i]; b_L[i] = b_L[i] * u_inv + u * b_R[i]; G_L[i] = RistrettoPoint::multiscalar_mul( &[u_inv * G_factors[i], u * G_factors[n + i]], &[G_L[i], G_R[i]], ); H_L[i] = RistrettoPoint::multiscalar_mul( &[u * H_factors[i], u_inv * H_factors[n + i]], &[H_L[i], H_R[i]], ) } Expand All @@ -150,7 +156,7 @@ impl InnerProductProof { a = a_L; b = b_L; G = G_L; H = H_L; } while n != 1 { n /= 2; let (a_L, a_R) = a.split_at_mut(n); let (b_L, b_R) = b.split_at_mut(n); let (G_L, G_R) = G.split_at_mut(n); Expand Down Expand Up @@ -218,7 +224,7 @@ impl InnerProductProof { let (H_L, H_R) = H.split_at_mut(n); let c_L = util::inner_product(a_L, b_R); let c_R = util::inner_product(a_R, b_L); let L = RistrettoPoint::multiscalar_mul( a_L.iter().chain(b_R.iter()).chain(iter::once(&c_L)), G_R.iter().chain(H_L.iter()).chain(iter::once(Q)), ) .compress(); let R = RistrettoPoint::multiscalar_mul( a_R.iter().chain(b_L.iter()).chain(iter::once(&c_R)), G_L.iter().chain(H_R.iter()).chain(iter::once(Q)), ) .compress(); L_vec.push(L); R_vec.push(R); transcript.append_point(b""L"", &L); transcript.append_point(b""R"", &R); let u = transcript.challenge_scalar(b""u""); let u_inv = u.invert(); for i in 0..n { a_L[i] = a_L[i] * u + u_inv * a_R[i]; b_L[i] = b_L[i] * u_inv + u * b_R[i]; G_L[i] = RistrettoPoint::multiscalar_mul(&[u_inv, u], &[G_L[i], G_R[i]]); H_L[i] = RistrettoPoint::multiscalar_mul(&[u, u_inv], &[H_L[i], H_R[i]]); } a = a_L; b = b_L; G = G_L; H = H_L; } Ok(InnerProductProof { L_vec, R_vec, a: a[0], b: b[0], }) } /// Computes three vectors of verification scalars \\([u\_{i}^{2}]\\), \\([u\_{i}^{-2}]\\) and /// \\([s\_{i}]\\) for combined multiscalar multiplication in a parent protocol. See [inner /// product protocol notes](index.html#verification-equation) for details. The verifier must /// provide the input length \\(n\\) explicitly to avoid unbounded allocation within the inner /// product proof. #[allow(clippy::type_complexity)] pub(crate) fn verification_scalars( &self, n: usize, transcript: &mut Transcript, ) -> Result<(Vec<Scalar>, Vec<Scalar>, Vec<Scalar>), RangeProofVerificationError> { let lg_n = self.L_vec.len(); if lg_n == 0 || lg_n >= 32 { // 4 billion multiplications should be enough for anyone // and this check prevents overflow in 1<<lg_n below. return Err(RangeProofVerificationError::InvalidBitSize); } if n != (1 << lg_n) { return Err(RangeProofVerificationError::InvalidBitSize); } Expand Down Expand Up @@ -252,11 +258,14 @@ impl InnerProductProof { transcript.innerproduct_domain_separator(n as u64); // 1. Recompute x_k,...,x_1 based on the proof transcript let mut challenges = Vec::with_capacity(lg_n); for (L, R) in self.L_vec.iter().zip(self.R_vec.iter()) { transcript.validate_and_append_point(b""L"", L)?; transcript.validate_and_append_point(b""R"", R)?; challenges.push(transcript.challenge_scalar(b""u"")); } // 2. Compute 1/(u_k...u_1) and 1/u_k, ..., 1/u_1 let mut challenges_inv = challenges.clone(); let allinv = Scalar::batch_invert(&mut challenges_inv); // 3. Compute u_i^2 and (1/u_i)^2 for i in 0..lg_n { challenges[i] = challenges[i] * challenges[i]; challenges_inv[i] = challenges_inv[i] * challenges_inv[i]; } let challenges_sq = challenges; let challenges_inv_sq = challenges_inv; // 4. Compute s values inductively. let mut s = Vec::with_capacity(n); s.push(allinv); for i in 1..n { let lg_i = (32 - 1 - (i as u32).leading_zeros()) as usize; let k = 1 << lg_i; // The challenges are stored in ""creation order"" as [u_k,...,u_1], // so u_{lg(i)+1} = is indexed by (lg_n-1) - lg_i let u_lg_i_sq = challenges_sq[(lg_n - 1) - lg_i]; s.push(s[i - k] * u_lg_i_sq); } Ok((challenges_sq, challenges_inv_sq, s)) }","use { crate::{ range_proof::{ errors::{RangeProofGenerationError, RangeProofVerificationError}, util, }, transcript::TranscriptProtocol, }, core::iter, curve25519_dalek::{ ristretto::{CompressedRistretto, RistrettoPoint}, scalar::Scalar, traits::{MultiscalarMul, VartimeMultiscalarMul}, }, merlin::Transcript, std::borrow::Borrow, }; #[allow(non_snake_case)] #[derive(Clone)] pub struct InnerProductProof { pub L_vec: Vec<CompressedRistretto>, // 32 * log(bit_length) pub R_vec: Vec<CompressedRistretto>, // 32 * log(bit_length) pub a: Scalar, // 32 bytes pub b: Scalar, // 32 bytes } #[allow(non_snake_case)] impl InnerProductProof { /// Create an inner-product proof. /// /// The proof is created with respect to the bases \\(G\\), \\(H'\\), /// where \\(H'\_i = H\_i \cdot \texttt{Hprime\\_factors}\_i\\). /// /// The `verifier` is passed in as a parameter so that the /// challenges depend on the *entire* transcript (including parent /// protocols). /// /// The lengths of the vectors must all be the same, and must all be /// a power of 2. #[allow(clippy::too_many_arguments)] pub fn new( Q: &RistrettoPoint, G_factors: &[Scalar], H_factors: &[Scalar], mut G_vec: Vec<RistrettoPoint>, mut H_vec: Vec<RistrettoPoint>, mut a_vec: Vec<Scalar>, mut b_vec: Vec<Scalar>, transcript: &mut Transcript, ) -> Result<Self, RangeProofGenerationError> { // Create slices G, H, a, b backed by their respective // vectors. This lets us reslice as we compress the lengths // of the vectors in the main loop below. let mut G = &mut G_vec[..]; let mut H = &mut H_vec[..]; let mut a = &mut a_vec[..]; let mut b = &mut b_vec[..]; let mut n = G.len(); // All of the input vectors must have the same length. if G.len() != n || H.len() != n || a.len() != n || b.len() != n || G_factors.len() != n || H_factors.len() != n { return Err(RangeProofGenerationError::GeneratorLengthMismatch); } // All of the input vectors must have a length that is a power of two. if !n.is_power_of_two() { return Err(RangeProofGenerationError::InvalidBitSize); } transcript.innerproduct_domain_separator(n as u64); let lg_n = n.next_power_of_two().trailing_zeros() as usize; let mut L_vec = Vec::with_capacity(lg_n); let mut R_vec = Vec::with_capacity(lg_n); // If it's the first iteration, unroll the Hprime = H*y_inv scalar mults // into multiscalar muls, for performance. if n != 1 { n = n.checked_div(2).unwrap(); let (a_L, a_R) = a.split_at_mut(n); let (b_L, b_R) = b.split_at_mut(n); let (G_L, G_R) = G.split_at_mut(n); Expand All @@ -95,7 +95,7 @@ impl InnerProductProof { let (H_L, H_R) = H.split_at_mut(n); let c_L = util::inner_product(a_L, b_R); let c_R = util::inner_product(a_R, b_L); let L = RistrettoPoint::multiscalar_mul( a_L.iter() .zip(G_factors[n..n.checked_mul(2).unwrap()].iter()) .map(|(a_L_i, g)| a_L_i * g) .chain( b_R.iter() Expand All @@ -113,7 +113,7 @@ impl InnerProductProof { .zip(H_factors[0..n].iter()) .map(|(b_R_i, h)| b_R_i * h), ) .chain(iter::once(c_L)), G_R.iter().chain(H_L.iter()).chain(iter::once(Q)), ) .compress(); let R = RistrettoPoint::multiscalar_mul( a_R.iter() .zip(G_factors[0..n].iter()) .map(|(a_R_i, g)| a_R_i * g) .chain( b_L.iter() .zip(H_factors[n..n.checked_mul(2).unwrap()].iter()) .map(|(b_L_i, h)| b_L_i * h), ) .chain(iter::once(c_R)), Expand All @@ -134,11 +134,17 @@ impl InnerProductProof { G_L.iter().chain(H_R.iter()).chain(iter::once(Q)), ) .compress(); L_vec.push(L); R_vec.push(R); transcript.append_point(b""L"", &L); transcript.append_point(b""R"", &R); let u = transcript.challenge_scalar(b""u""); let u_inv = u.invert(); for i in 0..n { a_L[i] = a_L[i] * u + u_inv * a_R[i]; b_L[i] = b_L[i] * u_inv + u * b_R[i]; G_L[i] = RistrettoPoint::multiscalar_mul( &[ u_inv * G_factors[i], u * G_factors[n.checked_add(i).unwrap()], ], &[G_L[i], G_R[i]], ); H_L[i] = RistrettoPoint::multiscalar_mul( &[ u * H_factors[i], u_inv * H_factors[n.checked_add(i).unwrap()], ], &[H_L[i], H_R[i]], ) } Expand All @@ -150,7 +156,7 @@ impl InnerProductProof { a = a_L; b = b_L; G = G_L; H = H_L; } while n != 1 { n = n.checked_div(2).unwrap(); let (a_L, a_R) = a.split_at_mut(n); let (b_L, b_R) = b.split_at_mut(n); let (G_L, G_R) = G.split_at_mut(n); Expand Down Expand Up @@ -218,7 +224,7 @@ impl InnerProductProof { let (H_L, H_R) = H.split_at_mut(n); let c_L = util::inner_product(a_L, b_R); let c_R = util::inner_product(a_R, b_L); let L = RistrettoPoint::multiscalar_mul( a_L.iter().chain(b_R.iter()).chain(iter::once(&c_L)), G_R.iter().chain(H_L.iter()).chain(iter::once(Q)), ) .compress(); let R = RistrettoPoint::multiscalar_mul( a_R.iter().chain(b_L.iter()).chain(iter::once(&c_R)), G_L.iter().chain(H_R.iter()).chain(iter::once(Q)), ) .compress(); L_vec.push(L); R_vec.push(R); transcript.append_point(b""L"", &L); transcript.append_point(b""R"", &R); let u = transcript.challenge_scalar(b""u""); let u_inv = u.invert(); for i in 0..n { a_L[i] = a_L[i] * u + u_inv * a_R[i]; b_L[i] = b_L[i] * u_inv + u * b_R[i]; G_L[i] = RistrettoPoint::multiscalar_mul(&[u_inv, u], &[G_L[i], G_R[i]]); H_L[i] = RistrettoPoint::multiscalar_mul(&[u, u_inv], &[H_L[i], H_R[i]]); } a = a_L; b = b_L; G = G_L; H = H_L; } Ok(InnerProductProof { L_vec, R_vec, a: a[0], b: b[0], }) } /// Computes three vectors of verification scalars \\([u\_{i}^{2}]\\), \\([u\_{i}^{-2}]\\) and /// \\([s\_{i}]\\) for combined multiscalar multiplication in a parent protocol. See [inner /// product protocol notes](index.html#verification-equation) for details. The verifier must /// provide the input length \\(n\\) explicitly to avoid unbounded allocation within the inner /// product proof. #[allow(clippy::type_complexity)] pub(crate) fn verification_scalars( &self, n: usize, transcript: &mut Transcript, ) -> Result<(Vec<Scalar>, Vec<Scalar>, Vec<Scalar>), RangeProofVerificationError> { let lg_n = self.L_vec.len(); if lg_n == 0 || lg_n >= 32 { // 4 billion multiplications should be enough for anyone // and this check prevents overflow in 1<<lg_n below. return Err(RangeProofVerificationError::InvalidBitSize); } if n != (1_usize.checked_shl(lg_n as u32).unwrap()) { return Err(RangeProofVerificationError::InvalidBitSize); } Expand Down Expand Up @@ -252,11 +258,14 @@ impl InnerProductProof { transcript.innerproduct_domain_separator(n as u64); // 1. Recompute x_k,...,x_1 based on the proof transcript let mut challenges = Vec::with_capacity(lg_n); for (L, R) in self.L_vec.iter().zip(self.R_vec.iter()) { transcript.validate_and_append_point(b""L"", L)?; transcript.validate_and_append_point(b""R"", R)?; challenges.push(transcript.challenge_scalar(b""u"")); } // 2. Compute 1/(u_k...u_1) and 1/u_k, ..., 1/u_1 let mut challenges_inv = challenges.clone(); let allinv = Scalar::batch_invert(&mut challenges_inv); // 3. Compute u_i^2 and (1/u_i)^2 for i in 0..lg_n { challenges[i] = challenges[i] * challenges[i]; challenges_inv[i] = challenges_inv[i] * challenges_inv[i]; } let challenges_sq = challenges; let challenges_inv_sq = challenges_inv; // 4. Compute s values inductively. let mut s = Vec::with_capacity(n); s.push(allinv); for i in 1..n { let lg_i = 31_u32.checked_sub((i as u32).leading_zeros()).unwrap() as usize; let k = 1_usize.checked_shl(lg_i as u32).unwrap(); // The challenges are stored in ""creation order"" as [u_k,...,u_1], // so u_{lg(i)+1} = is indexed by (lg_n-1) - lg_i let u_lg_i_sq = challenges_sq[lg_n .checked_sub(1) .and_then(|x| x.checked_sub(lg_i)) .unwrap()]; s.push(s[i - k] * u_lg_i_sq); } Ok((challenges_sq, challenges_inv_sq, s)) }",High,Ensure that a right shift operation will not overflow for bit lengths exceeding 64 bits.,https://github.com/solana-labs/solana/pull/34065/commits/c155a204810ea2d39ff9869300b309e3fe90733a,High
Sol-106,"In discrete_log, set_compression_batch_size enables users to set the compression batch size utilized during the discrete logarithm computation. The compression_batch_size parameter determines how many Ristretto points are processed together in each batch during the discrete logarithm computation. Currently, there is no check to ensure if compression_batch_size is set to zero, resulting in no points being processed in a batch.The issue arises in decode_u32, designed to iterate through the Ristretto points in batches. Consequently, when the batch size is set to zero, this iteration logic breaks down, as there are no points to process in each batch. The code in decode_u32 expects to process a non-empty batch of points and is unable to handle the scenario of an empty batch properly, resulting in a panic.","/// Adjusts inversion batch size in a discrete log instance. pub fn set_compression_batch_size( &mut self, compression_batch_size: usize, ) -> Result<(), DiscreteLogError> { if compression_batch_size >= TWO16 as usize { return Err(DiscreteLogError::DiscreteLogBatchSize); } self.compression_batch_size = compression_batch_size; Ok(()) }","/// Adjusts inversion batch size in a discrete log instance. pub fn set_compression_batch_size( &mut self, compression_batch_size: usize, ) -> Result<(), DiscreteLogError> { if compression_batch_size >= TWO16 as usize || compression_batch_size == 0 { return Err(DiscreteLogError::DiscreteLogBatchSize); } self.compression_batch_size = compression_batch_size; Ok(()) }",Medium,Ensure that compression_batch_size is always set to a positive value greater than zero. Add a validation check in set_compression_batch_size to prevent setting it to zero:,https://github.com/solana-labs/solana/pull/33699/commits/4c0dc00f9e41e46b23f2aa271e8b603decd593a5,High
Sol-107,"The issue arises due to a lack of explicit checks or restrictions on the length of the seed input, which may result in issues, including a stack overflow or panic if the seed length is very high. The code recursively calls Self::from_seed(seed)?, resulting in a panic.","impl SeedDerivable for AeKey { fn from_seed(seed: &[u8]) -> Result<Self, Box<dyn error::Error>> { const MINIMUM_SEED_LEN: usize = AE_KEY_LEN; if seed.len() < MINIMUM_SEED_LEN { return Err(AuthenticatedEncryptionError::SeedLengthTooShort.into()); } let mut hasher = Sha3_512::new(); hasher.update(seed); Expand Down Expand Up @@ -278,4 +284,16 @@ mod tests { let result = hasher.finalize(); Ok(Self(result[..AE_KEY_LEN].try_into()?)) }","impl SeedDerivable for AeKey { fn from_seed(seed: &[u8]) -> Result<Self, Box<dyn error::Error>> { const MINIMUM_SEED_LEN: usize = AE_KEY_LEN; const MAXIMUM_SEED_LEN: usize = 65535; if seed.len() < MINIMUM_SEED_LEN { return Err(AuthenticatedEncryptionError::SeedLengthTooShort.into()); } if seed.len() > MAXIMUM_SEED_LEN { return Err(AuthenticatedEncryptionError::SeedLengthTooLong.into()); } let mut hasher = Sha3_512::new(); hasher.update(seed); Expand Down Expand Up @@ -278,4 +284,16 @@ mod tests { let result = hasher.finalize(); Ok(Self(result[..AE_KEY_LEN].try_into()?)) } fn from_seed_and_derivation_path( _seed: &[u8], _derivation_path: Option<DerivationPath>, ) -> Result<Self, Box<dyn error::Error>> { Err(AuthenticatedEncryptionError::DerivationMethodNotSupported.into()) }",Medium,Implement a check that ensures the seed length does not exceed a preset value.,https://github.com/solana-labs/solana/pull/33700/files#diff-8e0f5e2484afe07494baa6995029cfde17aaa6c3e7030c98f7a0d266790c4a66,High
Sol-108,"Rent Misallocation. In approve_redeem_request.rs, the rent for closing the RedeemRequest is directed to the merchant. However, it should be assigned to merchant_authority, which represents the account that executed the initial payment.","pub merchant: Account<'info, Merchant>, #[account(mut, close = merchant, has_one = merchant, )] pub redeem_request: Account<'info, RedeemRequest>, pub token_program: Program<'info, Token>, }","pub merchant: Account<'info, Merchant>, #[account(mut, close = merchant_authority, has_one = merchant, )] pub redeem_request: Account<'info, RedeemRequest>, pub token_program: Program<'info, Token>, }",Medium,Change the value of close in the ApproveRedeemRequestAccounts struct’s redeem_request from merchant to merchant_authority.,https://github.com/solana-labs/wbtc/commit/b559f5bca487a067ecdd2b3df115c252b13ca057,High
Sol-109,"There is no delay mechanism on updating deposit fees and an upper bound of 100%. A user that submits a large deposit could be front-run by a pool manager who sets the fee close to 100% (ensuring that user still receives 1 pool token), receives almost the full value of the deposit, and then reduces the fee afterward.","/// Creates instructions required to deposit into a stake pool, given a stake /// account owned by the user. pub fn deposit_stake( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_withdraw_authority: &Pubkey, deposit_stake_address: &Pubkey, deposit_stake_withdraw_authority: &Pubkey, @@ -1290,13 +1388,60 @@ pub fn deposit_stake( referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, ) -> Vec<Instruction> { let stake_pool_deposit_authority = find_deposit_authority_program_address(program_id, stake_pool).0; let accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new(*validator_list_storage, false), AccountMeta::new_readonly(stake_pool_deposit_authority, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new(*deposit_stake_address, false), AccountMeta::new(*validator_stake_account, false), @@ -1309,28 +1454,99 @@ pub fn deposit_stake( AccountMeta::new_readonly(sysvar::stake_history::id(), false), AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(stake::program::id(), false), ]; vec![ stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, &stake_pool_deposit_authority, stake::state::StakeAuthorize::Staker, None, ), stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, &stake_pool_deposit_authority, stake::state::StakeAuthorize::Withdrawer, None, ), Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositStake.try_to_vec().unwrap(), }, ] } /// Creates instructions required to deposit into a stake pool, given a stake @@ -1352,48 +1568,66 @@ pub fn deposit_stake_with_authority( pool_mint: &Pubkey, token_program_id: &Pubkey, ) -> Vec<Instruction> { let accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new(*validator_list_storage, false), AccountMeta::new_readonly(*stake_pool_deposit_authority, true), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new(*deposit_stake_address, false), AccountMeta::new(*validator_stake_account, false), AccountMeta::new(*reserve_stake_account, false), AccountMeta::new(*pool_tokens_to, false), AccountMeta::new(*manager_fee_account, false), AccountMeta::new(*referrer_pool_tokens_account, false), AccountMeta::new(*pool_mint, false), AccountMeta::new_readonly(sysvar::clock::id(), false), AccountMeta::new_readonly(sysvar::stake_history::id(), false), AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(stake::program::id(), false), ]; vec![ stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, stake_pool_deposit_authority, stake::state::StakeAuthorize::Staker, None, ), stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, stake_pool_deposit_authority, stake::state::StakeAuthorize::Withdrawer, None, ), Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositStake.try_to_vec().unwrap(), }, ] } /// Creates instructions required to deposit SOL directly into a stake pool. pub fn deposit_sol( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, @@ -1404,9 +1638,11 @@ pub fn deposit_sol( referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, amount: u64, ) -> Instruction { let accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new(*reserve_stake_account, false), @@ -1418,15 +1654,94 @@ pub fn deposit_sol( AccountMeta::new_readonly(system_program::id(), false), AccountMeta::new_readonly(*token_program_id, false), ]; Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositSol(amount) .try_to_vec() .unwrap(), } } /// Creates instruction required to deposit SOL directly into a stake pool. /// The difference with `deposit_sol()` is that a deposit /// authority must sign this instruction. @@ -1442,32 +1757,59 @@ pub fn deposit_sol_with_authority( referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, amount: u64, ) -> Instruction { let accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new(*reserve_stake_account, false), AccountMeta::new(*lamports_from, true), AccountMeta::new(*pool_tokens_to, false), AccountMeta::new(*manager_fee_account, false), AccountMeta::new(*referrer_pool_tokens_account, false), AccountMeta::new(*pool_mint, false), AccountMeta::new_readonly(system_program::id(), false), AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(*sol_deposit_authority, true), ]; Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositSol(amount) .try_to_vec() .unwrap(), } } /// Creates a 'WithdrawStake' instruction. pub fn withdraw_stake( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, @@ -1480,7 +1822,8 @@ pub fn withdraw_stake( manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, amount: u64, ) -> Instruction { let accounts = vec![ AccountMeta::new(*stake_pool, false), @@ -1497,17 +1840,98 @@ pub fn withdraw_stake( AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(stake::program::id(), false), ]; Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawStake(amount) .try_to_vec() .unwrap(), } } /// Creates instruction required to withdraw SOL directly from a stake pool. pub fn withdraw_sol( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, @@ -1518,9 +1942,11 @@ pub fn withdraw_sol( manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens: u64, ) -> Instruction { let accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new_readonly(*user_transfer_authority, true), @@ -1534,15 +1960,95 @@ pub fn withdraw_sol( AccountMeta::new_readonly(stake::program::id(), false), AccountMeta::new_readonly(*token_program_id, false), ]; Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawSol(pool_tokens) .try_to_vec() .unwrap(), } } /// Creates instruction required to withdraw SOL directly from a stake pool. /// The difference with `withdraw_sol()` is that the sol withdraw authority /// must sign this instruction. @@ -1558,30 +2064,59 @@ pub fn withdraw_sol_with_authority( manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens: u64, ) -> Instruction { let accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new_readonly(*user_transfer_authority, true), AccountMeta::new(*pool_tokens_from, false), AccountMeta::new(*reserve_stake_account, false), AccountMeta::new(*lamports_to, false), AccountMeta::new(*manager_fee_account, false), AccountMeta::new(*pool_mint, false), AccountMeta::new_readonly(sysvar::clock::id(), false), AccountMeta::new_readonly(sysvar::stake_history::id(), false), AccountMeta::new_readonly(stake::program::id(), false), AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(*sol_withdraw_authority, true), ]; Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawSol(pool_tokens) .try_to_vec() .unwrap(), } }","/// Deposit some stake into the pool, with a specified slippage constraint. /// The output is a ""pool"" token representing ownership into the pool. /// Inputs are converted at the current ratio. /// /// 0. `[w]` Stake pool /// 1. `[w]` Validator stake list storage account /// 2. `[s]/[]` Stake pool deposit authority /// 3. `[]` Stake pool withdraw authority /// 4. `[w]` Stake account to join the pool (withdraw authority for the stake account should be first set to the stake pool deposit authority) /// 5. `[w]` Validator stake account for the stake account to be merged with /// 6. `[w]` Reserve stake account, to withdraw rent exempt reserve /// 7. `[w]` User account to receive pool tokens /// 8. `[w]` Account to receive pool fee tokens /// 9. `[w]` Account to receive a portion of pool fee tokens as referral fees /// 10. `[w]` Pool token mint account /// 11. '[]' Sysvar clock account /// 12. '[]' Sysvar stake history account /// 13. `[]` Pool token program id, /// 14. `[]` Stake program id, DepositStakeWithSlippage { /// Minimum amount of pool tokens that must be received minimum_pool_tokens_out: u64, }, /// Withdraw the token from the pool at the current ratio, specifying a /// minimum expected output lamport amount. /// /// Succeeds if the stake account has enough SOL to cover the desired amount /// of pool tokens, and if the withdrawal keeps the total staked amount /// above the minimum of rent-exempt amount + /// `max(crate::MINIMUM_ACTIVE_STAKE, solana_program::stake::tools::get_minimum_delegation())`. /// /// 0. `[w]` Stake pool /// 1. `[w]` Validator stake list storage account /// 2. `[]` Stake pool withdraw authority /// 3. `[w]` Validator or reserve stake account to split /// 4. `[w]` Unitialized stake account to receive withdrawal /// 5. `[]` User account to set as a new withdraw authority /// 6. `[s]` User transfer authority, for pool token account /// 7. `[w]` User account with pool tokens to burn from /// 8. `[w]` Account to receive pool fee tokens /// 9. `[w]` Pool token mint account /// 10. `[]` Sysvar clock account (required) /// 11. `[]` Pool token program id /// 12. `[]` Stake program id, /// userdata: amount of pool tokens to withdraw WithdrawStakeWithSlippage { /// Pool tokens to burn in exchange for lamports pool_tokens_in: u64, /// Minimum amount of lamports that must be received minimum_lamports_out: u64, }, /// Deposit SOL directly into the pool's reserve account, with a specified /// slippage constraint. The output is a ""pool"" token representing ownership /// into the pool. Inputs are converted at the current ratio. /// /// 0. `[w]` Stake pool /// 1. `[]` Stake pool withdraw authority /// 2. `[w]` Reserve stake account, to deposit SOL /// 3. `[s]` Account providing the lamports to be deposited into the pool /// 4. `[w]` User account to receive pool tokens /// 5. `[w]` Account to receive fee tokens /// 6. `[w]` Account to receive a portion of fee as referral fees /// 7. `[w]` Pool token mint account /// 8. `[]` System program account /// 9. `[]` Token program id /// 10. `[s]` (Optional) Stake pool sol deposit authority. DepositSolWithSlippage { /// Amount of lamports to deposit into the reserve lamports_in: u64, /// Minimum amount of pool tokens that must be received minimum_pool_tokens_out: u64, }, /// Withdraw SOL directly from the pool's reserve account. Fails if the /// reserve does not have enough SOL or if the slippage constraint is not /// met. /// /// 0. `[w]` Stake pool /// 1. `[]` Stake pool withdraw authority /// 2. `[s]` User transfer authority, for pool token account /// 3. `[w]` User account to burn pool tokens /// 4. `[w]` Reserve stake account, to withdraw SOL /// 5. `[w]` Account receiving the lamports from the reserve, must be a system account /// 6. `[w]` Account to receive pool fee tokens /// 7. `[w]` Pool token mint account /// 8. '[]' Clock sysvar /// 9. '[]' Stake history sysvar /// 10. `[]` Stake program account /// 11. `[]` Token program id /// 12. `[s]` (Optional) Stake pool sol withdraw authority WithdrawSolWithSlippage { /// Pool tokens to burn in exchange for lamports pool_tokens_in: u64, /// Minimum amount of lamports that must be received minimum_lamports_out: u64, }, } /// Creates an 'initialize' instruction. @@ -1274,12 +1373,11 @@ pub fn update_stake_pool( (update_list_instructions, final_instructions) } fn deposit_stake_internal( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_deposit_authority: Option<&Pubkey>, stake_pool_withdraw_authority: &Pubkey, deposit_stake_address: &Pubkey, deposit_stake_withdraw_authority: &Pubkey, @@ -1290,13 +1388,60 @@ pub fn deposit_stake( referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, minimum_pool_tokens_out: Option<u64>, ) -> Vec<Instruction> { let mut instructions = vec![]; let mut accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new(*validator_list_storage, false), ]; if let Some(stake_pool_deposit_authority) = stake_pool_deposit_authority { accounts.push(AccountMeta::new_readonly( *stake_pool_deposit_authority, true, )); instructions.extend_from_slice(&[ stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, stake_pool_deposit_authority, stake::state::StakeAuthorize::Staker, None, ), stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, stake_pool_deposit_authority, stake::state::StakeAuthorize::Withdrawer, None, ), ]); } else { let stake_pool_deposit_authority = find_deposit_authority_program_address(program_id, stake_pool).0; accounts.push(AccountMeta::new_readonly( stake_pool_deposit_authority, false, )); instructions.extend_from_slice(&[ stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, &stake_pool_deposit_authority, stake::state::StakeAuthorize::Staker, None, ), stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, &stake_pool_deposit_authority, stake::state::StakeAuthorize::Withdrawer, None, ), ]); }; accounts.extend_from_slice(&[ AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new(*deposit_stake_address, false), AccountMeta::new(*validator_stake_account, false), @@ -1309,28 +1454,99 @@ pub fn deposit_stake( AccountMeta::new_readonly(sysvar::stake_history::id(), false), AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(stake::program::id(), false), ]); instructions.push( if let Some(minimum_pool_tokens_out) = minimum_pool_tokens_out { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositStakeWithSlippage { minimum_pool_tokens_out, } .try_to_vec() .unwrap(), } } else { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositStake.try_to_vec().unwrap(), } }, ); instructions } /// Creates instructions required to deposit into a stake pool, given a stake /// account owned by the user. pub fn deposit_stake( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_withdraw_authority: &Pubkey, deposit_stake_address: &Pubkey, deposit_stake_withdraw_authority: &Pubkey, validator_stake_account: &Pubkey, reserve_stake_account: &Pubkey, pool_tokens_to: &Pubkey, manager_fee_account: &Pubkey, referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, ) -> Vec<Instruction> { deposit_stake_internal( program_id, stake_pool, validator_list_storage, None, stake_pool_withdraw_authority, deposit_stake_address, deposit_stake_withdraw_authority, validator_stake_account, reserve_stake_account, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, None, ) } /// Creates instructions to deposit into a stake pool with slippage pub fn deposit_stake_with_slippage( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_withdraw_authority: &Pubkey, deposit_stake_address: &Pubkey, deposit_stake_withdraw_authority: &Pubkey, validator_stake_account: &Pubkey, reserve_stake_account: &Pubkey, pool_tokens_to: &Pubkey, manager_fee_account: &Pubkey, referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, minimum_pool_tokens_out: u64, ) -> Vec<Instruction> { deposit_stake_internal( program_id, stake_pool, validator_list_storage, None, stake_pool_withdraw_authority, deposit_stake_address, deposit_stake_withdraw_authority, validator_stake_account, reserve_stake_account, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, Some(minimum_pool_tokens_out), ) } /// Creates instructions required to deposit into a stake pool, given a stake @@ -1352,48 +1568,66 @@ pub fn deposit_stake_with_authority( pool_mint: &Pubkey, token_program_id: &Pubkey, ) -> Vec<Instruction> { deposit_stake_internal( program_id, stake_pool, validator_list_storage, Some(stake_pool_deposit_authority), stake_pool_withdraw_authority, deposit_stake_address, deposit_stake_withdraw_authority, validator_stake_account, reserve_stake_account, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, None, ) } /// Creates instructions required to deposit into a stake pool with slippage, given /// a stake account owned by the user. The difference with `deposit()` is that a deposit /// authority must sign this instruction, which is required for private pools. pub fn deposit_stake_with_authority_and_slippage( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_deposit_authority: &Pubkey, stake_pool_withdraw_authority: &Pubkey, deposit_stake_address: &Pubkey, deposit_stake_withdraw_authority: &Pubkey, validator_stake_account: &Pubkey, reserve_stake_account: &Pubkey, pool_tokens_to: &Pubkey, manager_fee_account: &Pubkey, referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, minimum_pool_tokens_out: u64, ) -> Vec<Instruction> { deposit_stake_internal( program_id, stake_pool, validator_list_storage, Some(stake_pool_deposit_authority), stake_pool_withdraw_authority, deposit_stake_address, deposit_stake_withdraw_authority, validator_stake_account, reserve_stake_account, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, Some(minimum_pool_tokens_out), ) } /// Creates instructions required to deposit SOL directly into a stake pool. fn deposit_sol_internal( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, @@ -1404,9 +1638,11 @@ pub fn deposit_sol( referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, sol_deposit_authority: Option<&Pubkey>, lamports_in: u64, minimum_pool_tokens_out: Option<u64>, ) -> Instruction { let mut accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new(*reserve_stake_account, false), @@ -1418,15 +1654,94 @@ pub fn deposit_sol( AccountMeta::new_readonly(system_program::id(), false), AccountMeta::new_readonly(*token_program_id, false), ]; if let Some(sol_deposit_authority) = sol_deposit_authority { accounts.push(AccountMeta::new_readonly(*sol_deposit_authority, true)); } if let Some(minimum_pool_tokens_out) = minimum_pool_tokens_out { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositSolWithSlippage { lamports_in, minimum_pool_tokens_out, } .try_to_vec() .unwrap(), } } else { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositSol(lamports_in) .try_to_vec() .unwrap(), } } } /// Creates instruction to deposit SOL directly into a stake pool. pub fn deposit_sol( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, reserve_stake_account: &Pubkey, lamports_from: &Pubkey, pool_tokens_to: &Pubkey, manager_fee_account: &Pubkey, referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, lamports_in: u64, ) -> Instruction { deposit_sol_internal( program_id, stake_pool, stake_pool_withdraw_authority, reserve_stake_account, lamports_from, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, None, lamports_in, None, ) } /// Creates instruction to deposit SOL directly into a stake pool with slippage constraint. pub fn deposit_sol_with_slippage( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, reserve_stake_account: &Pubkey, lamports_from: &Pubkey, pool_tokens_to: &Pubkey, manager_fee_account: &Pubkey, referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, lamports_in: u64, minimum_pool_tokens_out: u64, ) -> Instruction { deposit_sol_internal( program_id, stake_pool, stake_pool_withdraw_authority, reserve_stake_account, lamports_from, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, None, lamports_in, Some(minimum_pool_tokens_out), ) } /// Creates instruction required to deposit SOL directly into a stake pool. /// The difference with `deposit_sol()` is that a deposit /// authority must sign this instruction. @@ -1442,32 +1757,59 @@ pub fn deposit_sol_with_authority( referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, lamports_in: u64, ) -> Instruction { deposit_sol_internal( program_id, stake_pool, stake_pool_withdraw_authority, reserve_stake_account, lamports_from, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, Some(sol_deposit_authority), lamports_in, None, ) } /// Creates instruction to deposit SOL directly into a stake pool with slippage constraint. pub fn deposit_sol_with_authority_and_slippage( program_id: &Pubkey, stake_pool: &Pubkey, sol_deposit_authority: &Pubkey, stake_pool_withdraw_authority: &Pubkey, reserve_stake_account: &Pubkey, lamports_from: &Pubkey, pool_tokens_to: &Pubkey, manager_fee_account: &Pubkey, referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, lamports_in: u64, minimum_pool_tokens_out: u64, ) -> Instruction { deposit_sol_internal( program_id, stake_pool, stake_pool_withdraw_authority, reserve_stake_account, lamports_from, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, Some(sol_deposit_authority), lamports_in, Some(minimum_pool_tokens_out), ) } fn withdraw_stake_internal( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, @@ -1480,7 +1822,8 @@ pub fn withdraw_stake( manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens_in: u64, minimum_lamports_out: Option<u64>, ) -> Instruction { let accounts = vec![ AccountMeta::new(*stake_pool, false), @@ -1497,17 +1840,98 @@ pub fn withdraw_stake( AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(stake::program::id(), false), ]; if let Some(minimum_lamports_out) = minimum_lamports_out { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawStakeWithSlippage { pool_tokens_in, minimum_lamports_out, } .try_to_vec() .unwrap(), } } else { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawStake(pool_tokens_in) .try_to_vec() .unwrap(), } } } /// Creates a 'WithdrawStake' instruction. pub fn withdraw_stake( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_withdraw: &Pubkey, stake_to_split: &Pubkey, stake_to_receive: &Pubkey, user_stake_authority: &Pubkey, user_transfer_authority: &Pubkey, user_pool_token_account: &Pubkey, manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens_in: u64, ) -> Instruction { withdraw_stake_internal( program_id, stake_pool, validator_list_storage, stake_pool_withdraw, stake_to_split, stake_to_receive, user_stake_authority, user_transfer_authority, user_pool_token_account, manager_fee_account, pool_mint, token_program_id, pool_tokens_in, None, ) } /// Creates a 'WithdrawStakeWithSlippage' instruction. pub fn withdraw_stake_with_slippage( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_withdraw: &Pubkey, stake_to_split: &Pubkey, stake_to_receive: &Pubkey, user_stake_authority: &Pubkey, user_transfer_authority: &Pubkey, user_pool_token_account: &Pubkey, manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens_in: u64, minimum_lamports_out: u64, ) -> Instruction { withdraw_stake_internal( program_id, stake_pool, validator_list_storage, stake_pool_withdraw, stake_to_split, stake_to_receive, user_stake_authority, user_transfer_authority, user_pool_token_account, manager_fee_account, pool_mint, token_program_id, pool_tokens_in, Some(minimum_lamports_out), ) } fn withdraw_sol_internal( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, @@ -1518,9 +1942,11 @@ pub fn withdraw_sol( manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, sol_withdraw_authority: Option<&Pubkey>, pool_tokens_in: u64, minimum_lamports_out: Option<u64>, ) -> Instruction { let mut accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new_readonly(*user_transfer_authority, true), @@ -1534,15 +1960,95 @@ pub fn withdraw_sol( AccountMeta::new_readonly(stake::program::id(), false), AccountMeta::new_readonly(*token_program_id, false), ]; if let Some(sol_withdraw_authority) = sol_withdraw_authority { accounts.push(AccountMeta::new_readonly(*sol_withdraw_authority, true)); } if let Some(minimum_lamports_out) = minimum_lamports_out { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawSolWithSlippage { pool_tokens_in, minimum_lamports_out, } .try_to_vec() .unwrap(), } } else { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawSol(pool_tokens_in) .try_to_vec() .unwrap(), } } } /// Creates instruction required to withdraw SOL directly from a stake pool. pub fn withdraw_sol( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, user_transfer_authority: &Pubkey, pool_tokens_from: &Pubkey, reserve_stake_account: &Pubkey, lamports_to: &Pubkey, manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens_in: u64, ) -> Instruction { withdraw_sol_internal( program_id, stake_pool, stake_pool_withdraw_authority, user_transfer_authority, pool_tokens_from, reserve_stake_account, lamports_to, manager_fee_account, pool_mint, token_program_id, None, pool_tokens_in, None, ) } /// Creates instruction required to withdraw SOL directly from a stake pool with /// slippage constraints. pub fn withdraw_sol_with_slippage( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, user_transfer_authority: &Pubkey, pool_tokens_from: &Pubkey, reserve_stake_account: &Pubkey, lamports_to: &Pubkey, manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens_in: u64, minimum_lamports_out: u64, ) -> Instruction { withdraw_sol_internal( program_id, stake_pool, stake_pool_withdraw_authority, user_transfer_authority, pool_tokens_from, reserve_stake_account, lamports_to, manager_fee_account, pool_mint, token_program_id, None, pool_tokens_in, Some(minimum_lamports_out), ) } /// Creates instruction required to withdraw SOL directly from a stake pool. /// The difference with `withdraw_sol()` is that the sol withdraw authority /// must sign this instruction. @@ -1558,30 +2064,59 @@ pub fn withdraw_sol_with_authority( manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens_in: u64, ) -> Instruction { withdraw_sol_internal( program_id, stake_pool, stake_pool_withdraw_authority, user_transfer_authority, pool_tokens_from, reserve_stake_account, lamports_to, manager_fee_account, pool_mint, token_program_id, Some(sol_withdraw_authority), pool_tokens_in, None, ) } /// Creates instruction required to withdraw SOL directly from a stake pool with /// a slippage constraint. /// The difference with `withdraw_sol()` is that the sol withdraw authority /// must sign this instruction. pub fn withdraw_sol_with_authority_and_slippage( program_id: &Pubkey, stake_pool: &Pubkey, sol_withdraw_authority: &Pubkey, stake_pool_withdraw_authority: &Pubkey, user_transfer_authority: &Pubkey, pool_tokens_from: &Pubkey, reserve_stake_account: &Pubkey, lamports_to: &Pubkey, manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens_in: u64, minimum_lamports_out: u64, ) -> Instruction { withdraw_sol_internal( program_id, stake_pool, stake_pool_withdraw_authority, user_transfer_authority, pool_tokens_from, reserve_stake_account, lamports_to, manager_fee_account, pool_mint, token_program_id, Some(sol_withdraw_authority), pool_tokens_in, Some(minimum_lamports_out), ) }",High,Add instructions that allow the user to specify the minimum amount of tokens they expect to receive.,"https://github.com/solana-labs/solana-program-library/pull/3980, https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/f5079737-734d-4b73-88a5-4c00eb20015d/Solana_Stake_Pool_audit_final.pdf?table=block&id=353af6fc-8c19-4e59-aefc-3aebc813b926&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743307200000&signature=ga0AQbGGoM7PDHTRtRK5aEOAatzTupp7GT5nQAkWS80&downloadName=Solana+Stake+Pool+Audit+Report.pdf",High
Sol-110,"There is no delay mechanism on updating deposit fees and an upper bound of 100%. A user that submits a large deposit could be front-run by a pool manager who sets the fee close to 100% (ensuring that user still receives 1 pool token), receives almost the full value of the deposit, and then reduces the fee afterward.","fn process_deposit_stake(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let stake_pool_info = next_account_info(account_info_iter)?; let validator_list_info = next_account_info(account_info_iter)?; @@ -2780,6 +2784,12 @@ impl Processor { return Err(StakePoolError::DepositTooSmall.into()); } Self::token_mint_to( stake_pool_info.key, token_program_info.clone(), @@ -2854,6 +2864,7 @@ impl Processor { program_id: &Pubkey, accounts: &[AccountInfo], deposit_lamports: u64, ) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let stake_pool_info = next_account_info(account_info_iter)?; @@ -2933,6 +2944,12 @@ impl Processor { return Err(StakePoolError::DepositTooSmall.into()); } Self::sol_transfer( from_user_lamports_info.clone(), reserve_stake_account_info.clone(), @@ -2996,6 +3013,7 @@ impl Processor { program_id: &Pubkey, accounts: &[AccountInfo], pool_tokens: u64, ) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let stake_pool_info = next_account_info(account_info_iter)?; @@ -3070,6 +3088,12 @@ impl Processor { return Err(StakePoolError::WithdrawalTooSmall.into()); } let stake_minimum_delegation = stake::tools::get_minimum_delegation()?; let stake_state = try_from_slice_unchecked::<stake::state::StakeState>(&stake_split_from.data.borrow())?; @@ -3301,6 +3325,7 @@ impl Processor { program_id: &Pubkey, accounts: &[AccountInfo], pool_tokens: u64, ) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let stake_pool_info = next_account_info(account_info_iter)?; @@ -3370,6 +3395,12 @@ impl Processor { return Err(StakePoolError::WithdrawalTooSmall.into()); } let new_reserve_lamports = reserve_stake_info .lamports() .saturating_sub(withdraw_lamports); @@ -3840,11 +3871,11 @@ impl Processor { } StakePoolInstruction::DepositStake => { msg!(""Instruction: DepositStake""); Self::process_deposit_stake(program_id, accounts) } StakePoolInstruction::WithdrawStake(amount) => { msg!(""Instruction: WithdrawStake""); Self::process_withdraw_stake(program_id, accounts, amount) } StakePoolInstruction::SetFee { fee } => { msg!(""Instruction: SetFee""); @@ -3864,11 +3895,11 @@ impl Processor { } StakePoolInstruction::DepositSol(lamports) => { msg!(""Instruction: DepositSol""); Self::process_deposit_sol(program_id, accounts, lamports) } StakePoolInstruction::WithdrawSol(pool_tokens) => { msg!(""Instruction: WithdrawSol""); Self::process_withdraw_sol(program_id, accounts, pool_tokens) } StakePoolInstruction::CreateTokenMetadata { name, symbol, uri } => { msg!(""Instruction: CreateTokenMetadata""); @@ -3894,6 +3925,48 @@ impl Processor { destination_transient_stake_seed, ) } } } } @@ -3945,6 +4018,7 @@ impl PrintProgramError for StakePoolError { StakePoolError::InvalidMetadataAccount => msg!(""Error: Metadata account derived from pool mint account does not match the one passed to program""), StakePoolError::UnsupportedMintExtension => msg!(""Error: mint has an unsupported extension""), StakePoolError::UnsupportedFeeAccountExtension => msg!(""Error: fee account has an unsupported extension""), } } }","/// Processes [DepositStake](enum.Instruction.html). #[inline(never)] // needed to avoid stack size violation fn process_deposit_stake( program_id: &Pubkey, accounts: &[AccountInfo], minimum_pool_tokens_out: Option<u64>, ) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let stake_pool_info = next_account_info(account_info_iter)?; let validator_list_info = next_account_info(account_info_iter)?; @@ -2780,6 +2784,12 @@ impl Processor { return Err(StakePoolError::DepositTooSmall.into()); } if let Some(minimum_pool_tokens_out) = minimum_pool_tokens_out { if pool_tokens_user < minimum_pool_tokens_out { return Err(StakePoolError::ExceededSlippage.into()); } } Self::token_mint_to( stake_pool_info.key, token_program_info.clone(), @@ -2854,6 +2864,7 @@ impl Processor { program_id: &Pubkey, accounts: &[AccountInfo], deposit_lamports: u64, minimum_pool_tokens_out: Option<u64>, ) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let stake_pool_info = next_account_info(account_info_iter)?; @@ -2933,6 +2944,12 @@ impl Processor { return Err(StakePoolError::DepositTooSmall.into()); } if let Some(minimum_pool_tokens_out) = minimum_pool_tokens_out { if pool_tokens_user < minimum_pool_tokens_out { return Err(StakePoolError::ExceededSlippage.into()); } } Self::sol_transfer( from_user_lamports_info.clone(), reserve_stake_account_info.clone(), @@ -2996,6 +3013,7 @@ impl Processor { program_id: &Pubkey, accounts: &[AccountInfo], pool_tokens: u64, minimum_lamports_out: Option<u64>, ) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let stake_pool_info = next_account_info(account_info_iter)?; @@ -3070,6 +3088,12 @@ impl Processor { return Err(StakePoolError::WithdrawalTooSmall.into()); } if let Some(minimum_lamports_out) = minimum_lamports_out { if withdraw_lamports < minimum_lamports_out { return Err(StakePoolError::ExceededSlippage.into()); } } let stake_minimum_delegation = stake::tools::get_minimum_delegation()?; let stake_state = try_from_slice_unchecked::<stake::state::StakeState>(&stake_split_from.data.borrow())?; @@ -3301,6 +3325,7 @@ impl Processor { program_id: &Pubkey, accounts: &[AccountInfo], pool_tokens: u64, minimum_lamports_out: Option<u64>, ) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let stake_pool_info = next_account_info(account_info_iter)?; @@ -3370,6 +3395,12 @@ impl Processor { return Err(StakePoolError::WithdrawalTooSmall.into()); } if let Some(minimum_lamports_out) = minimum_lamports_out { if withdraw_lamports < minimum_lamports_out { return Err(StakePoolError::ExceededSlippage.into()); } } let new_reserve_lamports = reserve_stake_info .lamports() .saturating_sub(withdraw_lamports); @@ -3840,11 +3871,11 @@ impl Processor { } StakePoolInstruction::DepositStake => { msg!(""Instruction: DepositStake""); Self::process_deposit_stake(program_id, accounts, None) } StakePoolInstruction::WithdrawStake(amount) => { msg!(""Instruction: WithdrawStake""); Self::process_withdraw_stake(program_id, accounts, amount, None) } StakePoolInstruction::SetFee { fee } => { msg!(""Instruction: SetFee""); @@ -3864,11 +3895,11 @@ impl Processor { } StakePoolInstruction::DepositSol(lamports) => { msg!(""Instruction: DepositSol""); Self::process_deposit_sol(program_id, accounts, lamports, None) } StakePoolInstruction::WithdrawSol(pool_tokens) => { msg!(""Instruction: WithdrawSol""); Self::process_withdraw_sol(program_id, accounts, pool_tokens, None) } StakePoolInstruction::CreateTokenMetadata { name, symbol, uri } => { msg!(""Instruction: CreateTokenMetadata""); @@ -3894,6 +3925,48 @@ impl Processor { destination_transient_stake_seed, ) } StakePoolInstruction::DepositStakeWithSlippage { minimum_pool_tokens_out, } => { msg!(""Instruction: DepositStakeWithSlippage""); Self::process_deposit_stake(program_id, accounts, Some(minimum_pool_tokens_out)) } StakePoolInstruction::WithdrawStakeWithSlippage { pool_tokens_in, minimum_lamports_out, } => { msg!(""Instruction: WithdrawStakeWithSlippage""); Self::process_withdraw_stake( program_id, accounts, pool_tokens_in, Some(minimum_lamports_out), ) } StakePoolInstruction::DepositSolWithSlippage { lamports_in, minimum_pool_tokens_out, } => { msg!(""Instruction: DepositSolWithSlippage""); Self::process_deposit_sol( program_id, accounts, lamports_in, Some(minimum_pool_tokens_out), ) } StakePoolInstruction::WithdrawSolWithSlippage { pool_tokens_in, minimum_lamports_out, } => { msg!(""Instruction: WithdrawSolWithSlippage""); Self::process_withdraw_sol( program_id, accounts, pool_tokens_in, Some(minimum_lamports_out), ) } } } } @@ -3945,6 +4018,7 @@ impl PrintProgramError for StakePoolError { StakePoolError::InvalidMetadataAccount => msg!(""Error: Metadata account derived from pool mint account does not match the one passed to program""), StakePoolError::UnsupportedMintExtension => msg!(""Error: mint has an unsupported extension""), StakePoolError::UnsupportedFeeAccountExtension => msg!(""Error: fee account has an unsupported extension""), StakePoolError::ExceededSlippage => msg!(""Error: instruction exceeds desired slippage limit""), } } }",High,Add instructions that allow the user to specify the minimum amount of tokens they expect to receive.,https://github.com/solana-labs/solana-program-library/pull/3980,High
Sol-111,"The rightmost_proof.index value represents the index of first empty leaf. In case the tree is full, it’s value is equal to 1<<MAX_DEPTH which doesn’t correspond to any valid leaf index. In functions set_leaf() and prove_leaf() the leaf index is compared to value of rightmost_proof.index to determine whether it is valid.Proof of Concept 1. Initialize concurrent merkle tree with MAX_DEPTH=3 2. Append 8 leafs in order to fill the tree and set rightmost_proof.index to 8==1<<MAX_DEPTH 3. Run set_leaf() with following parameters: • current_root set to current root value • previous_leaf set to value of leaf with index 0 • new_leaf with the desired new value • proof_vec with the proof for leaf with index 0 • index set to 8","pub fn prove_leaf( &self, current_root: Node, leaf: Node, proof_vec: &[Node], leaf_index: u32, ) -> Result<(), ConcurrentMerkleTreeError> { check_bounds(MAX_DEPTH, MAX_BUFFER_SIZE); if leaf_index > self.rightmost_proof.index { solana_logging!( ""Received an index larger than the rightmost index {} > {}"", leaf_index, self.rightmost_proof.index ); Err(ConcurrentMerkleTreeError::LeafIndexOutOfBounds) } else { let mut proof: [Node; MAX_DEPTH] = [Node::default(); MAX_DEPTH]; fill_in_proof::<MAX_DEPTH>(proof_vec, &mut proof); let valid_root = self.check_valid_leaf(current_root, leaf, &mut proof, ,→ leaf_index, true)?; if !valid_root { solana_logging!(""Proof failed to verify""); return Err(ConcurrentMerkleTreeError::InvalidProof); } Ok(()) } }","pub fn prove_leaf( &self, current_root: Node, leaf: Node, proof_vec: &[Node], leaf_index: u32, ) -> Result<(), ConcurrentMerkleTreeError> { check_bounds(MAX_DEPTH, MAX_BUFFER_SIZE); if leaf_index > self.rightmost_proof.index || leaf_index >= 1 << MAX_DEPTH { solana_logging!( ""Received an index larger than the rightmost index {} > {}"", leaf_index, self.rightmost_proof.index ); Err(ConcurrentMerkleTreeError::LeafIndexOutOfBounds) } else { let mut proof: [Node; MAX_DEPTH] = [Node::default(); MAX_DEPTH]; fill_in_proof::<MAX_DEPTH>(proof_vec, &mut proof); let valid_root = self.check_valid_leaf(current_root, leaf, &mut proof, ,→ leaf_index, true)?; if !valid_root { solana_logging!(""Proof failed to verify""); return Err(ConcurrentMerkleTreeError::InvalidProof); } Ok(()) } }",Medium,Any function that takes an index as a parameter should confirm that it is • less than or equal to rightmost_proof.index • less than 1<<MAX_DEPTH,https://solodit.cyfrin.io/issues/off-by-one-in-leaf-index-ottersec-none-solana-account-compression-pdf,High
Sol-112,"Owners can place sell orders on their NFTs by sending either a ListNftForSale instruction or a ListEditionForSale instruction to the program. Either instruction handler transfers the token’s authority to an account address derived from the program’s ID and a static seed and creates an order account. This account stores the ask price, NFT mint and several other parameters. Sellers may choose to cancel their orders before they’re filled. To accomplish that, they can send either a CancelNftSale or a CancelEditionSale. Either instruction handler transfers the NFT’s authority back to the seller (NFT owner) and closes the order account, sending the rent back to the seller. However, because neither the CancelNftSale instruction handler nor the CancelEditionSale instruction handler verifies if the NFT owner is, in fact, a transaction signer, an anonymous attacker may cause a DoS of the program by cancelling all sell orders.","processor/cancel_listing.rs pub fn process_cancel_listing(accounts: &[AccountInfo], program_id: &Pubkey) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let seller_wallet_account = next_account_info(account_info_iter)?; let selling_nft_token_account = next_account_info(account_info_iter)?; let sell_order_data_storage_account = next_account_info(account_info_iter)?; let nft_store_signer_pda_account = next_account_info(account_info_iter)?; let token_program = next_account_info(account_info_iter)?; } ... if sell_order_data.seller_wallet != *seller_wallet_account.key { msg!(""PhantasiaError::SellerMismatched""); return Err(PhantasiaError::SellerMismatched.into()); }","pub fn process_cancel_listing(accounts: &[AccountInfo], program_id: &Pubkey) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let seller_wallet_account = next_account_info(account_info_iter)?; let selling_nft_token_account = next_account_info(account_info_iter)?; let sell_order_data_storage_account = next_account_info(account_info_iter)?; let nft_store_signer_pda_account = next_account_info(account_info_iter)?; let token_program = next_account_info(account_info_iter)?; } if !seller_wallet_account.is_signer { msg!(""PhantasiaError::UnauthorizedCancellation""); return Err(PhantasiaError::UnauthorizedCancellation.into()); } .. if sell_order_data.seller_wallet != *seller_wallet_account.key { msg!(""PhantasiaError::SellerMismatched""); return Err(PhantasiaError::SellerMismatched.into()); }",High,Verify if the NFT owner (seller) is indeed the signer of CancelNftSale and CancelEditionSale instructions before updating the state.,https://solodit.cyfrin.io/issues/anonymous-sell-order-cancelling-halborn-none-phantasia-sports-ntf-store-solana-program-pdf,High
Sol-113,Sandwich Attack,"pub mod state; use anchor_lang::prelude::*; use anchor_spl::token::{self, Mint, Token, TokenAccount, Approve}; use whirlpool::{ self, state::{Whirlpool, TickArray, Position}, math::sqrt_price_from_tick_index, math::{mul_u256, U256Muldiv}, manager::liquidity_manager::calculate_liquidity_token_deltas, cpi::accounts::ModifyLiquidity, cpi::accounts::UpdateFeesAndRewards, cpi::accounts::CollectFees Expand Down Expand Up @@ -121,9 +118,11 @@ pub mod liquidity_lockbox { }; use solana_program::{pubkey::Pubkey, program::invoke_signed}; use spl_token::instruction::{burn_checked, mint_to}; pub use state::*; declare_id!(""7ahQGWysExobjeZ91RTsNqTCN3kWyHGZ43ud2vB7VVoZ""); #[program] pub mod liquidity_lockbox { use super::*; use solana_program::pubkey; // Program Id const PROGRAM_ID: Pubkey = pubkey!(""7ahQGWysExobjeZ91RTsNqTCN3kWyHGZ43ud2vB7VVoZ""); // Orca Whirlpool program address const ORCA: Pubkey = pubkey!(""whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc""); // OLAS-SOL Whirlpool address const WHIRLPOOL: Pubkey = pubkey!(""5dMKUYJDsjZkAD3wiV3ViQkuq9pSmWQ5eAzcQLtDnUT3""); // SOL address const SOL: Pubkey = pubkey!(""So11111111111111111111111111111111111111112""); // OLAS address const OLAS: Pubkey = pubkey!(""Ez3nzG9ofodYCvEmw73XhQ87LWNYVRM2s7diB5tBZPyM""); // Position account discriminator const POSITION_HEADER: [u8; 8] = [0xaa, 0xbc, 0x8f, 0xe4, 0x7a, 0x40, 0xf7, 0xd0]; // Full range lower and upper indexes const TICK_LOWER_INDEX: i32 = -443584; const TICK_UPPER_INDEX: i32 = 443584; // Bridged token decimals const BRIDGED_TOKEN_DECIMALS: u8 = 8; /// Initializes a Lockbox account that stores state data. pub fn initialize( ctx: Context<InitializeLiquidityLockbox> ) -> Result<()> { let whirlpool = ctx.accounts.position.whirlpool; let position_mint = ctx.accounts.position.position_mint; let liquidity = ctx.accounts.position.liquidity; let tick_lower_index = ctx.accounts.position.tick_lower_index; let tick_upper_index = ctx.accounts.position.tick_upper_index; // Check the whirlpool if whirlpool != WHIRLPOOL { return Err(ErrorCode::WrongWhirlpool.into()); } // Check the discriminator let account = &ctx.accounts.position.to_account_info(); let data = account.try_borrow_data()?; assert!(data.len() > 8); let mut discriminator = [0u8; 8]; discriminator.copy_from_slice(&data[0..8]); if discriminator != POSITION_HEADER { return Err(ErrorCode::WrongPositionHeader.into()); } // Check for the minimum liquidity in position if liquidity != 0 { return Err(ErrorCode::LiquidityNotZero.into()); } // Check tick values if tick_lower_index != TICK_LOWER_INDEX || tick_upper_index != TICK_UPPER_INDEX { return Err(ErrorCode::OutOfRange.into()); } // Check the PDA ownership if ctx.accounts.position.to_account_info().owner != &ORCA { return Err(ErrorCode::WrongOwner.into()); } // Check the position PDA address correctness let position_pda = Pubkey::find_program_address(&[b""position"", position_mint.as_ref()], &ORCA); if position_pda.0 != ctx.accounts.position.key() { return Err(ErrorCode::WrongPositionPDA.into()); } // Check that the first token mint is SOL if ctx.accounts.fee_collector_token_owner_account_a.mint != SOL { return Err(ErrorCode::WrongTokenMint.into()); } // Check that the second token mint is OLAS if ctx.accounts.fee_collector_token_owner_account_b.mint != OLAS { return Err(ErrorCode::WrongTokenMint.into()); } // Get the lockbox account let lockbox = &mut ctx.accounts.lockbox; // Get the anchor-derived bump let bump = *ctx.bumps.get(""lockbox"").unwrap(); // Initialize lockbox account lockbox.initialize( bump, ctx.accounts.bridged_token_mint.key(), ctx.accounts.fee_collector_token_owner_account_a.key(), ctx.accounts.fee_collector_token_owner_account_b.key(), ctx.accounts.position.key(), ctx.accounts.pda_position_account.key() )?; Ok(()) } /// Deposits an NFT position under the Lockbox management and gets bridged tokens minted in return. /// /// ### Parameters /// - `token_max_a` - Max amount of SOL token to be added for liquidity. /// - `token_max_b` - Max amount of OLAS token to be added for liquidity. pub fn deposit(ctx: Context<DepositPositionForLiquidity>, token_max_a: u64, token_max_b: u64, ) -> Result<()> { Expand Down Expand Up @@ -185,35 +184,10 @@ pub mod liquidity_lockbox { // Check the initial token amounts if token_max_a == 0 || token_max_b == 0 { return Err(ErrorCode::LiquidityZero.into()); } // Check the position account if ctx.accounts.position.key() != ctx.accounts.lockbox.position { return Err(ErrorCode::WrongPositionPDA.into()); } // Check the position PDA address correctness let position_pda = Pubkey::find_program_address(&[b""position"", ctx.accounts.position.position_mint.as_ref()], &ORCA); if position_pda.0 != ctx.accounts.position.key() { return Err(ErrorCode::WrongPositionPDA.into()); } // Check the lockbox PDA address correctness let lockbox_pda = Pubkey::find_program_address(&[b""liquidity_lockbox""], &PROGRAM_ID); if lockbox_pda.0 != ctx.accounts.lockbox.key() { return Err(ErrorCode::WrongLockboxPDA.into()); } // Check the whirlpool if ctx.accounts.whirlpool.key() != WHIRLPOOL { return Err(ErrorCode::WrongWhirlpool.into()); } // Check the Orca Whirlpool program address if ctx.accounts.whirlpool_program.key() != ORCA { return Err(ErrorCode::WrongOrcaAccount.into()); } // Check that the first token mint is SOL if ctx.accounts.token_owner_account_a.mint != SOL || ctx.accounts.token_vault_a.mint != SOL { return Err(ErrorCode::WrongTokenMint.into()); } // Check that the second token mint is OLAS if ctx.accounts.token_owner_account_b.mint != OLAS || ctx.accounts.token_vault_b.mint != OLAS { return Err(ErrorCode::WrongTokenMint.into()); } // Check tick arrays owner if ctx.accounts.tick_array_lower.to_account_info().owner != &ORCA || ctx.accounts.tick_array_upper.to_account_info().owner != &ORCA { return Err(ErrorCode::WrongOwner.into()); } // Calculate token deltas let tick_index_lower = ctx.accounts.position.tick_lower_index; let tick_index_upper = ctx.accounts.position.tick_upper_index; let tick_index_current = ctx.accounts.whirlpool.tick_current_index; // assuming InRange status if tick_index_current < tick_index_lower || tick_index_upper <= tick_index_current { return Err(ErrorCode::OutOfRange.into()); } let sqrt_price_current_x64 = ctx.accounts.whirlpool.sqrt_price; let sqrt_price_upper_x64 = sqrt_price_from_tick_index(ctx.accounts.position.tick_upper_index); // get_liquidity_from_token_a is imported from whirlpools-sdk (getLiquidityFromTokenA) let liquidity_amount = get_liquidity_from_token_a(token_max_a as u128, sqrt_price_current_x64, sqrt_price_upper_x64)?; let (delta_a, delta_b) = calculate_liquidity_token_deltas( tick_index_current, sqrt_price_current_x64, &ctx.accounts.position, liquidity_amount as i128 )?; // block too much deposit if delta_a > token_max_a || delta_b > token_max_b { return Err(ErrorCode::DeltaAmountOverflow.into()); } // Check that the liquidity is within uint64 bounds if liquidity_amount > std::u64::MAX as u128 { return Err(ErrorCode::LiquidityOverflow.into()); } let position_liquidity = liquidity_amount as u64; // Total liquidity update with the check ctx.accounts.lockbox.total_liquidity = ctx.accounts.lockbox .total_liquidity .checked_add(position_liquidity) .unwrap_or_else(|| panic!(""Liquidity overflow"")); // Approve SOL tokens for the lockbox Expand All @@ -226,7 +200,7 @@ pub mod liquidity_lockbox { token::approve( CpiContext::new( ctx.accounts.token_program.to_account_info(), Approve { to: ctx.accounts.token_owner_account_a.to_account_info(), delegate: ctx.accounts.lockbox.to_account_info(), authority: ctx.accounts.signer.to_account_info(), }, ), delta_a, )?; // Approve OLAS tokens for the lockbox Expand All @@ -239,7 +213,7 @@ pub mod liquidity_lockbox { token::approve( CpiContext::new( ctx.accounts.token_program.to_account_info(), Approve { to: ctx.accounts.token_owner_account_b.to_account_info(), delegate: ctx.accounts.lockbox.to_account_info(), authority: ctx.accounts.signer.to_account_info(), }, ), delta_b, )?; // Get lockbox signer seeds Expand All @@ -266,7 +240,7 @@ pub mod liquidity_lockbox { let signer_seeds = &[&ctx.accounts.lockbox.seeds()[..]]; // CPI call to increase liquidity let cpi_program_modify_liquidity = ctx.accounts.whirlpool_program.to_account_info(); let cpi_accounts_modify_liquidity = ModifyLiquidity { whirlpool: ctx.accounts.whirlpool.to_account_info(), position: ctx.accounts.position.to_account_info(), position_authority: ctx.accounts.lockbox.to_account_info(), position_token_account: ctx.accounts.pda_position_account.to_account_info(), tick_array_lower: ctx.accounts.tick_array_lower.to_account_info(), tick_array_upper: ctx.accounts.tick_array_upper.to_account_info(), token_owner_account_a: ctx.accounts.token_owner_account_a.to_account_info(), token_owner_account_b: ctx.accounts.token_owner_account_b.to_account_info(), token_vault_a: ctx.accounts.token_vault_a.to_account_info(), token_vault_b: ctx.accounts.token_vault_b.to_account_info(), token_program: ctx.accounts.token_program.to_account_info(), }; let cpi_ctx_modify_liquidity = CpiContext::new_with_signer( cpi_program_modify_liquidity, cpi_accounts_modify_liquidity, signer_seeds ); whirlpool::cpi::increase_liquidity(cpi_ctx_modify_liquidity, liquidity_amount, delta_a, delta_b)?; // Mint bridged tokens in the amount of position liquidity invoke_signed( Expand All @@ -276,7 +250,7 @@ pub mod liquidity_lockbox { &mint_to( ctx.accounts.token_program.key, ctx.accounts.bridged_token_mint.to_account_info().key, ctx.accounts.bridged_token_account.to_account_info().key, ctx.accounts.lockbox.to_account_info().key, &[ctx.accounts.lockbox.to_account_info().key], position_liquidity, )?, &[ ctx.accounts.bridged_token_mint.to_account_info(), Expand All @@ -287,12 +261,36 @@ pub mod liquidity_lockbox { ctx.accounts.bridged_token_account.to_account_info(), ctx.accounts.lockbox.to_account_info(), ctx.accounts.token_program.to_account_info(), ], &[&ctx.accounts.lockbox.seeds()], )?; emit!(DepositEvent { signer: ctx.accounts.signer.key(), position: ctx.accounts.position.key(), amount_a: delta_a, amount_b: delta_b, deposit_liquidity: position_liquidity, total_liquidity: ctx.accounts.lockbox.total_liquidity }); Expand Down Expand Up @@ -455,34 +453,6 @@ pub mod liquidity_lockbox { Ok(()) } /// Withdraws a specified amount of liquidity for supplied bridged tokens. /// /// ### Parameters /// - `amount` - Amount of bridged tokens corresponding to the position liquidity amount to withdraw. /// - `token_min_a` - The minimum amount of SOL the signer is willing to withdraw. /// - `token_min_b` - The minimum amount of OLAS the signer is willing to withdraw. pub fn withdraw( ctx: Context<WithdrawLiquidityForTokens>, amount: u64, token_min_a: u64, token_min_b: u64 ) -> Result<()> { // Check if there is any liquidity left in the Lockbox if ctx.accounts.position.liquidity == 0 { return Err(ErrorCode::LiquidityZero.into()); } // Check the token amount if amount == 0 { return Err(ErrorCode::LiquidityZero.into()); } // Check the lockbox PDA address correctness let lockbox_pda = Pubkey::find_program_address(&[b""liquidity_lockbox""], &PROGRAM_ID); if lockbox_pda.0 != ctx.accounts.lockbox.key() { return Err(ErrorCode::WrongLockboxPDA.into()); } // Check the Orca Whirlpool program address if ctx.accounts.whirlpool_program.key() != ORCA { return Err(ErrorCode::WrongOrcaAccount.into()); } // Check that the first token mint is SOL if ctx.accounts.token_owner_account_a.mint != SOL || ctx.accounts.token_vault_a.mint != SOL { return Err(ErrorCode::WrongTokenMint.into()); } // Check that the second token mint is OLAS if ctx.accounts.token_owner_account_b.mint != OLAS || ctx.accounts.token_vault_b.mint != OLAS { return Err(ErrorCode::WrongTokenMint.into()); } // Check tick arrays owner if ctx.accounts.tick_array_lower.to_account_info().owner != &ORCA || ctx.accounts.tick_array_upper.to_account_info().owner != &ORCA { return Err(ErrorCode::WrongOwner.into()); } // Check the requested amount to be smaller or equal than the position liquidity if amount > ctx.accounts.position.liquidity as u64 { return Err(ErrorCode::AmountExceedsPositionLiquidity.into()); } // Burn provided amount of bridged tokens invoke_signed( &burn_checked( ctx.accounts.token_program.key, ctx.accounts.bridged_token_account.to_account_info().key, ctx.accounts.bridged_token_mint.to_account_info().key, ctx.accounts.signer.to_account_info().key, &[], amount, BRIDGED_TOKEN_DECIMALS, )?, &[ ctx.accounts.token_program.to_account_info(), ctx.accounts.bridged_token_account.to_account_info(), ctx.accounts.bridged_token_mint.to_account_info(), ctx.accounts.signer.to_account_info(), ], &[] )?; // Get program signer seeds let signer_seeds = &[&ctx.accounts.lockbox.seeds()[..]]; // Update fees for the position let cpi_program_update_fees = ctx.accounts.whirlpool_program.to_account_info(); let cpi_accounts_update_fees = UpdateFeesAndRewards { whirlpool: ctx.accounts.whirlpool.to_account_info(), position: ctx.accounts.position.to_account_info(), tick_array_lower: ctx.accounts.tick_array_lower.to_account_info(), tick_array_upper: ctx.accounts.tick_array_upper.to_account_info() }; let cpi_ctx_update_fees = CpiContext::new_with_signer( cpi_program_update_fees, cpi_accounts_update_fees, signer_seeds ); whirlpool::cpi::update_fees_and_rewards(cpi_ctx_update_fees)?; // Collect fees from the position let cpi_program_collect_fees = ctx.accounts.whirlpool_program.to_account_info(); let cpi_accounts_collect_fees = CollectFees { whirlpool: ctx.accounts.whirlpool.to_account_info(), position_authority: ctx.accounts.lockbox.to_account_info(), position: ctx.accounts.position.to_account_info(), position_token_account: ctx.accounts.pda_position_account.to_account_info(), token_owner_account_a: ctx.accounts.fee_collector_token_owner_account_a.to_account_info(), token_owner_account_b: ctx.accounts.fee_collector_token_owner_account_b.to_account_info(), token_vault_a: ctx.accounts.token_vault_a.to_account_info(), token_vault_b: ctx.accounts.token_vault_b.to_account_info(), token_program: ctx.accounts.token_program.to_account_info() }; let cpi_ctx_collect_fees = CpiContext::new_with_signer( cpi_program_collect_fees, cpi_accounts_collect_fees, signer_seeds ); whirlpool::cpi::collect_fees(cpi_ctx_collect_fees)?; // CPI to decrease liquidity let cpi_program_modify_liquidity = ctx.accounts.whirlpool_program.to_account_info(); let cpi_accounts_modify_liquidity = ModifyLiquidity { whirlpool: ctx.accounts.whirlpool.to_account_info(), position: ctx.accounts.position.to_account_info(), position_authority: ctx.accounts.lockbox.to_account_info(), position_token_account: ctx.accounts.pda_position_account.to_account_info(), tick_array_lower: ctx.accounts.tick_array_lower.to_account_info(), tick_array_upper: ctx.accounts.tick_array_upper.to_account_info(), token_owner_account_a: ctx.accounts.token_owner_account_a.to_account_info(), token_owner_account_b: ctx.accounts.token_owner_account_b.to_account_info(), token_vault_a: ctx.accounts.token_vault_a.to_account_info(), token_vault_b: ctx.accounts.token_vault_b.to_account_info(), token_program: ctx.accounts.token_program.to_account_info() }; let cpi_ctx_modify_liquidity = CpiContext::new_with_signer( cpi_program_modify_liquidity, cpi_accounts_modify_liquidity, signer_seeds ); whirlpool::cpi::decrease_liquidity(cpi_ctx_modify_liquidity, amount as u128, token_min_a, token_min_b)?; // Update the position liquidity ctx.accounts.lockbox.total_liquidity = ctx.accounts.lockbox .total_liquidity .checked_sub(amount) .unwrap_or_else(|| panic!(""Liquidity underflow"")); emit!(WithdrawEvent { signer: ctx.accounts.signer.key(), position: ctx.accounts.position.key(), token_owner_account_a: ctx.accounts.token_owner_account_a.key(), token_owner_account_b: ctx.accounts.token_owner_account_b.key(), withdraw_liquidity: amount, total_liquidity: ctx.accounts.lockbox.total_liquidity }); Ok(()) } } // https://github.com/orca-so/whirlpools/blob/main/sdk/src/quotes/public/increase-liquidity-quote.ts#L147 // https://github.com/orca-so/whirlpools/blob/537306c096bcbbf9cb8d5cff337c989dcdd999b4/sdk/src/utils/position-util.ts#L69 /// Gets liquidity from token A parameters. /// /// ### Parameters /// - `amount` - Token A amount. /// - `sqrt_price_lower_x64` - Lower sqrt price. /// - `sqrt_price_upper_x64` - Upper sqrt price. fn get_liquidity_from_token_a(amount: u128, sqrt_price_lower_x64: u128, sqrt_price_upper_x64: u128 ) -> Result<u128> { // Δa = liquidity/sqrt_price_lower - liquidity/sqrt_price_upper // liquidity = Δa * ((sqrt_price_lower * sqrt_price_upper) / (sqrt_price_upper - sqrt_price_lower)) assert!(sqrt_price_lower_x64 < sqrt_price_upper_x64); let sqrt_price_diff = sqrt_price_upper_x64 - sqrt_price_lower_x64; let numerator = mul_u256(sqrt_price_lower_x64, sqrt_price_upper_x64); // x64 * x64 let denominator = U256Muldiv::new(0, sqrt_price_diff); // x64 let (quotient, _remainder) = numerator.div(denominator, false); let liquidity = quotient .mul(U256Muldiv::new(0, amount)) .shift_word_right() .try_into_u128() .or(Err(ErrorCode::WhirlpoolNumberDownCastError.into())); return liquidity; } #[derive(Accounts)] pub struct InitializeLiquidityLockbox<'info> { #[account(mut)] Expand Down Expand Up @@ -708,10 +678,6 @@ pub struct DepositEvent { pub signer: Signer<'info>, #[account(init, seeds = [ b""liquidity_lockbox"".as_ref() ], bump, payer = signer, space = LiquidityLockbox::LEN)] pub lockbox: Box<Account<'info, LiquidityLockbox>>, #[account(constraint = bridged_token_mint.mint_authority.unwrap() == lockbox.key())] pub bridged_token_mint: Box<Account<'info, Mint>>, #[account(constraint = signer.key == &fee_collector_token_owner_account_a.owner, constraint = fee_collector_token_owner_account_a.key() != fee_collector_token_owner_account_b.key() )] pub fee_collector_token_owner_account_a: Box<Account<'info, TokenAccount>>, #[account(constraint = signer.key == &fee_collector_token_owner_account_b.owner)] pub fee_collector_token_owner_account_b: Box<Account<'info, TokenAccount>>, #[account(has_one = whirlpool)] pub position: Box<Account<'info, Position>>, #[account(mut, constraint = pda_position_account.mint == position.position_mint, constraint = pda_position_account.amount == 1, constraint = lockbox.key() == pda_position_account.owner )] pub pda_position_account: Box<Account<'info, TokenAccount>>, pub whirlpool: Box<Account<'info, Whirlpool>>, #[account(address = token::ID)] pub token_program: Program<'info, Token>, pub system_program: Program<'info, System>, pub rent: Sysvar<'info, Rent> } #[derive(Accounts)] pub struct DepositPositionForLiquidity<'info> { #[account(mut)] pub signer: Signer<'info>, #[account(mut, address = lockbox.position, has_one = whirlpool)] pub position: Box<Account<'info, Position>>, #[account(mut, constraint = lockbox.key() == pda_position_account.owner, constraint = pda_position_account.mint == position.position_mint, constraint = pda_position_account.amount == 1 )] pub pda_position_account: Box<Account<'info, TokenAccount>>, #[account(mut, address = position.whirlpool)] pub whirlpool: Box<Account<'info, Whirlpool>>, #[account(mut, constraint = token_owner_account_a.mint == whirlpool.token_mint_a, constraint = token_owner_account_a.mint != token_owner_account_b.mint, constraint = signer.key == &token_owner_account_a.owner )] pub token_owner_account_a: Box<Account<'info, TokenAccount>>, #[account(mut, constraint = token_owner_account_b.mint == whirlpool.token_mint_b, constraint = signer.key == &token_owner_account_b.owner )] pub token_owner_account_b: Box<Account<'info, TokenAccount>>, #[account(mut, constraint = token_vault_a.key() == whirlpool.token_vault_a, constraint = token_vault_a.key() != token_vault_b.key() )] pub token_vault_a: Box<Account<'info, TokenAccount>>, #[account(mut, constraint = token_vault_b.key() == whirlpool.token_vault_b)] pub token_vault_b: Box<Account<'info, TokenAccount>>, #[account(mut, has_one = whirlpool, constraint = tick_array_lower.key() != tick_array_upper.key())] pub tick_array_lower: AccountLoader<'info, TickArray>, #[account(mut, has_one = whirlpool)] pub tick_array_upper: AccountLoader<'info, TickArray>, #[account(mut, address = lockbox.bridged_token_mint)] pub bridged_token_mint: Box<Account<'info, Mint>>, #[account(mut, constraint = bridged_token_account.mint == lockbox.bridged_token_mint, constraint = bridged_token_mint.key() == lockbox.bridged_token_mint, constraint = signer.key == &bridged_token_account.owner, )] pub bridged_token_account: Box<Account<'info, TokenAccount>>, #[account(mut)] pub lockbox: Box<Account<'info, LiquidityLockbox>>, pub whirlpool_program: Program<'info, whirlpool::program::Whirlpool>, #[account(address = token::ID)] pub token_program: Program<'info, Token>, pub system_program: Program<'info, System>, pub rent: Sysvar<'info, Rent>, } #[derive(Accounts)] pub struct WithdrawLiquidityForTokens<'info> { #[account(mut, address = position.whirlpool)] pub whirlpool: Box<Account<'info, Whirlpool>>, pub signer: Signer<'info>, #[account(mut, address = lockbox.bridged_token_mint)] pub bridged_token_mint: Box<Account<'info, Mint>>, #[account(mut, constraint = bridged_token_account.mint == lockbox.bridged_token_mint, constraint = lockbox.bridged_token_mint == bridged_token_mint.key(), constraint = signer.key == &bridged_token_account.owner, )] pub bridged_token_account: Box<Account<'info, TokenAccount>>, #[account(mut, address = lockbox.position, has_one = whirlpool, has_one = position_mint)] pub position: Box<Account<'info, Position>>, #[account(mut, constraint = pda_position_account.mint == position.position_mint, constraint = pda_position_account.amount == 1, constraint = lockbox.key() == pda_position_account.owner )] pub pda_position_account: Box<Account<'info, TokenAccount>>, #[account(mut, address = position.position_mint, constraint = position_mint.supply == 1 )] pub position_mint: Box<Account<'info, Mint>>, #[account(mut, constraint = token_owner_account_a.mint == whirlpool.token_mint_a, constraint = token_owner_account_a.mint != token_owner_account_b.mint, constraint = signer.key == &token_owner_account_a.owner )] pub token_owner_account_a: Box<Account<'info, TokenAccount>>, #[account(mut, constraint = token_owner_account_b.mint == whirlpool.token_mint_b, constraint = signer.key == &token_owner_account_b.owner )] pub token_owner_account_b: Box<Account<'info, TokenAccount>>, #[account(mut, address = lockbox.fee_collector_token_owner_account_a)] pub fee_collector_token_owner_account_a: Box<Account<'info, TokenAccount>>, #[account(mut, address = lockbox.fee_collector_token_owner_account_b)] pub fee_collector_token_owner_account_b: Box<Account<'info, TokenAccount>>, #[account(mut, constraint = token_vault_a.key() == whirlpool.token_vault_a, constraint = token_vault_a.key() != token_vault_b.key() )] pub token_vault_a: Box<Account<'info, TokenAccount>>, #[account(mut, constraint = token_vault_b.key() == whirlpool.token_vault_b)] pub token_vault_b: Box<Account<'info, TokenAccount>>, #[account(mut, has_one = whirlpool, constraint = tick_array_lower.key() != tick_array_upper.key())] pub tick_array_lower: AccountLoader<'info, TickArray>, #[account(mut, has_one = whirlpool)] pub tick_array_upper: AccountLoader<'info, TickArray>, #[account(mut)] pub lockbox: Box<Account<'info, LiquidityLockbox>>, pub whirlpool_program: Program<'info, whirlpool::program::Whirlpool>, #[account(address = token::ID)] pub token_program: Program<'info, Token> } #[error_code] pub enum ErrorCode { #[msg(""Liquidity value overflow"")] LiquidityOverflow, #[msg(""Liquidity value underflow"")] LiquidityUnderflow, #[msg(""Wrong whirlpool address"")] WrongWhirlpool, #[msg(""Wrong position PDA header"")] WrongPositionHeader, #[msg(""Wrong position ID"")] WrongPositionId, #[msg(""Liquidity is zero"")] LiquidityZero, #[msg(""Liquidity is not zero"")] LiquidityNotZero, #[msg(""Delta token amount bigger than the max allowed one"")] DeltaAmountOverflow, #[msg(""Requested amount exceeds a position liquidity"")] AmountExceedsPositionLiquidity, #[msg(""Requested amount exceeds total liquidity"")] AmountExceedsTotalLiquidity, #[msg(""Tick out of range"")] OutOfRange, #[msg(""Wrong account owner"")] WrongOwner, #[msg(""Provided wrong position PDA"")] WrongPositionPDA, #[msg(""Provided wrong lockbox PDA"")] WrongLockboxPDA, #[msg(""Provided wrong position ATA"")] WrongPositionAccount, #[msg(""Provided wrong PDA position ATA"")] WrongPDAPositionAccount, #[msg(""Provided wrong Orca program account"")] WrongOrcaAccount, #[msg(""Wrong token mint"")] WrongTokenMint, #[msg(""Whirlpool number downcast"")] WhirlpoolNumberDownCastError } #[event] pub struct DepositEvent { // Signer (user) #[index] pub signer: Pubkey, // Liquidity position #[index] pub position: Pubkey, // Amount of SOL token for the liquidity pub amount_a: u64, // Amount of OLAS token for the liquidity pub amount_b: u64, // Deposit liquidity amount pub deposit_liquidity: u64, // Total position liquidity Expand Down pub total_liquidity: u64 } #[event] pub struct WithdrawEvent { // Signer (user) #[index] pub signer: Pubkey, // Liquidity position #[index] pub position: Pubkey, // User ATA token A token_owner_account_a: Pubkey, // User ATA token B token_owner_account_b: Pubkey, // Withdraw liquidity amount pub withdraw_liquidity: u64, // Total position liquidity pub total_liquidity: u64 }","pub mod state; use anchor_lang::prelude::*; use anchor_spl::token::{self, Mint, Token, TokenAccount, Approve}; use whirlpool::{ self, state::{Whirlpool, TickArray, Position}, cpi::accounts::ModifyLiquidity, cpi::accounts::UpdateFeesAndRewards, cpi::accounts::CollectFees Expand Down Expand Up @@ -121,9 +118,11 @@ pub mod liquidity_lockbox { }; use solana_program::{pubkey::Pubkey, program::invoke_signed}; use spl_token::instruction::{burn_checked, mint_to}; pub use state::*; declare_id!(""7ahQGWysExobjeZ91RTsNqTCN3kWyHGZ43ud2vB7VVoZ""); #[program] pub mod liquidity_lockbox { use super::*; use solana_program::pubkey; // Program Id const PROGRAM_ID: Pubkey = pubkey!(""7ahQGWysExobjeZ91RTsNqTCN3kWyHGZ43ud2vB7VVoZ""); // Orca Whirlpool program address const ORCA: Pubkey = pubkey!(""whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc""); // OLAS-SOL Whirlpool address const WHIRLPOOL: Pubkey = pubkey!(""5dMKUYJDsjZkAD3wiV3ViQkuq9pSmWQ5eAzcQLtDnUT3""); // SOL address const SOL: Pubkey = pubkey!(""So11111111111111111111111111111111111111112""); // OLAS address const OLAS: Pubkey = pubkey!(""Ez3nzG9ofodYCvEmw73XhQ87LWNYVRM2s7diB5tBZPyM""); // Position account discriminator const POSITION_HEADER: [u8; 8] = [0xaa, 0xbc, 0x8f, 0xe4, 0x7a, 0x40, 0xf7, 0xd0]; // Full range lower and upper indexes const TICK_LOWER_INDEX: i32 = -443584; const TICK_UPPER_INDEX: i32 = 443584; // Bridged token decimals const BRIDGED_TOKEN_DECIMALS: u8 = 8; /// Initializes a Lockbox account that stores state data. pub fn initialize( ctx: Context<InitializeLiquidityLockbox> ) -> Result<()> { let whirlpool = ctx.accounts.position.whirlpool; let position_mint = ctx.accounts.position.position_mint; let liquidity = ctx.accounts.position.liquidity; let tick_lower_index = ctx.accounts.position.tick_lower_index; let tick_upper_index = ctx.accounts.position.tick_upper_index; // Check the whirlpool if whirlpool != WHIRLPOOL { return Err(ErrorCode::WrongWhirlpool.into()); } // Check the discriminator let account = &ctx.accounts.position.to_account_info(); let data = account.try_borrow_data()?; assert!(data.len() > 8); let mut discriminator = [0u8; 8]; discriminator.copy_from_slice(&data[0..8]); if discriminator != POSITION_HEADER { return Err(ErrorCode::WrongPositionHeader.into()); } // Check for the minimum liquidity in position if liquidity != 0 { return Err(ErrorCode::LiquidityNotZero.into()); } // Check tick values if tick_lower_index != TICK_LOWER_INDEX || tick_upper_index != TICK_UPPER_INDEX { return Err(ErrorCode::OutOfRange.into()); } // Check the PDA ownership if ctx.accounts.position.to_account_info().owner != &ORCA { return Err(ErrorCode::WrongOwner.into()); } // Check the position PDA address correctness let position_pda = Pubkey::find_program_address(&[b""position"", position_mint.as_ref()], &ORCA); if position_pda.0 != ctx.accounts.position.key() { return Err(ErrorCode::WrongPositionPDA.into()); } // Check that the first token mint is SOL if ctx.accounts.fee_collector_token_owner_account_a.mint != SOL { return Err(ErrorCode::WrongTokenMint.into()); } // Check that the second token mint is OLAS if ctx.accounts.fee_collector_token_owner_account_b.mint != OLAS { return Err(ErrorCode::WrongTokenMint.into()); } // Get the lockbox account let lockbox = &mut ctx.accounts.lockbox; // Get the anchor-derived bump let bump = *ctx.bumps.get(""lockbox"").unwrap(); // Initialize lockbox account lockbox.initialize( bump, ctx.accounts.bridged_token_mint.key(), ctx.accounts.fee_collector_token_owner_account_a.key(), ctx.accounts.fee_collector_token_owner_account_b.key(), ctx.accounts.position.key(), ctx.accounts.pda_position_account.key() )?; Ok(()) } /// Deposits an NFT position under the Lockbox management and gets bridged tokens minted in return. /// /// ### Parameters /// - `liquidity_amount` - Requested liquidity amount. /// - `token_max_a` - Max amount of SOL token to be added for liquidity. /// - `token_max_b` - Max amount of OLAS token to be added for liquidity. pub fn deposit(ctx: Context<DepositPositionForLiquidity>, liquidity_amount: u64, token_max_a: u64, token_max_b: u64, ) -> Result<()> { Expand Down Expand Up @@ -185,35 +184,10 @@ pub mod liquidity_lockbox { // Check the initial token amounts if token_max_a == 0 || token_max_b == 0 { return Err(ErrorCode::LiquidityZero.into()); } // Check the position account if ctx.accounts.position.key() != ctx.accounts.lockbox.position { return Err(ErrorCode::WrongPositionPDA.into()); } // Check the position PDA address correctness let position_pda = Pubkey::find_program_address(&[b""position"", ctx.accounts.position.position_mint.as_ref()], &ORCA); if position_pda.0 != ctx.accounts.position.key() { return Err(ErrorCode::WrongPositionPDA.into()); } // Check the lockbox PDA address correctness let lockbox_pda = Pubkey::find_program_address(&[b""liquidity_lockbox""], &PROGRAM_ID); if lockbox_pda.0 != ctx.accounts.lockbox.key() { return Err(ErrorCode::WrongLockboxPDA.into()); } // Check the whirlpool if ctx.accounts.whirlpool.key() != WHIRLPOOL { return Err(ErrorCode::WrongWhirlpool.into()); } // Check the Orca Whirlpool program address if ctx.accounts.whirlpool_program.key() != ORCA { return Err(ErrorCode::WrongOrcaAccount.into()); } // Check that the first token mint is SOL if ctx.accounts.token_owner_account_a.mint != SOL || ctx.accounts.token_vault_a.mint != SOL { return Err(ErrorCode::WrongTokenMint.into()); } // Check that the second token mint is OLAS if ctx.accounts.token_owner_account_b.mint != OLAS || ctx.accounts.token_vault_b.mint != OLAS { return Err(ErrorCode::WrongTokenMint.into()); } // Check tick arrays owner if ctx.accounts.tick_array_lower.to_account_info().owner != &ORCA || ctx.accounts.tick_array_upper.to_account_info().owner != &ORCA { return Err(ErrorCode::WrongOwner.into()); } // Calculate token deltas let tick_index_lower = ctx.accounts.position.tick_lower_index; let tick_index_upper = ctx.accounts.position.tick_upper_index; let tick_index_current = ctx.accounts.whirlpool.tick_current_index; // assuming InRange status if tick_index_current < tick_index_lower || tick_index_upper <= tick_index_current { return Err(ErrorCode::OutOfRange.into()); } // Total liquidity update with the check ctx.accounts.lockbox.total_liquidity = ctx.accounts.lockbox .total_liquidity .checked_add(liquidity_amount) .unwrap_or_else(|| panic!(""Liquidity overflow"")); // Approve SOL tokens for the lockbox Expand All @@ -226,7 +200,7 @@ pub mod liquidity_lockbox { token::approve( CpiContext::new( ctx.accounts.token_program.to_account_info(), Approve { to: ctx.accounts.token_owner_account_a.to_account_info(), delegate: ctx.accounts.lockbox.to_account_info(), authority: ctx.accounts.signer.to_account_info(), }, ), token_max_a, )?; // Approve OLAS tokens for the lockbox Expand All @@ -239,7 +213,7 @@ pub mod liquidity_lockbox { token::approve( CpiContext::new( ctx.accounts.token_program.to_account_info(), Approve { to: ctx.accounts.token_owner_account_b.to_account_info(), delegate: ctx.accounts.lockbox.to_account_info(), authority: ctx.accounts.signer.to_account_info(), }, ), token_max_b, )?; // Get lockbox signer seeds Expand All @@ -266,7 +240,7 @@ pub mod liquidity_lockbox { let signer_seeds = &[&ctx.accounts.lockbox.seeds()[..]]; // CPI call to increase liquidity let cpi_program_modify_liquidity = ctx.accounts.whirlpool_program.to_account_info(); let cpi_accounts_modify_liquidity = ModifyLiquidity { whirlpool: ctx.accounts.whirlpool.to_account_info(), position: ctx.accounts.position.to_account_info(), position_authority: ctx.accounts.lockbox.to_account_info(), position_token_account: ctx.accounts.pda_position_account.to_account_info(), tick_array_lower: ctx.accounts.tick_array_lower.to_account_info(), tick_array_upper: ctx.accounts.tick_array_upper.to_account_info(), token_owner_account_a: ctx.accounts.token_owner_account_a.to_account_info(), token_owner_account_b: ctx.accounts.token_owner_account_b.to_account_info(), token_vault_a: ctx.accounts.token_vault_a.to_account_info(), token_vault_b: ctx.accounts.token_vault_b.to_account_info(), token_program: ctx.accounts.token_program.to_account_info(), }; let cpi_ctx_modify_liquidity = CpiContext::new_with_signer( cpi_program_modify_liquidity, cpi_accounts_modify_liquidity, signer_seeds ); whirlpool::cpi::increase_liquidity(cpi_ctx_modify_liquidity, liquidity_amount as u128, token_max_a, token_max_b)?; // Mint bridged tokens in the amount of position liquidity invoke_signed( Expand All @@ -276,7 +250,7 @@ pub mod liquidity_lockbox { &mint_to( ctx.accounts.token_program.key, ctx.accounts.bridged_token_mint.to_account_info().key, ctx.accounts.bridged_token_account.to_account_info().key, ctx.accounts.lockbox.to_account_info().key, &[ctx.accounts.lockbox.to_account_info().key], liquidity_amount, )?, &[ ctx.accounts.bridged_token_mint.to_account_info(), Expand All @@ -287,12 +261,36 @@ pub mod liquidity_lockbox { ctx.accounts.bridged_token_account.to_account_info(), ctx.accounts.lockbox.to_account_info(), ctx.accounts.token_program.to_account_info(), ], &[&ctx.accounts.lockbox.seeds()], )?; // Revoke approval for unused SOL tokens token::approve( CpiContext::new( ctx.accounts.token_program.to_account_info(), Approve { to: ctx.accounts.token_owner_account_a.to_account_info(), delegate: ctx.accounts.lockbox.to_account_info(), authority: ctx.accounts.signer.to_account_info(), }, ), 0, )?; // Revoke approval for OLAS tokens token::approve( CpiContext::new( ctx.accounts.token_program.to_account_info(), Approve { to: ctx.accounts.token_owner_account_b.to_account_info(), delegate: ctx.accounts.lockbox.to_account_info(), authority: ctx.accounts.signer.to_account_info(), }, ), 0, )?; emit!(DepositEvent { signer: ctx.accounts.signer.key(), position: ctx.accounts.position.key(), deposit_liquidity: liquidity_amount, total_liquidity: ctx.accounts.lockbox.total_liquidity }); Expand Down Expand Up @@ -455,34 +453,6 @@ pub mod liquidity_lockbox { Ok(()) } /// Withdraws a specified amount of liquidity for supplied bridged tokens. /// /// ### Parameters /// - `amount` - Amount of bridged tokens corresponding to the position liquidity amount to withdraw. /// - `token_min_a` - The minimum amount of SOL the signer is willing to withdraw. /// - `token_min_b` - The minimum amount of OLAS the signer is willing to withdraw. pub fn withdraw( ctx: Context<WithdrawLiquidityForTokens>, amount: u64, token_min_a: u64, token_min_b: u64 ) -> Result<()> { // Check if there is any liquidity left in the Lockbox if ctx.accounts.position.liquidity == 0 { return Err(ErrorCode::LiquidityZero.into()); } // Check the token amount if amount == 0 { return Err(ErrorCode::LiquidityZero.into()); } // Check the lockbox PDA address correctness let lockbox_pda = Pubkey::find_program_address(&[b""liquidity_lockbox""], &PROGRAM_ID); if lockbox_pda.0 != ctx.accounts.lockbox.key() { return Err(ErrorCode::WrongLockboxPDA.into()); } // Check the Orca Whirlpool program address if ctx.accounts.whirlpool_program.key() != ORCA { return Err(ErrorCode::WrongOrcaAccount.into()); } // Check that the first token mint is SOL if ctx.accounts.token_owner_account_a.mint != SOL || ctx.accounts.token_vault_a.mint != SOL { return Err(ErrorCode::WrongTokenMint.into()); } // Check that the second token mint is OLAS if ctx.accounts.token_owner_account_b.mint != OLAS || ctx.accounts.token_vault_b.mint != OLAS { return Err(ErrorCode::WrongTokenMint.into()); } // Check tick arrays owner if ctx.accounts.tick_array_lower.to_account_info().owner != &ORCA || ctx.accounts.tick_array_upper.to_account_info().owner != &ORCA { return Err(ErrorCode::WrongOwner.into()); } // Check the requested amount to be smaller or equal than the position liquidity if amount > ctx.accounts.position.liquidity as u64 { return Err(ErrorCode::AmountExceedsPositionLiquidity.into()); } // Burn provided amount of bridged tokens invoke_signed( &burn_checked( ctx.accounts.token_program.key, ctx.accounts.bridged_token_account.to_account_info().key, ctx.accounts.bridged_token_mint.to_account_info().key, ctx.accounts.signer.to_account_info().key, &[], amount, BRIDGED_TOKEN_DECIMALS, )?, &[ ctx.accounts.token_program.to_account_info(), ctx.accounts.bridged_token_account.to_account_info(), ctx.accounts.bridged_token_mint.to_account_info(), ctx.accounts.signer.to_account_info(), ], &[] )?; // Get program signer seeds let signer_seeds = &[&ctx.accounts.lockbox.seeds()[..]]; // Update fees for the position let cpi_program_update_fees = ctx.accounts.whirlpool_program.to_account_info(); let cpi_accounts_update_fees = UpdateFeesAndRewards { whirlpool: ctx.accounts.whirlpool.to_account_info(), position: ctx.accounts.position.to_account_info(), tick_array_lower: ctx.accounts.tick_array_lower.to_account_info(), tick_array_upper: ctx.accounts.tick_array_upper.to_account_info() }; let cpi_ctx_update_fees = CpiContext::new_with_signer( cpi_program_update_fees, cpi_accounts_update_fees, signer_seeds ); whirlpool::cpi::update_fees_and_rewards(cpi_ctx_update_fees)?; // Collect fees from the position let cpi_program_collect_fees = ctx.accounts.whirlpool_program.to_account_info(); let cpi_accounts_collect_fees = CollectFees { whirlpool: ctx.accounts.whirlpool.to_account_info(), position_authority: ctx.accounts.lockbox.to_account_info(), position: ctx.accounts.position.to_account_info(), position_token_account: ctx.accounts.pda_position_account.to_account_info(), token_owner_account_a: ctx.accounts.fee_collector_token_owner_account_a.to_account_info(), token_owner_account_b: ctx.accounts.fee_collector_token_owner_account_b.to_account_info(), token_vault_a: ctx.accounts.token_vault_a.to_account_info(), token_vault_b: ctx.accounts.token_vault_b.to_account_info(), token_program: ctx.accounts.token_program.to_account_info() }; let cpi_ctx_collect_fees = CpiContext::new_with_signer( cpi_program_collect_fees, cpi_accounts_collect_fees, signer_seeds ); whirlpool::cpi::collect_fees(cpi_ctx_collect_fees)?; // CPI to decrease liquidity let cpi_program_modify_liquidity = ctx.accounts.whirlpool_program.to_account_info(); let cpi_accounts_modify_liquidity = ModifyLiquidity { whirlpool: ctx.accounts.whirlpool.to_account_info(), position: ctx.accounts.position.to_account_info(), position_authority: ctx.accounts.lockbox.to_account_info(), position_token_account: ctx.accounts.pda_position_account.to_account_info(), tick_array_lower: ctx.accounts.tick_array_lower.to_account_info(), tick_array_upper: ctx.accounts.tick_array_upper.to_account_info(), token_owner_account_a: ctx.accounts.token_owner_account_a.to_account_info(), token_owner_account_b: ctx.accounts.token_owner_account_b.to_account_info(), token_vault_a: ctx.accounts.token_vault_a.to_account_info(), token_vault_b: ctx.accounts.token_vault_b.to_account_info(), token_program: ctx.accounts.token_program.to_account_info() }; let cpi_ctx_modify_liquidity = CpiContext::new_with_signer( cpi_program_modify_liquidity, cpi_accounts_modify_liquidity, signer_seeds ); whirlpool::cpi::decrease_liquidity(cpi_ctx_modify_liquidity, amount as u128, token_min_a, token_min_b)?; // Update the position liquidity ctx.accounts.lockbox.total_liquidity = ctx.accounts.lockbox .total_liquidity .checked_sub(amount) .unwrap_or_else(|| panic!(""Liquidity underflow"")); emit!(WithdrawEvent { signer: ctx.accounts.signer.key(), position: ctx.accounts.position.key(), token_owner_account_a: ctx.accounts.token_owner_account_a.key(), token_owner_account_b: ctx.accounts.token_owner_account_b.key(), withdraw_liquidity: amount, total_liquidity: ctx.accounts.lockbox.total_liquidity }); Ok(()) } } #[derive(Accounts)] pub struct InitializeLiquidityLockbox<'info> { #[account(mut)] Expand Down Expand Up @@ -708,10 +678,6 @@ pub struct DepositEvent { pub signer: Signer<'info>, #[account(init, seeds = [ b""liquidity_lockbox"".as_ref() ], bump, payer = signer, space = LiquidityLockbox::LEN)] pub lockbox: Box<Account<'info, LiquidityLockbox>>, #[account(constraint = bridged_token_mint.mint_authority.unwrap() == lockbox.key())] pub bridged_token_mint: Box<Account<'info, Mint>>, #[account(constraint = signer.key == &fee_collector_token_owner_account_a.owner, constraint = fee_collector_token_owner_account_a.key() != fee_collector_token_owner_account_b.key() )] pub fee_collector_token_owner_account_a: Box<Account<'info, TokenAccount>>, #[account(constraint = signer.key == &fee_collector_token_owner_account_b.owner)] pub fee_collector_token_owner_account_b: Box<Account<'info, TokenAccount>>, #[account(has_one = whirlpool)] pub position: Box<Account<'info, Position>>, #[account(mut, constraint = pda_position_account.mint == position.position_mint, constraint = pda_position_account.amount == 1, constraint = lockbox.key() == pda_position_account.owner )] pub pda_position_account: Box<Account<'info, TokenAccount>>, pub whirlpool: Box<Account<'info, Whirlpool>>, #[account(address = token::ID)] pub token_program: Program<'info, Token>, pub system_program: Program<'info, System>, pub rent: Sysvar<'info, Rent> } #[derive(Accounts)] pub struct DepositPositionForLiquidity<'info> { #[account(mut)] pub signer: Signer<'info>, #[account(mut, address = lockbox.position, has_one = whirlpool)] pub position: Box<Account<'info, Position>>, #[account(mut, constraint = lockbox.key() == pda_position_account.owner, constraint = pda_position_account.mint == position.position_mint, constraint = pda_position_account.amount == 1 )] pub pda_position_account: Box<Account<'info, TokenAccount>>, #[account(mut, address = position.whirlpool)] pub whirlpool: Box<Account<'info, Whirlpool>>, #[account(mut, constraint = token_owner_account_a.mint == whirlpool.token_mint_a, constraint = token_owner_account_a.mint != token_owner_account_b.mint, constraint = signer.key == &token_owner_account_a.owner )] pub token_owner_account_a: Box<Account<'info, TokenAccount>>, #[account(mut, constraint = token_owner_account_b.mint == whirlpool.token_mint_b, constraint = signer.key == &token_owner_account_b.owner )] pub token_owner_account_b: Box<Account<'info, TokenAccount>>, #[account(mut, constraint = token_vault_a.key() == whirlpool.token_vault_a, constraint = token_vault_a.key() != token_vault_b.key() )] pub token_vault_a: Box<Account<'info, TokenAccount>>, #[account(mut, constraint = token_vault_b.key() == whirlpool.token_vault_b)] pub token_vault_b: Box<Account<'info, TokenAccount>>, #[account(mut, has_one = whirlpool, constraint = tick_array_lower.key() != tick_array_upper.key())] pub tick_array_lower: AccountLoader<'info, TickArray>, #[account(mut, has_one = whirlpool)] pub tick_array_upper: AccountLoader<'info, TickArray>, #[account(mut, address = lockbox.bridged_token_mint)] pub bridged_token_mint: Box<Account<'info, Mint>>, #[account(mut, constraint = bridged_token_account.mint == lockbox.bridged_token_mint, constraint = bridged_token_mint.key() == lockbox.bridged_token_mint, constraint = signer.key == &bridged_token_account.owner, )] pub bridged_token_account: Box<Account<'info, TokenAccount>>, #[account(mut)] pub lockbox: Box<Account<'info, LiquidityLockbox>>, pub whirlpool_program: Program<'info, whirlpool::program::Whirlpool>, #[account(address = token::ID)] pub token_program: Program<'info, Token>, pub system_program: Program<'info, System>, pub rent: Sysvar<'info, Rent>, } #[derive(Accounts)] pub struct WithdrawLiquidityForTokens<'info> { #[account(mut, address = position.whirlpool)] pub whirlpool: Box<Account<'info, Whirlpool>>, pub signer: Signer<'info>, #[account(mut, address = lockbox.bridged_token_mint)] pub bridged_token_mint: Box<Account<'info, Mint>>, #[account(mut, constraint = bridged_token_account.mint == lockbox.bridged_token_mint, constraint = lockbox.bridged_token_mint == bridged_token_mint.key(), constraint = signer.key == &bridged_token_account.owner, )] pub bridged_token_account: Box<Account<'info, TokenAccount>>, #[account(mut, address = lockbox.position, has_one = whirlpool, has_one = position_mint)] pub position: Box<Account<'info, Position>>, #[account(mut, constraint = pda_position_account.mint == position.position_mint, constraint = pda_position_account.amount == 1, constraint = lockbox.key() == pda_position_account.owner )] pub pda_position_account: Box<Account<'info, TokenAccount>>, #[account(mut, address = position.position_mint, constraint = position_mint.supply == 1 )] pub position_mint: Box<Account<'info, Mint>>, #[account(mut, constraint = token_owner_account_a.mint == whirlpool.token_mint_a, constraint = token_owner_account_a.mint != token_owner_account_b.mint, constraint = signer.key == &token_owner_account_a.owner )] pub token_owner_account_a: Box<Account<'info, TokenAccount>>, #[account(mut, constraint = token_owner_account_b.mint == whirlpool.token_mint_b, constraint = signer.key == &token_owner_account_b.owner )] pub token_owner_account_b: Box<Account<'info, TokenAccount>>, #[account(mut, address = lockbox.fee_collector_token_owner_account_a)] pub fee_collector_token_owner_account_a: Box<Account<'info, TokenAccount>>, #[account(mut, address = lockbox.fee_collector_token_owner_account_b)] pub fee_collector_token_owner_account_b: Box<Account<'info, TokenAccount>>, #[account(mut, constraint = token_vault_a.key() == whirlpool.token_vault_a, constraint = token_vault_a.key() != token_vault_b.key() )] pub token_vault_a: Box<Account<'info, TokenAccount>>, #[account(mut, constraint = token_vault_b.key() == whirlpool.token_vault_b)] pub token_vault_b: Box<Account<'info, TokenAccount>>, #[account(mut, has_one = whirlpool, constraint = tick_array_lower.key() != tick_array_upper.key())] pub tick_array_lower: AccountLoader<'info, TickArray>, #[account(mut, has_one = whirlpool)] pub tick_array_upper: AccountLoader<'info, TickArray>, #[account(mut)] pub lockbox: Box<Account<'info, LiquidityLockbox>>, pub whirlpool_program: Program<'info, whirlpool::program::Whirlpool>, #[account(address = token::ID)] pub token_program: Program<'info, Token> } #[error_code] pub enum ErrorCode { #[msg(""Liquidity value overflow"")] LiquidityOverflow, #[msg(""Liquidity value underflow"")] LiquidityUnderflow, #[msg(""Wrong whirlpool address"")] WrongWhirlpool, #[msg(""Wrong position PDA header"")] WrongPositionHeader, #[msg(""Wrong position ID"")] WrongPositionId, #[msg(""Liquidity is zero"")] LiquidityZero, #[msg(""Liquidity is not zero"")] LiquidityNotZero, #[msg(""Delta token amount bigger than the max allowed one"")] DeltaAmountOverflow, #[msg(""Requested amount exceeds a position liquidity"")] AmountExceedsPositionLiquidity, #[msg(""Requested amount exceeds total liquidity"")] AmountExceedsTotalLiquidity, #[msg(""Tick out of range"")] OutOfRange, #[msg(""Wrong account owner"")] WrongOwner, #[msg(""Provided wrong position PDA"")] WrongPositionPDA, #[msg(""Provided wrong lockbox PDA"")] WrongLockboxPDA, #[msg(""Provided wrong position ATA"")] WrongPositionAccount, #[msg(""Provided wrong PDA position ATA"")] WrongPDAPositionAccount, #[msg(""Provided wrong Orca program account"")] WrongOrcaAccount, #[msg(""Wrong token mint"")] WrongTokenMint, #[msg(""Whirlpool number downcast"")] WhirlpoolNumberDownCastError } #[event] pub struct DepositEvent { // Signer (user) #[index] pub signer: Pubkey, // Liquidity position #[index] pub position: Pubkey, // Deposit liquidity amount pub deposit_liquidity: u64, // Total position liquidity Expand Down pub total_liquidity: u64 } #[event] pub struct WithdrawEvent { // Signer (user) #[index] pub signer: Pubkey, // Liquidity position #[index] pub position: Pubkey, // User ATA token A token_owner_account_a: Pubkey, // User ATA token B token_owner_account_b: Pubkey, // Withdraw liquidity amount pub withdraw_liquidity: u64, // Total position liquidity pub total_liquidity: u64 }",High,"After introduction of a liquidity_amount parameter in the deposit() function, it is ensured the a user receives the expected liquidity_amount of bridged tokens while only spending token_max_a of SOL and token_max_b of OLAS in the worst-case. As a consequence of those in- and output constraints, a user is sufficiently protected from a sandwich attack. Furthermore, the direct use of liquidity_amount, token_max_a and token_max_b with the underlying Whirlpool program led to obsolete code, which was previously used for the computation of the liquidity & token b amounts, that facilitated the sandwich attack in the first place. Consequently, the get_liquidity_from_token_a() function became obsolete too and was removed and therefore also resolved the Division before multiplication in liquidity_lockbox::get_liquidity_from_token_a(...) #50 issue. In addition, the approval of any unused SOL & OLAS tokens (not all of token_max_a/token_max_b used) is revoked (set to 0).",https://gist.github.com/MarioPoneder/b7f287884607958eda81f3419efbc1e8,High
Sol-114,"Users can deposit their stSol in order to get bSol and Anker maintains an stSol reserve to back the bSOL supply at a 1 bSOL = 1 SOL exchange rate. However since stSol appreciate in value, Anker has been fitted with a SellRewards instruction to sell off any exess stSol value build-up. This instruction is supposed to be called by crankers and therefore is permissionless. Anker uses Orca’s deployment of SPL token-swap program to swap stSol for UST. The issue is that SellRewards never verifies that it is actually dealing with Orca’s token-swap program, allowing an attacker to supply an arbitrary program. This program will subsequently be called using Solana’s invoke_signed() API and signed by the token_swap_authority. An attacker can craft their own malicious fork of the SPL token-swap program, that withdraws all the funds from the reserve to an attacker controlled account.","anker/src/processor.rs let (solido, mut anker) = deserialize_anker(program_id, accounts.anker, accounts.solido)?; solido.check_manager(accounts.manager)?; let current_token_swap = anker.get_token_swap_instance(accounts.current_token_swap_pool)?; // `get_token_swap_instance` compares the account to the one stored in // `anker.token_swap_pool`. We assign first so we have the correct value to // compare. If the check fails, the transaction will revert. anker.token_swap_pool = *accounts.new_token_swap_pool.key; let new_token_swap = anker.get_token_swap_instance(accounts.new_token_swap_pool)?; anker.check_change_token_swap_pool(&solido, current_token_swap, new_token_swap)?; anker.save(accounts.anker) anker/src/state.rs pub fn get_token_swap_instance( &self, token_swap_account: &AccountInfo, ) -> Result<spl_token_swap::state::SwapV1, ProgramError> { self.check_token_swap_pool(token_swap_account)?; // We do not check the owner of the `token_swap_account`. Since we store // this address in Anker's state, and we also trust the manager that changes // this address, we don't verify the account's owner. This also allows us to // test different token swap programs ids on different clusters. // Check that version byte corresponds to V1 version byte. if token_swap_account.data.borrow().len() != spl_token_swap::state::SwapVersion::LATEST_LEN { @@ -410,7 +423,10 @@ impl Anker { accounts: &SellRewardsAccountsInfo, ) -> ProgramResult { // Check if the token swap account is the same one as the stored in the instance. let token_swap = self.get_token_swap_instance(accounts.token_swap_pool)?;","anker/src/processor.rs let (solido, mut anker) = deserialize_anker(program_id, accounts.anker, accounts.solido)?; solido.check_manager(accounts.manager)?; let current_token_swap_program_id = accounts.current_token_swap_pool.owner; let current_token_swap = anker.get_token_swap_instance( accounts.current_token_swap_pool, current_token_swap_program_id, )?; // `get_token_swap_instance` compares the account to the one stored in // `anker.token_swap_pool`. We assign first so we have the correct value to // compare. If the check fails, the transaction will revert. anker.token_swap_pool = *accounts.new_token_swap_pool.key; let new_token_swap_program_id = accounts.new_token_swap_pool.owner; let new_token_swap = anker.get_token_swap_instance(accounts.new_token_swap_pool, new_token_swap_program_id)?; anker.check_change_token_swap_pool(&solido, current_token_swap, new_token_swap)?; anker.save(accounts.anker) anker/src/state.rs pub fn get_token_swap_instance( &self, token_swap_account: &AccountInfo, token_swap_program_id: &Pubkey, ) -> Result<spl_token_swap::state::SwapV1, ProgramError> { self.check_token_swap_pool(token_swap_account)?; // We do not check the owner of the `token_swap_account`. Since we store // this address in Anker's state, and we also trust the manager that changes // this address, we don't verify the account's owner. This also allows us to // test different token swap programs ids on different clusters. // However, we *should* check that the program we are going to call later to // do the token swap, is actually the intended token swap program. if token_swap_account.owner != token_swap_program_id { msg!( ""Encountered wrong token swap program; expected {} but found {}."", token_swap_account.owner, token_swap_program_id, ); return Err(AnkerError::WrongSplTokenSwap.into()); } // Check that version byte corresponds to V1 version byte. if token_swap_account.data.borrow().len() != spl_token_swap::state::SwapVersion::LATEST_LEN { @@ -410,7 +423,10 @@ impl Anker { accounts: &SellRewardsAccountsInfo, ) -> ProgramResult { // Check if the token swap account is the same one as the stored in the instance. let token_swap = self.get_token_swap_instance( accounts.token_swap_pool, accounts.token_swap_program_id.key, )?;",Critical,The Anker team responded immediately by adding a regression test and adding the missing check,https://github.com/ChorusOne/solido/pull/512/commits/676d6bee310b13c39b3c8e1adc6a26a4db2f8482,High
Sol-115,"Anker sells off exess stSol by using an Orca stSol<−>UST token swap and sending the resulting UST through Wormhole to a rewards account on the Terra side. Lido’s exchange rate is used to compute rewards for an epoch and the swap gets performed at the start of the next epoch. The full amount is swapped in a single operation without slippage protection, which could lead to a lot of slippage in a low liquidity pool. An even bigger issue however is that since this instruction is intended to be called by crankers, a malicious cranker can exploit this by sandwiching the sale between two of their own swaps to steal the rewards.","use lido::token::Lamports; use solana_program::{ account_info::AccountInfo, entrypoint::ProgramResult, msg, program::{invoke, invoke_signed}, @@ -24,8 +25,9 @@ use crate::{ find_st_sol_reserve_account, instruction::{ AnkerInstruction, ChangeTerraRewardsDestinationAccountsInfo, ChangeTokenSwapPoolAccountsInfo, DepositAccountsInfo, InitializeAccountsInfo, SellRewardsAccountsInfo, SendRewardsAccountsInfo, WithdrawAccountsInfo, }, logic::{burn_b_sol, deserialize_anker, mint_b_sol_to}, metrics::Metrics, @@ -34,16 +36,23 @@ use crate::{ wormhole::{get_wormhole_transfer_instruction, TerraAddress}, }; use crate::{find_ust_reserve_account, ANKER_STSOL_RESERVE_ACCOUNT, ANKER_UST_RESERVE_ACCOUNT}; use crate::{ logic::{create_account, initialize_spl_account, swap_rewards}, state::ExchangeRate, }; use crate::{state::ANKER_LEN, ANKER_RESERVE_AUTHORITY}; fn process_initialize( program_id: &Pubkey, accounts_raw: &[AccountInfo], terra_rewards_destination: TerraAddress, ) -> ProgramResult { let accounts = InitializeAccountsInfo::try_from_slice(accounts_raw)?; let rent = Rent::from_account_info(accounts.sysvar_rent)?; @@ -58,6 +67,9 @@ fn process_initialize( ); return Err(AnkerError::InvalidDerivedAccount.into()); } let solido = Lido::deserialize_lido(accounts.solido_program.key, accounts.solido)?; @@ -79,7 +91,11 @@ fn process_initialize( &accounts, accounts.anker, &rent, ANKER_LEN, &anker_seeds, )?; @@ -140,7 +156,13 @@ fn process_initialize( core_bridge_program_id: *accounts.wormhole_core_bridge_program_id.key, token_bridge_program_id: *accounts.wormhole_token_bridge_program_id.key, }, metrics: Metrics::new(), self_bump_seed: anker_bump_seed, mint_authority_bump_seed: mint_bump_seed, reserve_authority_bump_seed, @@ -176,6 +198,7 @@ fn process_initialize( } /// Deposit an amount of StLamports and get bSol in return. fn process_deposit( program_id: &Pubkey, accounts_raw: &[AccountInfo], @@ -230,6 +253,53 @@ fn process_deposit( Ok(()) } /// Sell Anker rewards. #[inline(never)] fn process_sell_rewards(program_id: &Pubkey, accounts_raw: &[AccountInfo]) -> ProgramResult { @@ -240,6 +310,38 @@ fn process_sell_rewards(program_id: &Pubkey, accounts_raw: &[AccountInfo]) -> Pr accounts.anker.key, accounts.st_sol_reserve_account, )?; anker.check_is_st_sol_account(&solido, accounts.st_sol_reserve_account)?; anker.check_mint(accounts.b_sol_mint)?; @@ -256,9 +358,14 @@ fn process_sell_rewards(program_id: &Pubkey, accounts_raw: &[AccountInfo]) -> Pr // If this underflows, something went wrong, and we abort the transaction. let rewards = (reserve_st_sol_before - b_sol_supply_value_in_st_sol)?; // Get the amount of UST that we had. let ust_before = MicroUst(Anker::get_token_amount(accounts.ust_reserve_account)?); swap_rewards(program_id, rewards, &anker, &accounts)?; // Get new UST amount. let ust_after = MicroUst(Anker::get_token_amount(accounts.ust_reserve_account)?); let reserve_st_sol_after = @@ -287,6 +394,7 @@ fn process_sell_rewards(program_id: &Pubkey, accounts_raw: &[AccountInfo]) -> Pr } /// Return some bSOL and get back the underlying stSOL. fn process_withdraw( program_id: &Pubkey, accounts_raw: &[AccountInfo], @@ -382,6 +490,7 @@ fn process_withdraw( /// Change the Terra rewards destination. /// Solido's manager needs to sign the transaction. fn process_change_terra_rewards_destination( program_id: &Pubkey, accounts_raw: &[AccountInfo], @@ -397,6 +506,7 @@ fn process_change_terra_rewards_destination( /// Change the Token Pool instance. /// Solido's manager needs to sign the transaction. fn process_change_token_swap_pool( program_id: &Pubkey, accounts_raw: &[AccountInfo], @@ -423,6 +533,27 @@ fn process_change_token_swap_pool( anker.save(accounts.anker) } /// Send rewards via Wormhole from the UST reserve address to Terra. #[inline(never)] fn process_send_rewards( @@ -530,9 +661,16 @@ pub fn process(program_id: &Pubkey, accounts: &[AccountInfo], input: &[u8]) -> P match instruction { AnkerInstruction::Initialize { terra_rewards_destination, } => process_initialize(program_id, accounts, terra_rewards_destination), AnkerInstruction::Deposit { amount } => process_deposit(program_id, accounts, amount), AnkerInstruction::Withdraw { amount } => process_withdraw(program_id, accounts, amount), AnkerInstruction::SellRewards => process_sell_rewards(program_id, accounts), AnkerInstruction::ChangeTerraRewardsDestination { terra_rewards_destination, @@ -547,5 +685,10 @@ pub fn process(program_id: &Pubkey, accounts: &[AccountInfo], input: &[u8]) -> P AnkerInstruction::SendRewards { wormhole_nonce } => { process_send_rewards(program_id, accounts, wormhole_nonce) } } }","use lido::token::Lamports; use solana_program::{ account_info::AccountInfo, clock::Clock, entrypoint::ProgramResult, msg, program::{invoke, invoke_signed}, @@ -24,8 +25,9 @@ use crate::{ find_st_sol_reserve_account, instruction::{ AnkerInstruction, ChangeTerraRewardsDestinationAccountsInfo, ChangeTokenSwapPoolAccountsInfo, DepositAccountsInfo, FetchPoolPriceAccountsInfo, InitializeAccountsInfo, SellRewardsAccountsInfo, SendRewardsAccountsInfo, WithdrawAccountsInfo, }, logic::{burn_b_sol, deserialize_anker, mint_b_sol_to}, metrics::Metrics, @@ -34,16 +36,23 @@ use crate::{ wormhole::{get_wormhole_transfer_instruction, TerraAddress}, }; use crate::{find_ust_reserve_account, ANKER_STSOL_RESERVE_ACCOUNT, ANKER_UST_RESERVE_ACCOUNT}; use crate::{ instruction::ChangeSellRewardsMinOutBpsAccountsInfo, logic::get_one_st_sol_for_ust_price_from_pool, state::{HistoricalStSolPriceArray, POOL_PRICE_MAX_SAMPLE_AGE, POOL_PRICE_MIN_SAMPLE_DISTANCE}, }; use crate::{ logic::{create_account, initialize_spl_account, swap_rewards}, state::ExchangeRate, }; use crate::{state::ANKER_LEN, ANKER_RESERVE_AUTHORITY}; #[inline(never)] fn process_initialize( program_id: &Pubkey, accounts_raw: &[AccountInfo], terra_rewards_destination: TerraAddress, sell_rewards_min_out_bps: u64, ) -> ProgramResult { let accounts = InitializeAccountsInfo::try_from_slice(accounts_raw)?; let rent = Rent::from_account_info(accounts.sysvar_rent)?; @@ -58,6 +67,9 @@ fn process_initialize( ); return Err(AnkerError::InvalidDerivedAccount.into()); } if sell_rewards_min_out_bps > 10_000 { return Err(AnkerError::InvalidSellRewardsMinOutBps.into()); } let solido = Lido::deserialize_lido(accounts.solido_program.key, accounts.solido)?; @@ -79,7 +91,11 @@ fn process_initialize( &accounts, accounts.anker, &rent, // At the time of writing, Solana accounts cannot be resized. If we ever // need to store more data in the future, we need to create the headroom // for it now (or switch to a different account later). So add 128 bytes // of headroom for future expansion, in case we need it. ANKER_LEN + 128, &anker_seeds, )?; @@ -140,7 +156,13 @@ fn process_initialize( core_bridge_program_id: *accounts.wormhole_core_bridge_program_id.key, token_bridge_program_id: *accounts.wormhole_token_bridge_program_id.key, }, sell_rewards_min_out_bps, metrics: Metrics::new(), // At initialization, we fill the historical prices with a dummy // price of 1 UST per stSOL recorded at slot 0. Because we require // these prices to be recent at `SellRewards` time, these dummy // values are never used. historical_st_sol_prices: HistoricalStSolPriceArray::new(), self_bump_seed: anker_bump_seed, mint_authority_bump_seed: mint_bump_seed, reserve_authority_bump_seed, @@ -176,6 +198,7 @@ fn process_initialize( } /// Deposit an amount of StLamports and get bSol in return. #[inline(never)] fn process_deposit( program_id: &Pubkey, accounts_raw: &[AccountInfo], @@ -230,6 +253,53 @@ fn process_deposit( Ok(()) } /// Sample the current pool price, used later to limit slippage in `sell_rewards`. #[inline(never)] fn process_fetch_pool_price(program_id: &Pubkey, accounts_raw: &[AccountInfo]) -> ProgramResult { let accounts = FetchPoolPriceAccountsInfo::try_from_slice(accounts_raw)?; let (solido, mut anker) = deserialize_anker(program_id, accounts.anker, accounts.solido)?; // Check that the accounts passed to this instruction are the same as those // stored in the pool. That alone would still enable swapping the stSOL and // UST accounts though, so also confirm the stSOL mint on one. anker.check_token_swap_before_fetch_price(&accounts)?; anker.check_is_st_sol_account(&solido, accounts.pool_st_sol_account)?; let token_swap_program_id = accounts.token_swap_pool.owner; let swap_pool = anker.get_token_swap_instance(accounts.token_swap_pool, token_swap_program_id)?; let pool_ust_balance = MicroUst(Anker::get_token_amount(accounts.pool_ust_account)?); let pool_st_sol_balance = StLamports(Anker::get_token_amount(accounts.pool_st_sol_account)?); let clock = Clock::from_account_info(accounts.sysvar_clock)?; // The price samples must be spaced at least some distance apart. let most_recent_sample = anker.historical_st_sol_prices.last(); let slots_elapsed = clock.slot.saturating_sub(most_recent_sample.slot); if slots_elapsed < POOL_PRICE_MIN_SAMPLE_DISTANCE { msg!( ""The previous stSOL/UST price was sampled at slot {}. \ A new sample cannot be added until slot {}."", most_recent_sample.slot, most_recent_sample.slot + POOL_PRICE_MIN_SAMPLE_DISTANCE, ); return Err(AnkerError::FetchPoolPriceTooEarly.into()); } let st_sol_price_in_ust = get_one_st_sol_for_ust_price_from_pool( &*swap_pool.swap_curve.calculator, &swap_pool.token_a, accounts.pool_ust_account.key, pool_st_sol_balance, pool_ust_balance, )?; anker .historical_st_sol_prices .insert_and_rotate(clock.slot, st_sol_price_in_ust); anker.save(accounts.anker) } /// Sell Anker rewards. #[inline(never)] fn process_sell_rewards(program_id: &Pubkey, accounts_raw: &[AccountInfo]) -> ProgramResult { @@ -240,6 +310,38 @@ fn process_sell_rewards(program_id: &Pubkey, accounts_raw: &[AccountInfo]) -> Pr accounts.anker.key, accounts.st_sol_reserve_account, )?; let clock = Clock::from_account_info(accounts.sysvar_clock)?; let oldest_sample = anker.historical_st_sol_prices.first(); let slots_elapsed = clock.slot.saturating_sub(oldest_sample.slot); if slots_elapsed > POOL_PRICE_MAX_SAMPLE_AGE { msg!( ""The oldest stSOL/UST price was sampled at slot {}. \ It must have been sampled more recently."", oldest_sample.slot, ); return Err(AnkerError::FetchPoolPriceNotCalledRecently.into()); } // The youngest sample must not be too recent, so an adversarial cranker can // not sandwich the `FetchPoolPrice` and `SellRewards` in the same transaction. // But if we demand the same distance between the sale and fetching the price, // as between price updates, then one could spam `FetchPoolPrice` transactions // and hold off the `SellRewards` for a bit. To avoid this, we allow the // `SellRewards` to happen earlier than the price fetch, but still late enough // that no single validator should control that entire span of slots. let youngest_sample = anker.historical_st_sol_prices.last(); let slots_elapsed = clock.slot.saturating_sub(youngest_sample.slot); if slots_elapsed < POOL_PRICE_MIN_SAMPLE_DISTANCE / 2 { msg!( ""The youngest stSOL/UST price was sampled at slot {}. \ Wait at least {} slots until selling the rewards.."", youngest_sample.slot, POOL_PRICE_MIN_SAMPLE_DISTANCE / 2, ); return Err(AnkerError::SellRewardsTooEarly.into()); } anker.check_is_st_sol_account(&solido, accounts.st_sol_reserve_account)?; anker.check_mint(accounts.b_sol_mint)?; @@ -256,9 +358,14 @@ fn process_sell_rewards(program_id: &Pubkey, accounts_raw: &[AccountInfo]) -> Pr // If this underflows, something went wrong, and we abort the transaction. let rewards = (reserve_st_sol_before - b_sol_supply_value_in_st_sol)?; // Get minimum amount we are willing to pay for the rewards in UST. let minimum_ust_out = anker .historical_st_sol_prices .minimum_ust_swap_amount(rewards, anker.sell_rewards_min_out_bps)?; // Get the amount of UST that we had. let ust_before = MicroUst(Anker::get_token_amount(accounts.ust_reserve_account)?); swap_rewards(program_id, rewards, &anker, &accounts, minimum_ust_out)?; // Get new UST amount. let ust_after = MicroUst(Anker::get_token_amount(accounts.ust_reserve_account)?); let reserve_st_sol_after = @@ -287,6 +394,7 @@ fn process_sell_rewards(program_id: &Pubkey, accounts_raw: &[AccountInfo]) -> Pr } /// Return some bSOL and get back the underlying stSOL. #[inline(never)] fn process_withdraw( program_id: &Pubkey, accounts_raw: &[AccountInfo], @@ -382,6 +490,7 @@ fn process_withdraw( /// Change the Terra rewards destination. /// Solido's manager needs to sign the transaction. #[inline(never)] fn process_change_terra_rewards_destination( program_id: &Pubkey, accounts_raw: &[AccountInfo], @@ -397,6 +506,7 @@ fn process_change_terra_rewards_destination( /// Change the Token Pool instance. /// Solido's manager needs to sign the transaction. #[inline(never)] fn process_change_token_swap_pool( program_id: &Pubkey, accounts_raw: &[AccountInfo], @@ -423,6 +533,27 @@ fn process_change_token_swap_pool( anker.save(accounts.anker) } /// Change Anker's `sell_rewards_min_out_bps`. /// Solido's manager needs to sign the transaction. #[inline(never)] fn process_change_sell_rewards_min_out_bps( program_id: &Pubkey, accounts_raw: &[AccountInfo], sell_rewards_min_out_bps: u64, ) -> ProgramResult { let accounts = ChangeSellRewardsMinOutBpsAccountsInfo::try_from_slice(accounts_raw)?; let (solido, mut anker) = deserialize_anker(program_id, accounts.anker, accounts.solido)?; solido.check_manager(accounts.manager)?; // Cannot be greater than 100%. if sell_rewards_min_out_bps > 10_000 { return Err(AnkerError::InvalidSellRewardsMinOutBps.into()); } anker.sell_rewards_min_out_bps = sell_rewards_min_out_bps; anker.save(accounts.anker) } /// Send rewards via Wormhole from the UST reserve address to Terra. #[inline(never)] fn process_send_rewards( @@ -530,9 +661,16 @@ pub fn process(program_id: &Pubkey, accounts: &[AccountInfo], input: &[u8]) -> P match instruction { AnkerInstruction::Initialize { terra_rewards_destination, sell_rewards_min_out_bps, } => process_initialize( program_id, accounts, terra_rewards_destination, sell_rewards_min_out_bps, ), AnkerInstruction::Deposit { amount } => process_deposit(program_id, accounts, amount), AnkerInstruction::Withdraw { amount } => process_withdraw(program_id, accounts, amount), AnkerInstruction::FetchPoolPrice => process_fetch_pool_price(program_id, accounts), AnkerInstruction::SellRewards => process_sell_rewards(program_id, accounts), AnkerInstruction::ChangeTerraRewardsDestination { terra_rewards_destination, @@ -547,5 +685,10 @@ pub fn process(program_id: &Pubkey, accounts: &[AccountInfo], input: &[u8]) -> P AnkerInstruction::SendRewards { wormhole_nonce } => { process_send_rewards(program_id, accounts, wormhole_nonce) } AnkerInstruction::ChangeSellRewardsMinOutBps { sell_rewards_min_out_bps, } => { process_change_sell_rewards_min_out_bps(program_id, accounts, sell_rewards_min_out_bps) } } }",High,"Because Anker is permissionless, everybody can call SellRewards if there are rewards to sell. This means that the caller could sandwich the SellRewards between two instructions that swap against the same stSOL/UST pool that Anker uses, to give us a bad price, and take the difference. To mitigate this risk, we set a min_out on the swap instruction, but in order to do so, we need a “fair” price. For that, we sample 5 past prices, at least some number of slots apart (enough that they are produced by different leaders), but also not too old, to make sure the price is still fresh. Then we take the median of that as a “fair” price and set min_out based on that. Now if anybody is trying to sandwich us, they would also have to sandwich 3 of those 5 times where we sample the price (and they pay swap fees), and they are competing with our honest maintenance bot for that (and possibly with others). Also, having a recent price ensures that we don’t sell rewards at times of extreme volatility.",https://github.com/ChorusOne/solido/pull/511/files#diff-89f65dd63171a4df2fb15491cdd3609e804ff3b1a270c9131cfa6e6b74269ba6,High
Sol-116,"The program instruction liquidate_sundial_profilerounds up the amount of collateral received by the liquidator. This results in the liquidators being able to create an undercollateralized account by repaying much less than the value of the collateral received repeatedly. Notice how the ` withdraw _ amount` is ceilinged in the calculation. The minimum amount received by the liquidator is one collateral token as long as the repay token has a non zero liquidation_value. If the value of the repaid token is lower than the collateral token, a liquidator can then repeatedly repay with a low valued repay token and receive a much higher valued collateral token. While each repayment only causes a small discrepancy between the collateral and obligation amount, eventually an attacker will be able to push the value of the collateral lower than the obligation. Note that each of these operations is still profitable to the attacker, similar to the previous spl-token-lending rounding bug. Because the attacker is profiting from such a transaction, the lending protocol must be losing money. This leads to a loss of funds scenario for the Sundial program. Proof of Concept More concretely, consider the following scenario: 1. Attacker deposits some token A, which has a high value per minimum token unit (BTC for example) 2. Attacker borrows some token B, which has a low value per minimum token unit (SOL for example) 3. 4. 5. The price of SOL goes up, which makes the attacker liquidatable The attacker liquidates themselves, repaying a single lamport and receiving 1 satoshi. Because such a liquidation lowers the health of the account, the user is able to do this repeatedly, and the account remains liquidatable throughout. 6. The loan is never repaid fully and the collateral is drained by the liquidator. The lending protocol ends up with an undercollateralized account. 7. The attacker keeps both the collateral and the borrowed asset, in essence stealing the obligation from the lending protocol We constructed a proof-of-concept which creates an undercollateralized account by repeatedly repaying a low-value token while receiving a high value collateral token. In our proof-of-concept for demonstration purposes, we used two fake tokens with a large value diﬀerence. A real world example of this with less extreme value diﬀerentials could be found between USDC and BTC. A er a series of malicious liquidation operations, we are able to entirely drain the lower value collateral, leaving behind a severely undercollateralized account. total collateral value before: 100000283919052573356860 total loan value before: 90200000000000000000000 total collateral value after: 100000000000000000 total loan value: 90180000000000000000000 This leads to a loss of funds scenario for the lending protocol. If an attacker maliciously creates an undercollateralized account, they could simply keep the loan, never repaying the obligation. Because the value of the loan is higher than the collateral, the lending protocol would be forced to make up the diﬀerence.","programs/sundial/src/instructions/borrowing_instructions/liquidate_sundial_profile.rs use crate::helpers::*; use crate::state::{Sundial, SundialCollateral, SundialProfile}; use anchor_lang::prelude::*; use anchor_spl::token::{Token, TokenAccount}; @@ -14,7 +14,7 @@ use anchor_spl::token::transfer; use crate::error::SundialError; use solana_maths::{Decimal, Rate, TryMul, U192}; /// Percentage of a [Profile] that can be repaid during /// each liquidation call due to price change @@ -89,7 +89,6 @@ pub struct LiquidateSundialProfile<'info> { pub fn process_liquidate_sundial_profile(ctx: Context<LiquidateSundialProfile>) -> ProgramResult { let user_wallet = &ctx.accounts.user_repay_liquidity_wallet; let sundial_profile = &mut ctx.accounts.sundial_profile; let current_ts = ctx.accounts.clock.unix_timestamp; let no_overtime_loans = !sundial_profile .loans @@ -107,11 +106,14 @@ pub fn process_liquidate_sundial_profile(ctx: Context<LiquidateSundialProfile>) let sundial_key = ctx.accounts.sundial.key(); let is_unhealthy = log_then_prop_err!(sundial_profile.check_if_unhealthy()); let allowed_repay_value_when_no_overtime = log_then_prop_err!(sundial_profile .get_borrowed_value() .and_then(|d| d.try_mul(Rate::from_percent(LIQUIDATION_CLOSE_FACTOR)))); let (collaterals, loans) = sundial_profile.get_mut_collaterals_and_loans(); let (loan_pos, loan_to_repay) = vipers::unwrap_opt!( loans.iter_mut().find_position(|l| l.sundial == sundial_key), @@ -154,32 +156,61 @@ pub fn process_liquidate_sundial_profile(ctx: Context<LiquidateSundialProfile>) .liquidation_config .get_repay_value(available_withdraw_value)); let possible_repay_amount = log_then_prop_err!(loan_to_repay .asset .get_amount(min(allowed_repay_value, available_repay_value)) .and_then(|d| d.try_floor_u64())); let repay_amount = min( min(max_repay_amount, possible_repay_amount), loan_to_repay.asset.amount, ); let withdraw_value = log_then_prop_err!(collateral_to_withdraw .config .liquidation_config .get_liquidation_value(loan_to_repay.asset.get_value(repay_amount)?)); let withdraw_amount = log_then_prop_err!(collateral_to_withdraw .asset .get_amount(withdraw_value) .and_then(|d| d.try_ceil_u64())); if log_then_prop_err!(loan_to_repay.asset.reduce_amount(repay_amount)) == 0 { loans.remove(loan_pos); }; if log_then_prop_err!(collateral_to_withdraw.asset.reduce_amount(withdraw_amount)) == 0 { collaterals.remove(collateral_pos); }; log_then_prop_err!(transfer( create_transfer_cpi( ctx.accounts.user_repay_liquidity_wallet.to_account_info(), @@ -188,7 +219,7 @@ pub fn process_liquidate_sundial_profile(ctx: Context<LiquidateSundialProfile>) &[], ctx.accounts.token_program.to_account_info(), ), repay_amount )); log_then_prop_err!(transfer( @@ -201,15 +232,15 @@ pub fn process_liquidate_sundial_profile(ctx: Context<LiquidateSundialProfile>) seeds!(ctx, sundial_collateral, authority), ctx.accounts.token_program.to_account_info(), ), withdraw_amount )); emit!(LiquidateSundialProfileEvent { profile: ctx.accounts.sundial_profile.key(), sundial_collateral: ctx.accounts.sundial_collateral.key(), sundial: ctx.accounts.sundial.key(), repay_amount, withdraw_amount, repay_mint: ctx.accounts.sundial_liquidity_wallet.mint, withdraw_mint: ctx.accounts.sundial_collateral.collateral_mint, user_wallet: ctx.accounts.user_repay_liquidity_wallet.owner}); Ok(()) } programs/sundial/src/state.rs #[inline(always)] pub fn check_if_unhealthy(&self) -> Result<bool, ProgramError> { let liquidation_margin = log_then_prop_err!(self.get_liquidation_margin()); let borrowed_value = log_then_prop_err!(self.get_borrowed_value()); Ok(borrowed_value >= liquidation_margin) } #[inline(always)] @@ -336,6 +342,19 @@ impl Default for SundialProfile { } }","programs/sundial/src/instructions/borrowing_instructions/liquidate_sundial_profile.rs use crate::helpers::*; use crate::state::{calculate_risk_factor, Sundial, SundialCollateral, SundialProfile}; use anchor_lang::prelude::*; use anchor_spl::token::{Token, TokenAccount}; @@ -14,7 +14,7 @@ use anchor_spl::token::transfer; use crate::error::SundialError; use solana_maths::{Decimal, Rate, TryMul, TrySub, U192}; /// Percentage of a [Profile] that can be repaid during /// each liquidation call due to price change @@ -89,7 +89,6 @@ pub struct LiquidateSundialProfile<'info> { pub fn process_liquidate_sundial_profile(ctx: Context<LiquidateSundialProfile>) -> ProgramResult { let user_wallet = &ctx.accounts.user_repay_liquidity_wallet; let sundial_profile = &mut ctx.accounts.sundial_profile; let current_ts = ctx.accounts.clock.unix_timestamp; let no_overtime_loans = !sundial_profile .loans @@ -107,11 +106,14 @@ pub fn process_liquidate_sundial_profile(ctx: Context<LiquidateSundialProfile>) let sundial_key = ctx.accounts.sundial.key(); let is_unhealthy = log_then_prop_err!(sundial_profile.check_if_unhealthy()); let before_risk_factor = log_then_prop_err!(sundial_profile.risk_factor()); let allowed_repay_value_when_no_overtime = log_then_prop_err!(sundial_profile .get_borrowed_value() .and_then(|d| d.try_mul(Rate::from_percent(LIQUIDATION_CLOSE_FACTOR)))); let before_liquidation_margin = log_then_prop_err!(sundial_profile.get_liquidation_margin()); let before_borrowed_value = log_then_prop_err!(sundial_profile.get_borrowed_value()); let (collaterals, loans) = sundial_profile.get_mut_collaterals_and_loans(); let (loan_pos, loan_to_repay) = vipers::unwrap_opt!( loans.iter_mut().find_position(|l| l.sundial == sundial_key), @@ -154,32 +156,61 @@ pub fn process_liquidate_sundial_profile(ctx: Context<LiquidateSundialProfile>) .liquidation_config .get_repay_value(available_withdraw_value)); let possible_repay_amount = min( max( 1, log_then_prop_err!(loan_to_repay .asset .get_amount(min(allowed_repay_value, available_repay_value)) .and_then(|d| d.try_floor_u64())), ), loan_to_repay.asset.amount, ); let user_repay_amount = min(max_repay_amount, possible_repay_amount); let user_withdraw_value = log_then_prop_err!(collateral_to_withdraw .config .liquidation_config .get_liquidation_value(loan_to_repay.asset.get_value(user_repay_amount)?)); let user_withdraw_amount = log_then_prop_err!(collateral_to_withdraw .asset .get_amount(user_withdraw_value) .and_then(|d| d.try_ceil_u64())); let possible_repay_value = loan_to_repay.asset.get_value(possible_repay_amount)?; let possible_withdraw_value = log_then_prop_err!(collateral_to_withdraw .config .liquidation_config .get_liquidation_value(possible_repay_value)); let possible_borrowed_value = before_borrowed_value.try_sub(possible_repay_value)?; let possible_liquidation_margin = before_liquidation_margin.try_sub(possible_withdraw_value)?; // In case: `loan_value * (1 + liquidation_bonus / 100) > collateral_value`, it will not be possible // to enforce that risk factor will decrease, i.e. [Profile] becomes healthier. let is_possible_to_reduce_risk_factor = calculate_risk_factor(possible_borrowed_value, possible_liquidation_margin)? <= before_risk_factor; if log_then_prop_err!(loan_to_repay.asset.reduce_amount(user_repay_amount)) == 0 { loans.remove(loan_pos); }; if log_then_prop_err!(collateral_to_withdraw .asset .reduce_amount(user_withdraw_amount)) == 0 { collaterals.remove(collateral_pos); }; let after_risk_factor = log_then_prop_err!(sundial_profile.risk_factor()); vipers::invariant!( after_risk_factor <= before_risk_factor || !is_possible_to_reduce_risk_factor, SundialError::InvalidLiquidation, ""The risk factor after liquidation is even greater than before, maybe try to liquidate more"" ); log_then_prop_err!(transfer( create_transfer_cpi( ctx.accounts.user_repay_liquidity_wallet.to_account_info(), @@ -188,7 +219,7 @@ pub fn process_liquidate_sundial_profile(ctx: Context<LiquidateSundialProfile>) &[], ctx.accounts.token_program.to_account_info(), ), user_repay_amount )); log_then_prop_err!(transfer( @@ -201,15 +232,15 @@ pub fn process_liquidate_sundial_profile(ctx: Context<LiquidateSundialProfile>) seeds!(ctx, sundial_collateral, authority), ctx.accounts.token_program.to_account_info(), ), user_withdraw_amount )); emit!(LiquidateSundialProfileEvent { profile: ctx.accounts.sundial_profile.key(), sundial_collateral: ctx.accounts.sundial_collateral.key(), sundial: ctx.accounts.sundial.key(), repay_amount: user_repay_amount, withdraw_amount: user_withdraw_amount, repay_mint: ctx.accounts.sundial_liquidity_wallet.mint, withdraw_mint: ctx.accounts.sundial_collateral.collateral_mint, user_wallet: ctx.accounts.user_repay_liquidity_wallet.owner }); Ok(()) } #[event] pub struct LiquidateSundialProfileEvent { #[index] pub profile: Pubkey, pub sundial_collateral: Pubkey, pub sundial: Pubkey, pub repay_amount: u64, pub repay_mint: Pubkey, pub withdraw_amount: u64, pub withdraw_mint: Pubkey, pub user_wallet: Pubkey, } programs/sundial/src/state.rs #[inline(always)] pub fn check_if_unhealthy(&self) -> Result<bool, ProgramError> { let risk_factor = log_then_prop_err!(self.risk_factor()); Ok(risk_factor >= Decimal::one()) } #[inline(always)] pub fn risk_factor(&self) -> Result<Decimal, ProgramError> { let liquidation_margin = log_then_prop_err!(self.get_liquidation_margin()); let borrowed_value = log_then_prop_err!(self.get_borrowed_value()); calculate_risk_factor(borrowed_value, liquidation_margin) } #[inline(always)] @@ -336,6 +342,19 @@ impl Default for SundialProfile { } } pub fn calculate_risk_factor( borrowed_value: Decimal, liquidation_margin: Decimal, ) -> Result<Decimal, ProgramError> { if borrowed_value == Decimal::zero() { Ok(Decimal::zero()) } else if liquidation_margin == Decimal::zero() { Ok(Decimal::from(u128::MAX)) } else { borrowed_value.try_div(liquidation_margin) } }",Critical,"The lending protocol should ensure that in the general case, the health of the account increases. A liquidation should generally never result in bringing the user closer to becoming undercollateralized. At the same time, it will be necessary to ensure that small obligations can be properly liquidated in a profitable manner for the liquidator, even if that liquidation might decrease the health of the account. This could be done similar to spl-token-lending’s reserve.calculate_liquidation function which considers such small amounts as an edge case. // Close out obligations that are too small to liquidate normally if liquidity.borrowed_amount_wads < LIQUIDATION_CLOSE_AMOUNT.into() { // settle_amount is fixed, calculate withdraw_amount and repay_amount settle_amount = liquidity.borrowed_amount_wads; let liquidation_value = liquidity.market_value.try_mul(bonus_rate)?; match liquidation_value.cmp(&collateral.market_value) { Ordering::Greater => {",https://github.com/port-finance/sundial/pull/77/files,High
Sol-117,"When depositing liquidity and minting principal and yield tokens, the user is given one yield token for each underlying liquidity token they deposit. This calculation is incorrect. The user should instead receive one yield token for each principal token. When calculating tokens returned to the user, the principal token amount is properly backdated to the start of Sundial. The intent of this calculation is to ensure that if users deposit tokens late, they receive the same amount of principal tokens as if they had deposited at the start of the Sundial instance. instructions/lending_ instructions/deposit and mint tokens.rs _ _ _ // We calculate how much liquidity is deposited if we deposit it at the very beginning of [Sundial]. let principal_token_amount = start_exchange_rate.collateral_to_liquidity(unwrap_int!(ctx .accounts .sundial_port_lp_wallet .amount .checked_sub(existed_lp_amount)))?; However, this calculation only applies to the minted principal tokens. As seen below, the amount of deposited liquidity is used directly when determining how many yield tokens to mint. instructions/lending_ instructions/deposit and mint _ _ _ pub fn process_deposit_and_mint_tokens( ctx: Context<DepositAndMintTokens>, amount: u64, ) -> ProgramResult { tokens.rs instructions/lending_ instructions/deposit and mint _ _ _ tokens.rs log_then_prop_err!(mint_to( create_mint_to_cpi( © 2022 OtterSec LLC. All Rights Reserved. Port Sundial Audit 13/31 ctx.accounts.yield_token_mint.to_account_info(), ctx.accounts.user_yield_token_wallet.to_account_info(), ctx.accounts.sundial_authority.to_account_info(), seeds!(ctx, sundial, authority), ctx.accounts.token_program.to_account_info(), ), amount )); This relatively subtle bug means that if a user deposits near the end of the period, they will receive more yield tokens then they deserve. A malicious user who deposited a very large amount could take an arbitrarily large proportion of the yield. For example, a user who deposits 100 tokens 1 slot before the end of the period might receive 80 principal tokens and 100 yield tokens. Because the yield token amount is proportionally larger, the user who deposited late takes some yield that would have otherwise gone to the other users, despite providing liquidity for only a single slot. Another way to think about this is: the value of the returned principal tokens and yield tokens must be equal to the deposited liquidity. This creates a misaligned economic structure where users are incentivized to delay adding tokens to the Sundial program until the very end of the period. Proof of Concept More concretely, consider the following scenario 1. 2. Victim deposits liquidity tokens at the beginning of a Sundial Attacker waits until the slot before the Sundial ends and then deposits liquidity tokens. Note that this does not have to be timed perfectly. Doing the deposit anytime close to the end of the Sundial period is enough to be profitable for the attacker. Attacker waits for the next slot and redeems the principle and yield tokens for liquidity tokens, making profit","programs/sundial/src/instructions/borrowing_instructions/change_sundial_collateral_config.rs use crate::helpers::*; use crate::instructions::SundialCollateralConfigParams; use crate::state::{SundialCollateral, SundialMarket}; use anchor_lang::prelude::*; use crate::error::SundialError; @@ -23,6 +23,22 @@ pub fn process_change_sundial_collateral_config( ctx: Context<ChangeSundialCollateralConfig>, config: SundialCollateralConfigParams, ) -> ProgramResult { ctx.accounts.sundial_collateral.sundial_collateral_config = config.into(); Ok(()) } programs/sundial/src/instructions/lending_instructions/change_sundial_config.rs use crate::helpers::*; use crate::state::Sundial; use crate::state::SundialConfig; use crate::state::SundialMarket; use anchor_lang::prelude::*; use crate::instructions::SundialInitConfigParams; @@ -25,7 +25,15 @@ pub fn process_change_sundial_config( ctx: Context<ChangeSundialConfig>, config: SundialInitConfigParams, ) -> ProgramResult { ctx.accounts.sundial.config = config.into(); emit!(ChangeSundialConfigEvent { sundial: ctx.accounts.sundial.key(), config: ctx.accounts.sundial.config.clone(), }); Ok(()) } programs/sundial/src/instructions/lending_instructions/deposit_and_mint_tokens.rs pub fn process_deposit_and_mint_tokens( ctx: Context<DepositAndMintTokens>, amount: u64, ) -> ProgramResult { let sundial = &ctx.accounts.sundial; let existed_lp_amount = ctx.accounts.sundial_port_lp_wallet.amount; let start_exchange_rate = CollateralExchangeRate(Rate(U128(sundial.start_exchange_rate))); log_then_prop_err!(deposit_reserve( ctx.accounts.port_accounts.create_deposit_reserve_context( ctx.accounts.user_liquidity_wallet.to_account_info(), ctx.accounts.sundial_port_lp_wallet.to_account_info(), ctx.accounts.user_authority.to_account_info(), ctx.accounts.clock.to_account_info(), ctx.accounts.token_program.to_account_info(), &[&[&[]]], ), amount, )); log_then_prop_err!(ctx.accounts.sundial_port_lp_wallet.reload()); // We calculate how much liquidity is deposited if we deposit it at the very beginning of [Sundial]. let principal_token_amount = start_exchange_rate.collateral_to_liquidity(unwrap_int!(ctx .accounts .sundial_port_lp_wallet .amount .checked_sub(existed_lp_amount)))?; let fee = &sundial.config.lending_fee; let fee_amount = log_then_prop_err!(fee.mint_fee( @@ -158,7 +157,7 @@ pub fn process_deposit_and_mint_tokens( seeds!(ctx, sundial, authority), ctx.accounts.token_program.to_account_info(), ), amount )); let liquidity_cap = &sundial.config.liquidity_cap; log_then_prop_err!(liquidity_cap.check_mint(&mut ctx.accounts.principle_token_mint)); emit!(DepositAndMintTokensEvent { sundial: ctx.accounts.sundial.key(), liquidity_spent: amount, principal_token_minted: principal_token_amount, yield_token_minted: amount }); Ok(()) }","programs/sundial/src/instructions/borrowing_instructions/change_sundial_collateral_config.rs use crate::helpers::*; use crate::instructions::SundialCollateralConfigParams; use crate::state::{LiquidationConfig, LiquidityCap, SundialCollateral, SundialMarket, LTV}; use anchor_lang::prelude::*; use crate::error::SundialError; @@ -23,6 +23,22 @@ pub fn process_change_sundial_collateral_config( ctx: Context<ChangeSundialCollateralConfig>, config: SundialCollateralConfigParams, ) -> ProgramResult { ctx.accounts .sundial_collateral .sundial_collateral_config .ltv = LTV { ltv: config.ltv }; ctx.accounts .sundial_collateral .sundial_collateral_config .liquidation_config = LiquidationConfig { liquidation_threshold: config.liquidation_threshold, liquidation_penalty: config.liquidation_penalty, }; ctx.accounts .sundial_collateral .sundial_collateral_config .liquidity_cap = LiquidityCap { lamports: config.liquidity_cap, }; Ok(()) } programs/sundial/src/instructions/lending_instructions/change_sundial_config.rs use crate::helpers::*; use crate::state::SundialConfig; use crate::state::SundialMarket; use crate::state::{Fee, LiquidityCap, Sundial}; use anchor_lang::prelude::*; use crate::instructions::SundialInitConfigParams; @@ -25,7 +25,15 @@ pub fn process_change_sundial_config( ctx: Context<ChangeSundialConfig>, config: SundialInitConfigParams, ) -> ProgramResult { ctx.accounts.sundial.config.lending_fee = Fee { bips: config.lending_fee, }; ctx.accounts.sundial.config.borrow_fee = Fee { bips: config.borrow_fee, }; ctx.accounts.sundial.config.liquidity_cap = LiquidityCap { lamports: config.liquidity_cap, }; emit!(ChangeSundialConfigEvent { sundial: ctx.accounts.sundial.key(), config: ctx.accounts.sundial.config.clone(), }); Ok(()) } #[event] /// Event called in [sundial::change_sundial_config]. pub struct ChangeSundialConfigEvent { /// The [Sundial]. #[index] pub sundial: Pubkey, /// New [EigenParams]. pub config: SundialConfig, } programs/sundial/src/instructions/lending_instructions/deposit_and_mint_tokens.rs pub fn process_deposit_and_mint_tokens( ctx: Context<DepositAndMintTokens>, amount: u64, ) -> ProgramResult { let sundial = &ctx.accounts.sundial; let existed_lp_amount = ctx.accounts.sundial_port_lp_wallet.amount; let start_exchange_rate = CollateralExchangeRate(Rate(U128(sundial.start_exchange_rate))); log_then_prop_err!(deposit_reserve( ctx.accounts.port_accounts.create_deposit_reserve_context( ctx.accounts.user_liquidity_wallet.to_account_info(), ctx.accounts.sundial_port_lp_wallet.to_account_info(), ctx.accounts.user_authority.to_account_info(), ctx.accounts.clock.to_account_info(), ctx.accounts.token_program.to_account_info(), &[&[&[]]], ), amount, )); log_then_prop_err!(ctx.accounts.sundial_port_lp_wallet.reload()); let current_lp_amount = ctx.accounts.sundial_port_lp_wallet.amount; // We calculate how much liquidity is deposited if we deposit it at the very beginning of [Sundial]. let principal_token_amount = start_exchange_rate .collateral_to_liquidity(unwrap_int!(current_lp_amount.checked_sub(existed_lp_amount)))?; let fee = &sundial.config.lending_fee; let fee_amount = log_then_prop_err!(fee.mint_fee( @@ -158,7 +157,7 @@ pub fn process_deposit_and_mint_tokens( seeds!(ctx, sundial, authority), ctx.accounts.token_program.to_account_info(), ), principal_token_amount )); let liquidity_cap = &sundial.config.liquidity_cap; log_then_prop_err!(liquidity_cap.check_mint(&mut ctx.accounts.principle_token_mint)); emit!(DepositAndMintTokensEvent { sundial: ctx.accounts.sundial.key(), liquidity_spent: amount, principal_token_minted: principal_token_amount, yield_token_minted: amount }); Ok(()) }",High,"The program should mint the same amount of yield tokens as principal tokens. This results in less yield tokens being given to the attacker, resulting in no profit.",https://github.com/port-finance/sundial/pull/78/files,High
Sol-118,"The privileged ChangeSundialConfigand ChangeSundialCollateralConfig instructions clobber the liquidity_decimalsand collateral_decimalsfields respectively. When initializing the Sundial instance, note how the liquidity_decimalsfield is assigned a er the configuration assignment. instructions/lending_ instructions/initialize _ sundial.rs sundial.config = config.into(); sundial.sundial_market = ctx.accounts.sundial_market.key(); sundial.oracle = oracle; sundial.config.liquidity_decimals = ctx.accounts.port_liquidity_mint.decimals; emit!(InitializeSundialEvent { sundial: sundial.key(), duration_in_seconds, }); Ok(()) This is because the implementation for From<SundialInitConfigParams>will silently zero all other fields such as liquidity_decimals. instructions/lending_ instructions/initialize sundial.rs _ impl From<SundialInitConfigParams> for SundialConfig { fn from(config: SundialInitConfigParams) -> Self { SundialConfig { lending_fee: Fee { bips: config.lending_fee, }, borrow_fee: Fee { bips: config.borrow_fee, }, liquidity_cap: LiquidityCap { lamports: config.liquidity_cap, }, ..SundialConfig::default() } } } However, the liquidity_decimalsfield is not reassigned to with the change_sundial_confighandler. This means that when an admin tries to change the sundial configuration, it will silently zero this amount. instructions/lending_ instructions/change sundial _ _ config.rs ctx.accounts.sundial.config = config.into(); emit!(ChangeSundialConfigEvent { sundial: ctx.accounts.sundial.key(), config: ctx.accounts.sundial.config.clone(), }); Ok(()) This field is used when initializing obligations. By zeroing this field, this has the eﬀect of multiplying the value of all new obligations by a large constant factor, leading to a wildly inaccurate price on subsequent transactions. instructions/borrowing_ instructions/mint sundial _ _ liquidity_ with collateral.rs _ SundialProfileLoan::init_loan( amount, oracle_info, ctx.accounts.sundial.key(), &ctx.accounts.clock, ctx.accounts.sundial.end_unix_time_stamp, ctx.accounts.sundial.config.liquidity_decimals, ) A very similar issue exists with changing sundial collateral configuration. instructions/borrowing_ instructions/change -sundial collateral config.rs - ctx.accounts.sundial collateral.sundial collateral _ _ _ config = config.into();Ok(()) This is especially dangerous, because changing the collateral configuration would massively overvalue the user’s collateral, allowing users to borrow endlessly from the Sundial program, draining the pool. Proof of Concept Consider the following scenario 1. A user deposits collateral 2. An admin runs the change_sundial_collateral_configinstruction. This zeroes the collateral decimals field, massively overvaluing any future collateral deposits. The user mints principle tokens for far more than the market value of the collateral. The user redeems the principle tokens a er the Sundial ends, making a massive amount of profit.","programs/sundial/src/instructions/borrowing_instructions/change_sundial_collateral_config.rs use crate::helpers::*; use crate::instructions::SundialCollateralConfigParams; use crate::state::{SundialCollateral, SundialMarket}; use anchor_lang::prelude::*; use crate::error::SundialError; @@ -23,6 +23,22 @@ pub fn process_change_sundial_collateral_config( ctx: Context<ChangeSundialCollateralConfig>, config: SundialCollateralConfigParams, ) -> ProgramResult { ctx.accounts.sundial_collateral.sundial_collateral_config = config.into(); Ok(()) } programs/sundial/src/instructions/lending_instructions/change_sundial_config.rs use crate::helpers::*; use crate::state::Sundial; use crate::state::SundialConfig; use crate::state::SundialMarket; use anchor_lang::prelude::*; use crate::instructions::SundialInitConfigParams; @@ -25,7 +25,15 @@ pub fn process_change_sundial_config( ctx: Context<ChangeSundialConfig>, config: SundialInitConfigParams, ) -> ProgramResult { ctx.accounts.sundial.config = config.into(); emit!(ChangeSundialConfigEvent { sundial: ctx.accounts.sundial.key(), config: ctx.accounts.sundial.config.clone(), }); Ok(()) } programs/sundial/src/instructions/lending_instructions/deposit_and_mint_tokens.rs pub fn process_deposit_and_mint_tokens( ctx: Context<DepositAndMintTokens>, amount: u64, ) -> ProgramResult { let sundial = &ctx.accounts.sundial; let existed_lp_amount = ctx.accounts.sundial_port_lp_wallet.amount; let start_exchange_rate = CollateralExchangeRate(Rate(U128(sundial.start_exchange_rate))); log_then_prop_err!(deposit_reserve( ctx.accounts.port_accounts.create_deposit_reserve_context( ctx.accounts.user_liquidity_wallet.to_account_info(), ctx.accounts.sundial_port_lp_wallet.to_account_info(), ctx.accounts.user_authority.to_account_info(), ctx.accounts.clock.to_account_info(), ctx.accounts.token_program.to_account_info(), &[&[&[]]], ), amount, )); log_then_prop_err!(ctx.accounts.sundial_port_lp_wallet.reload()); // We calculate how much liquidity is deposited if we deposit it at the very beginning of [Sundial]. let principal_token_amount = start_exchange_rate.collateral_to_liquidity(unwrap_int!(ctx .accounts .sundial_port_lp_wallet .amount .checked_sub(existed_lp_amount)))?; let fee = &sundial.config.lending_fee; let fee_amount = log_then_prop_err!(fee.mint_fee( @@ -158,7 +157,7 @@ pub fn process_deposit_and_mint_tokens( seeds!(ctx, sundial, authority), ctx.accounts.token_program.to_account_info(), ), amount )); let liquidity_cap = &sundial.config.liquidity_cap; log_then_prop_err!(liquidity_cap.check_mint(&mut ctx.accounts.principle_token_mint)); emit!(DepositAndMintTokensEvent { sundial: ctx.accounts.sundial.key(), liquidity_spent: amount, principal_token_minted: principal_token_amount, yield_token_minted: amount }); Ok(()) }","programs/sundial/src/instructions/borrowing_instructions/change_sundial_collateral_config.rs use crate::helpers::*; use crate::instructions::SundialCollateralConfigParams; use crate::state::{LiquidationConfig, LiquidityCap, SundialCollateral, SundialMarket, LTV}; use anchor_lang::prelude::*; use crate::error::SundialError; @@ -23,6 +23,22 @@ pub fn process_change_sundial_collateral_config( ctx: Context<ChangeSundialCollateralConfig>, config: SundialCollateralConfigParams, ) -> ProgramResult { ctx.accounts .sundial_collateral .sundial_collateral_config .ltv = LTV { ltv: config.ltv }; ctx.accounts .sundial_collateral .sundial_collateral_config .liquidation_config = LiquidationConfig { liquidation_threshold: config.liquidation_threshold, liquidation_penalty: config.liquidation_penalty, }; ctx.accounts .sundial_collateral .sundial_collateral_config .liquidity_cap = LiquidityCap { lamports: config.liquidity_cap, }; Ok(()) } programs/sundial/src/instructions/lending_instructions/change_sundial_config.rs use crate::helpers::*; use crate::state::SundialConfig; use crate::state::SundialMarket; use crate::state::{Fee, LiquidityCap, Sundial}; use anchor_lang::prelude::*; use crate::instructions::SundialInitConfigParams; @@ -25,7 +25,15 @@ pub fn process_change_sundial_config( ctx: Context<ChangeSundialConfig>, config: SundialInitConfigParams, ) -> ProgramResult { ctx.accounts.sundial.config.lending_fee = Fee { bips: config.lending_fee, }; ctx.accounts.sundial.config.borrow_fee = Fee { bips: config.borrow_fee, }; ctx.accounts.sundial.config.liquidity_cap = LiquidityCap { lamports: config.liquidity_cap, }; emit!(ChangeSundialConfigEvent { sundial: ctx.accounts.sundial.key(), config: ctx.accounts.sundial.config.clone(), }); Ok(()) } #[event] /// Event called in [sundial::change_sundial_config]. pub struct ChangeSundialConfigEvent { /// The [Sundial]. #[index] pub sundial: Pubkey, /// New [EigenParams]. pub config: SundialConfig, } programs/sundial/src/instructions/lending_instructions/deposit_and_mint_tokens.rs pub fn process_deposit_and_mint_tokens( ctx: Context<DepositAndMintTokens>, amount: u64, ) -> ProgramResult { let sundial = &ctx.accounts.sundial; let existed_lp_amount = ctx.accounts.sundial_port_lp_wallet.amount; let start_exchange_rate = CollateralExchangeRate(Rate(U128(sundial.start_exchange_rate))); log_then_prop_err!(deposit_reserve( ctx.accounts.port_accounts.create_deposit_reserve_context( ctx.accounts.user_liquidity_wallet.to_account_info(), ctx.accounts.sundial_port_lp_wallet.to_account_info(), ctx.accounts.user_authority.to_account_info(), ctx.accounts.clock.to_account_info(), ctx.accounts.token_program.to_account_info(), &[&[&[]]], ), amount, )); log_then_prop_err!(ctx.accounts.sundial_port_lp_wallet.reload()); let current_lp_amount = ctx.accounts.sundial_port_lp_wallet.amount; // We calculate how much liquidity is deposited if we deposit it at the very beginning of [Sundial]. let principal_token_amount = start_exchange_rate .collateral_to_liquidity(unwrap_int!(current_lp_amount.checked_sub(existed_lp_amount)))?; let fee = &sundial.config.lending_fee; let fee_amount = log_then_prop_err!(fee.mint_fee( @@ -158,7 +157,7 @@ pub fn process_deposit_and_mint_tokens( seeds!(ctx, sundial, authority), ctx.accounts.token_program.to_account_info(), ), principal_token_amount )); let liquidity_cap = &sundial.config.liquidity_cap; log_then_prop_err!(liquidity_cap.check_mint(&mut ctx.accounts.principle_token_mint)); emit!(DepositAndMintTokensEvent { sundial: ctx.accounts.sundial.key(), liquidity_spent: amount, principal_token_minted: principal_token_amount, yield_token_minted: amount }); Ok(()) }",High,The program should keep the liquidity_decimalsand collateral_decimals fields the same when the config is changed.,https://github.com/port-finance/sundial/pull/78/files,High
Sol-119,"Both the addresses of Sundialand SundialCollateralare derived from the SundialMarketaddress, but the InitializeSundialinstruction does not use a fixed suﬀix.This results in the owner being able to create a Sundialand a SundialCollateralat the same address by appending b""sundial""to the collateral name and passing it to InitializeSundial. For example, a Sundial instance created with “Xcollateral” would collide with a SundialCollateral instance created with “X” . This could potentially lead to a usability concern if the seeds could be influenced by a malicious user. However, due to the low risk and impact, we rated this as informational as opposed to a denial of service concern.","instructions/lending_ instructions/initialize sundial.rs _ #[account( init, payer = owner, seeds = [ sundial_market.key().as_ref(), name.as_ref() ], bump = pda_bump )] pub sundial: Account<'info, Sundial>, instructions/borrowing_ instructions/initialize sundial _ _ collateral.rs #[account( init, payer = owner, seeds = [ sundial_market.key().as_ref(), name.as_ref(), b""collateral"" ], bump = pda_bump )] pub sundial_collateral: Account<'info, SundialCollateral>","instructions/lending_ instructions/initialize sundial.rs _ payer = owner, seeds = [ sundial_market.key().as_ref(), - name.as_ref() + name.as_ref(), + b""sundial"" ], bump = pda_bump",Informational,"The seedsfor InitializeSundialshould include a suﬀix such as b""sundial""to prevent collisions.",https://github.com/port-finance/sundial/blob/master/audits/port-finance-sundial-audit-public.pdf (Page 21),High
Sol-120,"Lack of functionality for admin rotation. The program does not provide a mechanism to rotate or update the authority. This is considered a deviation from leading security practices as it limits exibility and poses operational risks, such as the inability to recover from admin key compromise.","pub fn initialize(ctx: Context<Initialize>) -> Result<()> { msg!(""Calling initialize""); let global = &mut ctx.accounts.global; require!(!global.initialized, CurveLaunchpadError::AlreadyInitialized,); global.authority = *ctx.accounts.authority.to_account_info().key; global.initialized = true; global.initial_token_supply = DEFAULT_TOKEN_SUPPLY; global.initial_real_sol_reserves = 0; global.initial_real_token_reserves = DEFAULT_TOKEN_SUPPLY; global.initial_virtual_sol_reserves = 30_000_000_000; global.initial_virtual_token_reserves = 1_073_000_000_000_000; global.fee_basis_points = 50; msg!(""Initialized global state""); Ok(()) }","pub fn initialize(ctx: Context<Initialize>) -> Result<()> { msg!(""Calling initialize""); let global = &mut ctx.accounts.global; require!(!global.initialized, CurveLaunchpadError::AlreadyInitialized,); global.authority = *ctx.accounts.authority.key; global.initialized = true; global.initial_token_supply = DEFAULT_TOKEN_SUPPLY; global.initial_real_sol_reserves = 0; global.initial_real_token_reserves = DEFAULT_TOKEN_SUPPLY; global.initial_virtual_sol_reserves = 30_000_000_000; global.initial_virtual_token_reserves = 1_073_000_000_000_000; global.fee_basis_points = 50; msg!(""Initialized global state""); Ok(()) }",Low,"Step 1: Initiate Authority Transfer: The current authority initiates the process by specifying the new authority's public key. This step stores the new authority's public key but does not nalize the transfer. Step 2: Confirm Authority Transfer: The new authority conrms the transfer to nalize the process and update the program's admin key. Issue was partially xed in 0d67840978f3965c343007707618bc37306f4c2b . The protocol implements a way for authority change, however the implemented approach is that old owner have to sign the authority changing transaction with the new owner. This might be problematic, as a new owner have only few minutes for it, as Solana is restricting that timeframe to some specic blocks amount. If the new owner will be, for example, a multisig, such a change might require to be executed on one device, or via some automation.",https://github.com/biswap-org/curve-launchpad/commit/0d67840978f3965c343007707618bc37306f4c2b,High
Sol-121,"Missing functionality to pause program operations.The program lacks a mechanism to pause its operations. This is considered a bad practice as it limits the authority's ability to respond to critical situations, such as: Security Incidents - in the event of a vulnerability or exploit, the inability to pause operations could lead to signicant nancial losses. Operational Failures - Pausing functionality allows the authority to temporarily halt operations while addressing bugs, miscongurations, or other unforeseen issues.","pub fn buy(ctx: Context<Buy>, token_amount: u64, max_sol_cost: u64) -> Result<()> { require!( ctx.accounts.global.initialized, CurveLaunchpadError::NotInitialized ); //bonding curve is not complete require!( !ctx.accounts.bonding_curve.complete, @@ -75,27 +82,28 @@ CurveLaunchpadError::InsufficientTokens, );","use crate::instructions::CurveLaunchpadError; use crate::state::Global; use anchor_lang::prelude::*; #[derive(Accounts)] pub struct Pause<'info> { #[account( mut, seeds = [Global::SEED_PREFIX], bump, )] global: Box<Account<'info, Global>>, authority: Signer<'info>, system_program: Program<'info, System>, } pub fn pause(ctx: Context<Pause>) -> Result<()> { let global = &mut ctx.accounts.global; //confirm program is initialized require!(global.initialized, CurveLaunchpadError::NotInitialized); //confirm user is the authority require!( global.authority == *ctx.accounts.authority.key, CurveLaunchpadError::InvalidAuthority ); global.paused = true; Ok(()) } #[derive(Accounts)] pub struct Resume<'info> { #[account( mut, seeds = [Global::SEED_PREFIX], bump, )] global: Box<Account<'info, Global>>, authority: Signer<'info>, system_program: Program<'info, System>, } pub fn resume(ctx: Context<Resume>) -> Result<()> { let global = &mut ctx.accounts.global; //confirm program is initialized require!(global.initialized, CurveLaunchpadError::NotInitialized); //confirm user is the authority require!( global.authority == *ctx.accounts.authority.key, CurveLaunchpadError::InvalidAuthority ); global.paused = false; Ok(()) } pub fn buy(ctx: Context<Buy>, token_amount: u64, max_sol_cost: u64) -> Result<()> { //confirm program is initialized require!( ctx.accounts.global.initialized, CurveLaunchpadError::NotInitialized ); //confirm program is not paused require!( !ctx.accounts.global.paused, CurveLaunchpadError::ProgramIsPaused ); //bonding curve is not complete require!( !ctx.accounts.bonding_curve.complete, @@ -75,27 +82,28 @@ CurveLaunchpadError::InsufficientTokens, );",Low,"Implement a pausability mechanism controlled by the authority. The program should maintain a state variable to indicate whether operations are paused, and all instructions should check this state before executing. Issue was xed in 7d4bc557c2954f96b0723f5ea464774336710dd6 by creation of pausing and resuming mechanism.",https://github.com/biswap-org/curve-launchpad/commit/7d4bc557c2954f96b0723f5ea464774336710dd6,High
Sol-122,"Lack of validation for set_fee edge values - Low. The program does not validate the fee_amount value set during the set_fee call This allows authority to supply an arbitrary high values, what might discourage usage of the protocol due to the too big fee for the potential users. Additionally, authority can potentially frontrun user operations, collecting high fees.","pub fn set_fee( ctx: Context<SetFee>, fee_amount: u64 ) -> Result<()> { let global = &mut ctx.accounts.global; //confirm program is initialized require!( global.initialized, CurveLaunchpadError::NotInitialized ); //confirm user is the authority require!( global.authority == *ctx.accounts.user.to_account_info().key, CurveLaunchpadError::InvalidAuthority ); global.fee_basis_points = fee_amount; Ok(()) } pub fn set_params( ctx: Context<SetParams>, fee_recipient: Pubkey, withdraw_authority: Pubkey, initial: Reserves, initial_token_supply: u64, fee_basis_points: u64, ) -> Result<()> { let global = &mut ctx.accounts.global; //confirm program is initialized require!(global.initialized, CurveLaunchpadError::NotInitialized); //confirm user is the authority require!( global.authority == *ctx.accounts.user.key, CurveLaunchpadError::InvalidAuthority ); global.fee_recipient = fee_recipient; global.initial_virtual_token_reserves = initial.virtual_token_reserves; global.initial_virtual_sol_reserves = initial.virtual_sol_reserves; global.initial_real_token_reserves = initial.real_token_reserves; global.initial_token_supply = initial_token_supply; global.fee_basis_points = fee_basis_points; global.withdraw_authority = withdraw_authority; //TODO: create later method new() for ParamsEven so you pass params without those let initial_virtual_token_reserves = initial.virtual_token_reserves; let initial_virtual_sol_reserves = initial.virtual_sol_reserves; let initial_real_token_reserves = initial.real_token_reserves; emit_cpi!(SetParamsEvent { fee_recipient, withdraw_authority, initial_virtual_token_reserves, initial_virtual_sol_reserves, initial_real_token_reserves, initial_token_supply, fee_basis_points, }); Ok(()) }","pub fn set_params( ctx: Context<SetParams>, fee_recipient: Pubkey, withdraw_authority: Pubkey, initial: Reserves, initial_token_supply: u64, fee_basis_points: u64, ) -> Result<()> { let global = &mut ctx.accounts.global; //confirm program is initialized require!(global.initialized, CurveLaunchpadError::NotInitialized); //confirm user is the authority require!( global.authority == *ctx.accounts.user.key, CurveLaunchpadError::InvalidAuthority ); //confirm new fee value is less than 10% require!( calculate_fee(100, fee_basis_points) <= 10, CurveLaunchpadError::MaxFeeExceeded ); global.fee_recipient = fee_recipient; global.initial_virtual_token_reserves = initial.virtual_token_reserves; global.initial_virtual_sol_reserves = initial.virtual_sol_reserves; global.initial_real_token_reserves = initial.real_token_reserves; global.initial_token_supply = initial_token_supply; global.fee_basis_points = fee_basis_points; global.withdraw_authority = withdraw_authority; //TODO: create later method new() for ParamsEven so you pass params without those let initial_virtual_token_reserves = initial.virtual_token_reserves; let initial_virtual_sol_reserves = initial.virtual_sol_reserves; let initial_real_token_reserves = initial.real_token_reserves; emit_cpi!(SetParamsEvent { fee_recipient, withdraw_authority, initial_virtual_token_reserves, initial_virtual_sol_reserves, initial_real_token_reserves, initial_token_supply, fee_basis_points, }); Ok(()) }",Low,Add validation logic to ensure that the fee_amount is between the acceptable bounds.,https://github.com/biswap-org/curve-launchpad/commit/8675be6574a8390696a02ab647de6c67e97013b6,High
Sol-123,The SwapSolForTokens instruction requires integrator_wsol_ata to be provided as read-only while it is a token account dedicated for fees collection. This may lead to the instruction fails due to trying write to read-only account,"#[derive(Accounts)] pub struct SwapSolForTokens<'info> { pub integrator_wsol_ata: Account<'info, TokenAccount>, ... }","#[derive(Accounts)] pub struct SwapSolForTokens<'info> { #[account(mut)] pub integrator_wsol_ata: Account<'info, TokenAccount>, ... }",Medium,Consider declaring the account as mutable.,https://hacken.io/audits/unizen/sca-unizen-unizen-solana-swap-jan2025/,High
Sol-124,"The protocol does not validate whether the fee specified by the user when creating an order is less than the amount of the order. This allows users to specify a fee greater than the actual order amount, resulting in the protocol accumulating a fee balance that does not exist. Consequently, when orchestrators attempt to withdraw accumulated fees, they may encounter a situation where the total fee balance exceeds the actual funds available, causing withdrawals to fail and halting protocol operations. Create an Order with Insufficient Funds to Cover the Fee: A malicious user creates an order with a small amount but specifies a larger fee. For example: amount = 0.05 SOL fee = 100 SOL The protocol accepts the order, assuming the fee is valid, and adds 100 SOL to the accumulated fee balance. Repeat the Process to Inflate Fee Balances: The user repeats the above step multiple times, creating numerous orders with fees larger than the order amounts. Each time, the protocol incorrectly accumulates fees that do not exist in the vault. Withdraw Fees by Orchestrators: Orchestrators attempt to withdraw accumulated fees. However, the vault balance is insufficient to cover the inflated fee balance. This results in withdrawal failures, disrupting protocol operations and potentially halting orchestrator activities.","impl CreateOrder<'_> { pub fn process_instruction( ctx: Context<Self>, ... ) -> Result<()> { ... let min_fee = ctx.accounts.target_chain_min_fee.min_fee; if min_fee > fee { return err!(GeniusError::InsufficientFees); } ... ctx.accounts.asset.unclaimed_fees += fee; ctx.accounts.asset.total_fee_collected += fee; // Transfer USDC from orchestrator to vault token_transfer_user( ctx.accounts.ata_trader.to_account_info().clone(), ctx.accounts.trader.to_account_info().clone(), ctx.accounts.ata_vault.to_account_info().clone(), ctx.accounts.token_program.to_account_info().clone(), amount, )?; ... Ok(()) } }","impl CreateOrder<'_> { pub fn process_instruction(ctx: Context<Self>, ...) -> Result<()> { // Extract the order amount and fee from the context let amount = ctx.accounts.order.amount; let fee = ctx.accounts.order.fee; // Ensure the fee is less than or equal to the order amount if fee > amount { return Err(GeniusError::InvalidFeeAmount.into()); } // Existing check for minimum fee let min_fee = ctx.accounts.target_chain_min_fee.min_fee; if min_fee > fee { return Err(GeniusError::InsufficientFees.into()); } // Update unclaimed fees and total fees collected ctx.accounts.asset.unclaimed_fees += fee; ctx.accounts.asset.total_fee_collected += fee; // Transfer USDC from trader to vault token_transfer_user( ctx.accounts.ata_trader.to_account_info().clone(), ctx.accounts.trader.to_account_info().clone(), ctx.accounts.ata_vault.to_account_info().clone(), ctx.accounts.token_program.to_account_info().clone(), amount, )?; Ok(()) } }",Critical,Ensure that the fee specified by the user is less than or equal to the amount of the order and reject orders where fee > amount.,https://hacken.io/audits/shuttle-labs/sca-shuttle-labs-rust-jan2025/,High
Sol-125,"The protocol does not enforce a minimum order amount when creating orders. This allows users to create a large number of orders with negligible amounts, such as near-zero token values. Such behavior can lead to significant inefficiencies and potential denial-of-service (DoS) risks for the off-chain orchestrators responsible for processing these orders. If orchestrators must process thousands of trivial orders, their computational resources and bandwidth could be overwhelmed, leading to delays in legitimate transactions and degraded performance of the off-chain network. This lack of validation creates a vulnerability that could be exploited by malicious users to disrupt the system.","impl CreateOrder<'_> { pub fn process_instruction( ctx: Context<Self>, ... ) -> Result<()> { ... let min_fee = ctx.accounts.target_chain_min_fee.min_fee; if min_fee > fee { return err!(GeniusError::InsufficientFees); } ... ctx.accounts.asset.unclaimed_fees += fee; ctx.accounts.asset.total_fee_collected += fee; // Transfer USDC from orchestrator to vault token_transfer_user( ctx.accounts.ata_trader.to_account_info().clone(), ctx.accounts.trader.to_account_info().clone(), ctx.accounts.ata_vault.to_account_info().clone(), ctx.accounts.token_program.to_account_info().clone(), amount, )?; ... Ok(()) } }","const MIN_ORDER_AMOUNT: u64 = 100; // Example value; adjust as needed impl CreateOrder<'_> { pub fn process_instruction(ctx: Context<Self>, ...) -> Result<()> { let amount = ctx.accounts.order.amount; let fee = ctx.accounts.order.fee; // Validate that the order amount meets the minimum requirement if amount < MIN_ORDER_AMOUNT { return Err(GeniusError::OrderAmountTooLow.into()); } // Existing fee validation if fee > amount { return Err(GeniusError::InvalidFeeAmount.into()); } let min_fee = ctx.accounts.target_chain_min_fee.min_fee; if min_fee > fee { return Err(GeniusError::InsufficientFees.into()); } // Update fee records ctx.accounts.asset.unclaimed_fees += fee; ctx.accounts.asset.total_fee_collected += fee; // Transfer assets from trader to vault token_transfer_user( ctx.accounts.ata_trader.to_account_info().clone(), ctx.accounts.trader.to_account_info().clone(), ctx.accounts.ata_vault.to_account_info().clone(), ctx.accounts.token_program.to_account_info().clone(), amount, )?; Ok(()) } }",Medium,Introduce a minimum order amount validation to ensure that only meaningful orders are created. This prevents resource wastage and mitigates the risk of orchestrator overload.,https://hacken.io/audits/shuttle-labs/sca-shuttle-labs-rust-jan2025/,High
Sol-126,"The program does not provide an order cancellation mechanism, leaving the protocol vulnerable to scenarios where funds become stuck if an order cannot be processed. Currently, orchestrators, which are run by the protocol, are required to process orders. If the protocol sets an insufficient minimum fee for processing an order, orchestrators must cover the fee difference to process the order. This can lead to financial losses for the protocol, especially in chains where gas prices vary significantly and are difficult to predict accurately. Without an order cancellation mechanism, the protocol bears the risk of mismanaging fees, forcing it to subsidize the cost of processing orders where the minimum fee was underestimated. Over time, this could lead to unsustainable costs and reduce protocol reliability.","impl SetTargetChainMinFee<'_> { pub fn process_instruction(ctx: Context<Self>, dest_chain_id: u32, min_fee: u64) -> Result<()> { // shouldn't be verified against fee in cross_chain_fee_bps? let target_chain_min_fee = &mut ctx.accounts.target_chain_min_fee; target_chain_min_fee.dest_chain_id = dest_chain_id; target_chain_min_fee.token_in = ctx.accounts.usdc_mint.key().to_bytes(); target_chain_min_fee.min_fee = min_fee; Ok(()) } }",,Low,Introduce an order cancellation mechanism that allows users to cancel their unprocessed orders. This would prevent the protocol from being forced to process orders at a loss in cases of mismanaged fees or volatile gas prices.,https://hacken.io/audits/shuttle-labs/sca-shuttle-labs-rust-jan2025/,High
Sol-127,"The create_pool instruction requires the associated token account for the pool to be uninitialized. However, a malicious actor can pre-initialize this account before the legitimate creator does, effectively blocking the pool creation process. This creates a Denial of Service (DoS) vulnerability, where an attacker can prevent others from creating pools by pre-initializing the required associated token accounts, disrupting the protocol's functionality and user experience.","#[derive(Accounts)] pub struct CreateLiquidityPool<'info> { ... /// The pool's token account that will hold the tokens #[account( init, payer = creator, associated_token::mint = mint, associated_token::authority = pool, associated_token::token_program = token_program, )] pub pool_token_account: InterfaceAccount<'info, TokenAccount>, ... }","#[derive(Accounts)] pub struct CreateLiquidityPool<'info> { // Other accounts #[account( init_if_needed, payer = creator, associated_token::mint = mint, associated_token::authority = pool, associated_token::token_program = token_program, )] pub pool_token_account: InterfaceAccount<'info, TokenAccount>, // Other accounts }",High,"Modify the create_pool logic to allow pool creation even if the associated token account is already initialized. This can be achieved by using init_if_needed to ensure that the program initializes the associated token account if it does not already exist, avoiding conflicts.",https://hacken.io/audits/opinions-fun/sca-opinions-fun-opinions-dot-fun-contracts-dec2024/,High
Sol-128,"The transfer_raydium_fees function uses a hardcoded constant (RAYDIUM_FEE_LAMPORTS) to calculate the fee for Raydium pool creation. If Raydium adjusts their fee structure, the hardcoded value will no longer be valid, causing the protocol to fail during pool migration. This dependency on a static value introduces fragility to the protocol's functionality, making it incompatible with future Raydium updates.","/// Transfers the required fees for Raydium pool creation to the pool signer /// Amount is defined by RAYDIUM_FEE_LAMPORTS constant pub fn transfer_raydium_fees(&self) -> Result<()> { ... transfer(cpi_ctx, RAYDIUM_FEE_LAMPORTS)?; Ok(()) }","Retrieve the current pool creation fee directly from Raydium's amm_config`` account during the initialize_raydium` instruction. This ensures that your protocol uses the most up-to-date fee structure.​ // Pseudocode for fetching the create_pool_fee let amm_config_account = &ctx.accounts.amm_config; let create_pool_fee = amm_config_account.create_pool_fee; Validate the amm_config Account: Ensure that the provided amm_config account matches the expected configuration. This validation prevents users from supplying unintended or malicious configurations.​ // Pseudocode for validating the amm_config account if amm_config_account.key() != expected_amm_config_key { return Err(ProgramError::InvalidAccountData); } Transfer the Dynamically Calculated Fee: Utilize the dynamically retrieved create_pool_fee value to transfer the appropriate amount to Raydium’s fee receiver account.​ // Pseudocode for transferring the create_pool_fee let cpi_accounts = Transfer { from: ctx.accounts.payer.to_account_info(), to: ctx.accounts.raydium_fee_receiver.to_account_info(), authority: ctx.accounts.payer.to_account_info(), }; let cpi_context = CpiContext::new(ctx.accounts.token_program.to_account_info(), cpi_accounts); token::transfer(cpi_context, create_pool_fee)?;",Medium,"Make **create_pool_fee** Calculation Dynamic: Replace the hardcoded RAYDIUM_FEE_LAMPORTS constant with dynamic fee calculation during the initialize_raydium instruction. Fetch the create_pool_fee value dynamically from Raydium's amm_config account. Validate **amm_config**: Ensure the provided amm_config matches the expected configuration, including the create_pool_fee, to prevent users from supplying unintended or malicious configurations. Update **initialize_raydium** Instruction: Integrate the dynamic fee calculation and amm_config validation into the pool initialization process. Transfer the dynamically calculated create_pool_fee value to Raydium’s fee receiver account. Calculate Rent Dynamically: Include dynamic calculation of rent-exempt lamports required for any new accounts created during the migration process.",https://hacken.io/audits/opinions-fun/sca-opinions-fun-opinions-dot-fun-contracts-dec2024/,High
Sol-129,"Unauthorized Treasury Wallet Withdrawal due to Lack of Signer Validation. The IssuerAccept and InvestorAcceptAndPay instructions of the instruct module utilize the check_acceptance macros to validate the product is ready for acceptance. The macros requires the investor or issuer to be the signer. However, the IssuerAccept instruction is intended solely for the issuer, but it can currently be called by an investor. This oversight allows the investor to Initialize new product, execute IssuerAccept without appropriate signature, and then execute the SettlePayment instruction draining the Treasury Wallet account of the specified issuer. Additionally, the InvestorAcceptAndPay instruction is intended solely for the investor, but it can also be called by the issuer. This undermines the intended access control mechanisms, however, does not significantly impact the system.","macro_rules! check_acceptance { ($ctx:expr, $validity_in_seconds:expr, $expected_signer:expr) => { // Existing validation logic // Note: No explicit check to verify that $expected_signer is a signer }; } //Some other file pub fn issuer_accept( ctx: Context<IssuerAccept>, validity_in_seconds: Option<i64>, ) -> Result<()> { check_acceptance!(ctx, validity_in_seconds, ctx.accounts.issuer.key()); ... } pub fn investor_accept_and_pay( ctx: Context<InvestorAcceptAndPay>, validity_in_seconds: Option<i64>, ) -> Result<()> { check_acceptance!(ctx, validity_in_seconds, ctx.accounts.investor.key()); ... }","macro_rules! check_acceptance { ($ctx:expr, $validity_in_seconds:expr, $expected_signer:expr) => { // Existing validation logic // Ensure the expected signer is a signer of the transaction if !$ctx.accounts.$expected_signer.is_signer { return Err(ProgramError::MissingRequiredSignature); } // Additional validation logic }; } //Some other file pub fn issuer_accept( ctx: Context<IssuerAccept>, validity_in_seconds: Option<i64>, ) -> Result<()> { check_acceptance!(ctx, validity_in_seconds, ctx.accounts.issuer.key()); ... } pub fn investor_accept_and_pay( ctx: Context<InvestorAcceptAndPay>, validity_in_seconds: Option<i64>, ) -> Result<()> { check_acceptance!(ctx, validity_in_seconds, ctx.accounts.investor.key()); ... }",Critical,"The expected_invoker parameter is added to the check_acceptance macros enforcing strict access controls on the IssuerAccept and InvestorAcceptAndPay instructions, ensuring that each instruction can only be invoked by the intended and authorized caller.",https://hacken.io/audits/margarita-finance-by-obligate-ag/sca-obligate-instruct-sep2024/,High
Sol-130,"Invalid Dynamic Payment Currency Set due to Lack of Mint Accounts Validation. The FixPayment instruction of the payment_authority_brc module does not validate the provided cash_mint and underlying_mint accounts correspond to the ones recorded in the barrier_reverse_convertible PDA.The instruction can be called by any user causing the accounts are arbitrary token mints. The instruction aims to fix the dynamic payment amount and mint account. Though, the situation may lead to the dynamic payment be fixed with an invalid mint. An invalid mint account leads to the product issuer lose value from the Treasury Wallet or the payment is defaulted and the investor does not receive the expected funds.","#[derive(Accounts)] pub struct FixPayment<'info> { ... #[account(...)] pub barrier_reverse_convertible: Account<'info, BarrierReverseConvertible>, pub cash_mint: InterfaceAccount<'info, Mint>, pub underlying_mint: InterfaceAccount<'info, Mint>, ... } pub fn fix_payment(ctx: Context<FixPayment>) -> Result<()> { ... let final_payment_mint = match final_payment_mint { PaymentMint::Cash => &ctx.accounts.cash_mint, PaymentMint::Underlying => &ctx.accounts.underlying_mint, }; let cpi_accounts = instruct::cpi::accounts::FixPayment { authority: barrier_reverse_convertible.to_account_info(), mint: final_payment_mint.to_account_info(), structured_product: structured_product.to_account_info(), system_program: ctx.accounts.system_program.to_account_info(), }; ... }","pub fn fix_payment(ctx: Context<FixPayment>) -> Result<()> { let barrier_reverse_convertible = &ctx.accounts.barrier_reverse_convertible; ... require!( ctx.accounts.cash_mint.key() == barrier_reverse_convertible.cash_mint, BRCError::InvalidCashMint ); require!( ctx.accounts.underlying_mint.key() == barrier_reverse_convertible.underlying_mint, BRCError::InvalidUnderlyingMint ); ... }",Critical,Consider validating the mint accounts match the recorded ones.,https://hacken.io/audits/margarita-finance-by-obligate-ag/sca-obligate-instruct-sep2024/,High
Sol-131,"Inability to Issue Product due to Token Account Closure Block. The Issue instruction in the instruct module includes a call to the Token::CloseAccount instruction, which can only be executed if the specified account has a zero balance. While the Issue instruction handles deposits and fees, it does not account for the possibility that an external user could send additional funds to the account. If a malicious user deposits a small amount (dust) into the account, the Issue instruction will fail, causing the transaction to revert due to the non-zero balance. As a result, a malicious user can repeatedly block the contract functionality.","pub fn issue(ctx: Context<Issue>) -> Result<()> {  ...  token::transfer(  ...  ctx.accounts.structured_product.issuance_payment_amount,  )?;   if ctx.accounts.structured_product.fee_amount > 0 {  ...  token::transfer(  ...  ctx.accounts.structured_product.fee_amount,  )?;  }   close_escrow_token_account!(...);  ... }","pub fn issue(ctx: Context<Issue>) -> Result<()> { // Existing token transfers token::transfer( CpiContext::new( ctx.accounts.token_program.to_account_info(), token::Transfer { from: ctx.accounts.issuance_payment_account.to_account_info(), to: ctx.accounts.structured_product.to_account_info(), authority: ctx.accounts.structured_product.to_account_info(), }, ), ctx.accounts.structured_product.issuance_payment_amount, )?; if ctx.accounts.structured_product.fee_amount > 0 { token::transfer( CpiContext::new( ctx.accounts.token_program.to_account_info(), token::Transfer { from: ctx.accounts.fee_account.to_account_info(), to: ctx.accounts.structured_product.to_account_info(), authority: ctx.accounts.structured_product.to_account_info(), }, ), ctx.accounts.structured_product.fee_amount, )?; } // Transfer any remaining tokens to the treasury account let escrow_balance = ctx.accounts.escrow_token_account.amount; if escrow_balance > 0 { token::transfer( CpiContext::new( ctx.accounts.token_program.to_account_info(), token::Transfer { from: ctx.accounts.escrow_token_account.to_account_info(), to: ctx.accounts.treasury_account.to_account_info(), authority: ctx.accounts.structured_product.to_account_info(), }, ), escrow_balance, )?; } // Close the escrow token account token::close_account( CpiContext::new( ctx.accounts.token_program.to_account_info(), token::CloseAccount { account: ctx.accounts.escrow_token_account.to_account_info(), destination: ctx.accounts.structured_product.to_account_info(), authority: ctx.accounts.structured_product.to_account_info(), }, ), )?; Ok(()) }",High,"Consider modifying the Issue instruction to transfer any remaining balance to the issuer treasury address before attempting to close the account. This would ensure the account balance is zero, allowing Token::CloseAccount to execute without disruption.",https://hacken.io/audits/margarita-finance-by-obligate-ag/sca-obligate-instruct-sep2024/,High
Sol-132,"Unexpected Product Closure due to Lack of Time Validation. The Close instruction of the Instruct program allows closing the product if it has not been accepted by one or both parties. However, the function does not validate the time in cases where neither party has accepted the product yet. Since the instruction can be called by any user, a third party may invoke the Close function and close the product before either the issuer or investor has had a chance to accept it. This may lead to a Denial of Service (DoS) situation, preventing the proper issuance of the product.","pub fn close(ctx: Context<Close>) -> Result<()> { ... require!( structured_product.max_issuance_date.is_some() && Clock::get()?.unix_timestamp > structured_product.max_issuance_date.unwrap() || structured_product.investor_accepted.is_none() && structured_product.issuer_accepted.is_none(), StructuredProductError::IssuanceNotExpired ); ... } pub struct Close<'info> { #[account(mut)] pub payer: Signer<'info>, ... }","pub fn close(ctx: Context<Close>) -> Result<()> { ... require!( structured_product.max_issuance_date.is_some() && Clock::get()?.unix_timestamp > structured_product.max_issuance_date.unwrap() || structured_product.investor_accepted.is_none() && structured_product.issuer_accepted.is_none(), StructuredProductError::IssuanceNotExpired ); ... } pub struct Close<'info> { #[account(mut)] pub payer: Signer<'info>, ... } pub fn initialize(... deadline: i64 ...) -> Result<()> { let structured_product = &mut ctx.accounts.structured_product; structured_product.deadline = deadline; ... } pub fn close(ctx: Context<Close>) -> Result<()> { ... require!( structured_product.max_issuance_date.is_some() && Clock::get()?.unix_timestamp > structured_product.max_issuance_date.unwrap() || structured_product.investor_accepted.is_none() && structured_product.issuer_accepted.is_none() && Clock::get()?.unix_timestamp > structured_product.deadline, StructuredProductError::IssuanceNotExpired ); ... } pub struct StructuredProduct { pub deadline: i64, ... }",High,"Consider restricting the Close instruction to the product authority. Alternatively, setup the deadline timestamp and allow the closure only as the deadline passed.",https://hacken.io/audits/margarita-finance-by-obligate-ag/sca-obligate-instruct-sep2024/,High
Sol-133,Invalid Payment Amount due to Unchecked Type Cast. The get_final_payment function used in the payment_authority_brc module performs unchecked type cast of i32 to u32 which may result in integer underflow. The FixPayment instruction of the payment_authority_brc module performs unchecked type cast of i64 to u64 which may result in integer underflow.This may lead to incorrect payment amount calculation in case the Oracle returns unexpected data.,"fn get_final_payment(... price_exponent: i32 ...) -> Result<(u64, PaymentMint)> { ... -price_exponent as u32 ... } pub fn fix_payment(ctx: Context<FixPayment>) -> Result<()> { ... let final_fixing_price: i64 = price_update .get_price_unchecked(&barrier_reverse_convertible.feed_id)?.price; ... final_fixing_price as u64 ... }","fn get_final_payment(..., price_exponent: i32, ...) -> Result<(u64, PaymentMint)> { // Validate that price_exponent is non-negative if price_exponent < 0 { return Err(anyhow!(""price_exponent cannot be negative"")); } // Safe to cast as price_exponent is non-negative let exponent = price_exponent as u32; // Rest of the function logic } pub fn fix_payment(ctx: Context<FixPayment>) -> Result<()> { // Retrieve the price from the Oracle let final_fixing_price: i64 = price_update .get_price_unchecked(&barrier_reverse_convertible.feed_id)? .price; // Validate that final_fixing_price is non-negative if final_fixing_price < 0 { return Err(anyhow!(""final_fixing_price cannot be negative"")); } // Safe to cast as final_fixing_price is non-negative let final_price = final_fixing_price as u64; // Rest of the function logic }",Medium,"Consider validating the Oracle returned price is greater than zero, process the both positive and negative exponent values.",https://hacken.io/audits/margarita-finance-by-obligate-ag/sca-obligate-instruct-sep2024/,High
Sol-134,Product Misconfiguration due to Lack of Authority Verification. The Initialize instruction of the payment_authority_brc module does not validate the authority account is authorized for the initialization. This allows anyone to initialize the fix payment with malformed data after Initialize is executed in the instruct module and before Initialize is executed in the payment_authority_brc module. This may lead to products misconfiguration in case the setup happens using several transactions.,"pub fn initialize(ctx: Context<Initialize>, args: InitArgs) -> Result<()> { ... let barrier_reverse_convertible = &mut ctx.accounts.barrier_reverse_convertible; barrier_reverse_convertible... = ...; ... } #[derive(Accounts)] pub struct Initialize<'info> { #[account(mut)] pub authority: Signer<'info>, pub structured_product: Account<'info, StructuredProduct>, ... #[account(init, seeds=[structured_product.key().as_ref(), &[args.payment_index]], ...)] pub barrier_reverse_convertible: Account<'info, BarrierReverseConvertible>, ... }","#[derive(Accounts)] pub struct Initialize<'info> { #[account(mut, has_one = authority)] pub structured_product: Account<'info, StructuredProduct>, #[account(mut)] pub authority: Signer<'info>, #[account( init, seeds = [structured_product.key().as_ref(), &[args.payment_index]], bump, payer = authority, space = BarrierReverseConvertible::LEN, )] pub barrier_reverse_convertible: Account<'info, BarrierReverseConvertible>, pub system_program: Program<'info, System>, }",Medium,Consider validating the authority recorded in the StructuredProduct matches the authority account provided to the Initialize instruction of the payment_authority_brc module.,https://hacken.io/audits/margarita-finance-by-obligate-ag/sca-obligate-instruct-sep2024/,High
Sol-135,"Unauthorized Treasury Wallet Withdrawal due to Lack of Wallet Owner Verification. The SettlePayment instruction allows to invoke the product payment settlement transferring funds from the issuer Treasury Wallet to the investor, However, the function lacks for validation the provided Treasury Wallet equals to the recorded one. The instruction can be called by any user causing the provided Treasury Wallet is arbitrary. This may lead to the product payment being charged from Treasury Wallet of any issuer which created withdraw authorization for the product.","pub fn settle_payment(ctx: Context<SettlePayment> ...) -> Result<()> { ... let cpi_accounts = treasury_wallet::cpi::accounts::Withdraw { treasury_wallet: ctx.accounts.issuer_treasury_wallet.to_account_info(), treasury_wallet_token_account: ctx .accounts .issuer_treasury_wallet_token_account .to_account_info(), ... withdraw_authorization: Some(ctx.accounts.withdraw_authorization.to_account_info()), ... }; ... treasury_wallet::cpi::withdraw( ... amount, )?; ... } pub struct SettlePayment<'info> { #[account(mut)] pub payer: Signer<'info>, ... pub issuer_treasury_wallet: Account<'info, TreasuryWalletAccount>, pub withdraw_authorization: Account<'info, WithdrawAuthorization>, ... #[account(mut, token::authority=issuer_treasury_wallet)] pub issuer_treasury_wallet_token_account: InterfaceAccount<'info, TokenAccount>, ... }","pub fn settle_payment(ctx: Context<SettlePayment> ...) -> Result<()> { ... let cpi_accounts = treasury_wallet::cpi::accounts::Withdraw { treasury_wallet: ctx.accounts.issuer_treasury_wallet.to_account_info(), treasury_wallet_token_account: ctx .accounts .issuer_treasury_wallet_token_account .to_account_info(), ... withdraw_authorization: Some(ctx.accounts.withdraw_authorization.to_account_info()), ... }; ... treasury_wallet::cpi::withdraw( ... amount, )?; ... } pub struct SettlePayment<'info> { #[account(mut)] pub payer: Signer<'info>, ... pub issuer_treasury_wallet: Account<'info, TreasuryWalletAccount>, pub withdraw_authorization: Account<'info, WithdrawAuthorization>, ... #[account(mut, token::authority=issuer_treasury_wallet)] pub issuer_treasury_wallet_token_account: InterfaceAccount<'info, TokenAccount>, ... }",Medium,Consider implementing validation that the Treasury Wallet equals to the recorded one. The Finding is mitigated with the Client team explanation. Each issuer decides on which products to authorize for withdrawal. The described functionality allows the issuer to change funding Treasury Wallet or consciously pay for another issuer product. This provides flexibility in the payment system.,https://hacken.io/audits/margarita-finance-by-obligate-ag/sca-obligate-instruct-sep2024/,High
Sol-136,Inconsistent Price Calculaton due to Potential Price Feed Exponent Change. The Pyth Oracle service does not guarantee the price exponent value never changes. The retrieved price is compared with the stored one disregarding the exponent values may differ. The exponent retrieved from current price is applied to the stored price for Decimal creation. This may lead to the final_payment_amount is calculated incorrectly and wrong final_payment_mint is chosen in case the Pyth Oracle feed changes the exponent value. The wrong payment amount may lead to the product issuer lose value from the Treasury Wallet or the payment is defaulted and the investor does not receive the expected funds,pub fn fix_payment(ctx: Context<FixPayment>) -> Result<()> { ... let final_fixing_price: i64 = price_update .get_price_unchecked(&barrier_reverse_convertible.feed_id)?.price; ... final_fixing_price as u64 ... },"pub fn initialize(ctx: Context<Initialize>, args: InitArgs) -> Result<()> { ... let barrier_reverse_convertible = &mut ctx.accounts.barrier_reverse_convertible; barrier_reverse_convertible... = ...; ... } #[derive(Accounts)] pub struct Initialize<'info> { #[account(mut)] pub authority: Signer<'info>, pub structured_product: Account<'info, StructuredProduct>, ... #[account(init, seeds=[structured_product.key().as_ref(), &[args.payment_index]], ...)] pub barrier_reverse_convertible: Account<'info, BarrierReverseConvertible>, ... }",Medium,"Consider storing the exponent of the provided initial_fixing_price and barrier_price values and use it for accurate comparisons and calculations. The exponent value is provided at the initialization, used for price comparisons and other calculations.",https://hacken.io/audits/margarita-finance-by-obligate-ag/sca-obligate-instruct-sep2024/,High
Sol-137,"Immutable Ownership. The ownership of the treasury wallet accounts in the treasury_wallet module are currently immutable. In emergency situations where funds need to be withdrawn, the financial product is at risk of default. This is due to the fact that the instruct module depends on the treasury_wallet as a fixed funding source.","#[account] pub struct TreasuryWalletAccount {  pub root_key: Pubkey,  pub owner: Pubkey,  pub bump: u8, }  pub fn initialize(ctx: Context<Initialize>) -> Result<()> {  let treasury_wallet = &mut ctx.accounts.treasury_wallet;  ...  treasury_wallet.owner = ctx.accounts.owner.key();  ... }","#[account] pub struct TreasuryWalletAccount { pub root_key: Pubkey, pub owner: Pubkey, pub emergency_authority: Pubkey, // New field pub bump: u8, } pub fn initialize(ctx: Context<Initialize>, emergency_authority: Pubkey) -> Result<()> { let treasury_wallet = &mut ctx.accounts.treasury_wallet; treasury_wallet.owner = ctx.accounts.owner.key(); treasury_wallet.emergency_authority = emergency_authority; // Additional initialization logic Ok(()) } pub fn emergency_withdraw(ctx: Context<EmergencyWithdraw>, amount: u64) -> Result<()> { let treasury_wallet = &mut ctx.accounts.treasury_wallet; // Verify the signer is the emergency authority require!( ctx.accounts.emergency_authority.key() == treasury_wallet.emergency_authority, CustomError::Unauthorized ); // Perform the withdrawal logic // ... Ok(()) } #[derive(Accounts)] pub struct EmergencyWithdraw<'info> { #[account(mut, has_one = emergency_authority)] pub treasury_wallet: Account<'info, TreasuryWalletAccount>, pub emergency_authority: Signer<'info>, // Other accounts as needed }",Low,"Consider introducing ownership transfer in the treasury_wallet module. This change would allow for the reallocation of ownership in case of emergencies, ensuring that the financial product remains functional even if the original account becomes compromised.",https://hacken.io/audits/margarita-finance-by-obligate-ag/sca-obligate-instruct-sep2024/,High
Sol-138,"Irrelevant and Redundant Limitations on maxtotalclaim and maxnumnodes. The current implementation imposes limitations on max_total_claim and max_num_nodes, which introduces unnecessary complexity and potential issues in the reward distribution process. The max_num_nodes limitation seems irrelevant and does not contribute to the intended functionality of the system. Additionally, the max_total_claim limitation, which is intended to cap the total amount of tokens that can be claimed by all users, contradicts the business logic and can create a first-come, first-served scenario. This limitation is redundant because the amount of tokens that users can claim is inherently limited by the total number of tokens allocated to the RewardDistributor's account. As such, this invariant is unnecessary and does not enhance the security or functionality of the system. Incorrect max_total_claim parameter can lead to locked tokens in the RewardDistributor account. Consider the following scenario: Admin creates a new distribution for 1000 tokens. It is defined in a Merkle tree. By mistake, the admin set max_total_claim as 100 tokens. Admin transfers all expected 1000 tokens to RewardDistributor associated token account. Users can claim only 100 tokens - max_total_claim Other 900 tokens are not claimable and are locked in the RewardDistributor associated token account. Setting the parameters:","pub fn set_merkle_distributor_handler( ctx: Context<NewDistributor>, bump: u8, root: [u8; 32], max_total_claim: u64, max_num_nodes: u64, ) -> Result<()> { ... distributor.max_total_claim = max_total_claim; distributor.max_num_nodes = max_num_nodes; Checks: /// claim handler. pub fn claim_handler( ctx: Context<Claim>, index: u64, amount: u64, proof: Vec<[u8; 32]>, ) -> Result<()> { ... // Update the distributor's total amount claimed and number of nodes claimed. let distributor = &mut ctx.accounts.distributor; distributor.total_amount_claimed = distributor.total_amount_claimed + amount; require!( distributor.total_amount_claimed <= distributor.max_total_claim, ErrorCode::ExceededMaxClaim ); distributor.num_nodes_claimed += 1; require!( distributor.num_nodes_claimed <= distributor.max_num_nodes, ErrorCode::ExceededMaxNumNodes ); }","pub fn claim_handler( ctx: Context<Claim>, index: u64, amount: u64, proof: Vec<[u8; 32]>, ) -> Result<()> { let distributor = &mut ctx.accounts.distributor; let distributor_ata_balance = ctx.accounts.reward_distributor_ata.amount; // Ensure the claim amount does not exceed the available balance require!( amount <= distributor_ata_balance, ErrorCode::InsufficientFundsInDistributor ); // Proceed with the claim process // ... Ok(()) }",Medium,"It is recommended to remove the max_num_nodes limitation as it does not serve a relevant purpose. For the max_total_claim, instead of capping the total number of tokens that can be claimed, rely on the total amount of tokens provided to the RewardDistributor's associated token account (ATA). Since users cannot claim more tokens than what is available in the RewardDistributor's ATA, this inherent limitation ensures that the total distributed tokens do not exceed the allocated amount. By tracking the amount of tokens in the RewardDistributor's ATA, the system can maintain fairness and accuracy in reward distribution without the need for redundant checks. This approach aligns with the business logic and simplifies the distribution process.",https://hacken.io/audits/375ai/sca-375ai-smart-contracts-jul2024/,High
Sol-139,"Misconfigured constraints allow anyone to drain all Buy orders. In the swap_tokens_for_sol.rs file, the SwapTokensForSOL validation struct fails to validate the ownership of the creator_token_vault account properly. The constraints applied seem to originate from the validation of the trader_token_vault account since they are the same. More specifically on the vulnerability, any malicious trader can pass their trader_token_vault account as the creator_token_vault account. The constraints on the latter will have no effect on detecting the malicious input as soon as a valid trader_token_vault account is given. This allows the trader to perform the swap and receive both the SOL tokens that are on sale while also keeping their tokens since they are expected to be transferred from the trader_token_vault to the creator_token_vault. swap_tokens_for_sol.rs -> SwapTokensForSOL::creator_token_vault:213","#[derive(Accounts)] #[instruction(trade: Trade)] pub struct SwapTokensForSOL<'info> { ... #[account( mut, constraint = order.creator == creator.key(), )] pub creator: AccountInfo<'info>, ... // Dedaub: These constraints should use the creator_token_vault // instead of the trader_token_vault and the creator.key() value #[account( mut, constraint = trader_token_vault.mint == token_mint.key(), constraint = trader_token_vault.owner == signer.key(), )] pub creator_token_vault: Box<Account<'info, TokenAccount>>, #[account( mut, constraint = trader_token_vault.mint == token_mint.key(), constraint = trader_token_vault.owner == signer.key(), )] pub trader_token_vault: Box<Account<'info, TokenAccount>>, ... }",,Critical,,https://dedaub.com/audits/otsea/otsea-p2p-markets-may-29-2024/,Medium
Sol-140,"Traders of Buy orders get fewer SOL tokens than supposed and some also become permanently lost in the order vaults. The swap_tokens_for_sol instruction is responsible for performing the swaps of all the Buy orders which aim to trade SOL tokens for any other SPL Token. On each trade, a fee is applied based on the preconfigured global OTSea parameters which include fish (initialized as 1%), whale (initialized as 0.3%) and partner (initialized as 30% of fish/whale) fees. On every trade, the calculated amount of SOL tokens to be received by the trader is subject to deductions based on those fees. Thus, the calculate_revenue function determines how many of them should be attributed to the revenue vault (and the partners subsequently). However, the amount_output represents the total amount of SOL tokens that should be removed from the order’s SOL vault, but this does not seem to be followed properly. More specifically, the issue becomes apparent following the steps below: A trader requests to swap 100 Tokens for 100 SOL tokens (assuming a 1:1 ratio for simplicity) Let’s assume that the order’s vault holds exactly 100 SOL tokens which means that the order will be fulfilled The execute_trade call from inside the swap_tokens_for_sol instruction returns that 100 SOL tokens should be given to the trader (aka. amount_output = 100), but also increases the order.input_transacted field by 100 which marks the order as fulfilled The calculate_revenue call afterwards calculates how many of these SOL tokens should be withheld based on the preconfigured fees (fish_fee = 1%). As a result, the total_revenue will be 1 SOL token. Then, we transfer the SOL tokens to the trader subtracting the fees calculated, which means that only 99 SOL tokens are sent to the trader However, when it comes to paying the fees to the revenue_vault and the partner, the tokens are taken from the trader’s account and not from the order’s account as they should since the 1 SOL token was already left behind upon the first transfer to the trader. As a result, this leads to the trader losing another 1 SOL token from their earnings and the 1 SOL token that was left in the order_token_vault to be lost there forever since the account should also be closed due to the order being fulfilled. The total losses are as follows: For the funds, 1% of the total SOL tokens used by all the Buy order vaults become permanently lost For the traders, 1% * 99% of the total SOL tokens used by all the Buy order vaults, who lose this amount as it is being sent to the fee receivers It seems that this issue resulted from a misconfigured copy of the code from the other swap instruction (swap_sol_for_tokens) which correctly transfers the SOL tokens from the trader to the fee receivers.","pub fn swap_tokens_for_sol( ctx: Context<SwapTokensForSOL>, trade: Trade, fee_type: FeeType, ) -> Result<()> { ... let amount_output = execute_trade( &mut ctx.accounts.order, ctx.accounts.signer.key(), ™, ctx.accounts.token_mint.key(), )?; let order = &ctx.accounts.order let (total_revenue, distribute_revenue, partner_revenue) = calculate_revenue( &ctx.accounts.otsea, &ctx.accounts.partner, amount_output, order.fee_type, )?; // transfer SOL(trade amount) from vault to trader let transfer_sol_amount = amount_output.checked_sub(total_revenue).unwrap(); ... token::transfer( CpiContext::new_with_signer( ctx.accounts.token_program.to_account_info(), token::Transfer { from: ctx.accounts.order_token_vault.to_account_info(), to: ctx.accounts.trader_sol_token_vault.to_account_info(), ... }, ... ), transfer_sol_amount, )?; // transfer SOL(partner fee) from trader to partner if partner_revenue > 0 { ... token::transfer( CpiContext::new( ctx.accounts.token_program.to_account_info(), token::Transfer { from: ctx.accounts .trader_sol_token_vault.to_account_info(), to: ctx.accounts .partner_sol_token_account .as_ref().unwrap().to_account_info(), ... }, ), partner_revenue, )?; ... } // transfer wrap SOL(Revenue) from trader to revenue distributor token::transfer( CpiContext::new( ctx.accounts.token_program.to_account_info(), token::Transfer { from: ctx.accounts .trader_sol_token_vault.to_account_info(), to: ctx.accounts.revenue_vault.to_account_info(), ... }, ), distribute_revenue, )?; ... }",,High,"To fix this issue, you should either transfer the entire amount_output to the trader and then from their account to the fee receivers or change the from arguments of the SOL token transfer CPIs to be from the order_token_vault and not from the trader.",https://dedaub.com/audits/otsea/otsea-p2p-markets-may-29-2024/,Medium
Sol-141,"The whitelist PDA of an order can remain unclosed even after the order gets fulfilled and fully claimed. All the Sell orders that have a lock-up period set (or if the partner has a lock-up override enabled) put the swapped tokens into a lock-up for the users that requested a trade. After the lock-up period expires the traders can claim their tokens by using the lock_up::claim_lock_up instruction. When the last locked-up amount for an order is claimed and the order has been Cancelled by the owner or has been Fulfilled, the PDAs used by that order have to be closed. However, even though the order_token_vault and the order accounts are successfully closed, if the order owner had created a whitelist PDA, this can remain unclosed in case the last trader does not provide it in the context of the called claim instruction since the account is defined as Option<>. As a consequence, this can result in leaving whitelist PDAs open withholding the SOL tokens paid for the account creation from being reimbursed to the order creator.","lock_up::claim_lock_up:71 pub fn claim_lock_up( ctx: Context<ClaimLockUp>, ... ) -> Result<()> { ... let remain_lockup_amount = order.total_locked_up.checked_sub( order.unlocked_transacted).unwrap(); if (order.state == State::Cancelled || order.state == State::Fulfilled) && remain_lockup_amount == 0 { // close vault token::close_account(...)?; // close order account ctx.accounts.order.close(ctx.accounts.creator.to_account_info())?; // Dedaub: If the whitelist is not provided but exists and the // last locked-up amount is being claimed for a Cancelled // or Fulfilled order, then the account will remain active // close order whitelist account if ctx.accounts.whitelist.is_some() { ctx.accounts.whitelist.close( ctx.accounts.signer.to_account_info())?; } } ... } lock_up.rs -> ClaimLockUp::whitelist:153 #[derive(Accounts)] #[instruction(order_id: u64)] pub struct ClaimLockUp<'info> { #[account( mut, seeds = [...], bump, constraint = order.whitelist == whitelist.key(), )] pub whitelist: Option, ... }",,Medium,,https://dedaub.com/audits/otsea/otsea-p2p-markets-may-29-2024/,Medium
Sol-142,"The order owner loses the rent-exempt amount paid for the whitelist PDA of orders with lockups. The order creators can create whitelist PDAs for their orders to only allow specific accounts to perform trades with. However, for the orders that have enabled lock-ups or the partners used have an enabled lock-up override, their owners may not be able to get the SOL paid for the rent exemption of the whitelist PDAs back. This can happen if the order has been Cancelled or Fulfilled, but there are still active lockups to be claimed by the traders. The last trader is responsible for providing the whitelist PDA so once all funds have been claimed all the order-related accounts be closed. However, when closing the whitelist account, the SOL tokens are requested to be transferred to the signer (who is the trader) and not to the order creator as they should.","lock_up::claim_lock_up:72 pub fn claim_lock_up(...) -> Result<()> { ... let remain_lockup_amount = order.total_locked_up.checked_sub( order.unlocked_transacted).unwrap(); if (order.state == State::Cancelled || order.state == State::Fulfilled) && remain_lockup_amount == 0 { ... // Dedaub: When the whitelist PDA is closed, the funds are // transferred to the trader instead of the order creator if ctx.accounts.whitelist.is_some() { ctx.accounts.whitelist.close( ctx.accounts.signer.to_account_info())?; } } ... }",,Medium,,https://dedaub.com/audits/otsea/otsea-p2p-markets-may-29-2024/,Medium
Sol-143,"update_whitelist can only be used once for each order In the owner_instructions file. the update_whitelist function is supposed to allow the owner of an order to set and update a whitelist per order. However, the whitelist account which should be provided with the UpdateWhitelistContext validation struct, has the init constraint applied. As a result, this means that a call to update_whitelist is only possible for the first time the owner tries to initialize a whitelist for an order. Any subsequent updates will fail since the init constraint fails the verification if the account provided already exists. We suppose that the expected constraint should be the init_if_needed which initializes the account if it does not exist, but also allows continuous updates on later instruction calls.","owner_instructions.rs -> UpdateWhitelistContext::whitelist:244 #[derive(Accounts)] #[instruction(order_id: u64)] pub struct UpdateWhitelistContext<'info> { ... // Dedaub: This should probably be init_if_needed since this only // allows a single initialization and no further updates #[account(init, ...)] pub whitelist: Account<'info, Whitelist>, ... }",,Low,,https://dedaub.com/audits/otsea/otsea-p2p-markets-may-29-2024/,Medium
Sol-144,"update_lock_up_override incorrectly prevents partners from using the function. In the owner_instructions file, the update_lock_up_override function is meant to allow the admin and the partners to modify their lock-up parameter. However, the checks applied to ensure that the correct accounts were given have conflicting conditions which effectively only allows the admin to try to update a not initialized partner account. More precisely, the first require statement should check if the partner’s public key has been initialized and is not the default key.","owner_instructions::update_lock_up_override:140 pub fn update_lock_up_override( ctx: Context<LockupOverrideContext>, enforce: bool ) -> Result<()> { let partner = &mut ctx.accounts.partner; // Dedaub: To ensure the initialization of the partner account the // check should be != instead of == require!( partner.public_key == system_program::ID, OTSeaErrorCode::NotAvailable ); require!( partner.public_key == ctx.accounts.signer.key() || ctx.accounts.otsea.admin == ctx.accounts.signer.key(), OTSeaErrorCode::Unauthorized ); ... }",,Low,,https://dedaub.com/audits/otsea/otsea-p2p-markets-may-29-2024/,Medium
Sol-145,"Missing Validation of Mint Address. The mint account in the WithdrawFunds struct lacks proper validation of its address. This allows an admin to pass in any mint account with an inflated supply, potentially bypassing withdrawal limits.","pub struct WithdrawFunds<'info> { #[account(mut, seeds = [b""token-manager""], bump)] pub token_manager: Account<'info, TokenManager>, #[account(mut, seeds = [b""mint""], bump)] pub mint: Account<'info, Mint>, // Quote Mint #[account(","pub struct WithdrawFunds<'info> { #[account(mut, seeds = [b""token-manager""], bump)] pub token_manager: Account<'info, TokenManager>, #[account(mut, seeds = [b""mint""], bump, address = token_manager.mint @ ParityIssuanceError::InvalidMintAddress, mint::authority = token_manager, )] pub mint: Account<'info, Mint>,",Low,Implement a check to ensure that the mint account's address matches the one associated with the token_manager.,"https://certificate.quantstamp.com/full/parity-finance/02ef0b3b-599c-4c50-8a8b-c085fdfa0db0/index.html#findings-qs2, https://github.com/Parity-Finance/parity-contracts/commit/5df982ba4ce4744d743d0a62f02962a903a45111#diff-10eff0047594d1d4c652e550d382f742aebee948a783b56f2f6dd2c6880f43e5",High
Sol-146,"IOverwriting Pending Withdrawal Amount. If a withdrawal is initiated twice before the first one is processed, the second one would overwrite the first one's pending withdrawal amount.",// Check if there is an existing pending withdrawal if token_manager.pending_withdrawal_amount > 0 { return err!(ParityIssuanceError::PendingWithdrawalExists); },// Check if there is an existing pending withdrawal if token_manager.pending_withdrawal_amount > 0 { let current_time = Clock::get()?.unix_timestamp; let withdraw_window_end = token_manager .withdrawal_initiation_time .checked_add(token_manager.withdraw_time_lock) .ok_or(ParityIssuanceError::CalculationOverflow)? .checked_add(token_manager.withdraw_execution_window) .ok_or(ParityIssuanceError::CalculationOverflow)?; if current_time <= withdraw_window_end { return err!(ParityIssuanceError::PendingWithdrawalExists); } } let quote_amount = quantity;,Low,"Implement a check to ensure there's no existing pending withdrawal before initiating a new one. Alternatively, consider using a queue system for multiple pending withdrawals.","https://github.com/Parity-Finance/parity-contracts/commit/81d727551aa4a827bca8ed5f14f3dcdc76048577#diff-10eff0047594d1d4c652e550d382f742aebee948a783b56f2f6dd2c6880f43e5, https://certificate.quantstamp.com/full/parity-finance/02ef0b3b-599c-4c50-8a8b-c085fdfa0db0/index.html",High
Sol-147,"Insufficient Input Validation Across Multiple Contract Functions. Several functions across the parity-contracts codebase lack comprehensive input validation for critical parameters. This includes missing checks for non-zero values, absence of bounds validation for numerical inputs such as fees, and lack of verification for account authorities and states. The affected areas span various operations such as staking, unstaking, minting, configuration updates, and token management.","pub fn handler( ctx: Context<UpdateMintMetadata>, name: String, symbol: String, uri: String, ) -> Result<()> { let token_manager = &ctx.accounts.token_manager; let bump = token_manager.bump; let signer_seeds: &[&[&[u8]]] = &[&[b""token-manager"", &[bump]]];","pub fn handler( ctx: Context<UpdateMintMetadata>, name: String, symbol: String, uri: String, ) -> Result<()> { let token_manager = &ctx.accounts.token_manager; // Check if the name is not empty if name.is_empty() { return err!(ParityIssuanceError::InvalidParam); } // Check if the symbol is not empty if symbol.is_empty() { return err!(ParityIssuanceError::InvalidParam); } // Check if the URI is not empty if uri.is_empty() { return err!(ParityIssuanceError::InvalidParam); } let bump = token_manager.bump; let signer_seeds: &[&[&[u8]]] = &[&[b""token-manager"", &[bump]]];",Low,Implement thorough input validation for all user-supplied parameters and critical values throughout the contract,"https://certificate.quantstamp.com/full/parity-finance/02ef0b3b-599c-4c50-8a8b-c085fdfa0db0/index.html#findings-qs5, https://github.com/Parity-Finance/parity-contracts/commit/26fd1c8857c89f5df53f0211c95331af6672d1e4#diff-310450b79658386d485d11850a1201ad9a22b36916b40b271ca4fae08c2dfeb3",High
Sol-148,"Attacker can front-run multisig creation transaction. A multisig account is derived from an unauthenticated create_key. An attacker can front-run a user’s multisig creation transaction and create the multisig with their own parameters, allowing them to perform transactions from that multisig. The attacker can steal tokens from the multisig vaults if the user is unaware of the front-running and continues to use the multisig.","#[derive(Accounts)] #[instruction(args: MultisigCreateArgs)] pub struct MultisigCreate<'info> { #[account( init, payer = creator, space = Multisig::size(args.members.len()), seeds = [SEED_PREFIX, SEED_MULTISIG, create_key.key().as_ref()], bump )] pub multisig: Account<'info, Multisig>, /// A random public key that is used as a seed for the Multisig PDA. /// CHECK: This can be any random public key. pub create_key: AccountInfo<'info>, /// The creator of the multisig. #[account(mut)] pub creator: Signer<'info>, pub system_program: Program<'info, System>, }","#[derive(Accounts)] #[instruction(args: MultisigCreateArgs)] pub struct MultisigCreate<'info> { #[account( init, payer = creator, space = Multisig::size(args.members.len()), seeds = [SEED_PREFIX, SEED_MULTISIG, create_key.key().as_ref()], bump )] pub multisig: Account<'info, Multisig>, /// An ephemeral signer that is used as a seed for the Multisig PDA. /// Must be a signer to prevent front-running attack by someone else but the original creator. pub create_key: Signer<'info>, /// The creator of the multisig. #[account(mut)] pub creator: Signer<'info>, pub system_program: Program<'info, System>, }",High,Change create_key to be a signer to prevent front-running attack by someone else but the original creator.,https://github.com/Squads-Protocol/v4/commit/fe1fc5b8349640e07c1868219e02d2551d08f315,High
Sol-149,Reentrancy,"impl TransactionExecute<'_> { /// Execute the multisig transaction. /// The transaction must be `ExecuteReady`. pub fn transaction_execute(ctx: Context<Self>) -> Result<()> { let multisig = &mut ctx.accounts.multisig; let transaction = &mut ctx.accounts.transaction; let multisig_key = multisig.key(); let transaction_key = transaction.key(); let authority_seeds = &[ SEED_PREFIX, multisig_key.as_ref(), &transaction.authority_index.to_le_bytes(), SEED_AUTHORITY, &[transaction.authority_bump], ]; let authority_pubkey = Pubkey::create_program_address(authority_seeds, ctx.program_id).unwrap(); let (additional_signer_keys, additional_signer_seeds): (Vec<_>, Vec<_>) = transaction .additional_signer_bumps .iter() .enumerate() .map(|(index, bump)| { let seeds = vec![ SEED_PREFIX.to_vec(), transaction_key.to_bytes().to_vec(), u8::try_from(index).unwrap().to_le_bytes().to_vec(), SEED_ADDITIONAL_SIGNER.to_vec(), vec![*bump], ]; ( Pubkey::create_program_address( seeds .iter() .map(Vec::as_slice) .collect::<Vec<&[u8]>>() .as_slice(), ctx.program_id, ) .unwrap(), seeds, ) }) .unzip(); let transaction_message = &transaction.message; let num_lookups = transaction_message.address_table_lookups.len(); let message_account_infos = ctx .remaining_accounts .get(num_lookups..) .ok_or(MultisigError::InvalidNumberOfAccounts)?; let address_lookup_table_account_infos = ctx .remaining_accounts .get(..num_lookups) .ok_or(MultisigError::InvalidNumberOfAccounts)?; let executable_message = ExecutableTransactionMessage::new_validated( transaction_message, message_account_infos, address_lookup_table_account_infos, &authority_pubkey, &additional_signer_keys, )?; // Execute the transaction instructions one-by-one. for (ix, account_infos) in executable_message.to_instructions_and_accounts().iter() { // First round of type conversion; from Vec<Vec<Vec<u8>>> to Vec<Vec<&[u8]>>. let additional_signer_seeds = &additional_signer_seeds .iter() @@ -125,7 +136,6 @@ // Add the authority seeds. signer_seeds.push(authority_seeds); // FIXME: Prevent reentrancy. invoke_signed(ix, account_infos, &signer_seeds)?; }","impl TransactionExecute<'_> { /// Execute the multisig transaction. /// The transaction must be `ExecuteReady`. pub fn transaction_execute(ctx: Context<Self>) -> Result<()> { let multisig = &mut ctx.accounts.multisig; let transaction = &mut ctx.accounts.transaction; let multisig_key = multisig.key(); let transaction_key = transaction.key(); let authority_seeds = &[ SEED_PREFIX, multisig_key.as_ref(), &transaction.authority_index.to_le_bytes(), SEED_AUTHORITY, &[transaction.authority_bump], ]; let authority_pubkey = Pubkey::create_program_address(authority_seeds, ctx.program_id).unwrap(); let (additional_signer_keys, additional_signer_seeds): (Vec<_>, Vec<_>) = transaction .additional_signer_bumps .iter() .enumerate() .map(|(index, bump)| { let seeds = vec![ SEED_PREFIX.to_vec(), transaction_key.to_bytes().to_vec(), u8::try_from(index).unwrap().to_le_bytes().to_vec(), SEED_ADDITIONAL_SIGNER.to_vec(), vec![*bump], ]; ( Pubkey::create_program_address( seeds .iter() .map(Vec::as_slice) .collect::<Vec<&[u8]>>() .as_slice(), ctx.program_id, ) .unwrap(), seeds, ) }) .unzip(); let transaction_message = &transaction.message; let num_lookups = transaction_message.address_table_lookups.len(); let message_account_infos = ctx .remaining_accounts .get(num_lookups..) .ok_or(MultisigError::InvalidNumberOfAccounts)?; let address_lookup_table_account_infos = ctx .remaining_accounts .get(..num_lookups) .ok_or(MultisigError::InvalidNumberOfAccounts)?; let executable_message = ExecutableTransactionMessage::new_validated( transaction_message, message_account_infos, address_lookup_table_account_infos, &authority_pubkey, &additional_signer_keys, )?; // Execute the transaction instructions one-by-one. for (ix, account_infos) in executable_message.to_instructions_and_accounts().iter() { // Make sure we don't allow reentrancy of transaction_execute. // TODO: do the same in transaction_create. if ix.program_id == id() { require!( ix.data[..8] != crate::instruction::TransactionExecute::DISCRIMINATOR, MultisigError::ExecuteReentrancy ) } // First round of type conversion; from Vec<Vec<Vec<u8>>> to Vec<Vec<&[u8]>>. let additional_signer_seeds = &additional_signer_seeds .iter() @@ -125,7 +136,6 @@ // Add the authority seeds. signer_seeds.push(authority_seeds); invoke_signed(ix, account_infos, &signer_seeds)?; }",High,,https://github.com/Squads-Protocol/v4/commit/401eb6c3471d25e7ff13415ffc8cf205427c6ea0,High
Sol-150,"this issue stemmed from the system mischaracterising realised collateral and allowing *any* profits to be withdrawn *without* any checks, gates or earmarking of funds **and** without a built-in socialised loss and clawback mechanism. The withdrawal bug is described in more detail in Section 1b and is illustrated in a proof-of-concept with code and visualisations in Section 1d.","use crate::error::ClearingHouseResult; use crate::math_error; use anchor_spl::token::TokenAccount; use solana_program::msg; /// Calculates how much of withdrawal must come from collateral vault and how much comes from insurance vault pub fn calculate_withdrawal_amounts( amount: u64, collateral_token_account: &TokenAccount, insurance_token_account: &TokenAccount, ) -> ClearingHouseResult<(u64, u64)> { Ok(if collateral_token_account.amount >= amount { (amount, 0) } else if insurance_token_account.amount > amount .checked_sub(collateral_token_account.amount) .ok_or_else(math_error!())? { ( collateral_token_account.amount, amount .checked_sub(collateral_token_account.amount) .ok_or_else(math_error!())?, ) } else { ( collateral_token_account.amount, insurance_token_account.amount, ) }) }","use crate::error::ClearingHouseResult; use crate::math_error; use crate::state::market::Markets; use anchor_spl::token::TokenAccount; use solana_program::msg; use std::cell::Ref; /// Calculates how much of withdrawal must come from collateral vault and how much comes from insurance vault pub fn calculate_withdrawal_amounts( amount: u64, collateral_token_account: &TokenAccount, insurance_token_account: &TokenAccount, markets: &Ref<Markets>, ) -> ClearingHouseResult<(u64, u64)> { let total_fees_minus_distributions: u128 = markets.markets.iter().fold(0, |sum, market| { sum.checked_add(market.amm.total_fee_minus_distributions) .ok_or_else(math_error!()) .unwrap() .checked_sub(market.amm.total_fee_withdrawn) .ok_or_else(math_error!()) .unwrap() }); let available_collateral_vault_amount = (collateral_token_account.amount as u128) .checked_sub(total_fees_minus_distributions) .ok_or_else(math_error!())? as u64; Ok(if available_collateral_vault_amount >= amount { (amount, 0) } else if insurance_token_account.amount > amount .checked_sub(available_collateral_vault_amount) .ok_or_else(math_error!())? { ( available_collateral_vault_amount, amount .checked_sub(available_collateral_vault_amount) .ok_or_else(math_error!())?, ) } else { ( available_collateral_vault_amount, insurance_token_account.amount, ) }) }",Critical,"During periods of market imbalance, to prevent the shortfall in realised collateral (and to block the exploit outlined above), one naive solution is for the protocol to only allow users to withdraw their realised gains if there has been an offsetting realised loss in the same market. A simple example of this change has been implemented here, where realised losses are tracked on the market account and realised gains only credited to a user’s collateral balance when there has been offsetting loss.",https://github.com/drift-labs/protocol-v1/compare/crispheaney/patch-withdraw-bug,High
Sol-151,"Voter weight manipulation by burning after vote Description A voter can influence their vote weight after voting ends and before proposal finalization. The voter relinquishes his/her vote, withdraws their governing tokens, burns to lower the mint supply (and therefore max_voter_weight) and finalizes. Proof of Concept: Deposit 33% of mint supply Create a proposal and vote on it. Between voting time ending and proposal finalization, relinquish vote and withdraw tokens. The vote persists. Burn withdrawn tokens (33%) and finalize. 33/66 = 50%","use solana_program::{ account_info::{next_account_info, AccountInfo}, clock::Clock, entrypoint::ProgramResult, pubkey::Pubkey, sysvar::Sysvar, }; use spl_governance_tools::account::dispose_account; use crate::{ error::GovernanceError, state::{ enums::ProposalState, governance::get_governance_data_for_realm, proposal::get_proposal_data_for_governance, realm::get_realm_data_for_governing_token_mint, token_owner_record::get_token_owner_record_data_for_realm_and_governing_mint, vote_record::{get_vote_record_data_for_proposal_and_token_owner_record, Vote}, }, }; /// Processes RelinquishVote instruction pub fn process_relinquish_vote(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let realm_info = next_account_info(account_info_iter)?; // 0 let governance_info = next_account_info(account_info_iter)?; // 1 let proposal_info = next_account_info(account_info_iter)?; // 2 let token_owner_record_info = next_account_info(account_info_iter)?; // 3 let vote_record_info = next_account_info(account_info_iter)?; // 4 let vote_governing_token_mint_info = next_account_info(account_info_iter)?; // 5 let realm_data = get_realm_data_for_governing_token_mint( program_id, realm_info, vote_governing_token_mint_info.key, )?; let governance_data = get_governance_data_for_realm(program_id, governance_info, realm_info.key)?; let mut proposal_data = get_proposal_data_for_governance(program_id, proposal_info, governance_info.key)?; let mut token_owner_record_data = get_token_owner_record_data_for_realm_and_governing_mint( program_id, token_owner_record_info, &governance_data.realm, vote_governing_token_mint_info.key, )?; let mut vote_record_data = get_vote_record_data_for_proposal_and_token_owner_record( program_id, vote_record_info, &realm_data, proposal_info.key, &proposal_data, &token_owner_record_data, )?; vote_record_data.assert_can_relinquish_vote()?; let clock = Clock::get()?; // If the Proposal is still being voted on then the token owner vote will be withdrawn and it won't count towards the vote outcome // Note: If there is no tipping point the proposal can be still in Voting state but already past the configured max_voting_time // It means it awaits manual finalization (FinalizeVote) and it should no longer be possible to withdraw the vote and we only release the tokens if proposal_data.state == ProposalState::Voting && !proposal_data.has_vote_time_ended(&governance_data.config, clock.unix_timestamp) { Expand Down Expand Up @@ -116,6 +116,13 @@ pub fn process_relinquish_vote(program_id: &Pubkey, accounts: &[AccountInfo]) -> let governance_authority_info = next_account_info(account_info_iter)?; // 5 let beneficiary_info = next_account_info(account_info_iter)?; // 6 // Note: It's only required to sign by governing_authority if relinquishing the vote results in vote change // If the Proposal is already decided then anybody can prune active votes for token owner token_owner_record_data .assert_token_owner_or_delegate_is_signer(governance_authority_info)?; match vote_record_data.vote { Vote::Approve(choices) => { for (option, choice) in proposal_data.options.iter_mut().zip(choices) { option.vote_weight = option .vote_weight .checked_sub(choice.get_choice_weight(vote_record_data.voter_weight)?) .unwrap(); } } Vote::Deny => { proposal_data.deny_vote_weight = Some( proposal_data .deny_vote_weight .unwrap() .checked_sub(vote_record_data.voter_weight) .unwrap(), ) } Vote::Veto => { proposal_data.veto_vote_weight = proposal_data .veto_vote_weight .checked_sub(vote_record_data.voter_weight) .unwrap(); } Vote::Abstain => { return Err(GovernanceError::NotSupportedVoteType.into()); } } proposal_data.serialize(&mut *proposal_info.data.borrow_mut())?; dispose_account(vote_record_info, beneficiary_info); token_owner_record_data.total_votes_count = token_owner_record_data .total_votes_count .checked_sub(1) .unwrap(); } else { vote_record_data.is_relinquished = true; vote_record_data.serialize(&mut *vote_record_info.data.borrow_mut())?; } // If the Proposal has been already voted on then we only have to decrease unrelinquished_votes_count token_owner_record_data.unrelinquished_votes_count = token_owner_record_data .unrelinquished_votes_count .checked_sub(1) .unwrap(); token_owner_record_data.serialize(&mut *token_owner_record_info.data.borrow_mut())?; Ok(()) }","//! Program state processor use solana_program::{ account_info::{next_account_info, AccountInfo}, clock::Clock, entrypoint::ProgramResult, pubkey::Pubkey, sysvar::Sysvar, }; use spl_governance_tools::account::dispose_account; use crate::{ error::GovernanceError, state::{ enums::ProposalState, governance::get_governance_data_for_realm, proposal::get_proposal_data_for_governance, realm::get_realm_data_for_governing_token_mint, token_owner_record::get_token_owner_record_data_for_realm_and_governing_mint, vote_record::{get_vote_record_data_for_proposal_and_token_owner_record, Vote}, }, }; /// Processes RelinquishVote instruction pub fn process_relinquish_vote(program_id: &Pubkey, accounts: &[AccountInfo]) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let realm_info = next_account_info(account_info_iter)?; // 0 let governance_info = next_account_info(account_info_iter)?; // 1 let proposal_info = next_account_info(account_info_iter)?; // 2 let token_owner_record_info = next_account_info(account_info_iter)?; // 3 let vote_record_info = next_account_info(account_info_iter)?; // 4 let vote_governing_token_mint_info = next_account_info(account_info_iter)?; // 5 let realm_data = get_realm_data_for_governing_token_mint( program_id, realm_info, vote_governing_token_mint_info.key, )?; let governance_data = get_governance_data_for_realm(program_id, governance_info, realm_info.key)?; let mut proposal_data = get_proposal_data_for_governance(program_id, proposal_info, governance_info.key)?; let mut token_owner_record_data = get_token_owner_record_data_for_realm_and_governing_mint( program_id, token_owner_record_info, &governance_data.realm, vote_governing_token_mint_info.key, )?; let mut vote_record_data = get_vote_record_data_for_proposal_and_token_owner_record( program_id, vote_record_info, &realm_data, proposal_info.key, &proposal_data, &token_owner_record_data, )?; vote_record_data.assert_can_relinquish_vote()?; let clock = Clock::get()?; // If the Proposal is still being voted on then the token owner vote will be withdrawn and it won't count towards the vote outcome // Note: If there is no tipping point the proposal can be still in Voting state but already past the configured max_voting_time // It means it awaits manual finalization (FinalizeVote) and it should no longer be possible to withdraw the vote if proposal_data.state == ProposalState::Voting && !proposal_data.has_vote_time_ended(&governance_data.config, clock.unix_timestamp) { Expand Down Expand Up @@ -116,6 +116,13 @@ pub fn process_relinquish_vote(program_id: &Pubkey, accounts: &[AccountInfo]) -> let governance_authority_info = next_account_info(account_info_iter)?; // 5 let beneficiary_info = next_account_info(account_info_iter)?; // 6 // Note: It's only required to sign by governing_authority if relinquishing the vote results in vote change // If the Proposal is already decided then anybody can prune active votes for token owner token_owner_record_data .assert_token_owner_or_delegate_is_signer(governance_authority_info)?; match vote_record_data.vote { Vote::Approve(choices) => { for (option, choice) in proposal_data.options.iter_mut().zip(choices) { option.vote_weight = option .vote_weight .checked_sub(choice.get_choice_weight(vote_record_data.voter_weight)?) .unwrap(); } } Vote::Deny => { proposal_data.deny_vote_weight = Some( proposal_data .deny_vote_weight .unwrap() .checked_sub(vote_record_data.voter_weight) .unwrap(), ) } Vote::Veto => { proposal_data.veto_vote_weight = proposal_data .veto_vote_weight .checked_sub(vote_record_data.voter_weight) .unwrap(); } Vote::Abstain => { return Err(GovernanceError::NotSupportedVoteType.into()); } } proposal_data.serialize(&mut *proposal_info.data.borrow_mut())?; dispose_account(vote_record_info, beneficiary_info); token_owner_record_data.total_votes_count = token_owner_record_data .total_votes_count .checked_sub(1) .unwrap(); } else { // After Proposal voting time ends and it's not tipped then it enters implicit (time based) Finalizing state // and releasing tokens in this state should be disallowed // In other words releasing tokens is only possible once Proposal is manually finalized using FinalizeVote if proposal_data.state == ProposalState::Voting { return Err(GovernanceError::CannotRelinquishInFinalizingState.into()); } vote_record_data.is_relinquished = true; vote_record_data.serialize(&mut *vote_record_info.data.borrow_mut())?; } // If the Proposal has been already voted on then we only have to decrease unrelinquished_votes_count token_owner_record_data.unrelinquished_votes_count = token_owner_record_data .unrelinquished_votes_count .checked_sub(1) .unwrap(); token_owner_record_data.serialize(&mut *token_owner_record_info.data.borrow_mut())?; Ok(()) }",Medium,Prevent vote relinquishment before the vote is finalized,https://github.com/solana-labs/solana-program-library/pull/3210/files#diff-fea11aeeb42ade34331090ca3048d3bf505f7fe169043b60de2218f3008165bb,High
Sol-152,"Tokens can get locked up indenitely Description Tokens can be staked from any Natix token account a user owns (which can be many). However, only tokens in one specic account per user (the ATA) can be unstaked and therefore retrieved. The unstake and withdraw functions require the token account to be the ATA (associated token account). Staking can be done from any token account the user has. This means that all funds staked from any user token account that is not the ATA will be stuck indenitely.","control_user_solana_address(user_account, authority_account)?; let address = get_associated_token_address(user_solana_account.key, &get_natix_token_mint()); if user_account.key != &address { return Err(ProgramError::InvalidAccountOwner); }","// Staking: Only allow staking from the ATA (prevents future issues) control_user_solana_address(user_account, authority_account)?; let staking_address = get_associated_token_address(user_solana_account.key, &get_natix_token_mint()); if user_account.key != &staking_address { return Err(ProgramError::InvalidAccountOwner); } // Unstaking: Allow unstaking from any valid token account the user owns fn unstake_tokens( user_solana_account: &AccountInfo, user_token_accounts: &[AccountInfo], // Check all user token accounts natix_token_mint: &Pubkey, ) -> ProgramResult { let mut found_valid_account = false; for user_token_account in user_token_accounts.iter() { let account_data = TokenAccount::unpack(&user_token_account.try_borrow_data()?)?; if account_data.owner == *user_solana_account.key && account_data.mint == *natix_token_mint { found_valid_account = true; msg!(""Unstaking from user-owned token account: {}"", user_token_account.key); break; } } if !found_valid_account { return Err(ProgramError::InvalidAccountOwner); } msg!(""Unstaking successful.""); Ok(()) }",High,"allow staking from the ATA only or also support all accounts for unstaking, withdrawal, etc.",https://hashlock.com/wp-content/uploads/2024/08/Natix-Smart-Contract-Audit-Report-Final-Report-v1-Stake-1-1.pdf,High
Sol-153,Risk of overflows & underflows,"let sum_stakes = amount.unwrap_or(0) + give_stakes(staking_pool, address).iter().map(|staker| staker.amount).sum::<u64>();","// Ensure safe summation using checked_add() let sum_stakes = amount.unwrap_or(0).checked_add( give_stakes(staking_pool, address) .iter() .map(|staker| staker.amount) .sum::<u64>() ).ok_or(ProgramError::InvalidArgument)?;",Medium,Use checked math for calculations involving user inputs or configurable variables.,https://hashlock.com/wp-content/uploads/2024/08/Natix-Smart-Contract-Audit-Report-Final-Report-v1-Stake-1-1.pdf,High
Sol-154,Risk of overflows & underflows,amount += (unstaker.amount + reward - penalty).max(0); forfeit_amount += (penalty - reward).max(0);,"// Ensure safe addition/subtraction in staking logic amount = amount .checked_add(unstaker.amount) .and_then(|x| x.checked_add(reward)) .and_then(|x| x.checked_sub(penalty)) .ok_or(ProgramError::InvalidArgument)?; forfeit_amount = penalty .checked_sub(reward) .unwrap_or(0); // Avoid underflow, defaulting to zero",Medium,Use checked math for calculations involving user inputs or configurable variables.,https://hashlock.com/wp-content/uploads/2024/08/Natix-Smart-Contract-Audit-Report-Final-Report-v1-Stake-1-1.pdf,High
Sol-155,"Although secure due to Solana's token program guarantees, some account checks should be added to improve code maintainability by verifying the source and receiver accounts.","pub fn control_user_account(user_account: &AccountInfo) -> ProgramResult { let user_token_account = TokenAccount::unpack(&user_account.data.borrow())?; msg!(""Checking user token account mint address {:?}"", user_token_account.mint); if user_token_account.mint != get_natix_token_mint() { return Err(ProgramError::IncorrectProgramId); } Ok(()) }","/// Ensures the account is owned by the expected program and belongs to the correct user pub fn control_user_account(user_account: &AccountInfo, expected_owner: &Pubkey) -> ProgramResult { if user_account.owner != &TOKEN_PROGRAM_ID { msg!(""Error: Account is not owned by the Solana Token Program.""); return Err(ProgramError::IncorrectProgramId); } let user_token_account = TokenAccount::unpack(&user_account.try_borrow_data()?)?; if user_token_account.mint != get_natix_token_mint() { msg!(""Error: Token mint mismatch.""); return Err(ProgramError::InvalidAccountData); } if &user_token_account.owner != expected_owner { msg!(""Error: Account owner mismatch.""); return Err(ProgramError::IllegalOwner); } msg!(""Account validation successful.""); Ok(()) }",Low,"Future changes could break these checks, leading to serious issues. Properly verify which programs own which accounts.",https://hashlock.com/wp-content/uploads/2024/08/Natix-Smart-Contract-Audit-Report-Final-Report-v1-Stake-1-1.pdf,High
Sol-156,The transfer_token function does not verify if the source and receiver accounts are the same. There are other similar checks that could be improved for better maintainability,"pub fn transfer_token( source: &AccountInfo, destination: &AccountInfo, amount: u64, ) -> ProgramResult { msg!(""Token transfer from {:?} to {:?} validated successfully."", source.key, destination.key); // Perform token transfer logic here (using CPI to token program) Ok(()) }","pub fn transfer_token( source: &AccountInfo, destination: &AccountInfo, amount: u64, ) -> ProgramResult { if source.key == destination.key { msg!(""Error: Source and destination accounts cannot be the same.""); return Err(ProgramError::InvalidAccountData); } if source.owner != &TOKEN_PROGRAM_ID || destination.owner != &TOKEN_PROGRAM_ID { msg!(""Error: One of the accounts is not a valid SPL Token account.""); return Err(ProgramError::IncorrectProgramId); } msg!(""Token transfer from {:?} to {:?} validated successfully."", source.key, destination.key); // Perform token transfer logic here (using CPI to token program) Ok(()) }",Low,"Future changes could break these checks, leading to serious issues. Properly verify which programs own which accounts.",https://hashlock.com/wp-content/uploads/2024/08/Natix-Smart-Contract-Audit-Report-Final-Report-v1-Stake-1-1.pdf,High
Sol-157,"The stake account can be supplied with fake PDAs to steal rewards. The StakeAccount account supplied is not validated to be the intended PDA, allowing attackers to create and provide a malicious stake account with arbitrary parameters. Vulnerability Details The Claim, Enter, and Sync instructions do not validate that the provided StakeAccount is the intended PDA account by enforcing the seeds constraint. This validation is important because attackers may pass PDAs with arbitrary parameters to trigger unintended behaviors in the program. In this case, the StakeAccount.xsoar parameter can be set by an attacker to a high value in order to steal rewards from the vault account. This causes a loss of funds when other legitimate users want to claim their rewards.","use crate::*; use anchor_spl::token::{Token, TokenAccount}; use soarchain_staking::{SoarchainStakingError, StakeAccount}; #[derive(Accounts)] pub struct Claim<'info> { #[account(mut)] pub user: Account<'info, TokenAccount>, #[account(mut)] pub vault: Account<'info, TokenAccount>, #[account(mut, has_one = vault @ SoarchainError::InvalidVault)] pub reflection: Account<'info, ReflectionAccount>, #[account(mut, has_one = authority @ SoarchainError::Unauthorized)] pub reward: Account<'info, RewardAccount>, #[account( has_one = authority @ SoarchainError::Unauthorized, constraint = stake.time_unbond == 0 @ SoarchainStakingError::AlreadyUnbonded, constraint = stake.xsoar >= reward.xsoar @ SoarchainStakingError::Decreased, )] pub stake: Account<'info, StakeAccount>, #[account(mut)] pub authority: Signer<'info>, pub token_program: Program<'info, Token>, }","use crate::*; use anchor_spl::token::{Token, TokenAccount}; use soarchain_staking::{SoarchainStakingError, StakeAccount}; #[derive(Accounts)] pub struct Claim<'info> { #[account(mut)] pub user: Account<'info, TokenAccount>, #[account(mut)] pub vault: Account<'info, TokenAccount>, #[account(mut, has_one = vault @ SoarchainError::InvalidVault)] pub reflection: Account<'info, ReflectionAccount>, #[account(mut, has_one = authority @ SoarchainError::Unauthorized)] pub reward: Account<'info, RewardAccount>, #[account( has_one = authority @ SoarchainError::Unauthorized, constraint = stake.key() == pda::soarchain_staking(&authority.key()) @ SoarchainError::InvalidAccount, constraint = stake.time_unbond == 0 @ SoarchainStakingError::AlreadyUnbonded, constraint = stake.xsoar >= reward.xsoar @ SoarchainStakingError::Decreased, )] pub stake: Account<'info, StakeAccount>, #[account(mut)] pub authority: Signer<'info>, pub token_program: Program<'info, Token>, }",High,"Consider enforcing the seeds constraint in StakeAccount to prevent attackers from passing incorrect PDAs. This can be achieved by applying the soarchain_staking function validation from common/src/pda.rs to the Claim, Enter, and Sync instructions.",https://hashlock.com/wp-content/uploads/2025/01/Soarchain-Smart-Contract-Audit-Report-Final-Report-1.pdf,High
Sol-158,"The stake account can be supplied with fake PDAs to steal rewards. The StakeAccount account supplied is not validated to be the intended PDA, allowing attackers to create and provide a malicious stake account with arbitrary parameters. Vulnerability Details The Claim, Enter, and Sync instructions do not validate that the provided StakeAccount is the intended PDA account by enforcing the seeds constraint. This validation is important because attackers may pass PDAs with arbitrary parameters to trigger unintended behaviors in the program. In this case, the StakeAccount.xsoar parameter can be set by an attacker to a high value in order to steal rewards from the vault account. This causes a loss of funds when other legitimate users want to claim their rewards.","use crate::*; use soarchain_staking::{SoarchainStakingError, StakeAccount}; #[derive(Accounts)] pub struct Enter<'info> { #[account(mut)] pub reflection: Account<'info, ReflectionAccount>, #[account( has_one = authority @ SoarchainError::Unauthorized, constraint = stake.time_unbond == 0 @ SoarchainStakingError::AlreadyUnbonded )] pub stake: Account<'info, StakeAccount>, #[account( init, payer = authority, space = RewardAccount::SIZE, seeds = [ constants::PREFIX_REWARDS.as_ref(), authority.key().as_ref() ], bump, )] pub reward: Account<'info, RewardAccount>, #[account(mut)] pub authority: Signer<'info>, pub system_program: Program<'info, System>, }","use crate::*; use soarchain_staking::{SoarchainStakingError, StakeAccount}; #[derive(Accounts)] pub struct Enter<'info> { #[account(mut)] pub reflection: Account<'info, ReflectionAccount>, #[account( has_one = authority @ SoarchainError::Unauthorized, constraint = stake.key() == pda::soarchain_staking(&authority.key()) @ SoarchainError::InvalidAccount, constraint = stake.time_unbond == 0 @ SoarchainStakingError::AlreadyUnbonded, )] pub stake: Account<'info, StakeAccount>, #[account( init, payer = authority, space = RewardAccount::SIZE, seeds = [ constants::PREFIX_REWARDS.as_ref(), authority.key().as_ref() ], bump, )] pub reward: Account<'info, RewardAccount>, #[account(mut)] pub authority: Signer<'info>, pub system_program: Program<'info, System>, }",High,"Consider enforcing the seeds constraint in StakeAccount to prevent attackers from passing incorrect PDAs. This can be achieved by applying the soarchain_staking function validation from common/src/pda.rs to the Claim, Enter, and Sync instructions.",https://hashlock.com/wp-content/uploads/2025/01/Soarchain-Smart-Contract-Audit-Report-Final-Report-1.pdf,High
Sol-159,"The stake account can be supplied with fake PDAs to steal rewards. The StakeAccount account supplied is not validated to be the intended PDA, allowing attackers to create and provide a malicious stake account with arbitrary parameters. Vulnerability Details The Claim, Enter, and Sync instructions do not validate that the provided StakeAccount is the intended PDA account by enforcing the seeds constraint. This validation is important because attackers may pass PDAs with arbitrary parameters to trigger unintended behaviors in the program. In this case, the StakeAccount.xsoar parameter can be set by an attacker to a high value in order to steal rewards from the vault account. This causes a loss of funds when other legitimate users want to claim their rewards.","use crate::*; use soarchain_staking::{SoarchainStakingError, StakeAccount}; #[derive(Accounts)] pub struct Sync<'info> { #[account(mut)] pub reward: Account<'info, RewardAccount>, #[account( constraint = stake.time_unbond == 0 @ SoarchainStakingError::AlreadyUnbonded, constraint = stake.authority == reward.authority @ SoarchainError::Unauthorized, )] pub stake: Account<'info, StakeAccount>, #[account(mut)] pub reflection: Account<'info, ReflectionAccount>, }","use crate::*; use soarchain_staking::{SoarchainStakingError, StakeAccount}; #[derive(Accounts)] pub struct Sync<'info> { #[account(mut)] pub reward: Account<'info, RewardAccount>, #[account( constraint = stake.time_unbond == 0 @ SoarchainStakingError::AlreadyUnbonded, constraint = stake.authority == reward.authority @ SoarchainError::Unauthorized, constraint = stake.key() == pda::soarchain_staking(&authority.key()) @ SoarchainError::InvalidAccount, )] pub stake: Account<'info, StakeAccount>, #[account(mut)] pub reflection: Account<'info, ReflectionAccount>, pub authority: Signer<'info>, }",High,"Consider enforcing the seeds constraint in StakeAccount to prevent attackers from passing incorrect PDAs. This can be achieved by applying the soarchain_staking function validation from common/src/pda.rs to the Claim, Enter, and Sync instructions.",https://hashlock.com/wp-content/uploads/2025/01/Soarchain-Smart-Contract-Audit-Report-Final-Report-1.pdf,High
Sol-160,"Missing authentication validation allows attackers to steal referral fees. When claiming referral fees, no validation ensures the caller is the referral state authority, allowing attackers to steal victims’ referral fees. Vulnerability Details The process_claim_referral_fees function in programs/solauto/src/processors/referral_state.rs:172 does not validate that the transaction signer (ctx.accounts.signer.key) equals the referral state authority (referral_state.data.authority). This validation is important because it ensures only the owner of the referral state can withdraw their referral fees.","use jupiter_sdk::JUPITER_ID; use solana_program::{ account_info::AccountInfo, entrypoint::ProgramResult, instruction::{get_stack_height, TRANSACTION_LEVEL_STACK_HEIGHT}, msg, program_error::ProgramError, sysvar::instructions::{load_current_index_checked, load_instruction_at_checked}, }; use spl_associated_token_account::get_associated_token_address; use spl_token::state::Account as TokenAccount; use crate::{ constants::WSOL_MINT, instructions::referral_fees, state::referral_state::ReferralState, types::{ instruction::{ accounts::{ ClaimReferralFeesAccounts, ConvertReferralFeesAccounts, UpdateReferralStatesAccounts, }, UpdateReferralStatesArgs, }, shared::{DeserializedAccount, SolautoError}, }, utils::{ ix_utils::{self, validate_jup_instruction}, solauto_utils, validation_utils, }, }; pub fn process_update_referral_states<'a>( accounts: &'a [AccountInfo<'a>], args: UpdateReferralStatesArgs, ) -> ProgramResult { msg!(""Instruction: Update referral states""); let ctx = UpdateReferralStatesAccounts::context(accounts)?; if !ctx.accounts.signer.is_signer { return Err(ProgramError::MissingRequiredSignature.into()); } if ctx.accounts.referred_by_authority.is_some() && ctx.accounts.referred_by_authority.unwrap().key == ctx.accounts.signer.key { msg!(""Cannot set the referred by as the same as the referral state authority""); return Err(SolautoError::IncorrectAccounts.into()); } validation_utils::validate_sysvar_accounts( Some(ctx.accounts.system_program), None, None, Some(ctx.accounts.rent), None, )?; let mut authority_referral_state = solauto_utils::create_or_update_referral_state( ctx.accounts.rent, ctx.accounts.signer, ctx.accounts.signer, ctx.accounts.signer_referral_state, args.referral_fees_dest_mint, ctx.accounts.referred_by_state, args.address_lookup_table, )?; ix_utils::update_data(&mut authority_referral_state)?; if ctx.accounts.referred_by_state.is_some() { let mut referred_by_state = solauto_utils::create_or_update_referral_state( ctx.accounts.rent, ctx.accounts.signer, ctx.accounts.referred_by_authority.unwrap(), ctx.accounts.referred_by_state.unwrap(), None, None, None, )?; ix_utils::update_data(&mut referred_by_state)?; } validation_utils::validate_referral_accounts( &ctx.accounts.signer.key, &authority_referral_state, ctx.accounts.referred_by_state, None, false, ) } pub fn process_convert_referral_fees<'a>(accounts: &'a [AccountInfo<'a>]) -> ProgramResult { msg!(""Instruction: Convert referral fees""); let ctx = ConvertReferralFeesAccounts::context(accounts)?; let referral_state = DeserializedAccount::<ReferralState>::zerocopy(Some(ctx.accounts.referral_state))?.unwrap(); validation_utils::validate_referral_signer(&referral_state, ctx.accounts.signer, true)?; validation_utils::validate_sysvar_accounts( Some(ctx.accounts.system_program), Some(ctx.accounts.token_program), Some(ctx.accounts.ata_program), Some(ctx.accounts.rent), Some(ctx.accounts.ixs_sysvar), )?; let token_account = DeserializedAccount::<TokenAccount>::unpack(Some(ctx.accounts.referral_fees_ta))?.unwrap(); if !validation_utils::token_account_owned_by(&token_account, ctx.accounts.referral_state.key) { msg!(""Provided incorrect token account for the given referral state account""); return Err(SolautoError::IncorrectAccounts.into()); } let current_ix_idx = load_current_index_checked(ctx.accounts.ixs_sysvar)?; let current_ix = load_instruction_at_checked(current_ix_idx as usize, ctx.accounts.ixs_sysvar)?; if current_ix.program_id != crate::ID || get_stack_height() > TRANSACTION_LEVEL_STACK_HEIGHT { return Err(SolautoError::InstructionIsCPI.into()); } let mut index = current_ix_idx; loop { if let Err(_) = load_instruction_at_checked(index as usize, ctx.accounts.ixs_sysvar) { break; } index += 1; } let jup_swap = ix_utils::InstructionChecker::from_anchor( ctx.accounts.ixs_sysvar, JUPITER_ID, vec![""route"", ""shared_accounts_route""], current_ix_idx, ); validate_jup_instruction( ctx.accounts.ixs_sysvar, (current_ix_idx + 1) as usize, &[&get_associated_token_address( ctx.accounts.referral_state.key, &referral_state.data.dest_fees_mint, )], )?; if !jup_swap.matches(1) { msg!(""Missing Jup swap as next transaction""); return Err(SolautoError::IncorrectInstructions.into()); } referral_fees::convert_referral_fees(ctx, referral_state) } pub fn process_claim_referral_fees<'a>(accounts: &'a [AccountInfo<'a>]) -> ProgramResult { msg!(""Instruction: Claim referral fees""); let ctx = ClaimReferralFeesAccounts::context(accounts)?; let referral_state = DeserializedAccount::<ReferralState>::zerocopy(Some(ctx.accounts.referral_state))?.unwrap(); validation_utils::validate_referral_signer(&referral_state, ctx.accounts.signer, false)?; validation_utils::validate_sysvar_accounts( Some(ctx.accounts.system_program), Some(ctx.accounts.token_program), None, Some(ctx.accounts.rent), None, )?; if ctx.accounts.referral_fees_dest_ta.key != &get_associated_token_address( ctx.accounts.referral_state.key, &referral_state.data.dest_fees_mint, ) { msg!(""Provided incorrect referral_fees_dest_ta account""); return Err(SolautoError::IncorrectAccounts.into()); } if referral_state.data.dest_fees_mint != WSOL_MINT && ctx.accounts.fees_destination_ta.is_none() { msg!(""Missing fees destination token account when the token mint is not wSOL""); return Err(SolautoError::IncorrectAccounts.into()); } referral_fees::claim_referral_fees(ctx, referral_state) }","use jupiter_sdk::JUPITER_ID; use solana_program::{ account_info::AccountInfo, entrypoint::ProgramResult, instruction::{get_stack_height, TRANSACTION_LEVEL_STACK_HEIGHT}, msg, program_error::ProgramError, sysvar::instructions::{load_current_index_checked, load_instruction_at_checked}, }; use spl_associated_token_account::get_associated_token_address; use spl_token::state::Account as TokenAccount; use crate::{ constants::WSOL_MINT, instructions::referral_fees, state::referral_state::ReferralState, types::{ instruction::{ accounts::{ ClaimReferralFeesAccounts, ConvertReferralFeesAccounts, UpdateReferralStatesAccounts, }, UpdateReferralStatesArgs, }, shared::{DeserializedAccount, SolautoError}, }, utils::{ ix_utils::{self, validate_jup_instruction}, solauto_utils, validation_utils, }, }; pub fn process_update_referral_states<'a>( accounts: &'a [AccountInfo<'a>], args: UpdateReferralStatesArgs, ) -> ProgramResult { msg!(""Instruction: Update referral states""); let ctx = UpdateReferralStatesAccounts::context(accounts)?; if !ctx.accounts.signer.is_signer { return Err(ProgramError::MissingRequiredSignature.into()); } if ctx.accounts.referred_by_authority.is_some() && ctx.accounts.referred_by_authority.unwrap().key == ctx.accounts.signer.key { msg!(""Cannot set the referred by as the same as the referral state authority""); return Err(SolautoError::IncorrectAccounts.into()); } validation_utils::validate_sysvar_accounts( Some(ctx.accounts.system_program), None, None, Some(ctx.accounts.rent), None, )?; let mut authority_referral_state = solauto_utils::create_or_update_referral_state( ctx.accounts.rent, ctx.accounts.signer, ctx.accounts.signer, ctx.accounts.signer_referral_state, args.referral_fees_dest_mint, ctx.accounts.referred_by_state, args.address_lookup_table, )?; ix_utils::update_data(&mut authority_referral_state)?; if ctx.accounts.referred_by_state.is_some() { let mut referred_by_state = solauto_utils::create_or_update_referral_state( ctx.accounts.rent, ctx.accounts.signer, ctx.accounts.referred_by_authority.unwrap(), ctx.accounts.referred_by_state.unwrap(), None, None, None, )?; ix_utils::update_data(&mut referred_by_state)?; } validation_utils::validate_referral_accounts( &ctx.accounts.signer.key, &authority_referral_state, ctx.accounts.referred_by_state, None, false, ) } pub fn process_convert_referral_fees<'a>(accounts: &'a [AccountInfo<'a>]) -> ProgramResult { msg!(""Instruction: Convert referral fees""); let ctx = ConvertReferralFeesAccounts::context(accounts)?; let referral_state = DeserializedAccount::<ReferralState>::zerocopy(Some(ctx.accounts.referral_state))?.unwrap(); validation_utils::validate_referral_signer(&referral_state, ctx.accounts.signer, true)?; validation_utils::validate_sysvar_accounts( Some(ctx.accounts.system_program), Some(ctx.accounts.token_program), Some(ctx.accounts.ata_program), Some(ctx.accounts.rent), Some(ctx.accounts.ixs_sysvar), )?; let token_account = DeserializedAccount::<TokenAccount>::unpack(Some(ctx.accounts.referral_fees_ta))?.unwrap(); if !validation_utils::token_account_owned_by(&token_account, ctx.accounts.referral_state.key) { msg!(""Provided incorrect token account for the given referral state account""); return Err(SolautoError::IncorrectAccounts.into()); } let current_ix_idx = load_current_index_checked(ctx.accounts.ixs_sysvar)?; let current_ix = load_instruction_at_checked(current_ix_idx as usize, ctx.accounts.ixs_sysvar)?; if current_ix.program_id != crate::ID || get_stack_height() > TRANSACTION_LEVEL_STACK_HEIGHT { return Err(SolautoError::InstructionIsCPI.into()); } let mut index = current_ix_idx; loop { if let Err(_) = load_instruction_at_checked(index as usize, ctx.accounts.ixs_sysvar) { break; } index += 1; } let jup_swap = ix_utils::InstructionChecker::from_anchor( ctx.accounts.ixs_sysvar, JUPITER_ID, vec![""route"", ""shared_accounts_route""], current_ix_idx, ); validate_jup_instruction( ctx.accounts.ixs_sysvar, (current_ix_idx + 1) as usize, &[&get_associated_token_address( ctx.accounts.referral_state.key, &referral_state.data.dest_fees_mint, )], )?; if !jup_swap.matches(1) { msg!(""Missing Jup swap as next transaction""); return Err(SolautoError::IncorrectInstructions.into()); } referral_fees::convert_referral_fees(ctx, referral_state) } pub fn process_claim_referral_fees<'a>(accounts: &'a [AccountInfo<'a>]) -> ProgramResult { msg!(""Instruction: Claim referral fees""); let ctx = ClaimReferralFeesAccounts::context(accounts)?; let referral_state = DeserializedAccount::<ReferralState>::zerocopy(Some(ctx.accounts.referral_state))?.unwrap(); validation_utils::validate_referral_signer( &referral_state, ctx.accounts.signer, ctx.accounts.referral_fees_dest_mint.key == &WSOL_MINT, )?; if ctx.accounts.referral_authority.is_some() && ctx.accounts.referral_authority.unwrap().key != &referral_state.data.authority { msg!(""Provided incorrect referral authority""); return Err(SolautoError::IncorrectAccounts.into()); } validation_utils::validate_sysvar_accounts( Some(ctx.accounts.system_program), Some(ctx.accounts.token_program), None, Some(ctx.accounts.rent), None, )?; if ctx.accounts.referral_fees_dest_ta.key != &get_associated_token_address( ctx.accounts.referral_state.key, &referral_state.data.dest_fees_mint, ) { msg!(""Provided incorrect referral_fees_dest_ta account""); return Err(SolautoError::IncorrectAccounts.into()); } if referral_state.data.dest_fees_mint != WSOL_MINT && ctx.accounts.fees_destination_ta.is_none() { msg!(""Missing fees destination token account when the token mint is not wSOL""); return Err(SolautoError::IncorrectAccounts.into()); } referral_fees::claim_referral_fees(ctx, referral_state) }",High,Consider validating that the signer equals the referral state’s authority.,https://github.com/haven-fi/solauto/commit/734f7ee99574603ef24edb332c2a89fda5d402b1#diff-6e22cf5191f8b655489db95dc38ebd8c2ff474ac05cbed75096ffe6d909ff96e,High
Sol-161,"Existing positions will be removed when opening a new position Description If a user calls the MarginfiOpenPosition instruction with an existing position, the position will be removed. Vulnerability Details The create_new_solauto_position function in programs/solauto/src/utils/solauto_utils.rs:85-92 sets the SolautoPosition to a new PositionData and PositionState if the caller specied UpdatePositionData.setting_params as None. If there is any existing position information in solauto_position, it will be overwritten to an empty position in programs/solauto/src/instructions/open_position.rs:112. Impact The user will lose access to their existing position, including any deposited funds","use solana_program::{ account_info::AccountInfo, entrypoint::ProgramResult, msg, program_error::ProgramError, program_pack::Pack, pubkey::Pubkey, }; use spl_associated_token_account::get_associated_token_address; use spl_token::state::{Account as TokenAccount, Mint}; use std::ops::{Div, Mul}; use super::solana_utils::{account_has_data, init_account, init_ata_if_needed, spl_token_transfer}; use crate::{ constants::{SOLAUTO_FEES_WALLET, WSOL_MINT}, state::{ referral_state::ReferralState, solauto_position::{ DCASettings, PositionData, PositionState, SolautoPosition, SolautoSettingsParameters, }, }, types::{ instruction::UpdatePositionData, shared::{DeserializedAccount, FeeType, LendingPlatform, SolautoError}, }, }; pub fn get_owner<'a, 'b>( solauto_position: &'b DeserializedAccount<'a, SolautoPosition>, signer: &'a AccountInfo<'a>, ) -> &'a AccountInfo<'a> { if solauto_position.data.self_managed.val { signer } else { solauto_position.account_info } } pub fn create_new_solauto_position<'a>( signer: &AccountInfo<'a>, solauto_position: &'a AccountInfo<'a>, update_position_data: UpdatePositionData, lending_platform: LendingPlatform, supply_mint: &'a AccountInfo<'a>, debt_mint: &'a AccountInfo<'a>, lending_protocol_account: &'a AccountInfo<'a>, max_ltv: f64, liq_threshold: f64, ) -> Result<DeserializedAccount<'a, SolautoPosition>, ProgramError> { let data = if update_position_data.setting_params.is_some() { if update_position_data.position_id == 0 { msg!(""Position ID 0 is reserved for self-managed positions""); return Err(ProgramError::InvalidInstructionData.into()); } let supply = DeserializedAccount::<Mint>::unpack(Some(supply_mint))?.unwrap(); let debt = DeserializedAccount::<Mint>::unpack(Some(debt_mint))?.unwrap(); let mut state = PositionState::default(); state.supply.mint = *supply.account_info.key; state.supply.decimals = supply.data.decimals; state.debt.mint = *debt.account_info.key; state.debt.decimals = debt.data.decimals; state.max_ltv_bps = max_ltv.mul(10000.0) as u16; state.liq_threshold_bps = liq_threshold.mul(10000.0) as u16; let mut position_data = PositionData::default(); position_data.lending_platform = lending_platform; position_data.setting_params = SolautoSettingsParameters::from(*update_position_data.setting_params.as_ref().unwrap()); position_data.protocol_account = *lending_protocol_account.key; position_data.supply_mint = *supply_mint.key; position_data.debt_mint = *debt_mint.key; if update_position_data.dca.is_some() { position_data.dca = DCASettings::from(*update_position_data.dca.as_ref().unwrap()); } Box::new(SolautoPosition::new( update_position_data.position_id, *signer.key, position_data, state, )) } else { Box::new(SolautoPosition::new( 0, *signer.key, PositionData::default(), PositionState::default(), )) }; Ok(DeserializedAccount::<SolautoPosition> { account_info: solauto_position, data, }) }","use solana_program::{ account_info::AccountInfo, entrypoint::ProgramResult, msg, program_error::ProgramError, program_pack::Pack, pubkey::Pubkey, }; use spl_associated_token_account::get_associated_token_address; use spl_token::state::{Account as TokenAccount, Mint}; use std::ops::Div; use super::{math_utils::to_bps, solana_utils::{account_has_data, init_account, init_ata_if_needed, spl_token_transfer}}; use crate::{ constants::{SOLAUTO_FEES_WALLET, WSOL_MINT}, state::{ referral_state::ReferralState, solauto_position::{ DCASettings, PositionData, PositionState, SolautoPosition, SolautoSettingsParameters, }, }, types::{ instruction::UpdatePositionData, shared::{DeserializedAccount, FeeType, LendingPlatform, SolautoError}, }, }; pub fn get_owner<'a, 'b>( solauto_position: &'b DeserializedAccount<'a, SolautoPosition>, signer: &'a AccountInfo<'a>, ) -> &'a AccountInfo<'a> { if solauto_position.data.self_managed.val { signer } else { solauto_position.account_info } } pub fn create_new_solauto_position<'a>( signer: &AccountInfo<'a>, solauto_position: &'a AccountInfo<'a>, update_position_data: UpdatePositionData, lending_platform: LendingPlatform, supply_mint: &'a AccountInfo<'a>, debt_mint: &'a AccountInfo<'a>, lending_protocol_account: &'a AccountInfo<'a>, max_ltv: f64, liq_threshold: f64, ) -> Result<DeserializedAccount<'a, SolautoPosition>, ProgramError> { if account_has_data(solauto_position) { msg!(""Cannot open new position on an existing Solauto position""); return Err(SolautoError::IncorrectAccounts.into()); } let data = if update_position_data.setting_params.is_some() { if update_position_data.position_id == 0 { msg!(""Position ID 0 is reserved for self-managed positions""); return Err(ProgramError::InvalidInstructionData.into()); } let supply = DeserializedAccount::<Mint>::unpack(Some(supply_mint))?.unwrap(); let debt = DeserializedAccount::<Mint>::unpack(Some(debt_mint))?.unwrap(); let mut state = PositionState::default(); state.supply.mint = *supply.account_info.key; state.supply.decimals = supply.data.decimals; state.debt.mint = *debt.account_info.key; state.debt.decimals = debt.data.decimals; state.max_ltv_bps = to_bps(max_ltv); state.liq_threshold_bps = to_bps(liq_threshold); let mut position_data = PositionData::default(); position_data.lending_platform = lending_platform; position_data.setting_params = SolautoSettingsParameters::from(*update_position_data.setting_params.as_ref().unwrap()); position_data.protocol_account = *lending_protocol_account.key; position_data.supply_mint = *supply_mint.key; position_data.debt_mint = *debt_mint.key; if update_position_data.dca.is_some() { position_data.dca = DCASettings::from(*update_position_data.dca.as_ref().unwrap()); } Box::new(SolautoPosition::new( update_position_data.position_id, *signer.key, position_data, state, )) } else { Box::new(SolautoPosition::new( 0, *signer.key, PositionData::default(), PositionState::default(), )) }; Ok(DeserializedAccount::<SolautoPosition> { account_info: solauto_position, data, }) }",High,Consider checking the position has no existing data with the account_has_data function before overwriting it.,https://github.com/haven-fi/solauto/commit/8745ecea2be6c36c9545493590b89a32335dd773#diff-a6f49a967929ef4294bad0d6ee63494c1d6aa39e7f408ccda492afc4f82939ab,High
Sol-162,"Initialization can be frontrun, leading to ownership takeover Description The initialize instruction in the contract can be invoked by any account. It assigns the caller as the owner of the master account, which is the administrative authority of the program. Vulnerability Details There is no mechanism to restrict access to this instruction, such as validating that only the deployer of the program or an authorised entity can perform the initialization. Impact A malicious actor can take the complete ownership of the master account and hence the program.","pub fn process(ctx: Context<InitializeCtx>, percent_pay_w_sol: u16, percent_pay_w_done_token: u16) -> Result<()> { let master = &mut ctx.accounts.master; let signer = &ctx.accounts.signer; require!(percent_pay_w_sol <= 10000, CustomErrors::InvalidPercent); require!(percent_pay_w_done_token<= 10000, CustomErrors::InvalidPercent); if master.is_initialized { return Err(CustomErrors::MasterAccountAlreadyInitialized.into()); } master.is_initialized = true; master.owner = signer.key(); // ❌ Any caller becomes the owner master.percent_pay_w_sol = percent_pay_w_sol; master.percent_pay_w_done_token = percent_pay_w_done_token; emit!(OwnerInitialized {}); Ok(()) }","use anchor_lang::prelude::*; #[derive(Accounts)] pub struct InitializeCtx<'info> { #[account(mut)] pub master: Account<'info, MasterAccount>, #[account(mut, signer)] pub signer: Signer<'info>, pub system_program: Program<'info, System>, } pub fn process( ctx: Context<InitializeCtx>, percent_pay_w_sol: u16, percent_pay_w_done_token: u16 ) -> Result<()> { let master = &mut ctx.accounts.master; let signer = &ctx.accounts.signer; let expected_owner: Pubkey = Pubkey::from_str(""YOUR_HARD_CODED_OWNER_PUBLIC_KEY"").unwrap(); // ✅ Restrict to expected owner require!(percent_pay_w_sol <= 10000, CustomErrors::InvalidPercent); require!(percent_pay_w_done_token <= 10000, CustomErrors::InvalidPercent); if master.is_initialized { return Err(CustomErrors::MasterAccountAlreadyInitialized.into()); } // ✅ Enforce initialization by the correct entity if signer.key() != expected_owner { return Err(CustomErrors::UnauthorizedInitialization.into()); } master.is_initialized = true; master.owner = expected_owner; // ✅ Ensure correct ownership master.percent_pay_w_sol = percent_pay_w_sol; master.percent_pay_w_done_token = percent_pay_w_done_token; emit!(OwnerInitialized {}); Ok(()) }",Critical,Implement access control on the caller of the initialize instruction. A common practice is to use the program’s upgrade_authority as the authorized address to call the initialize function if the program has an upgrade authority. Another solution is to set a hardcoded address of the expected owner’s public key to restrict access to only that specic address.,https://hashlock.com/wp-content/uploads/2024/10/1001_Squares_of_NFT_Smart_Contract_Audit_Report_Final_Report.pdf,High
Sol-163,"Lack of input validation of percent can lead to draining of DONE token vault Description The owner of the program sets and updates the percent in the initialize and set_percent instructions respectively, that is used for DONE token returns in the create_payment instruction, depending on the amount of SOL that users paid. Vulnerability Details The percent parameter is of type u64, allowing values between 0 and 2^64 - 1. Without a validation mechanism to constrain the percent eld, an excessively high value could be set. Impact The vault of the done token can be completely drained even in one payment, if the percent has been set incorrectly to a very high value.","pub fn process(ctx: Context<InitializeCtx>, percent_pay_w_sol: u16, percent_pay_w_done_token: u16) -> Result<()> { let master = &mut ctx.accounts.master; let signer = &ctx.accounts.signer; require!(percent_pay_w_sol <= 10000, CustomErrors::InvalidPercent); require!(percent_pay_w_done_token <= 10000, CustomErrors::InvalidPercent); if master.is_initialized { return Err(CustomErrors::MasterAccountAlreadyInitialized.into()); } master.is_initialized = true; master.owner = signer.key(); master.percent_pay_w_sol = percent_pay_w_sol; master.percent_pay_w_done_token = percent_pay_w_done_token; emit!(OwnerInitialized {}); Ok(()) }","pub fn process( ctx: Context<InitializeCtx>, percent_pay_w_sol: u16, percent_pay_w_done_token: u16 ) -> Result<()> { let master = &mut ctx.accounts.master; let signer = &ctx.accounts.signer; const MAX_ALLOWED_PERCENT: u16 = 1000; // Example: 1000 = 10% max payout require!(percent_pay_w_sol <= MAX_ALLOWED_PERCENT, CustomErrors::InvalidPercent); require!(percent_pay_w_done_token <= MAX_ALLOWED_PERCENT, CustomErrors::InvalidPercent); if master.is_initialized { return Err(CustomErrors::MasterAccountAlreadyInitialized.into()); } master.is_initialized = true; master.owner = signer.key(); master.percent_pay_w_sol = percent_pay_w_sol; master.percent_pay_w_done_token = percent_pay_w_done_token; emit!(OwnerInitialized {}); Ok(()) }",Medium,"Add an explicit check to ensure the percent value falls within the expected range, that aligns with the project’s requirements.",https://hashlock.com/wp-content/uploads/2024/10/1001_Squares_of_NFT_Smart_Contract_Audit_Report_Final_Report.pdf,High
Sol-164,"One-time limitation of item_id prevents recurring payments Description The create_payment and create_payment_by_done instructions both use item_id to create a corresponding payment record. However, each instruction can only be called once for a specific item_id. Vulnerability Details Each item_payment account is created by using item_id and has the init constraint. Impact Users cannot execute recurring payments for items, since each item_id can only be used once. Furthermore, since there is no check which user creates a payment for a specific item, a malicious actor can create a payment for another user’s item and as a result, the rightful user cannot pay for their specific item.","#[account( init, payer = signer, seeds = [ITEM_PAYMENT, item_id.to_le_bytes().as_ref()], bump, space = 8 + ItemPayment::INIT_SPACE, )] item_payment: Account<'info, ItemPayment>, ... #[account( init, payer = signer, seeds = [ITEM_PAYMENT, item_id.to_le_bytes().as_ref()], bump, space = 8 + ItemPayment::INIT_SPACE, )] item_payment: Account<'info, ItemPayment>,","#[account( init_if_needed, // ✅ Allows multiple payments per item_id payer = signer, seeds = [ITEM_PAYMENT, item_id.to_le_bytes().as_ref(), transaction_id.to_le_bytes().as_ref()], // ✅ Unique per payment bump, space = 8 + ItemPayment::INIT_SPACE, )] item_payment: Account<'info, ItemPayment>, ... #[account( init_if_needed, // ✅ Allows multiple payments per item_id payer = signer, seeds = [ITEM_PAYMENT, item_id.to_le_bytes().as_ref(), transaction_id.to_le_bytes().as_ref()], // ✅ Unique per payment bump, space = 8 + ItemPayment::INIT_SPACE, )] item_payment: Account<'info, ItemPayment>,",Medium,Consider allowing payments for a specic item_id to be made more than once. This can be achieved by changing init constraint to init_if_needed and including additional unique identifiers (e.g. transaction_id) to differentiate between multiple payments for the same item_id.,https://hashlock.com/wp-content/uploads/2024/10/1001_Squares_of_NFT_Smart_Contract_Audit_Report_Final_Report.pdf,High
Sol-165,"Limitation of unique item_id can be bypassed for item payments Description Users can create payments for the same item_id by paying with SOL and DONE tokens as well. Although there is a limitation of each item_id to be used only once, the case of the two different payment methods to take place for the same item is not handled. Vulnerability Details The item_id is an argument that is given to each payment instruction and with that the item_payment is created. By implementing the init constraint, the business logic enforces the usage of the item_id only once. Impact The limitation of the uniqueness of item_id for an item_payment can be bypassed and create scenarios where 2 simultaneous payments for the same item_id take place.","#[account( init, payer = signer, seeds = [ITEM_PAYMENT, item_id.to_le_bytes().as_ref()], bump, space = 8 + ItemPayment::INIT_SPACE, )] item_payment: Account<'info, ItemPayment>, #[account( init, payer = signer, seeds = [ITEM_PAYMENT, item_id.to_le_bytes().as_ref()], bump, space = 8 + ItemPayment::INIT_SPACE, )] item_payment: Account<'info, ItemPayment>,","#[account( init, payer = signer, seeds = [ITEM_PAYMENT, item_id.to_le_bytes().as_ref(), payment_method.as_bytes()], // ✅ Enforce payment type uniqueness bump, space = 8 + ItemPayment::INIT_SPACE, )] item_payment: Account<'info, ItemPayment>,",Medium,Implement a mechanism that ensures each item_id can only be associated with a single payment type by restricting the ability to call both create_payment and create_payment_by_done for the same item_id.,https://hashlock.com/wp-content/uploads/2024/10/1001_Squares_of_NFT_Smart_Contract_Audit_Report_Final_Report.pdf,High
Sol-166,"The token_program that is used for the management of the pool token can be arbitrarily assigned by the pool creator. Therefore, the underlying logic of the critical token_program component cannot be guaranteed, and may lead to unexpected or even malicious behavior when called upon.","pub struct Processor {} impl Processor { /// Issue a stake_deactivate instruction. #[allow(clippy::too_many_arguments)] fn stake_delegate<'a>( stake_info: AccountInfo<'a>, @@ -1389,6 +1389,16 @@ impl Processor { stake_pool.check_reserve_stake(reserve_stake_info)?; check_stake_program(stake_program_info.key)?; check_account_owner(validator_list_info, program_id)?; let mut validator_list_data = validator_list_info.data.borrow_mut(); let (validator_list_header, mut validator_slice) = @@ -1766,9 +1776,7 @@ impl Processor { let token_program_info = next_account_info(account_info_iter)?; let stake_program_info = next_account_info(account_info_iter)?; if *stake_program_info.key != stake_program::id() { return Err(ProgramError::IncorrectProgramId); }","pub struct Processor {} impl Processor { /// Issue a delegate_stake instruction. #[allow(clippy::too_many_arguments)] fn stake_delegate<'a>( stake_info: AccountInfo<'a>, @@ -1389,6 +1389,16 @@ impl Processor { stake_pool.check_reserve_stake(reserve_stake_info)?; check_stake_program(stake_program_info.key)?; if validator_stake_accounts .len() .checked_rem(2) .ok_or(StakePoolError::CalculationFailure)? != 0 { msg!(""Odd number of validator stake accounts passed in, should be pairs of validator stake and transient stake accounts""); return Err(StakePoolError::UnexpectedValidatorListAccountSize.into()); } check_account_owner(validator_list_info, program_id)?; let mut validator_list_data = validator_list_info.data.borrow_mut(); let (validator_list_header, mut validator_slice) = @@ -1766,9 +1776,7 @@ impl Processor { let token_program_info = next_account_info(account_info_iter)?; let stake_program_info = next_account_info(account_info_iter)?; check_stake_program(stake_program_info.key)?;",Medium,"Recommendation: token_program stake_program_info Restrict the used for pool token management to the one deployed by the Solana Foundation, similar to the validation done for other functions such as process_add_validator_to_pool()",https://github.com/solana-labs/solana-program-library/commit/3b48fa09d38d1b66ffb4fef186b606f1bc4fdb31,High
Sol-167,"AddValidatorToPool instruction allows reclaiming reserve by staker (PR 3714) Description In PR 3714, the AddValidatorToPool now creates the new validator stake account by splitting from the reserve. But there is no check that the reserve has more than zero lamports after this happens. The staker of the pool could thus obtain control of the reserve account: 1. ensure that the reserve contains exactly the amount of lamports required to add a new validator (by increasing/decreasing the stake of some active validators from the reserve) 2. in the same transaction, do both of the following: 1. add a new validator, which splits all lamports from the reserve –> reserve is an unitialized stake account after this instruction 2. initialize a new stake account under the control of the staker at the reserve address Impacts property: Safety, since the staker can now manipulate the lamports balance of the reserve and therefore also the pool token price","// Processes `AddValidatorToPool` instruction. #[inline(never)] // needed due to stack size violation fn process_add_validator_to_pool( program_id: &Pubkey, accounts: &[AccountInfo], raw_validator_seed: u32, ) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let stake_pool_info = next_account_info(account_info_iter)?; let staker_info = next_account_info(account_info_iter)?; let reserve_stake_info = next_account_info(account_info_iter)?; let withdraw_authority_info = next_account_info(account_info_iter)?; let validator_list_info = next_account_info(account_info_iter)?; let stake_info = next_account_info(account_info_iter)?; let validator_vote_info = next_account_info(account_info_iter)?; let rent_info = next_account_info(account_info_iter)?; let rent = &Rent::from_account_info(rent_info)?; let clock_info = next_account_info(account_info_iter)?; let clock = &Clock::from_account_info(clock_info)?; let stake_history_info = next_account_info(account_info_iter)?; let stake_config_info = next_account_info(account_info_iter)?; let system_program_info = next_account_info(account_info_iter)?; let stake_program_info = next_account_info(account_info_iter)?; check_system_program(system_program_info.key)?; check_stake_program(stake_program_info.key)?; check_account_owner(stake_pool_info, program_id)?; let stake_pool = try_from_slice_unchecked::<StakePool>(&stake_pool_info.data.borrow())?; if !stake_pool.is_valid() { return Err(StakePoolError::InvalidState.into()); } stake_pool.check_authority_withdraw( withdraw_authority_info.key, program_id, stake_pool_info.key, )?; stake_pool.check_staker(staker_info)?; stake_pool.check_reserve_stake(reserve_stake_info)?; stake_pool.check_validator_list(validator_list_info)?; if stake_pool.last_update_epoch < clock.epoch { return Err(StakePoolError::StakeListAndPoolOutOfDate.into()); } check_account_owner(validator_list_info, program_id)?; let mut validator_list_data = validator_list_info.data.borrow_mut(); let (header, mut validator_list) = ValidatorListHeader::deserialize_vec(&mut validator_list_data)?; if !header.is_valid() { return Err(StakePoolError::InvalidState.into()); } if header.max_validators == validator_list.len() { return Err(ProgramError::AccountDataTooSmall); } let maybe_validator_stake_info = validator_list.find::<ValidatorStakeInfo>( validator_vote_info.key.as_ref(), ValidatorStakeInfo::memcmp_pubkey, ); if maybe_validator_stake_info.is_some() { return Err(StakePoolError::ValidatorAlreadyAdded.into()); } let validator_seed = NonZeroU32::new(raw_validator_seed); let (stake_address, bump_seed) = crate::find_stake_program_address( program_id, validator_vote_info.key, stake_pool_info.key, validator_seed, ); if stake_address != *stake_info.key { return Err(StakePoolError::InvalidStakeAccountAddress.into()); } let validator_seed_bytes = validator_seed.map(|s| s.get().to_le_bytes()); let stake_account_signer_seeds: &[&[_]] = &[ validator_vote_info.key.as_ref(), stake_pool_info.key.as_ref(), validator_seed_bytes .as_ref() .map(|s| s.as_slice()) .unwrap_or(&[]), &[bump_seed], ]; // Fund the stake account with the minimum + rent-exempt balance let space = std::mem::size_of::<stake::state::StakeState>(); let stake_minimum_delegation = stake::tools::get_minimum_delegation()?; let required_lamports = minimum_delegation(stake_minimum_delegation) .saturating_add(rent.minimum_balance(space)); // Create new stake account create_stake_account( stake_info.clone(), Expand Down stake_account_signer_seeds, system_program_info.clone(), )?; // split into validator stake account Self::stake_split( stake_pool_info.key, reserve_stake_info.clone(), withdraw_authority_info.clone(), AUTHORITY_WITHDRAW, stake_pool.stake_withdraw_bump_seed, required_lamports, stake_info.clone(), )?; Self::stake_delegate( stake_info.clone(), validator_vote_info.clone(), clock_info.clone(), stake_history_info.clone(), stake_config_info.clone(), withdraw_authority_info.clone(), stake_pool_info.key, AUTHORITY_WITHDRAW, stake_pool.stake_withdraw_bump_seed, )?; validator_list.push(ValidatorStakeInfo { status: StakeStatus::Active, vote_account_address: *validator_vote_info.key, active_stake_lamports: required_lamports, transient_stake_lamports: 0, last_update_epoch: clock.epoch, transient_seed_suffix_start: 0, transient_seed_suffix_end: 0, validator_seed_suffix: raw_validator_seed, })?; Ok(()) }","/// Processes `AddValidatorToPool` instruction. #[inline(never)] // needed due to stack size violation fn process_add_validator_to_pool( program_id: &Pubkey, accounts: &[AccountInfo], raw_validator_seed: u32, ) -> ProgramResult { let account_info_iter = &mut accounts.iter(); let stake_pool_info = next_account_info(account_info_iter)?; let staker_info = next_account_info(account_info_iter)?; let reserve_stake_info = next_account_info(account_info_iter)?; let withdraw_authority_info = next_account_info(account_info_iter)?; let validator_list_info = next_account_info(account_info_iter)?; let stake_info = next_account_info(account_info_iter)?; let validator_vote_info = next_account_info(account_info_iter)?; let rent_info = next_account_info(account_info_iter)?; let rent = &Rent::from_account_info(rent_info)?; let clock_info = next_account_info(account_info_iter)?; let clock = &Clock::from_account_info(clock_info)?; let stake_history_info = next_account_info(account_info_iter)?; let stake_config_info = next_account_info(account_info_iter)?; let system_program_info = next_account_info(account_info_iter)?; let stake_program_info = next_account_info(account_info_iter)?; check_system_program(system_program_info.key)?; check_stake_program(stake_program_info.key)?; check_account_owner(stake_pool_info, program_id)?; let stake_pool = try_from_slice_unchecked::<StakePool>(&stake_pool_info.data.borrow())?; if !stake_pool.is_valid() { return Err(StakePoolError::InvalidState.into()); } stake_pool.check_authority_withdraw( withdraw_authority_info.key, program_id, stake_pool_info.key, )?; stake_pool.check_staker(staker_info)?; stake_pool.check_reserve_stake(reserve_stake_info)?; stake_pool.check_validator_list(validator_list_info)?; if stake_pool.last_update_epoch < clock.epoch { return Err(StakePoolError::StakeListAndPoolOutOfDate.into()); } check_account_owner(validator_list_info, program_id)?; let mut validator_list_data = validator_list_info.data.borrow_mut(); let (header, mut validator_list) = ValidatorListHeader::deserialize_vec(&mut validator_list_data)?; if !header.is_valid() { return Err(StakePoolError::InvalidState.into()); } if header.max_validators == validator_list.len() { return Err(ProgramError::AccountDataTooSmall); } let maybe_validator_stake_info = validator_list.find::<ValidatorStakeInfo>( validator_vote_info.key.as_ref(), ValidatorStakeInfo::memcmp_pubkey, ); if maybe_validator_stake_info.is_some() { return Err(StakePoolError::ValidatorAlreadyAdded.into()); } let validator_seed = NonZeroU32::new(raw_validator_seed); let (stake_address, bump_seed) = crate::find_stake_program_address( program_id, validator_vote_info.key, stake_pool_info.key, validator_seed, ); if stake_address != *stake_info.key { return Err(StakePoolError::InvalidStakeAccountAddress.into()); } let validator_seed_bytes = validator_seed.map(|s| s.get().to_le_bytes()); let stake_account_signer_seeds: &[&[_]] = &[ validator_vote_info.key.as_ref(), stake_pool_info.key.as_ref(), validator_seed_bytes .as_ref() .map(|s| s.as_slice()) .unwrap_or(&[]), &[bump_seed], ]; // Fund the stake account with the minimum + rent-exempt balance let space = std::mem::size_of::<stake::state::StakeState>(); let stake_minimum_delegation = stake::tools::get_minimum_delegation()?; let required_lamports = minimum_delegation(stake_minimum_delegation) .saturating_add(rent.minimum_balance(space)); // Check that we're not draining the reserve totally let reserve_stake = try_from_slice_unchecked::<stake::state::StakeState>( &reserve_stake_info.data.borrow(), )?; let reserve_meta = reserve_stake .meta() .ok_or(StakePoolError::WrongStakeState)?; let minimum_lamports = minimum_reserve_lamports(&reserve_meta); let reserve_lamports = reserve_stake_info.lamports(); if reserve_lamports.saturating_sub(required_lamports) < minimum_lamports { msg!( ""Need to add {} lamports for the reserve stake to be rent-exempt after adding a validator, reserve currently has {} lamports"", required_lamports.saturating_add(minimum_lamports).saturating_sub(reserve_lamports), reserve_lamports ); return Err(ProgramError::InsufficientFunds); } // Create new stake account create_stake_account( stake_info.clone(), Expand Down stake_account_signer_seeds, system_program_info.clone(), )?; // split into validator stake account Self::stake_split( stake_pool_info.key, reserve_stake_info.clone(), withdraw_authority_info.clone(), AUTHORITY_WITHDRAW, stake_pool.stake_withdraw_bump_seed, required_lamports, stake_info.clone(), )?; Self::stake_delegate( stake_info.clone(), validator_vote_info.clone(), clock_info.clone(), stake_history_info.clone(), stake_config_info.clone(), withdraw_authority_info.clone(), stake_pool_info.key, AUTHORITY_WITHDRAW, stake_pool.stake_withdraw_bump_seed, )?; validator_list.push(ValidatorStakeInfo { status: StakeStatus::Active, vote_account_address: *validator_vote_info.key, active_stake_lamports: required_lamports, transient_stake_lamports: 0, last_update_epoch: clock.epoch, transient_seed_suffix_start: 0, transient_seed_suffix_end: 0, validator_seed_suffix: raw_validator_seed, })?; Ok(()) }",Critical,"Fixed by making sure that after splitting the stake for a new validator, the reserve still has more than the minimium reserve lamports.",https://github.com/solana-labs/solana-program-library/pull/3714/commits/db6293a4aefe3feccfbda8a04d3aef5cab22c28a,High
Sol-168,"Recovery of funds by removing validators not always possible (PR 3714) Description Users can withdraw staked lamports from the reserve or a user-chosen validator via the WithdrawStake instruction. When neither the reserve nor any of the validators have active stake beyond the required minimum amount, i.e., rent-exemption plus minimum delegation, the user is allowed to completely unstake and remove a validator to recover the remaining funds. In order for a user to completely remove a validator, they have to 1. first, bring the validator down to the minimum amount of lamports and 2. then, in a second instruction, withdraw the rest. However, this requires the user to withdraw an exact amount of lamports. Note that the user specifies the amount of tokens and not lamports when withdrawing. Depending on the value of the pool tokens, exactly matching the amount of lamports is not always possible, making the user unable to withdraw. A malicious manager can exploit this to prevent users from withdrawing from the pool at all. As an example, assume that • one token is worth two lamports, • the reserve is empty, i.e. it is at the rent-exemption minimum, • the minimum amount of lamports for a validator’s stake account is 1,000,000 lamports, • all validators have 1,000,001 lamports in their stake accounts. At this point, a user is unable to withdraw. None of the validators are at the minimum amount of lamports, so removing them is impossible. However, to reduce them to the minimum amount, a user would have to withdraw one lamport, which is also impossible because even a single token is worth two lamports. Impacts property: Safety, because users are unable to withdraw funds at all.","let withdraw_lamports = stake_pool .calc_lamports_withdraw_amount(pool_tokens_burnt) .ok_or(StakePoolError::CalculationFailure)?; @@ -2442,17 +2436,27 @@ impl Processor { let meta = stake_state.meta().ok_or(StakePoolError::WrongStakeState)?; let required_lamports = minimum_stake_lamports(&meta, stake_minimum_delegation); let has_active_stake = validator_list .find::<ValidatorStakeInfo>( &required_lamports.to_le_bytes(), ValidatorStakeInfo::active_lamports_not_equal, ) .is_some(); let has_transient_stake = validator_list .find::<ValidatorStakeInfo>( &0u64.to_le_bytes(), ValidatorStakeInfo::transient_lamports_not_equal, ) .is_some(); let validator_list_item_info = if *stake_split_from.key == stake_pool.reserve_stake { // check that the validator stake accounts have no withdrawable stake if has_transient_stake || has_active_stake { msg!(""Error withdrawing from reserve: validator stake accounts have lamports available, please use those first.""); return Err(StakePoolError::StakeLamportsNotEqualToMinimum.into()); } // check that reserve has enough (should never fail, but who knows?) stake_split_from .lamports() .checked_sub(minimum_reserve_lamports(&meta)) .ok_or(StakePoolError::StakeLamportsNotEqualToMinimum)?; None } else { let delegation = stake_state .delegation() .ok_or(StakePoolError::WrongStakeState)?; let vote_account_address = delegation.voter_pubkey; if let Some(preferred_withdraw_validator) = stake_pool.preferred_withdraw_validator_vote_address { let preferred_validator_info = validator_list .find::<ValidatorStakeInfo>( preferred_withdraw_validator.as_ref(), ValidatorStakeInfo::memcmp_pubkey, ) .ok_or(StakePoolError::ValidatorNotFound)?; let available_lamports = preferred_validator_info .active_stake_lamports .saturating_sub(required_lamports); if preferred_withdraw_validator != vote_account_address && available_lamports > 0 { msg!(""Validator vote address {} is preferred for withdrawals, it currently has {} lamports available. Please withdraw those before using other validator stake accounts."", preferred_withdraw_validator, preferred_validator_info.active_stake_lamports); return Err(StakePoolError::IncorrectWithdrawVoteAddress.into()); } }","let mut withdraw_lamports = stake_pool .calc_lamports_withdraw_amount(pool_tokens_burnt) .ok_or(StakePoolError::CalculationFailure)?; @@ -2442,17 +2436,27 @@ impl Processor { let meta = stake_state.meta().ok_or(StakePoolError::WrongStakeState)?; let required_lamports = minimum_stake_lamports(&meta, stake_minimum_delegation); let lamports_per_pool_token = stake_pool .get_lamports_per_pool_token() .ok_or(StakePoolError::CalculationFailure)?; let minimum_lamports_with_tolerance = required_lamports.saturating_add(lamports_per_pool_token); let has_active_stake = validator_list .find::<ValidatorStakeInfo, _>(|x| { ValidatorStakeInfo::active_lamports_greater_than( x, &minimum_lamports_with_tolerance, ) }) .is_some(); let has_transient_stake = validator_list .find::<ValidatorStakeInfo, _>(|x| { ValidatorStakeInfo::transient_lamports_greater_than( x, &minimum_lamports_with_tolerance, ) }) .is_some(); let validator_list_item_info = if *stake_split_from.key == stake_pool.reserve_stake { // check that the validator stake accounts have no withdrawable stake if has_transient_stake || has_active_stake { msg!(""Error withdrawing from reserve: validator stake accounts have lamports available, please use those first.""); return Err(StakePoolError::StakeLamportsNotEqualToMinimum.into()); } // check that reserve has enough (should never fail, but who knows?) stake_split_from .lamports() .checked_sub(minimum_reserve_lamports(&meta)) .ok_or(StakePoolError::StakeLamportsNotEqualToMinimum)?; None } else { let delegation = stake_state .delegation() .ok_or(StakePoolError::WrongStakeState)?; let vote_account_address = delegation.voter_pubkey; if let Some(preferred_withdraw_validator) = stake_pool.preferred_withdraw_validator_vote_address { let preferred_validator_info = validator_list .find::<ValidatorStakeInfo, _>(|x| { ValidatorStakeInfo::memcmp_pubkey(x, &preferred_withdraw_validator) }) .ok_or(StakePoolError::ValidatorNotFound)?; let available_lamports = preferred_validator_info .active_stake_lamports .saturating_sub(minimum_lamports_with_tolerance); if preferred_withdraw_validator != vote_account_address && available_lamports > 0 { msg!(""Validator vote address {} is preferred for withdrawals, it currently has {} lamports available. Please withdraw those before using other validator stake accounts."", preferred_withdraw_validator, preferred_validator_info.active_stake_lamports); return Err(StakePoolError::IncorrectWithdrawVoteAddress.into()); } }",High,Fixed by adding a small tolerance when withdrawing from validators: A validator can be completely removed if it either has the minimum amount of lamports or has less than one token worth of additional lamports beyond the minimum.,https://github.com/solana-labs/solana-program-library/pull/3839/files#diff-6b2b2ff0d36e80df29c5d299e325622b645a449f82fb42a13c1b9b4d90d64215,High
Sol-169,"Withdrawing stake from the pool requires a transfer of fees to the manager. If this transfer fails, the withdraw also fails. The pool needs to ensure that it is impossible for the transfer to fail, or users may be unable to withdraw their stake. In the previous version of SPL token, the only way for the transfer to fail was if the destination account does not exist or has the wrong mint. However, PR 3714 adds support for SPL token 2022 as the fee account, which is much more complex and supports various extensions with different failure modes. Impacts property: Safety, because users may be unable to withdraw.","/// Check if the manager fee info is a valid token program account /// capable of receiving tokens from the mint. pub(crate) fn check_manager_fee_info( &self, manager_fee_info: &AccountInfo, ) -> Result<(), ProgramError> { let account_data = manager_fee_info.try_borrow_data()?; let token_account = StateWithExtensions::<Account>::unpack(&account_data)?; if manager_fee_info.owner != &self.token_program_id || token_account.base.state != AccountState::Initialized || token_account.base.mint != self.pool_mint { msg!(""Manager fee account is not owned by token program, is not initialized, or does not match stake pool's mint""); return Err(StakePoolError::InvalidFeeAccount.into()); } Ok(()) }","/// Check if the manager fee info is a valid token program account /// capable of receiving tokens from the mint. pub(crate) fn check_manager_fee_info( &self, manager_fee_info: &AccountInfo, ) -> Result<(), ProgramError> { let account_data = manager_fee_info.try_borrow_data()?; let token_account = StateWithExtensions::<Account>::unpack(&account_data)?; if manager_fee_info.owner != &self.token_program_id || token_account.base.state != AccountState::Initialized || token_account.base.mint != self.pool_mint { msg!(""Manager fee account is not owned by token program, is not initialized, or does not match stake pool's mint""); return Err(StakePoolError::InvalidFeeAccount.into()); } let extensions = token_account.get_extension_types()?; if extensions .iter() .any(|x| !is_extension_supported_for_fee_account(x)) { return Err(StakePoolError::UnsupportedFeeAccountExtension.into()); } Ok(()) } pub fn is_extension_supported_for_mint(extension_type: &ExtensionType) -> bool { const SUPPORTED_EXTENSIONS: [ExtensionType; 5] = [ ExtensionType::Uninitialized, ExtensionType::TransferFeeConfig, ExtensionType::ConfidentialTransferMint, ExtensionType::DefaultAccountState, // ok, but a freeze authority is not ExtensionType::InterestBearingConfig, ]; if !SUPPORTED_EXTENSIONS.contains(extension_type) { msg!( ""Stake pool mint account cannot have the {:?} extension"", extension_type ); false } else { true } } /// Checks if the given extension is supported for the stake pool's fee account pub fn is_extension_supported_for_fee_account(extension_type: &ExtensionType) -> bool { // Note: this does not include the `ConfidentialTransferAccount` extension // because it is possible to block non-confidential transfers with the // extension enabled. const SUPPORTED_EXTENSIONS: [ExtensionType; 4] = [ ExtensionType::Uninitialized, ExtensionType::TransferFeeAmount, ExtensionType::ImmutableOwner, ExtensionType::CpiGuard, ]; if !SUPPORTED_EXTENSIONS.contains(extension_type) { msg!(""Fee account cannot have the {:?} extension"", extension_type); false } else { true } }",High,"Fixed by adding a whitelist for extensions on both the mint of the pool token and the manager fee token account. If the manager fee account has any extension not in the whitelist, the fee transfer is skipped.",https://github.com/solana-labs/solana-program-library/pull/3714/commits/9c8a2307dea9107e8ed5e3877cb5818b1520c171,High
Sol-170,"When withdrawing tokens from a pool the value in lamports of the tokens is calculated as ceil( tokens * lamports_per_token). Because this rounds up to the next whole lamports amount, the value can be greater than the amount of lamports that were deposited to obtain the tokens. As an example, assume the stake pool is in a state where each token is worth 1.1 lamports. Consider the following actions: • deposit 3 lamports -> get floor(3 / 1.1) = 2 pool tokens • withdraw 1 pool token -> get ceil(1.1) = 2 lamports • withdraw 1 pool token again -> get ceil(1.1) = 2 lamports So in total, 4 lamports received for 3 lamports deposited. The impact of this issue is limited because of transaction costs on Solana and the low amount that can be stolen per transaction. With each withdraw, the gain is at most 1 lamport. However, a single transaction costs at least 5000 lamports. By including the transaction in a block produced by an attacker-controlled validator, 2500 lamports of the fee can be recovered. To exploit this profitably it would be necessary to perform more than 2500 withdraws in a single transaction. This however is much more than the compute limit currently allows. Impacts property: Safety, because stealing from the pool lowers the lamports per token so users may not be able to receive the deposited funds back in full.","/// calculate lamports amount on withdrawal #[inline] pub fn calc_lamports_withdraw_amount(&self, pool_tokens: u64) -> Option<u64> { // `checked_ceil_div` returns `None` for a 0 quotient result, but in this // case, a return of 0 is valid for small amounts of pool tokens. So // we check for that separately let numerator = (pool_tokens as u128).checked_mul(self.total_lamports as u128)?; let denominator = self.pool_token_supply as u128; if numerator < denominator || denominator == 0 { Some(0) } else { let (quotient, _) = numerator.checked_ceil_div(denominator)?; u64::try_from(quotient).ok() } }","#[inline] pub fn calc_lamports_withdraw_amount(&self, pool_tokens: u64) -> Option<u64> { // `checked_div` returns `None` for a 0 quotient result, but in this // case, a return of 0 is valid for small amounts of pool tokens. So // we check for that separately let numerator = (pool_tokens as u128).checked_mul(self.total_lamports as u128)?; let denominator = self.pool_token_supply as u128; if numerator < denominator || denominator == 0 { Some(0) } else { u64::try_from(numerator.checked_div(denominator)?).ok() } }",Medium,Fixed by truncating on withdraw instead of rounding up.,https://github.com/solana-labs/solana-program-library/pull/3804/files,High
Sol-171,"Front-Run Deposits To Steal Pool Tokens Description There is no delay mechanism on updating deposit fees and an upper bound of 100%. A user that submits a large deposit could be front-run by a pool manager who sets the fee close to 100% (ensuring that user still receives 1 pool token), receives almost the full value of the deposit, and then reduces the fee afterward.","/// Creates instructions required to deposit into a stake pool, given a stake /// account owned by the user. pub fn deposit_stake( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_withdraw_authority: &Pubkey, deposit_stake_address: &Pubkey, deposit_stake_withdraw_authority: &Pubkey, @@ -1290,13 +1388,60 @@ pub fn deposit_stake( referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, ) -> Vec<Instruction> { let stake_pool_deposit_authority = find_deposit_authority_program_address(program_id, stake_pool).0; let accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new(*validator_list_storage, false), AccountMeta::new_readonly(stake_pool_deposit_authority, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new(*deposit_stake_address, false), AccountMeta::new(*validator_stake_account, false), @@ -1309,28 +1454,99 @@ pub fn deposit_stake( AccountMeta::new_readonly(sysvar::stake_history::id(), false), AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(stake::program::id(), false), ]; vec![ stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, &stake_pool_deposit_authority, stake::state::StakeAuthorize::Staker, None, ), stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, &stake_pool_deposit_authority, stake::state::StakeAuthorize::Withdrawer, None, ), Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositStake.try_to_vec().unwrap(), }, ] } /// Creates instructions required to deposit into a stake pool, given a stake @@ -1352,48 +1568,66 @@ pub fn deposit_stake_with_authority( pool_mint: &Pubkey, token_program_id: &Pubkey, ) -> Vec<Instruction> { let accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new(*validator_list_storage, false), AccountMeta::new_readonly(*stake_pool_deposit_authority, true), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new(*deposit_stake_address, false), AccountMeta::new(*validator_stake_account, false), AccountMeta::new(*reserve_stake_account, false), AccountMeta::new(*pool_tokens_to, false), AccountMeta::new(*manager_fee_account, false), AccountMeta::new(*referrer_pool_tokens_account, false), AccountMeta::new(*pool_mint, false), AccountMeta::new_readonly(sysvar::clock::id(), false), AccountMeta::new_readonly(sysvar::stake_history::id(), false), AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(stake::program::id(), false), ]; vec![ stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, stake_pool_deposit_authority, stake::state::StakeAuthorize::Staker, None, ), stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, stake_pool_deposit_authority, stake::state::StakeAuthorize::Withdrawer, None, ), Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositStake.try_to_vec().unwrap(), }, ] } /// Creates instructions required to deposit SOL directly into a stake pool. pub fn deposit_sol( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, @@ -1404,9 +1638,11 @@ pub fn deposit_sol( referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, amount: u64, ) -> Instruction { let accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new(*reserve_stake_account, false), @@ -1418,15 +1654,94 @@ pub fn deposit_sol( AccountMeta::new_readonly(system_program::id(), false), AccountMeta::new_readonly(*token_program_id, false), ]; Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositSol(amount) .try_to_vec() .unwrap(), } } /// Creates instruction required to deposit SOL directly into a stake pool. /// The difference with `deposit_sol()` is that a deposit /// authority must sign this instruction. @@ -1442,32 +1757,59 @@ pub fn deposit_sol_with_authority( referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, amount: u64, ) -> Instruction { let accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new(*reserve_stake_account, false), AccountMeta::new(*lamports_from, true), AccountMeta::new(*pool_tokens_to, false), AccountMeta::new(*manager_fee_account, false), AccountMeta::new(*referrer_pool_tokens_account, false), AccountMeta::new(*pool_mint, false), AccountMeta::new_readonly(system_program::id(), false), AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(*sol_deposit_authority, true), ]; Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositSol(amount) .try_to_vec() .unwrap(), } }","fn deposit_stake_internal( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_deposit_authority: Option<&Pubkey>, stake_pool_withdraw_authority: &Pubkey, deposit_stake_address: &Pubkey, deposit_stake_withdraw_authority: &Pubkey, @@ -1290,13 +1388,60 @@ pub fn deposit_stake( referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, minimum_pool_tokens_out: Option<u64>, ) -> Vec<Instruction> { let mut instructions = vec![]; let mut accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new(*validator_list_storage, false), ]; if let Some(stake_pool_deposit_authority) = stake_pool_deposit_authority { accounts.push(AccountMeta::new_readonly( *stake_pool_deposit_authority, true, )); instructions.extend_from_slice(&[ stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, stake_pool_deposit_authority, stake::state::StakeAuthorize::Staker, None, ), stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, stake_pool_deposit_authority, stake::state::StakeAuthorize::Withdrawer, None, ), ]); } else { let stake_pool_deposit_authority = find_deposit_authority_program_address(program_id, stake_pool).0; accounts.push(AccountMeta::new_readonly( stake_pool_deposit_authority, false, )); instructions.extend_from_slice(&[ stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, &stake_pool_deposit_authority, stake::state::StakeAuthorize::Staker, None, ), stake::instruction::authorize( deposit_stake_address, deposit_stake_withdraw_authority, &stake_pool_deposit_authority, stake::state::StakeAuthorize::Withdrawer, None, ), ]); }; accounts.extend_from_slice(&[ AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new(*deposit_stake_address, false), AccountMeta::new(*validator_stake_account, false), @@ -1309,28 +1454,99 @@ pub fn deposit_stake( AccountMeta::new_readonly(sysvar::stake_history::id(), false), AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(stake::program::id(), false), ]); instructions.push( if let Some(minimum_pool_tokens_out) = minimum_pool_tokens_out { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositStakeWithSlippage { minimum_pool_tokens_out, } .try_to_vec() .unwrap(), } } else { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositStake.try_to_vec().unwrap(), } }, ); instructions } /// Creates instructions required to deposit into a stake pool, given a stake /// account owned by the user. pub fn deposit_stake( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_withdraw_authority: &Pubkey, deposit_stake_address: &Pubkey, deposit_stake_withdraw_authority: &Pubkey, validator_stake_account: &Pubkey, reserve_stake_account: &Pubkey, pool_tokens_to: &Pubkey, manager_fee_account: &Pubkey, referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, ) -> Vec<Instruction> { deposit_stake_internal( program_id, stake_pool, validator_list_storage, None, stake_pool_withdraw_authority, deposit_stake_address, deposit_stake_withdraw_authority, validator_stake_account, reserve_stake_account, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, None, ) } /// Creates instructions to deposit into a stake pool with slippage pub fn deposit_stake_with_slippage( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_withdraw_authority: &Pubkey, deposit_stake_address: &Pubkey, deposit_stake_withdraw_authority: &Pubkey, validator_stake_account: &Pubkey, reserve_stake_account: &Pubkey, pool_tokens_to: &Pubkey, manager_fee_account: &Pubkey, referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, minimum_pool_tokens_out: u64, ) -> Vec<Instruction> { deposit_stake_internal( program_id, stake_pool, validator_list_storage, None, stake_pool_withdraw_authority, deposit_stake_address, deposit_stake_withdraw_authority, validator_stake_account, reserve_stake_account, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, Some(minimum_pool_tokens_out), ) } /// Creates instructions required to deposit into a stake pool, given a stake @@ -1352,48 +1568,66 @@ pub fn deposit_stake_with_authority( pool_mint: &Pubkey, token_program_id: &Pubkey, ) -> Vec<Instruction> { deposit_stake_internal( program_id, stake_pool, validator_list_storage, Some(stake_pool_deposit_authority), stake_pool_withdraw_authority, deposit_stake_address, deposit_stake_withdraw_authority, validator_stake_account, reserve_stake_account, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, None, ) } /// Creates instructions required to deposit into a stake pool with slippage, given /// a stake account owned by the user. The difference with `deposit()` is that a deposit /// authority must sign this instruction, which is required for private pools. pub fn deposit_stake_with_authority_and_slippage( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_deposit_authority: &Pubkey, stake_pool_withdraw_authority: &Pubkey, deposit_stake_address: &Pubkey, deposit_stake_withdraw_authority: &Pubkey, validator_stake_account: &Pubkey, reserve_stake_account: &Pubkey, pool_tokens_to: &Pubkey, manager_fee_account: &Pubkey, referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, minimum_pool_tokens_out: u64, ) -> Vec<Instruction> { deposit_stake_internal( program_id, stake_pool, validator_list_storage, Some(stake_pool_deposit_authority), stake_pool_withdraw_authority, deposit_stake_address, deposit_stake_withdraw_authority, validator_stake_account, reserve_stake_account, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, Some(minimum_pool_tokens_out), ) } /// Creates instructions required to deposit SOL directly into a stake pool. fn deposit_sol_internal( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, @@ -1404,9 +1638,11 @@ pub fn deposit_sol( referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, sol_deposit_authority: Option<&Pubkey>, lamports_in: u64, minimum_pool_tokens_out: Option<u64>, ) -> Instruction { let mut accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new(*reserve_stake_account, false), @@ -1418,15 +1654,94 @@ pub fn deposit_sol( AccountMeta::new_readonly(system_program::id(), false), AccountMeta::new_readonly(*token_program_id, false), ]; if let Some(sol_deposit_authority) = sol_deposit_authority { accounts.push(AccountMeta::new_readonly(*sol_deposit_authority, true)); } if let Some(minimum_pool_tokens_out) = minimum_pool_tokens_out { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositSolWithSlippage { lamports_in, minimum_pool_tokens_out, } .try_to_vec() .unwrap(), } } else { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::DepositSol(lamports_in) .try_to_vec() .unwrap(), } } } /// Creates instruction to deposit SOL directly into a stake pool. pub fn deposit_sol( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, reserve_stake_account: &Pubkey, lamports_from: &Pubkey, pool_tokens_to: &Pubkey, manager_fee_account: &Pubkey, referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, lamports_in: u64, ) -> Instruction { deposit_sol_internal( program_id, stake_pool, stake_pool_withdraw_authority, reserve_stake_account, lamports_from, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, None, lamports_in, None, ) } /// Creates instruction to deposit SOL directly into a stake pool with slippage constraint. pub fn deposit_sol_with_slippage( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, reserve_stake_account: &Pubkey, lamports_from: &Pubkey, pool_tokens_to: &Pubkey, manager_fee_account: &Pubkey, referrer_pool_tokens_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, lamports_in: u64, minimum_pool_tokens_out: u64, ) -> Instruction { deposit_sol_internal( program_id, stake_pool, stake_pool_withdraw_authority, reserve_stake_account, lamports_from, pool_tokens_to, manager_fee_account, referrer_pool_tokens_account, pool_mint, token_program_id, None, lamports_in, Some(minimum_pool_tokens_out), ) }",High,"Add instructions that allow the user to specify the minimum amount of tokens they expect to receive. In order to protect against manager fee hikes, a user can use the following instructions and specify a slippage parameter. If the subsequent fee deduction reduces the received amount below this value, the instruction will abort: 1. DepositStakeWithSlippage 2. WithdrawStakeWithSlippage 3. DepositSolWithSlippage 4. WithdrawSolWithSlippage","https://github.com/solana-labs/solana-program-library/pull/3980/files, https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/f5079737-734d-4b73-88a5-4c00eb20015d/Solana_Stake_Pool_audit_final.pdf?table=block&id=353af6fc-8c19-4e59-aefc-3aebc813b926&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743307200000&signature=ga0AQbGGoM7PDHTRtRK5aEOAatzTupp7GT5nQAkWS80&downloadName=Solana+Stake+Pool+Audit+Report.pdf",High
Sol-172,"Front-Run Deposits To Steal Pool Tokens Description There is no delay mechanism on updating deposit fees and an upper bound of 100%. A user that submits a large deposit could be front-run by a pool manager who sets the fee close to 100% (ensuring that user still receives 1 pool token), receives almost the full value of the deposit, and then reduces the fee afterward.","pub fn withdraw_stake( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, @@ -1480,7 +1822,8 @@ pub fn withdraw_stake( manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, amount: u64, ) -> Instruction { let accounts = vec![ AccountMeta::new(*stake_pool, false), @@ -1497,17 +1840,98 @@ pub fn withdraw_stake( AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(stake::program::id(), false), ]; Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawStake(amount) .try_to_vec() .unwrap(), } } /// Creates instruction required to withdraw SOL directly from a stake pool. pub fn withdraw_sol( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, @@ -1518,9 +1942,11 @@ pub fn withdraw_sol( manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens: u64, ) -> Instruction { let accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new_readonly(*user_transfer_authority, true), @@ -1534,15 +1960,95 @@ pub fn withdraw_sol( AccountMeta::new_readonly(stake::program::id(), false), AccountMeta::new_readonly(*token_program_id, false), ]; Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawSol(pool_tokens) .try_to_vec() .unwrap(), } }","fn withdraw_stake_internal( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, @@ -1480,7 +1822,8 @@ pub fn withdraw_stake( manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens_in: u64, minimum_lamports_out: Option<u64>, ) -> Instruction { let accounts = vec![ AccountMeta::new(*stake_pool, false), @@ -1497,17 +1840,98 @@ pub fn withdraw_stake( AccountMeta::new_readonly(*token_program_id, false), AccountMeta::new_readonly(stake::program::id(), false), ]; if let Some(minimum_lamports_out) = minimum_lamports_out { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawStakeWithSlippage { pool_tokens_in, minimum_lamports_out, } .try_to_vec() .unwrap(), } } else { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawStake(pool_tokens_in) .try_to_vec() .unwrap(), } } } /// Creates a 'WithdrawStake' instruction. pub fn withdraw_stake( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_withdraw: &Pubkey, stake_to_split: &Pubkey, stake_to_receive: &Pubkey, user_stake_authority: &Pubkey, user_transfer_authority: &Pubkey, user_pool_token_account: &Pubkey, manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens_in: u64, ) -> Instruction { withdraw_stake_internal( program_id, stake_pool, validator_list_storage, stake_pool_withdraw, stake_to_split, stake_to_receive, user_stake_authority, user_transfer_authority, user_pool_token_account, manager_fee_account, pool_mint, token_program_id, pool_tokens_in, None, ) } /// Creates a 'WithdrawStakeWithSlippage' instruction. pub fn withdraw_stake_with_slippage( program_id: &Pubkey, stake_pool: &Pubkey, validator_list_storage: &Pubkey, stake_pool_withdraw: &Pubkey, stake_to_split: &Pubkey, stake_to_receive: &Pubkey, user_stake_authority: &Pubkey, user_transfer_authority: &Pubkey, user_pool_token_account: &Pubkey, manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens_in: u64, minimum_lamports_out: u64, ) -> Instruction { withdraw_stake_internal( program_id, stake_pool, validator_list_storage, stake_pool_withdraw, stake_to_split, stake_to_receive, user_stake_authority, user_transfer_authority, user_pool_token_account, manager_fee_account, pool_mint, token_program_id, pool_tokens_in, Some(minimum_lamports_out), ) } fn withdraw_sol_internal( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, @@ -1518,9 +1942,11 @@ pub fn withdraw_sol( manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, sol_withdraw_authority: Option<&Pubkey>, pool_tokens_in: u64, minimum_lamports_out: Option<u64>, ) -> Instruction { let mut accounts = vec![ AccountMeta::new(*stake_pool, false), AccountMeta::new_readonly(*stake_pool_withdraw_authority, false), AccountMeta::new_readonly(*user_transfer_authority, true), @@ -1534,15 +1960,95 @@ pub fn withdraw_sol( AccountMeta::new_readonly(stake::program::id(), false), AccountMeta::new_readonly(*token_program_id, false), ]; if let Some(sol_withdraw_authority) = sol_withdraw_authority { accounts.push(AccountMeta::new_readonly(*sol_withdraw_authority, true)); } if let Some(minimum_lamports_out) = minimum_lamports_out { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawSolWithSlippage { pool_tokens_in, minimum_lamports_out, } .try_to_vec() .unwrap(), } } else { Instruction { program_id: *program_id, accounts, data: StakePoolInstruction::WithdrawSol(pool_tokens_in) .try_to_vec() .unwrap(), } } } /// Creates instruction required to withdraw SOL directly from a stake pool. pub fn withdraw_sol( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, user_transfer_authority: &Pubkey, pool_tokens_from: &Pubkey, reserve_stake_account: &Pubkey, lamports_to: &Pubkey, manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens_in: u64, ) -> Instruction { withdraw_sol_internal( program_id, stake_pool, stake_pool_withdraw_authority, user_transfer_authority, pool_tokens_from, reserve_stake_account, lamports_to, manager_fee_account, pool_mint, token_program_id, None, pool_tokens_in, None, ) } /// Creates instruction required to withdraw SOL directly from a stake pool with /// slippage constraints. pub fn withdraw_sol_with_slippage( program_id: &Pubkey, stake_pool: &Pubkey, stake_pool_withdraw_authority: &Pubkey, user_transfer_authority: &Pubkey, pool_tokens_from: &Pubkey, reserve_stake_account: &Pubkey, lamports_to: &Pubkey, manager_fee_account: &Pubkey, pool_mint: &Pubkey, token_program_id: &Pubkey, pool_tokens_in: u64, minimum_lamports_out: u64, ) -> Instruction { withdraw_sol_internal( program_id, stake_pool, stake_pool_withdraw_authority, user_transfer_authority, pool_tokens_from, reserve_stake_account, lamports_to, manager_fee_account, pool_mint, token_program_id, None, pool_tokens_in, Some(minimum_lamports_out), ) }",High,"Add instructions that allow the user to specify the minimum amount of tokens they expect to receive. In order to protect against manager fee hikes, a user can use the following instructions and specify a slippage parameter. If the subsequent fee deduction reduces the received amount below this value, the instruction will abort: 1. DepositStakeWithSlippage 2. WithdrawStakeWithSlippage 3. DepositSolWithSlippage 4. WithdrawSolWithSlippage","https://github.com/solana-labs/solana-program-library/pull/3980/files, https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/f5079737-734d-4b73-88a5-4c00eb20015d/Solana_Stake_Pool_audit_final.pdf?table=block&id=353af6fc-8c19-4e59-aefc-3aebc813b926&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743307200000&signature=ga0AQbGGoM7PDHTRtRK5aEOAatzTupp7GT5nQAkWS80&downloadName=Solana+Stake+Pool+Audit+Report.pdf",High
Sol-173,"Fee Update Delay Bypass Description Certain fees (StakeWithdrawal, SolWithdrawal, Epoch) can only be updated in the next epoch. In the current implementation, the manager can update the fee at the end of the current epoch and then immediately apply the fee at the start of the next epoch. For example, a pool manager could use this technique to instantaneously apply a withdrawal fee of 0.1% (the baseline fee).","program/src/processor.rs if fee.can_only_change_next_epoch() && stake_pool.last_update_epoch < ,→ clock.epoch { return Err(StakePoolError::StakeListAndPoolOutOfDate.into()); } program/src/state.rs #[inline] pub fn can_only_change_next_epoch(&self) -> bool { matches!( self, Self::StakeWithdrawal(_) | Self::SolWithdrawal(_) | ,→ Self::Epoch(_) ) }","/// Wrapper type that ""counts down"" epochs, which is Borsh-compatible with the /// native `Option` #[repr(C)] #[derive(Clone, Copy, Debug, PartialEq, BorshSerialize, BorshDeserialize, BorshSchema)] pub enum FutureEpoch<T> { /// Nothing is set None, /// Value is ready after the next epoch boundary One(T), /// Value is ready after two epoch boundaries Two(T), } impl<T> Default for FutureEpoch<T> { fn default() -> Self { Self::None } } impl<T> FutureEpoch<T> { /// Create a new value to be unlocked in a two epochs pub fn new(value: T) -> Self { Self::Two(value) } } impl<T: Clone> FutureEpoch<T> { /// Update the epoch, to be done after `get`ting the underlying value pub fn update_epoch(&mut self) { match self { Self::None => {} Self::One(_) => { // The value has waited its last epoch *self = Self::None; } // The value still has to wait one more epoch after this Self::Two(v) => { *self = Self::One(v.clone()); } } } /// Get the value if it's ready, which is only at `One` epoch remaining pub fn get(&self) -> Option<&T> { match self { Self::None | Self::Two(_) => None, Self::One(v) => Some(v), } } } impl<T> From<FutureEpoch<T>> for Option<T> { fn from(v: FutureEpoch<T>) -> Option<T> { match v { FutureEpoch::None => None, FutureEpoch::One(inner) | FutureEpoch::Two(inner) => Some(inner), } } }",Medium,"To give users sufficient time to adapt to changing fees, it would likely make sense to ensure the proposed fee is blocked for at least one full epoch.","https://github.com/solana-labs/solana-program-library/pull/3979/files#diff-0d164bba80f160b0f3813ac32c2709f64e62b196cdc2eee8bd54422f73da1e4a, https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/f5079737-734d-4b73-88a5-4c00eb20015d/Solana_Stake_Pool_audit_final.pdf?table=block&id=353af6fc-8c19-4e59-aefc-3aebc813b926&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743307200000&signature=ga0AQbGGoM7PDHTRtRK5aEOAatzTupp7GT5nQAkWS80&downloadName=Solana+Stake+Pool+Audit+Report.pdf",High
Sol-174,"Inaccurate In-Memory Balance Updates. transfer and withdraw in code-vm are vulnerable to incorrect accounting when the source and destination accounts are the same. In scenarios where the source account and the destination account are identical, the program logic may process both operations in memory without distinguishing between the two. This creates a situation where only the final ”greater” destination value (after adding funds) is written back to storage, without accurately subtracting the funds first.","Instruction data: 0. signature: [u8;64] - The opcode to execute. 1. amount: [u64] - The account_indicies of the virtual accounts to use. */ pub fn process_transfer( ctx: &ExecContext, data: &ExecIxData, ) -> ProgramResult { let vm = load_vm(ctx.vm_info)?; let args = TransferOp::try_from_bytes(&data.data)?.to_struct()?; let mem_indicies = &data.mem_indicies; let mem_banks = &data.mem_banks; check_condition( mem_indicies.len() == 3, ""the number of memory indicies must be 3"", )?; check_condition( mem_banks.len() == 3, ""the number of memory banks must be 3"", )?; let nonce_index = mem_indicies[0]; let nonce_mem = mem_banks[0]; let src_index = mem_indicies[1]; let src_mem = mem_banks[1]; let dst_index = mem_indicies[2]; let dst_mem = mem_banks[2]; let vm_mem = ctx.get_banks(); check_condition( vm_mem[nonce_mem as usize].is_some(), ""the nonce memory account must be provided"", )?; check_condition( vm_mem[src_mem as usize].is_some(), ""the source memory account must be provided"", )?; check_condition( vm_mem[dst_mem as usize].is_some(), ""the destination memory account must be provided"", )?; let nonce_mem_info = vm_mem[nonce_mem as usize].unwrap(); let src_mem_info = vm_mem[src_mem as usize].unwrap(); let dst_mem_info = vm_mem[dst_mem as usize].unwrap(); let va = try_read(&nonce_mem_info, nonce_index)?; let mut vdn = va.into_inner_nonce().unwrap(); let va = try_read(&src_mem_info, src_index)?; let mut src_vta = va.into_inner_timelock().unwrap(); let va = try_read(&dst_mem_info, dst_index)?; let mut dst_vta = va.into_inner_timelock().unwrap(); let hash = create_transfer_message( &vm, &src_vta, &dst_vta, &vdn, args.amount ); sig_verify( src_vta.owner.as_ref(), args.signature.as_ref(), hash.as_ref(), )?; src_vta.balance = src_vta.balance .checked_sub(args.amount) .ok_or(ProgramError::ArithmeticOverflow)?; dst_vta.balance = dst_vta.balance .checked_add(args.amount) .ok_or(ProgramError::ArithmeticOverflow)?; vdn.value = vm.get_current_poh(); Expand All @@ -129,4 +139,4 @@ pub fn process_transfer( try_write( src_mem_info, src_index, &VirtualAccount::Timelock(src_vta) )?; try_write( dst_mem_info, dst_index, &VirtualAccount::Timelock(dst_vta) )?; try_write( nonce_mem_info, nonce_index, &VirtualAccount::Nonce(vdn) )?; Ok(()) }","Instruction data: 0. signature: [u8;64] - The opcode to execute. 1. amount: [u64] - The account_indicies of the virtual accounts to use. */ pub fn process_transfer( ctx: &ExecContext, data: &ExecIxData, ) -> ProgramResult { let vm = load_vm(ctx.vm_info)?; let args = TransferOp::try_from_bytes(&data.data)?.to_struct()?; let mem_indicies = &data.mem_indicies; let mem_banks = &data.mem_banks; check_condition( mem_indicies.len() == 3, ""the number of memory indicies must be 3"", )?; check_condition( mem_banks.len() == 3, ""the number of memory banks must be 3"", )?; let nonce_index = mem_indicies[0]; let nonce_mem = mem_banks[0]; let src_index = mem_indicies[1]; let src_mem = mem_banks[1]; let dst_index = mem_indicies[2]; let dst_mem = mem_banks[2]; let vm_mem = ctx.get_banks(); check_condition( vm_mem[nonce_mem as usize].is_some(), ""the nonce memory account must be provided"", )?; check_condition( vm_mem[src_mem as usize].is_some(), ""the source memory account must be provided"", )?; check_condition( vm_mem[dst_mem as usize].is_some(), ""the destination memory account must be provided"", )?; let nonce_mem_info = vm_mem[nonce_mem as usize].unwrap(); let src_mem_info = vm_mem[src_mem as usize].unwrap(); let dst_mem_info = vm_mem[dst_mem as usize].unwrap(); let va = try_read(&nonce_mem_info, nonce_index)?; let mut vdn = va.into_inner_nonce().unwrap(); let va = try_read(&src_mem_info, src_index)?; let mut src_vta = va.into_inner_timelock().unwrap(); let va = try_read(&dst_mem_info, dst_index)?; let mut dst_vta = va.into_inner_timelock().unwrap(); let hash = create_transfer_message( &vm, &src_vta, &dst_vta, &vdn, args.amount ); sig_verify( src_vta.owner.as_ref(), args.signature.as_ref(), hash.as_ref(), )?; if src_vta.balance < args.amount { return Err(ProgramError::InsufficientFunds); } // If the source and destination accounts are the same, then we don't need // to do anything. let is_same_account = src_mem == dst_mem && src_index == dst_index; if !is_same_account { src_vta.balance = src_vta.balance .checked_sub(args.amount) .ok_or(ProgramError::ArithmeticOverflow)?; dst_vta.balance = dst_vta.balance .checked_add(args.amount) .ok_or(ProgramError::ArithmeticOverflow)?; } vdn.value = vm.get_current_poh(); Expand All @@ -129,4 +139,4 @@ pub fn process_transfer( try_write( src_mem_info, src_index, &VirtualAccount::Timelock(src_vta) )?; try_write( dst_mem_info, dst_index, &VirtualAccount::Timelock(dst_vta) )?; try_write( nonce_mem_info, nonce_index, &VirtualAccount::Nonce(vdn) )?; Ok(()) }",Critical,Introduce an explicit check to prevent operations where the source and destination are the same.,https://github.com/code-payments/code-vm/pull/11/files,High
Sol-175,"Inaccurate In-Memory Balance Updates. transfer and withdraw in code-vm are vulnerable to incorrect accounting when the source and destination accounts are the same. In scenarios where the source account and the destination account are identical, the program logic may process both operations in memory without distinguishing between the two. This creates a situation where only the final ”greater” destination value (after adding funds) is written back to storage, without accurately subtracting the funds first.","Instruction data: 0. signature: [u8;64] - The opcode to execute. */ pub fn process_withdraw( ctx: &ExecContext, data: &ExecIxData, ) -> ProgramResult { let vm = load_vm(ctx.vm_info)?; let args = WithdrawOp::try_from_bytes(&data.data)?; let mem_indicies = &data.mem_indicies; let mem_banks = &data.mem_banks; check_condition( mem_indicies.len() == 3, ""the number of memory indicies must be 3"", )?; check_condition( mem_banks.len() == 3, ""the number of memory banks must be 3"", )?; let nonce_index = mem_indicies[0]; let nonce_mem = mem_banks[0]; let src_index = mem_indicies[1]; let src_mem = mem_banks[1]; let dst_index = mem_indicies[2]; let dst_mem = mem_banks[2]; let vm_mem = ctx.get_banks(); check_condition( vm_mem[nonce_mem as usize].is_some(), ""the nonce memory account must be provided"", )?; check_condition( vm_mem[src_mem as usize].is_some(), ""the source memory account must be provided"", )?; check_condition( vm_mem[dst_mem as usize].is_some(), ""the destination memory account must be provided"", )?; let nonce_mem_info = vm_mem[nonce_mem as usize].unwrap(); let src_mem_info = vm_mem[src_mem as usize].unwrap(); let dst_mem_info = vm_mem[dst_mem as usize].unwrap(); let va = try_read(&nonce_mem_info, nonce_index)?; let mut vdn = va.into_inner_nonce().unwrap(); let va = try_read(&src_mem_info, src_index)?; let mut src_vta = va.into_inner_timelock().unwrap(); let va = try_read(&dst_mem_info, dst_index)?; let mut dst_vta = va.into_inner_timelock().unwrap(); let amount = src_vta.balance; let hash = create_withdraw_message( &vm, &src_vta, &dst_vta, &vdn, ); sig_verify( src_vta.owner.as_ref(), args.signature.as_ref(), hash.as_ref(), )?; src_vta.balance = src_vta.balance .checked_sub(amount) .ok_or(ProgramError::ArithmeticOverflow)?; dst_vta.balance = dst_vta.balance .checked_add(amount) .ok_or(ProgramError::ArithmeticOverflow)?; vdn.value = vm.get_current_poh(); Expand Down try_delete( src_mem_info, src_index )?; try_write( dst_mem_info, dst_index, &VirtualAccount::Timelock(dst_vta) )?; try_write( nonce_mem_info, nonce_index, &VirtualAccount::Nonce(vdn) )?; Ok(()) }","Instruction data: 0. signature: [u8;64] - The opcode to execute. */ pub fn process_withdraw( ctx: &ExecContext, data: &ExecIxData, ) -> ProgramResult { let vm = load_vm(ctx.vm_info)?; let args = WithdrawOp::try_from_bytes(&data.data)?; let mem_indicies = &data.mem_indicies; let mem_banks = &data.mem_banks; check_condition( mem_indicies.len() == 3, ""the number of memory indicies must be 3"", )?; check_condition( mem_banks.len() == 3, ""the number of memory banks must be 3"", )?; let nonce_index = mem_indicies[0]; let nonce_mem = mem_banks[0]; let src_index = mem_indicies[1]; let src_mem = mem_banks[1]; let dst_index = mem_indicies[2]; let dst_mem = mem_banks[2]; let vm_mem = ctx.get_banks(); check_condition( vm_mem[nonce_mem as usize].is_some(), ""the nonce memory account must be provided"", )?; check_condition( vm_mem[src_mem as usize].is_some(), ""the source memory account must be provided"", )?; check_condition( vm_mem[dst_mem as usize].is_some(), ""the destination memory account must be provided"", )?; let nonce_mem_info = vm_mem[nonce_mem as usize].unwrap(); let src_mem_info = vm_mem[src_mem as usize].unwrap(); let dst_mem_info = vm_mem[dst_mem as usize].unwrap(); let va = try_read(&nonce_mem_info, nonce_index)?; let mut vdn = va.into_inner_nonce().unwrap(); let va = try_read(&src_mem_info, src_index)?; let mut src_vta = va.into_inner_timelock().unwrap(); let va = try_read(&dst_mem_info, dst_index)?; let mut dst_vta = va.into_inner_timelock().unwrap(); let amount = src_vta.balance; let hash = create_withdraw_message( &vm, &src_vta, &dst_vta, &vdn, ); sig_verify( src_vta.owner.as_ref(), args.signature.as_ref(), hash.as_ref(), )?; if src_vta.balance < amount { return Err(ProgramError::InsufficientFunds); } // If the source and destination accounts are the same, then we don't need // to do anything. let is_same_account = src_mem == dst_mem && src_index == dst_index; if !is_same_account { src_vta.balance = src_vta.balance .checked_sub(amount) .ok_or(ProgramError::ArithmeticOverflow)?; dst_vta.balance = dst_vta.balance .checked_add(amount) .ok_or(ProgramError::ArithmeticOverflow)?; } vdn.value = vm.get_current_poh(); Expand Down try_delete( src_mem_info, src_index )?; try_write( dst_mem_info, dst_index, &VirtualAccount::Timelock(dst_vta) )?; try_write( nonce_mem_info, nonce_index, &VirtualAccount::Nonce(vdn) )?; Ok(()) }",Critical,Introduce an explicit check to prevent operations where the source and destination are the same.,https://github.com/code-payments/code-vm/pull/11/files,High
Sol-176,"process_init_timelock does not check that the input bumps are canonical. The bump values are taken directly from the caller without validating whether they match the canonical bumps derived programmatically. A canonical bump corresponds to the first valid seed value that may be used to generate a Program Derived Address (PDA). By not checking for the canonical bump, discrepancies may arise between the addresses expected by the program and those derived in real time, as the address would resolve to a different PDA than what the canonical calculation would yield.","Instruction data: 0. account_index: u16 - The location in the VM's paged memory to create the account. 1. virtual_timelock_bump: u8 - The bump seed for the virtual timelock account. 2. virtual_vault_bump: u8 - The bump seed for the virtual token account. 3. unlock_pda_bump: u8 - The bump seed for the unlock PDA address. */ pub fn process_init_timelock(accounts: &[AccountInfo<'_>], data: &[u8]) -> ProgramResult { let args = InitTimelockIx::try_from_bytes(data)?.to_struct()?; let [ vm_authority_info, vm_info, vm_memory_info, virtual_account_owner_info, ] = accounts else { return Err(ProgramError::NotEnoughAccountKeys); }; check_signer(vm_authority_info)?; check_mut(vm_info)?; check_mut(vm_memory_info)?; check_readonly(virtual_account_owner_info)?; let vm = load_vm_checked(vm_info, vm_authority_info)?; check_memory(vm_memory_info, vm_info)?; check_is_empty(vm_memory_info, args.account_index)?; let owner = virtual_account_owner_info.key.clone(); let nonce = vm.get_current_poh(); let timelock_address = pdas::create_virtual_timelock_address( &vm.get_mint(), &vm.get_authority(), &owner, vm.get_lock_duration(), args.virtual_timelock_bump, ); let unlock_address = pdas::create_unlock_address( &owner, &timelock_address, vm_info.key, args.unlock_pda_bump); // We could technically require the user to provide the withdraw_bump, // however, that would make using this instruction more cumbersome since the Expand Down // nonce value is determined above. let (_, withdraw_bump) = pdas::find_withdraw_receipt_address( // This call *can* be expensive &unlock_address, &nonce, vm_info.key); let vta = VirtualTimelockAccount { owner, instance: nonce, bump: args.virtual_timelock_bump, token_bump: args.virtual_vault_bump, unlock_bump: args.unlock_pda_bump, withdraw_bump, balance: 0, }; let va = VirtualAccount::Timelock(vta); try_write(vm_memory_info, args.account_index, &va)?; vm.advance_poh(CodeInstruction::InitTimelockIx, accounts, data); Ok(()) }","Derived account seeds: 1. vm: [ ""code_vm"", <mint>, <vm_authority>, <lock_duration> ] 2. vm_memory: [ ""code_vm"", ""vm_memory_account"", <self.name>, <vm> ] Instruction data: 0. account_index: u16 - The location in the VM's paged memory to create the account. 1. virtual_timelock_bump: u8 - The bump seed for the virtual timelock account. 2. virtual_vault_bump: u8 - The bump seed for the virtual token account. 3. unlock_pda_bump: u8 - The bump seed for the unlock PDA address. */ pub fn process_init_timelock(accounts: &[AccountInfo<'_>], data: &[u8]) -> ProgramResult { let args = InitTimelockIx::try_from_bytes(data)?.to_struct()?; let [ vm_authority_info, vm_info, vm_memory_info, virtual_account_owner_info, ] = accounts else { return Err(ProgramError::NotEnoughAccountKeys); }; check_signer(vm_authority_info)?; check_mut(vm_info)?; check_mut(vm_memory_info)?; check_readonly(virtual_account_owner_info)?; let vm = load_vm_checked(vm_info, vm_authority_info)?; check_memory(vm_memory_info, vm_info)?; check_is_empty(vm_memory_info, args.account_index)?; let owner = virtual_account_owner_info.key.clone(); let nonce = vm.get_current_poh(); let (timelock_address, timelock_bump) = pdas::find_virtual_timelock_address( &vm.get_mint(), &vm.get_authority(), &owner, vm.get_lock_duration(), ); if args.virtual_timelock_bump != timelock_bump { return Err(ProgramError::InvalidArgument); } let (unlock_address, unlock_bump) = pdas::find_unlock_address( &owner, &timelock_address, vm_info.key); if args.unlock_pda_bump != unlock_bump { return Err(ProgramError::InvalidArgument); } // We could technically require the user to provide the withdraw_bump, // however, that would make using this instruction more cumbersome since the Expand Down // nonce value is determined above. let (_, withdraw_bump) = pdas::find_withdraw_receipt_address( // This call *can* be expensive &unlock_address, &nonce, vm_info.key); let vta = VirtualTimelockAccount { owner, instance: nonce, bump: args.virtual_timelock_bump, token_bump: args.virtual_vault_bump, unlock_bump: args.unlock_pda_bump, withdraw_bump, balance: 0, }; let va = VirtualAccount::Timelock(vta); try_write(vm_memory_info, args.account_index, &va)?; vm.advance_poh(CodeInstruction::InitTimelockIx, accounts, data); Ok(()) }",High,Validate that the provided bumps match the canonical bumps.,https://github.com/code-payments/code-vm/pull/13/files,High
Sol-177,"Improper Handling of Empty Items In Circular Buffer. CircularBuffer::contains checks whether a specific item exists within the buffer. However, it does not ignore empty items when checking for a given item. In the context of this CircularBuffer, empty items are represented as arrays filled with default values ( [0; M] ). These empty slots may skew the behavior of contains if they are not properly handled. Without ignoring empty items, the search may incorrectly match these slots and return a false positive. This is especially problematic when an item (such as [0; M] ) is used to represent an empty state in the buffer but is mistakenly treated as a valid entry.","use bytemuck::{Pod, Zeroable}; #[repr(C, align(8))] #[derive(Clone, Copy, PartialEq, Debug)] pub struct CircularBuffer<const N: usize, const M: usize> { pub items: [[u8; M]; N], pub offset: u8, pub num_items: u8, _padding: [u8; 6], } unsafe impl <const N: usize, const M: usize> Zeroable for CircularBuffer<N, M> {} unsafe impl <const N: usize, const M: usize> Pod for CircularBuffer<N, M> {} impl<const N: usize, const M: usize> CircularBuffer<N, M> { pub fn new() -> Self { Self { items: [[0; M]; N], offset: 0, num_items: 0, _padding: [0; 6], } } pub const fn capacity(&self) -> usize { N } pub fn is_empty(&self) -> bool { self.num_items == 0 } pub fn find_index(&self, item: &[u8]) -> Option<usize> { self.items.iter().position(|x| x.eq(item)) } pub fn contains(&self, item: &[u8]) -> bool { Expand Down Expand Up @@ -79,13 +85,11 @@ impl<const N: usize, const M: usize> CircularBuffer<N, M> { self.find_index(item).is_some() } pub fn push(&mut self, item: &[u8]) { // Note: item.len() might be less than M, so we need to copy up to // the length of the item and zero out the rest let mut buffer = [0; M]; buffer[..item.len()].copy_from_slice(item); if self.num_items < N as u8 { self.items[self.num_items as usize] = buffer; self.num_items += 1; } else { self.items[self.offset as usize] = buffer; self.offset = (self.offset + 1) % N as u8; } } pub fn unroll(&self) -> Vec<[u8; M]> { let mut list = Vec::new(); for i in 0..self.num_items { list.push(self.items[(self.offset as usize + i as usize) % N]); } list } pub fn first(&self) -> Option<&[u8; M]> { if self.is_empty() { return None; } Some(&self.items[self.offset as usize]) } pub fn last(&self) -> Option<&[u8; M]> { if self.is_empty() { return None; } let index = if self.num_items < N as u8 { self.num_items as u8 - 1 } else { if self.offset == 0 { N as u8 - 1 } else { self.offset - 1 } }; Some(&self.items[index as usize]) Expand Down Expand Up @@ -257,4 +261,28 @@ mod tests { } pub fn get(&self, index: usize) -> Option<&[u8; M]> { if index < self.num_items as usize { let actual_index = ( self.offset as usize + index ) % N as usize; Some(&self.items[actual_index]) } else { None } } }","use bytemuck::{Pod, Zeroable}; #[repr(C, align(8))] #[derive(Clone, Copy, PartialEq, Debug)] pub struct CircularBuffer<const N: usize, const M: usize> { pub items: [[u8; M]; N], pub offset: u8, pub num_items: u8, _padding: [u8; 6], } unsafe impl <const N: usize, const M: usize> Zeroable for CircularBuffer<N, M> {} unsafe impl <const N: usize, const M: usize> Pod for CircularBuffer<N, M> {} impl<const N: usize, const M: usize> CircularBuffer<N, M> { pub fn new() -> Self { Self { items: [[0; M]; N], offset: 0, num_items: 0, _padding: [0; 6], } } pub const fn capacity(&self) -> usize { N } pub fn is_empty(&self) -> bool { self.num_items == 0 } pub fn find_index(&self, item: &[u8]) -> Option<usize> { for i in 0..self.num_items as usize { let idx = (self.offset as usize + i) % N; if self.items[idx] == item { return Some(i); } } None } pub fn contains(&self, item: &[u8]) -> bool { Expand Down Expand Up @@ -79,13 +85,11 @@ impl<const N: usize, const M: usize> CircularBuffer<N, M> { self.find_index(item).is_some() } pub fn push(&mut self, item: &[u8]) { // Note: item.len() might be less than M, so we need to copy up to // the length of the item and zero out the rest let mut buffer = [0; M]; buffer[..item.len()].copy_from_slice(item); if self.num_items < N as u8 { self.items[self.num_items as usize] = buffer; self.num_items += 1; } else { self.items[self.offset as usize] = buffer; self.offset = (self.offset + 1) % N as u8; } } pub fn unroll(&self) -> Vec<[u8; M]> { let mut list = Vec::new(); for i in 0..self.num_items { list.push(self.items[(self.offset as usize + i as usize) % N]); } list } pub fn first(&self) -> Option<&[u8; M]> { if self.is_empty() { return None; } Some(&self.items[self.offset as usize]) } pub fn last(&self) -> Option<&[u8; M]> { if self.is_empty() { return None; } let index = if self.num_items < N as u8 { self.num_items - 1 } else if self.offset == 0 { N as u8 - 1 } else { self.offset - 1 }; Some(&self.items[index as usize]) Expand Down Expand Up @@ -257,4 +261,28 @@ mod tests { } pub fn get(&self, index: usize) -> Option<&[u8; M]> { if index < self.num_items as usize { let actual_index = ( self.offset as usize + index ) % N as usize; Some(&self.items[actual_index]) } else { None } } }",High,"Modify the the function to exclude empty items when performing the search, ensuring that only non-empty, valid items are considered in the check.",https://github.com/code-payments/code-vm/pull/14/files,High
Sol-178,"Misaligned Memory Access. In the current implementation, function arguments are referenced with their type values without ensuring proper memory alignment, and the structures utilize #[repr(C, packed)] , preventing the compiler from inserting padding for alignment. This creates misaligned references during argument parsing in most functions, resulting in undefined behavior.","#[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitVmIx { pub lock_duration: u8, pub vm_bump: u8, pub vm_omnibus_bump: u8, } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitMemoryIx { pub name: [u8; MAX_NAME_LEN], pub num_accounts: u32, pub account_size: u16, pub vm_memory_bump: u8, } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct ResizeMemoryIx { pub account_size: u32, } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitStorageIx { pub name: [u8; MAX_NAME_LEN], pub vm_storage_bump: u8, } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct ExecIx { // Dynamically sized data, not supported by Pod (or steel) @@ -111,29 +160,95 @@ pub struct ExecIxData { pub data: Vec<u8>, } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitNonceIx { pub account_index: u16, } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitTimelockIx { pub account_index: u16, pub virtual_timelock_bump: u8, pub virtual_vault_bump: u8, pub unlock_pda_bump: u8, } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct CompressIx { pub account_index: u16, pub signature: Signature, } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct DecompressIx { // Dynamically sized data, not supported by Pod (or steel) @@ -164,39 +279,62 @@ pub struct DecompressIxData { pub signature: Signature, } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitRelayIx { pub name: [u8; MAX_NAME_LEN], pub relay_bump: u8, pub relay_vault_bump: u8, } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct SnapshotIx { // SaveRecentRoot } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct DepositIx { pub account_index: u16, pub amount: u64, pub bump: u8, } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitUnlockIx { } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct UnlockIx { } #[repr(C, packed)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct WithdrawIx { _data: PhantomData<WithdrawIxData>, }","#[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitVmIx { pub lock_duration: u8, pub vm_bump: u8, pub vm_omnibus_bump: u8, } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitMemoryIx { pub name: [u8; MAX_NAME_LEN], pub num_accounts: [u8; 4], // Pack u32 as [u8; 4] pub account_size: [u8; 2], // Pack u16 as [u8; 2] pub vm_memory_bump: u8, } impl InitMemoryIx { /// Converts the byte arrays to their respective data types. pub fn to_struct(&self) -> Result<ParsedInitMemoryIx, std::io::Error> { Ok(ParsedInitMemoryIx { name: self.name, num_accounts: u32::from_le_bytes(self.num_accounts), account_size: u16::from_le_bytes(self.account_size), vm_memory_bump: self.vm_memory_bump, }) } /// Creates `InitMemoryIx` from the parsed struct by converting data types back to byte arrays. pub fn from_struct(parsed: ParsedInitMemoryIx) -> Self { InitMemoryIx { name: parsed.name, num_accounts: parsed.num_accounts.to_le_bytes(), account_size: parsed.account_size.to_le_bytes(), vm_memory_bump: parsed.vm_memory_bump, } } } pub struct ParsedInitMemoryIx { pub name: [u8; MAX_NAME_LEN], pub num_accounts: u32, pub account_size: u16, pub vm_memory_bump: u8, } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct ResizeMemoryIx { pub account_size: [u8; 4], // Pack u32 as [u8; 4] } impl ResizeMemoryIx { /// Converts the byte array to u32. pub fn to_struct(&self) -> Result<ParsedResizeMemoryIx, std::io::Error> { Ok(ParsedResizeMemoryIx { account_size: u32::from_le_bytes(self.account_size), }) } /// Creates `ResizeMemoryIx` from the parsed struct by converting u32 to byte array. pub fn from_struct(parsed: ParsedResizeMemoryIx) -> Self { ResizeMemoryIx { account_size: parsed.account_size.to_le_bytes(), } } } pub struct ParsedResizeMemoryIx { pub account_size: u32, } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitStorageIx { pub name: [u8; MAX_NAME_LEN], pub vm_storage_bump: u8, } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct ExecIx { // Dynamically sized data, not supported by Pod (or steel) @@ -111,29 +160,95 @@ pub struct ExecIxData { pub data: Vec<u8>, } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitNonceIx { pub account_index: [u8; 2], // Pack u16 as [u8; 2] } impl InitNonceIx { pub fn to_struct(&self) -> Result<ParsedInitNonceIx, std::io::Error> { Ok(ParsedInitNonceIx { account_index: u16::from_le_bytes(self.account_index), }) } pub fn from_struct(parsed: ParsedInitNonceIx) -> Self { InitNonceIx { account_index: parsed.account_index.to_le_bytes(), } } } pub struct ParsedInitNonceIx { pub account_index: u16, } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitTimelockIx { pub account_index: [u8; 2], // Pack u16 as [u8; 2] pub virtual_timelock_bump: u8, pub virtual_vault_bump: u8, pub unlock_pda_bump: u8, } impl InitTimelockIx { pub fn to_struct(&self) -> Result<ParsedInitTimelockIx, std::io::Error> { Ok(ParsedInitTimelockIx { account_index: u16::from_le_bytes(self.account_index), virtual_timelock_bump: self.virtual_timelock_bump, virtual_vault_bump: self.virtual_vault_bump, unlock_pda_bump: self.unlock_pda_bump, }) } pub fn from_struct(parsed: ParsedInitTimelockIx) -> Self { InitTimelockIx { account_index: parsed.account_index.to_le_bytes(), virtual_timelock_bump: parsed.virtual_timelock_bump, virtual_vault_bump: parsed.virtual_vault_bump, unlock_pda_bump: parsed.unlock_pda_bump, } } } pub struct ParsedInitTimelockIx { pub account_index: u16, pub virtual_timelock_bump: u8, pub virtual_vault_bump: u8, pub unlock_pda_bump: u8, } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct CompressIx { pub account_index: [u8; 2], // Pack u16 as [u8; 2] pub signature: Signature, } impl CompressIx { pub fn to_struct(&self) -> Result<ParsedCompressIx, std::io::Error> { Ok(ParsedCompressIx { account_index: u16::from_le_bytes(self.account_index), signature: self.signature, }) } pub fn from_struct(parsed: ParsedCompressIx) -> Self { CompressIx { account_index: parsed.account_index.to_le_bytes(), signature: parsed.signature, } } } pub struct ParsedCompressIx { pub account_index: u16, pub signature: Signature, } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct DecompressIx { // Dynamically sized data, not supported by Pod (or steel) @@ -164,39 +279,62 @@ pub struct DecompressIxData { pub signature: Signature, } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitRelayIx { pub name: [u8; MAX_NAME_LEN], pub relay_bump: u8, pub relay_vault_bump: u8, } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct SnapshotIx { // SaveRecentRoot } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct DepositIx { pub account_index: [u8; 2], // Pack u16 as [u8; 2] pub amount: [u8; 8], // Pack u64 as [u8; 8] pub bump: u8, } impl DepositIx { pub fn to_struct(&self) -> Result<ParsedDepositIx, std::io::Error> { Ok(ParsedDepositIx { account_index: u16::from_le_bytes(self.account_index), amount: u64::from_le_bytes(self.amount), bump: self.bump, }) } pub fn from_struct(parsed: ParsedDepositIx) -> Self { DepositIx { account_index: parsed.account_index.to_le_bytes(), amount: parsed.amount.to_le_bytes(), bump: parsed.bump, } } } pub struct ParsedDepositIx { pub account_index: u16, pub amount: u64, pub bump: u8, } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct InitUnlockIx { } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct UnlockIx { } #[repr(C)] #[derive(Clone, Copy, Debug, Pod, Zeroable)] pub struct WithdrawIx { _data: PhantomData<WithdrawIxData>, }",Medium,"Store the types as a byte array ( u64 may be stored as [u8; 8] as demonstrated in ore) and manually convert (as done here) when needed, ensuring proper alignment.",https://github.com/code-payments/code-vm/pull/6/files#diff-46924424ca1f5ec8adfa2434f9b95a650e9d3dfe2fc6060c9d7d7470f6528d73,High
Sol-179,"Overflow checks are currently not enabled in release mode. Consequently, there is a possibility for integer overflow in the context of the SliceAllocator , specifically if a MemoryAccount is initialized with account_size=u16::MAX and num_accounts=u32::MAX . When calculating the total memory required for these accounts by multiplying account_size by num_accounts , the subsequent product may be extremely high resulting in an overflow.","pub const MAX_NAME_LEN: usize = 32; pub const NUM_ACCOUNTS: usize = 32_000; pub const COMPRESSED_STATE_DEPTH: usize = 20; pub const RELAY_STATE_DEPTH: usize = 63; pub const RELAY_HISTORY_ITEMS: usize = 32; Instruction data: 0. name: [u8; 32] - The name of this memory module. 1. num_accounts: u32 - The number of accounts that can be stored in this memory module. 2. account_size: u16 - The size of each account in this memory module. 3. vm_memory_bump: u8 - The bump seed for the this memory account. */ pub fn process_init_memory(accounts: &[AccountInfo<'_>], data: &[u8]) -> ProgramResult { let args = InitMemoryIx::try_from_bytes(data)?.to_struct()?; let [ vm_authority_info, vm_info, vm_memory_info, system_program_info, rent_sysvar_info ] = accounts else { return Err(ProgramError::NotEnoughAccountKeys); }; check_signer(vm_authority_info)?; check_mut(vm_info)?; check_mut(vm_memory_info)?; pub fn process_resize(accounts: &[AccountInfo<'_>], data: &[u8]) -> ProgramResult { let args = ResizeMemoryIx::try_from_bytes(data)?.to_struct()?; let [ vm_authority_info, vm_info, vm_memory_info, system_program_info, rent_sysvar_info ] = accounts else { return Err(ProgramError::NotEnoughAccountKeys); }; check_condition( args.account_size as usize > MemoryAccount::get_size(), ""account_size must be greater than the base size of a memory account"", )?; check_signer(vm_authority_info)?; check_mut(vm_info)?; check_mut(vm_memory_info)?;","pub const MAX_NAME_LEN: usize = 32; pub const NUM_ACCOUNTS: usize = 32_000; // Some (reasonable) virtual account limits without being perscriptive pub const MIN_ACCOUNT_SIZE: usize = 32; pub const MAX_ACCOUNT_SIZE: usize = 256; pub const MAX_NUM_ACCOUNTS: usize = 320_000; pub const COMPRESSED_STATE_DEPTH: usize = 20; pub const RELAY_STATE_DEPTH: usize = 63; pub const RELAY_HISTORY_ITEMS: usize = 32; Instruction data: 0. name: [u8; 32] - The name of this memory module. 1. num_accounts: u32 - The number of accounts that can be stored in this memory module. 2. account_size: u16 - The size of each account in this memory module. 3. vm_memory_bump: u8 - The bump seed for the this memory account. */ pub fn process_init_memory(accounts: &[AccountInfo<'_>], data: &[u8]) -> ProgramResult { let args = InitMemoryIx::try_from_bytes(data)?.to_struct()?; let [ vm_authority_info, vm_info, vm_memory_info, system_program_info, rent_sysvar_info ] = accounts else { return Err(ProgramError::NotEnoughAccountKeys); }; check_condition( args.account_size as usize >= MIN_ACCOUNT_SIZE && args.account_size as usize <= MAX_ACCOUNT_SIZE, ""account_size must be between MIN_ACCOUNT_SIZE and MAX_ACCOUNT_SIZE"", )?; check_condition( args.num_accounts as usize <= MAX_NUM_ACCOUNTS, ""num_accounts must be less than MAX_NUM_ACCOUNTS"", )?; check_signer(vm_authority_info)?; check_mut(vm_info)?; check_mut(vm_memory_info)?; Instruction data: 0. len: u32 - The new size of the vm_memory account. */ pub fn process_resize(accounts: &[AccountInfo<'_>], data: &[u8]) -> ProgramResult { let args = ResizeMemoryIx::try_from_bytes(data)?.to_struct()?; let [ vm_authority_info, vm_info, vm_memory_info, system_program_info, rent_sysvar_info ] = accounts else { return Err(ProgramError::NotEnoughAccountKeys); }; check_condition( args.account_size as usize > MemoryAccount::get_size(), ""account_size must be greater than the base size of a memory account"", )?; check_condition( args.account_size as usize <= MAX_ACCOUNT_SIZE * MAX_NUM_ACCOUNTS, ""account_size must be less than or equal to the maximum size for this type of memory account"", )?; check_signer(vm_authority_info)?; check_mut(vm_info)?; check_mut(vm_memory_info)?;",Medium,Enable overflow checks and properly sanitize parameters such as account_size and num_accounts .,https://github.com/code-payments/code-vm/pull/18/files,High
Sol-180,"Merkle Tree Proof Length Not Verified. When performing a Merkle proof to verify the existence of specific data within the tree, a proof vector (collection of hashes) is provided to the verification function. This proof must correspond to the correct level of the tree. To ensure validity, the verification function should confirm that the proof vector length matches the tree depth. Without this check, invalid proofs may verify intermediate nodes instead of leaves. However, in the current implementation, this issue is mitigated because the compress / decompress methods construct the leaves in a manner that prevents intermediate hashes in the proof from matching the compressed data.","pub fn try_remove(&mut self, proof: &[Hash], val: Hash) -> ProgramResult { self.try_replace_leaf(proof, Self::as_leaf(val), self.get_empty_leaf()) } pub fn try_replace(&mut self, proof: &[Hash], original_val: Hash, new_val: Hash) -> ProgramResult { let original_leaf = Self::as_leaf(original_val); let new_leaf = Self::as_leaf(new_val); self.try_replace_leaf(proof, original_leaf, new_leaf) } pub fn try_replace_leaf(&mut self, proof: &[Hash], original_leaf: Hash, new_leaf: Hash) -> ProgramResult { let original_path = MerkleTree::<N>::compute_path(proof, original_leaf); let new_path = MerkleTree::<N>::compute_path(proof, new_leaf); @@ -128,11 +134,19 @@ impl<const N: usize> MerkleTree<N> { } pub fn contains(&self, proof: &[Hash], val: Hash) -> bool { let leaf = Self::as_leaf(val); self.contains_leaf(proof, leaf) } pub fn contains_leaf(&self, proof: &[Hash], leaf: Hash) -> bool { let root = self.get_root(); Self::is_valid_leaf(proof, root, leaf) } @@ -233,8 +247,14 @@ impl<const N: usize> MerkleTree<N> { proof } }","pub fn try_remove(&mut self, proof: &[Hash], val: Hash) -> ProgramResult { self.check_length(proof)?; self.try_replace_leaf(proof, Self::as_leaf(val), self.get_empty_leaf()) } pub fn try_replace(&mut self, proof: &[Hash], original_val: Hash, new_val: Hash) -> ProgramResult { self.check_length(proof)?; let original_leaf = Self::as_leaf(original_val); let new_leaf = Self::as_leaf(new_val); self.try_replace_leaf(proof, original_leaf, new_leaf) } pub fn try_replace_leaf(&mut self, proof: &[Hash], original_leaf: Hash, new_leaf: Hash) -> ProgramResult { self.check_length(proof)?; let original_path = MerkleTree::<N>::compute_path(proof, original_leaf); let new_path = MerkleTree::<N>::compute_path(proof, new_leaf); @@ -128,11 +134,19 @@ impl<const N: usize> MerkleTree<N> { } pub fn contains(&self, proof: &[Hash], val: Hash) -> bool { if let Err(_) = self.check_length(proof) { return false; } let leaf = Self::as_leaf(val); self.contains_leaf(proof, leaf) } pub fn contains_leaf(&self, proof: &[Hash], leaf: Hash) -> bool { if let Err(_) = self.check_length(proof) { return false; } let root = self.get_root(); Self::is_valid_leaf(proof, root, leaf) } @@ -233,8 +247,14 @@ impl<const N: usize> MerkleTree<N> { proof } fn check_length(&self, proof: &[Hash]) -> Result<(), ProgramError> { check_condition( proof.len() == N, ""merkle proof length does not match tree depth"", ) } }",Low,Verify the proof length against the tree depth to ensure correctness.,https://github.com/code-payments/code-vm/pull/7/files,High
Sol-181,"Sequence Misalignment in Allocations Array . There is a sequence mismatch between the vault_allocation_strategy and invested.allocations arrays in amounts_invested . vault_allocation_strategy represents the vault’s target allocation strategy and contains all allocations, including active and inactive ones (inactive entries have Pubkey::default as the reserve key). invested.allocations , on the other hand, reflects the current state of investments in the vault. Since amounts_invested filters out inactive entries from vault_allocation_strategy while building invested.allocations , it includes only active entries, without placeholders for inactive ones. As a result, the indices of the reserves in invested.allocations no longer align with their corresponding indices in vault_allocation_strategy . However, in invest , when refresh_target_allocations is invoked, it relies on accurate alignment between vault_allocation_strategy and invested.allocations to determine which reserves are part of the allocation strategy and calculate the actual from target allocations for each reserve. Consequently, due to the mismatch in index sequences between vault_allocation_strategy and invested.allocations , the operations in refresh_target_allocations will not succeed, causing invest to fail.","pub fn amounts_invested<'info, T>( vault: &VaultState, mut reserves_iter: impl Iterator<Item = T>, slot: Slot, ) -> Result<Invested> where T: AnyAccountLoader<'info, Reserve>, { let mut invested = Invested::default(); let mut total = Fraction::ZERO; for (index, allocation) in vault .vault_allocation_strategy .iter() .filter(|a| a.reserve != Pubkey::default()) .enumerate() { [...] } invested.total = total; Ok(invested) }","pub fn amounts_invested<'info, T>( vault: &VaultState, mut reserves_iter: impl Iterator<Item = T>, slot: Slot, ) -> Result<Invested> where T: AnyAccountLoader<'info, Reserve>, { let mut invested = Invested::default(); let mut total = Fraction::ZERO; for allocation in vault.vault_allocation_strategy.iter() { if allocation.reserve == Pubkey::default() { // Include placeholders for inactive entries invested.allocations.push(None); } else { // Process active allocations let reserve = reserves_iter.next().ok_or(ProgramError::InvalidArgument)?; let amount = compute_invested_amount(reserve, slot)?; total += amount; invested.allocations.push(Some(amount)); } } invested.total = total; Ok(invested) }",High,Preserve the original sequence of vault_allocation_strategy in invested.allocations by including placeholders in invested.allocations for inactive entries.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/2e0c3c98-3ba4-45a5-9c04-8c6d4dbbb51a/kamino_kvault_audit_final.pdf?table=block&id=1ad84d4e-4146-80d3-9227-c07e16b89009&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742522400000&signature=60z2ZURdyP9KSn9A3_OuVX-NAqTi3QaCkJtXHai05i0&downloadName=kamino_kvault_audit_final.pdf,High
Sol-182,"Improper Enforcement of Allocation Cap. In the current implementation of state::refresh_target_allocations , there is a potential issue where the token_target_allocation of a reserve may exceed its token_allocation_cap . This occurs because the allocation logic does not account for the existing allocation token_target_allocation when determining whether the ideal allocation reserve_target_ideal exceeds the cap. The reserve_target_ideal >= Fraction::from(allocation.token_allocation_cap) comparison checks only if the current iteration’s ideal allocation exceeds the cap, ignoring any previously accumulated allocation ( token_target_allocation ). If the token_target_allocation from previous iterations already brings the total close to the cap, the function may allocate additional tokens beyond the cap.","pub fn refresh_target_allocations(&mut self, invested: &Invested) -> Result<()> { [...] let reserve_target_capped = if reserve_target_ideal >= Fraction::from(allocation.token_allocation_cap) { a_cap_was_reached = true; // Remove the weight from the total remaining_weight_to_allocate -= reserve_weight; Fraction::from(allocation.token_allocation_cap) } else { reserve_target_ideal }; remaining_tokens_to_allocate -= reserve_target_capped; *token_target_allocation += reserve_target_capped; [...] }","pub fn refresh_target_allocations(&mut self, invested: &Invested) -> Result<()> { // ... previous code let current_allocated = *token_target_allocation; let reserve_target_capped = if current_allocated + reserve_target_ideal >= Fraction::from(allocation.token_allocation_cap) { a_cap_was_reached = true; // Adjust the remaining weight since this reserve hits its cap remaining_weight_to_allocate -= reserve_weight; // Only allocate the remaining available tokens Fraction::from(allocation.token_allocation_cap) - current_allocated } else { reserve_target_ideal }; remaining_tokens_to_allocate -= reserve_target_capped; *token_target_allocation += reserve_target_capped; // ... subsequent code }",Medium,"Check that the sum of token_target_allocation + reserve_target_ideal is greater than or equal to token_allocation_cap , and then set reserve_target_capped to token_allocation_cap - token_target_allocation .",https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/2e0c3c98-3ba4-45a5-9c04-8c6d4dbbb51a/kamino_kvault_audit_final.pdf?table=block&id=1ad84d4e-4146-80d3-9227-c07e16b89009&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742522400000&signature=60z2ZURdyP9KSn9A3_OuVX-NAqTi3QaCkJtXHai05i0&downloadName=kamino_kvault_audit_final.pdf,High
Sol-183,"There is a lack of validation for the Switchboard price in refresh_oracle_price::load_switchboard . While it retrieves and parses data from the feed_account to extract the price, it does not verify the associated timestamp. This omission may result in the system accepting outdated prices if the oracle feed has not been updated for an extended period. There is no guarantee that the price corresponds to the current market state or a recent update. A recency check ensures that the price data fetched from the oracle is current and reflects the latest market conditions. A stale oracle price may result in inaccurate calculations of asset values, allowing the possibility of exploiting the system by utilizing old prices for arbitrage attacks.","fn load_switchboard<'a>(oracle_switchboard: &AccountInfo<'a>) -> Result<Decimal> { let feed_account = oracle_switchboard.data.borrow(); let feed = PullFeedAccountData::parse(feed_account).unwrap(); msg!(""Switchboard unpack start""); let price = feed.value().unwrap(); Ok(price) }","fn load_switchboard<'a>(oracle_switchboard: &AccountInfo<'a>, current_timestamp: u64) -> Result<Decimal> { let feed_account = oracle_switchboard.data.borrow(); let feed = PullFeedAccountData::parse(feed_account).unwrap(); msg!(""Switchboard unpack start""); // Example: Extract timestamp from feed (assuming feed.timestamp() returns u64) let price_timestamp = feed.timestamp().unwrap(); // Define an acceptable threshold for staleness (e.g., 60 seconds) let allowed_threshold: u64 = 60; if current_timestamp.saturating_sub(price_timestamp) > allowed_threshold { msg!(""Error: Oracle price is stale.""); return Err(ErrorCode::StaleOraclePrice.into()); } let price = feed.value().unwrap(); Ok(price) }",High,"Modify load_switchboard to verify that the price fetched from the oracle is recent. If the price is outdated, the function should fail gracefully with a specific error, preventing the protocol from using invalid data.",https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/5ba78692-e48a-491f-8d84-30321e9b55d4/neptune_audit_final.pdf?table=block&id=17484d4e-4146-80ed-b006-cb827d75f945&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742522400000&signature=fxN15QlEXvjbatfhVS9myZ8svNOOcKswaC1y3_qS2Dc&downloadName=neptune_audit_final.pdf,High
Sol-184,"Flawed Logic in case of Shared Escrow. The vulnerability in pool::try_autoclose_pool lies in the logic for handling PoolType::Token . Specifically, the function checks the pool.amount field to decide whether the pool has enough SOL to purchase another NFT, but it does not account for the case where a shared_escrow is configured. The logic assumes if pool.currency == Pubkey::default , it indicates the pool utilizes SOL (not a token). pool.amount represents the SOL available in the pool. The pool should be closed if pool.amount is less than the price needed to purchase another NFT.","/// A utitilty function that tries to autoclose a pool if it is possible. pub fn try_autoclose_pool<'info>( pool: &Account<'info, Pool>, rent_payer: AccountInfo<'info>, owner: AccountInfo<'info>, ) -> Result<()> { match pool.config.pool_type { PoolType::Trade => (), // Cannot be auto-closed PoolType::Token => { // Not enough SOL to purchase another NFT, so we can close the pool. if pool.currency == Pubkey::default() && pool.amount < pool.current_price(TakerSide::Sell)? { close_pool(pool, rent_payer, owner)?; } } Expand Down PoolType::NFT => { // No more NFTs to sell, so we can close the pool. if pool.nfts_held == 0 { close_pool(pool, rent_payer, owner)?; } } } Ok(()) }","/// A utitilty function that tries to autoclose a pool if it is possible. pub fn try_autoclose_pool<'info>( pool: &Account<'info, Pool>, rent_payer: AccountInfo<'info>, owner: AccountInfo<'info>, shared_escrow: Option<&AccountInfo<'info>>, ) -> Result<()> { match pool.config.pool_type { PoolType::Trade => (), // Cannot be auto-closed PoolType::Token => { let amount = if pool.shared_escrow == Pubkey::default() { pool.amount } else { shared_escrow.unwrap().lamports() }; // Not enough SOL to purchase another NFT, so we can close the pool. if pool.currency == Pubkey::default() && amount < pool.current_price(TakerSide::Sell)? { close_pool(pool, rent_payer, owner)?; } } Expand Down PoolType::NFT => { // No more NFTs to sell, so we can close the pool. if pool.nfts_held == 0 { close_pool(pool, rent_payer, owner)?; } } } Ok(()) }",High,Check if shared_escrow == pubkey::default and in that case utilize the pool.amount directly.,https://github.com/tensor-foundation/amm/pull/94/files,High
Sol-185,"Ineffective Shared Escrow Validation . In CreatePool , the shared_escrow field is constrained with the following check: pool.config.pool_type != NFT . This constraint is intended to ensure that a pool using shared escrow cannot have a PoolType::NFT configuration. However, the pool account is not yet initialized when this constraint is checked and pool.config.pool_type does not contain any meaningful data. Thus, any constraint referencing pool.config.pool_type before initialization is ineffective.","/// Instruction accounts. #[derive(Accounts)] #[instruction(args: CreatePoolArgs)] pub struct CreatePool<'info> { /// The account that pays for the rent to open the pool. This will be stored on the pool /// so it can be refunded when the pool is closed. #[account(mut)] pub rent_payer: Signer<'info>, /// The owner of the pool will be stored and used to control permissioned pool instructions. pub owner: Signer<'info>, /// The pool state account. #[account( init, payer = rent_payer, space = Pool::SIZE, seeds = [ b""pool"", owner.key().as_ref(), args.pool_id.as_ref(), ], bump, )] pub pool: Box<Account<'info, Pool>>, /// The whitelist that gatekeeps which NFTs can be bought or sold with this pool. #[account( seeds = [b""whitelist"", &whitelist.namespace.as_ref(), &whitelist.uuid], bump, seeds::program = whitelist_program::ID )] pub whitelist: Box<Account<'info, WhitelistV2>>, #[account( has_one = owner @ ErrorCode::WrongOwner, constraint = pool.config.pool_type != PoolType::NFT @ ErrorCode::CannotUseSharedEscrow, )] pub shared_escrow: Option<Account<'info, MarginAccount>>, /// The Solana system program. pub system_program: Program<'info, System>, }","/// Instruction accounts. #[derive(Accounts)] #[instruction(args: CreatePoolArgs)] pub struct CreatePool<'info> { /// The account that pays for the rent to open the pool. This will be stored on the pool /// so it can be refunded when the pool is closed. #[account(mut)] pub rent_payer: Signer<'info>, /// The owner of the pool will be stored and used to control permissioned pool instructions. pub owner: Signer<'info>, /// The pool state account. #[account( init, payer = rent_payer, space = Pool::SIZE, seeds = [ b""pool"", owner.key().as_ref(), args.pool_id.as_ref(), ], bump, )] pub pool: Box<Account<'info, Pool>>, /// The whitelist that gatekeeps which NFTs can be bought or sold with this pool. #[account( seeds = [b""whitelist"", &whitelist.namespace.as_ref(), &whitelist.uuid], bump, seeds::program = whitelist_program::ID )] pub whitelist: Box<Account<'info, WhitelistV2>>, #[account( has_one = owner @ ErrorCode::WrongOwner, constraint = args.config.pool_type != PoolType::NFT @ ErrorCode::CannotUseSharedEscrow, )] pub shared_escrow: Option<Account<'info, MarginAccount>>, /// The Solana system program. pub system_program: Program<'info, System>, }",Medium,Apply this constraint to the incoming arguments ( args.config.pool_type ) instead of the uninitialized pool.config.pool_type .,https://github.com/tensor-foundation/amm/commit/87ad4a70bcbcbec2ea0443ec5bbe2fb680aa9574#diff-94e6998cd6c2e0f422b4f57f96da650b1ac8527f5b036f3e8d50c3c00c96633d,High
Sol-186,"Missing Account Authenticity Checks. In shared_accounts within the MplxShared structure, the metadata and edition accounts are essential to validate an NFT’s properties, such as its uniqueness and associated data. The vulnerability concerns the lack of seed checks to verify the existence of the metadata and edition for the provided mint. Additionally, in the transfer functionality, only the metadata is verified, and the master_edition is not utilized for the non-pNFT case. Thus, the master_edition account is not utilized or checked in the non-pNFT case. This is crucial because without verifying the existence of the master edition, there is no confirmation that the mint is truly non-fungible.","#[derive(Accounts)] pub struct MplxShared<'info> { /// The mint account of the NFT. pub mint: Box<InterfaceAccount<'info, Mint>>, /// The Token Metadata metadata account of the NFT. /// CHECK: ownership, structure and mint are checked in assert_decode_metadata. #[account(mut)] pub metadata: UncheckedAccount<'info>, // --------------------------------------- pNft /// The Token Metadata edition account of the NFT. /// CHECK: seeds checked on Token Metadata CPI //note that MASTER EDITION and EDITION share the same seeds, and so it's valid to check them here pub edition: UncheckedAccount<'info>, /// The Token Metadata source token record account of the NFT. /// CHECK: seeds checked on Token Metadata CPI #[account(mut)] Expand Down Expand Up @@ -629,6 +652,20 @@ impl<'info> ValidateAsset<'info> for T22Shared<'info> { pub user_token_record: Option<UncheckedAccount<'info>>, /// The Token Metadata token record for the destination. /// CHECK: seeds checked on Token Metadata CPI #[account(mut)] pub pool_token_record: Option<UncheckedAccount<'info>>, /// The Token Metadata program account. /// CHECK: address constraint is checked here #[account(address = mpl_token_metadata::ID)] pub token_metadata_program: Option<UncheckedAccount<'info>>, /// The sysvar instructions account. /// CHECK: address constraint is checked here #[account(address = anchor_lang::solana_program::sysvar::instructions::ID)] pub sysvar_instructions: Option<UncheckedAccount<'info>>, /// The Metaplex Token Authority Rules account that stores royalty enforcement rules. /// CHECK: validated by mplex's pnft code pub authorization_rules: Option<UncheckedAccount<'info>>, /// The Metaplex Token Authority Rules program account. /// CHECK: address constraint is checked here #[account(address = MPL_TOKEN_AUTH_RULES_ID)] pub authorization_rules_program: Option<UncheckedAccount<'info>>, }","/* Shared account structs for different standards */ /// Shared accounts for interacting with Metaplex legacy and pNFTs. #[derive(Accounts)] pub struct MplxShared<'info> { /// The mint account of the NFT. pub mint: Box<InterfaceAccount<'info, Mint>>, /// The Token Metadata metadata account of the NFT. /// CHECK: ownership, structure and mint are checked in assert_decode_metadata, seeds checked here. #[account(mut, seeds = [ Metadata::PREFIX, mpl_token_metadata::ID.as_ref(), mint.key().as_ref(), ], bump, seeds::program = mpl_token_metadata::ID, )] pub metadata: UncheckedAccount<'info>, /// The Token Metadata edition account of the NFT. /// CHECK: seeds checked here #[account( seeds = [ MasterEdition::PREFIX.0, mpl_token_metadata::ID.as_ref(), mint.key().as_ref(), MasterEdition::PREFIX.1, ], bump, seeds::program = mpl_token_metadata::ID, )] pub edition: UncheckedAccount<'info>, // --------------------------------------- pNft /// The Token Metadata source token record account of the NFT. /// CHECK: seeds checked on Token Metadata CPI #[account(mut)] Expand Down Expand Up @@ -629,6 +652,20 @@ impl<'info> ValidateAsset<'info> for T22Shared<'info> { pub user_token_record: Option<UncheckedAccount<'info>>, /// The Token Metadata token record for the destination. /// CHECK: seeds checked on Token Metadata CPI #[account(mut)] pub pool_token_record: Option<UncheckedAccount<'info>>, /// The Token Metadata program account. /// CHECK: address constraint is checked here #[account(address = mpl_token_metadata::ID)] pub token_metadata_program: Option<UncheckedAccount<'info>>, /// The sysvar instructions account. /// CHECK: address constraint is checked here #[account(address = anchor_lang::solana_program::sysvar::instructions::ID)] pub sysvar_instructions: Option<UncheckedAccount<'info>>, /// The Metaplex Token Authority Rules account that stores royalty enforcement rules. /// CHECK: validated by mplex's pnft code pub authorization_rules: Option<UncheckedAccount<'info>>, /// The Metaplex Token Authority Rules program account. /// CHECK: address constraint is checked here #[account(address = MPL_TOKEN_AUTH_RULES_ID)] pub authorization_rules_program: Option<UncheckedAccount<'info>>, }",Medium,"implement PDA (Program Derived Address) and initialization checks to ensure that the metadata , edition , and master_edition accounts are properly validated.",https://github.com/tensor-foundation/amm/pull/94/files#diff-1c09b7e45cff20e6a63576cdc1ce45da7cad5a7dc9a86aed18a1046dad831dea,High
Sol-187,"Improper Rent Calculation. price-lock utilizes token_account.get_lamports to determine the rent instead of calculating the proper rent-exemption reserve. If an attacker ( maker ) deposits a large amount of SOL (more than the rent-exemption reserve) into an account, it may prevent trades from executing. Since the program only expects a minimal amount for rent and does not handle large balances, the excess SOL will block the processing of the trade, rendering the option worthless. For example, the TAmmSellNftTokenPool , get_lamports is utilized to determine the amount of SOL held in order_ta account. If a very large amount of SOL is deposited into the order_ta account, the program will assume this large balance represents the necessary rent to perform operations. The program will fail to execute trades because the logic incorrectly assumes that the large SOL deposit represents the required rent. The return_rent logic tries to return any excess rent from order_ta back to the order_vault . It assumes that all SOL in the order_ta account should be returned. Since the program does not calculate the actual rent exemption correctly, it transfers a large portion of SOL , which includes both the genuine rent and the attacker’s deposit, into the order_vault , resulting in improper SOL transfers and an imbalance in the vault’s holdings. Thus, the option becomes worthless, as no trades may be executed, locking up trade executions.","fn return_rent(&self, order_seeds: [&[&[u8]]; 1]) -> Result<()> { let token_account_rent = self.token.order_ta.get_lamports(); let record_rent = Rent::get()?.minimum_balance(TokenRecord::LEN); // For the token pool, the seller receives everything back. let excess_rent = 2 * token_account_rent + record_rent; self.trade.return_rent_for_sell(excess_rent, order_seeds) }","fn return_rent(&self, order_seeds: [&[&[u8]]; 1]) -> Result<()> { // Calculate the proper rent exemption based on the account's size let order_ta_size = self.token.order_ta.data_len(); let required_rent = Rent::get()?.minimum_balance(order_ta_size); // Get the current balance let current_balance = self.token.order_ta.get_lamports(); // Only consider the excess SOL above the required rent as ""excess"" // Ensure that the account holds at least the minimum required balance if current_balance < required_rent { return Err(ErrorCode::InsufficientRentBalance.into()); } // Calculate the excess rent that should be returned, // without including any funds deposited by an attacker. let excess_rent = current_balance - required_rent; self.trade.return_rent_for_sell(excess_rent, order_seeds) }",Medium,Ensure that the rent exemption reserve is properly calculated utilizing the size of the account instead of its lamports.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/8cad4a72-5d69-4c26-9f6c-a296efd8f011/tensor_foundation_audit_final.pdf?table=block&id=19784d4e-4146-80f1-81d5-f7094dea2280&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742522400000&signature=EJjVlegyav7Jm5YuqzTTQ6ubaOxqvVbDchfA4y5K4CQ&downloadName=tensor_foundation_audit_final.pdf,High
Sol-188,"Absence of Royalty Enforcement. In buy_spl::process_buy_legacy_spl the optional_royalty_pct parameter is currently utilized without verifying whether the royalties are actually enforced based on the metadata.token_standard . optional_royalty_pct is a user-provided parameter specifying the percentage of royalties to be paid to the creators. metadata.token_standard indicates the standard of the token. Some token standards enforce royalties at a protocol level. By directly utilizing optional_royalty_pct , the token standard that requires a specific amount of royalties may receive the incorrect amount if the user-supplied amount is inappropriate.","#[access_control(ctx.accounts.validate())] #[inline(never)] pub fn process_buy_legacy_spl<'info, 'b>( ctx: Context<'_, 'b, '_, 'info, BuyLegacySpl<'info>>, max_amount: u64, optional_royalty_pct: Option<u16>, authorization_data: Option<AuthorizationDataLocal>, ) -> Result<()> { // validate the mint let mint = ctx.accounts.mint.key(); let metadata = assert_decode_metadata(&mint, &ctx.accounts.metadata)?; let list_state = &ctx.accounts.list_state; let remaining_accounts = ctx.remaining_accounts; // Parse remaining accounts. let num_creators = metadata.creators.as_ref().map(Vec::len).unwrap_or(0); let (creator_accounts, remaining) = remaining_accounts.split_at(num_creators); let (creator_ta_accounts, remaining) = remaining.split_at(num_creators); // If broker acounts are present, we need the currency token accounts from them. let (maker_broker_currency_ta, remaining) = if let Some(maker_broker) = &ctx.accounts.maker_broker { let (account, remaining) = remaining .split_first() .ok_or(TcompError::InsufficientRemainingAccounts)?; assert_decode_token_account(&mint, &maker_broker.key(), account)?; (Some(account), remaining) } else { (None, remaining) }; let (taker_broker_currency_ta, _remaining) = if let Some(taker_broker) = &ctx.accounts.taker_broker { let (account, remaining) = remaining .split_first() .ok_or(TcompError::InsufficientRemainingAccounts)?; assert_decode_token_account(&mint, &taker_broker.key(), account)?; (Some(account), remaining) } else { (None, remaining) }; let creator_accounts_with_ta = creator_accounts .iter() .zip(creator_ta_accounts.iter()) .flat_map(|(creator, ata)| vec![creator.to_account_info(), ata.to_account_info()]) .collect::<Vec<_>>(); let amount = list_state.amount; let currency = list_state.currency; require!(amount <= max_amount, TcompError::PriceMismatch); require!(currency.is_some(), TcompError::CurrencyMismatch); let tnsr_discount = matches!(currency, Some(c) if c.to_string() == TNSR_CURRENCY); let Fees { protocol_fee: tcomp_fee, maker_broker_fee, taker_broker_fee, .. } = calc_fees(CalcFeesArgs { amount, tnsr_discount, total_fee_bps: TAKER_FEE_BPS, broker_fee_pct: BROKER_FEE_PCT, maker_broker_pct: MAKER_BROKER_PCT, })?; let creator_fee = calc_creators_fee( metadata.seller_fee_basis_points, amount, optional_royalty_pct, )?; // Transfer the NFT to the buyer transfer( TransferArgs { source: &ctx.accounts.list_state.to_account_info(), payer: &ctx.accounts.payer, source_ata: &ctx.accounts.list_ta, destination_ata: &ctx.accounts.buyer_ta, destination: &ctx.accounts.buyer, mint: ctx.accounts.mint.deref(), metadata: &ctx.accounts.metadata, edition: &ctx.accounts.edition, system_program: &ctx.accounts.system_program, spl_token_program: &ctx.accounts.token_program, spl_ata_program: &ctx.accounts.associated_token_program, sysvar_instructions: ctx.accounts.sysvar_instructions.as_ref(), source_token_record: ctx.accounts.list_token_record.as_ref(), destination_token_record: ctx.accounts.buyer_token_record.as_ref(), authorization_rules_program: ctx.accounts.authorization_rules_program.as_ref(), authorization_rules: ctx.accounts.authorization_rules.as_ref(), authorization_data: authorization_data.map(AuthorizationData::from), token_metadata_program: ctx.accounts.token_metadata_program.as_ref(), delegate: None, }, Some(&[&ctx.accounts.list_state.seeds()]), )?; let asset_id = ctx.accounts.mint.key(); // NOTE: The event doesn't record record_event( &TcompEvent::Taker(TakeEvent { taker: *ctx.accounts.buyer.key, bid_id: None, target: Target::AssetId, target_id: asset_id, field: None, field_id: None, amount, quantity: 0, tcomp_fee, taker_broker_fee, maker_broker_fee, creator_fee, // Can't record actual because we transfer lamports after we send noop tx currency, asset_id: Some(asset_id), }), &ctx.accounts.marketplace_program, TcompSigner::List(&ctx.accounts.list_state), )?; // --Pay fees in currency-- // Protocol fee. ctx.accounts.transfer_currency( &ctx.accounts.fee_vault_currency_ta.to_account_info(), tcomp_fee, )?; // Maker broker fee. ctx.accounts.transfer_currency( maker_broker_currency_ta.unwrap_or(&ctx.accounts.fee_vault_currency_ta.to_account_info()), maker_broker_fee, )?; // Taker broker fee. ctx.accounts.transfer_currency( taker_broker_currency_ta.unwrap_or(&ctx.accounts.fee_vault_currency_ta.to_account_info()), taker_broker_fee, )?; // Pay creator royalties. transfer_creators_fee( &metadata .creators .unwrap_or(Vec::with_capacity(0)) .into_iter() .map(Into::into) .collect(), &mut creator_accounts_with_ta.iter(), creator_fee, &CreatorFeeMode::Spl { associated_token_program: &ctx.accounts.associated_token_program, token_program: &ctx.accounts.currency_token_program, system_program: &ctx.accounts.system_program, currency: ctx.accounts.currency.deref().as_ref(), from: &ctx.accounts.payer, from_token_acc: ctx.accounts.payer_currency_ta.deref().as_ref(), rent_payer: &ctx.accounts.payer, }, )?; // Pay the seller (NB: the full listing amount since taker pays above fees + royalties) ctx.accounts .transfer_currency(ctx.accounts.owner_currency_ta.deref().as_ref(), amount)?; // Close the list token account. close_account( CpiContext::new( ctx.accounts.token_program.to_account_info(), CloseAccount { account: ctx.accounts.list_ta.to_account_info(), destination: ctx.accounts.rent_destination.to_account_info(), authority: ctx.accounts.list_state.to_account_info(), }, ) .with_signer(&[&ctx.accounts.list_state.seeds()]), ) }","#[access_control(ctx.accounts.validate())] #[inline(never)] pub fn process_buy_legacy_spl<'info, 'b>( ctx: Context<'_, 'b, '_, 'info, BuyLegacySpl<'info>>, max_amount: u64, optional_royalty_pct: Option<u16>, authorization_data: Option<AuthorizationDataLocal>, ) -> Result<()> { // validate mint and currency let mint = ctx.accounts.mint.key(); let currency = ctx.accounts.currency.key(); let metadata = assert_decode_metadata(&mint, &ctx.accounts.metadata)?; let list_state = &ctx.accounts.list_state; let remaining_accounts = ctx.remaining_accounts; // Parse remaining accounts. let num_creators = metadata.creators.as_ref().map(Vec::len).unwrap_or(0); let (creator_accounts, remaining) = remaining_accounts.split_at(num_creators); let (creator_ta_accounts, remaining) = remaining.split_at(num_creators); // If broker acounts are present, we need the currency token accounts from them. let (maker_broker_currency_ta, remaining) = if let Some(maker_broker) = &ctx.accounts.maker_broker { let (account, remaining) = remaining .split_first() .ok_or(TcompError::InsufficientRemainingAccounts)?; // Create ATA if it doesn't exist if account.data_is_empty() { anchor_spl::associated_token::create(CpiContext::new( ctx.accounts.associated_token_program.to_account_info(), anchor_spl::associated_token::Create { payer: ctx.accounts.payer.to_account_info(), associated_token: account.to_account_info(), authority: maker_broker.to_account_info(), mint: ctx.accounts.currency.to_account_info(), system_program: ctx.accounts.system_program.to_account_info(), token_program: ctx.accounts.currency_token_program.to_account_info(), }, ))?; } assert_decode_token_account(&currency, &maker_broker.key(), account)?; (Some(account), remaining) } else { (None, remaining) }; let (taker_broker_currency_ta, _remaining) = if let Some(taker_broker) = &ctx.accounts.taker_broker { let (account, remaining) = remaining .split_first() .ok_or(TcompError::InsufficientRemainingAccounts)?; // Create ATA if it doesn't exist if account.data_is_empty() { anchor_spl::associated_token::create(CpiContext::new( ctx.accounts.associated_token_program.to_account_info(), anchor_spl::associated_token::Create { payer: ctx.accounts.payer.to_account_info(), associated_token: account.to_account_info(), authority: taker_broker.to_account_info(), mint: ctx.accounts.currency.to_account_info(), system_program: ctx.accounts.system_program.to_account_info(), token_program: ctx.accounts.currency_token_program.to_account_info(), }, ))?; } assert_decode_token_account(&currency, &taker_broker.key(), account)?; (Some(account), remaining) } else { (None, remaining) }; let creator_accounts_with_ta = creator_accounts .iter() .zip(creator_ta_accounts.iter()) .flat_map(|(creator, ata)| vec![creator.to_account_info(), ata.to_account_info()]) .collect::<Vec<_>>(); let amount = list_state.amount; let currency = list_state.currency; require!(amount <= max_amount, TcompError::PriceMismatch); require!(currency.is_some(), TcompError::CurrencyMismatch); let tnsr_discount = matches!(currency, Some(c) if c.to_string() == TNSR_CURRENCY); let Fees { protocol_fee: tcomp_fee, maker_broker_fee, taker_broker_fee, .. } = calc_fees(CalcFeesArgs { amount, tnsr_discount, total_fee_bps: TAKER_FEE_BPS, broker_fee_pct: BROKER_FEE_PCT, maker_broker_pct: MAKER_BROKER_PCT, })?; let creator_fee = calc_creators_fee( metadata.seller_fee_basis_points, amount, if is_royalty_enforced(metadata.token_standard) { Some(100) } else { optional_royalty_pct }, )?; // Transfer the NFT to the buyer transfer( TransferArgs { source: &ctx.accounts.list_state.to_account_info(), payer: &ctx.accounts.payer, source_ata: &ctx.accounts.list_ta, destination_ata: &ctx.accounts.buyer_ta, destination: &ctx.accounts.buyer, mint: ctx.accounts.mint.deref(), metadata: &ctx.accounts.metadata, edition: &ctx.accounts.edition, system_program: &ctx.accounts.system_program, spl_token_program: &ctx.accounts.token_program, spl_ata_program: &ctx.accounts.associated_token_program, sysvar_instructions: ctx.accounts.sysvar_instructions.as_ref(), source_token_record: ctx.accounts.list_token_record.as_ref(), destination_token_record: ctx.accounts.buyer_token_record.as_ref(), authorization_rules_program: ctx.accounts.authorization_rules_program.as_ref(), authorization_rules: ctx.accounts.authorization_rules.as_ref(), authorization_data: authorization_data.map(AuthorizationData::from), token_metadata_program: ctx.accounts.token_metadata_program.as_ref(), delegate: None, }, Some(&[&ctx.accounts.list_state.seeds()]), )?; let asset_id = ctx.accounts.mint.key(); // NOTE: The event doesn't record record_event( &TcompEvent::Taker(TakeEvent { taker: *ctx.accounts.buyer.key, bid_id: None, target: Target::AssetId, target_id: asset_id, field: None, field_id: None, amount, quantity: 0, tcomp_fee, taker_broker_fee, maker_broker_fee, creator_fee, // Can't record actual because we transfer lamports after we send noop tx currency, asset_id: Some(asset_id), }), &ctx.accounts.marketplace_program, TcompSigner::List(&ctx.accounts.list_state), )?; // --Pay fees in currency-- // Protocol fee. ctx.accounts.transfer_currency( &ctx.accounts.fee_vault_currency_ta.to_account_info(), tcomp_fee, )?; // Maker broker fee. ctx.accounts.transfer_currency( maker_broker_currency_ta.unwrap_or(&ctx.accounts.fee_vault_currency_ta.to_account_info()), maker_broker_fee, )?; // Taker broker fee. ctx.accounts.transfer_currency( taker_broker_currency_ta.unwrap_or(&ctx.accounts.fee_vault_currency_ta.to_account_info()), taker_broker_fee, )?; // Pay creator royalties. if creator_fee > 0 { transfer_creators_fee( &metadata .creators .unwrap_or(Vec::with_capacity(0)) .into_iter() .map(Into::into) .collect(), &mut creator_accounts_with_ta.iter(), creator_fee, &CreatorFeeMode::Spl { associated_token_program: &ctx.accounts.associated_token_program, token_program: &ctx.accounts.currency_token_program, system_program: &ctx.accounts.system_program, currency: ctx.accounts.currency.deref().as_ref(), from: &ctx.accounts.payer, from_token_acc: ctx.accounts.payer_currency_ta.deref().as_ref(), rent_payer: &ctx.accounts.payer, }, )?; } // Pay the seller (NB: the full listing amount since taker pays above fees + royalties) ctx.accounts .transfer_currency(ctx.accounts.owner_currency_ta.deref().as_ref(), amount)?; // Close the list token account. close_account( CpiContext::new( ctx.accounts.token_program.to_account_info(), CloseAccount { account: ctx.accounts.list_ta.to_account_info(), destination: ctx.accounts.rent_destination.to_account_info(), authority: ctx.accounts.list_state.to_account_info(), }, ) .with_signer(&[&ctx.accounts.list_state.seeds()]), ) }",Medium,"Ensure that if royalty is enforced for a certain token standard, the system overrides any user-provided optional_royalty_pct and applies a predefined percentage.",https://github.com/tensor-foundation/marketplace/commit/9eab87ed9ab2fd83cbe7285f4feaad060af98173#diff-c674fd03e612b14b066eccb76cbb0ba30797c548f59219b0e46344e7ab538da7,High
Sol-189,"Utilization of Improper Payer Account. In close_expired_listing::process_close_expired_listing_core , the list_state account is currently utilized as the payer for the TransferV1CpiBuilder CPI (Cross-Program Invocation). The list_state account is a program-owned account that holds metadata and operational data for the listing. Such accounts are generally funded only with enough lamports to cover rent. If the list_state account lacks sufficient lamports to cover the cost of the CPI invocation, the transaction will fail, resulting in the cleanup of the expired listing to revert. Similarly, in delist::process_delist_core the rent_destination account is utilized as the payer in the TransferV1CpiBuilder . This enforces an unnecessary requirement that the rent_destination account should be a signer. The rent_destination account is not supposed to be responsible for paying transaction fees. Its role is to receive any refunded rent when the list_state account is closed, not to pay for the transfer itself. As a result of the constraint, the delisting may fail if the rent_destination is not a signer.","pub fn process_delist_core<'info>( ctx: Context<'_, '_, '_, 'info, DelistCore<'info>>, ) -> Result<()> { validate_core_asset( &ctx.accounts.asset, ctx.accounts.collection.as_ref().map(|c| c.as_ref()), )?; TransferV1CpiBuilder::new(&ctx.accounts.mpl_core_program) .asset(&ctx.accounts.asset) .authority(Some(&ctx.accounts.list_state.to_account_info())) .new_owner(&ctx.accounts.owner.to_account_info()) .payer(&ctx.accounts.rent_destination) // pay for what? .collection(ctx.accounts.collection.as_ref().map(|c| c.as_ref())) .invoke_signed(&[&ctx.accounts.list_state.seeds()])?; let list_state = &ctx.accounts.list_state; record_event( &TcompEvent::Maker(MakeEvent { maker: *ctx.accounts.owner.key, bid_id: None, target: Target::AssetId, target_id: list_state.asset_id, field: None, field_id: None, amount: list_state.amount, quantity: 1, // <-- represents how many NFTs got delisted currency: list_state.currency, expiry: list_state.expiry, private_taker: list_state.private_taker, asset_id: Some(list_state.asset_id), }), &ctx.accounts.marketplace_program, TcompSigner::List(&ctx.accounts.list_state), )?; Ok(()) }","pub fn process_delist_core<'info>( ctx: Context<'_, '_, '_, 'info, DelistCore<'info>>, ) -> Result<()> { validate_core_asset( &ctx.accounts.asset, ctx.accounts.collection.as_ref().map(|c| c.as_ref()), )?; TransferV1CpiBuilder::new(&ctx.accounts.mpl_core_program) .asset(&ctx.accounts.asset) .authority(Some(&ctx.accounts.list_state.to_account_info())) .new_owner(&ctx.accounts.owner.to_account_info()) .payer(&ctx.accounts.owner) .collection(ctx.accounts.collection.as_ref().map(|c| c.as_ref())) .invoke_signed(&[&ctx.accounts.list_state.seeds()])?; let list_state = &ctx.accounts.list_state; record_event( &TcompEvent::Maker(MakeEvent { maker: *ctx.accounts.owner.key, bid_id: None, target: Target::AssetId, target_id: list_state.asset_id, field: None, field_id: None, amount: list_state.amount, quantity: 1, // <-- represents how many NFTs got delisted currency: list_state.currency, expiry: list_state.expiry, private_taker: list_state.private_taker, asset_id: Some(list_state.asset_id), }), &ctx.accounts.marketplace_program, TcompSigner::List(&ctx.accounts.list_state), )?; Ok(()) }",Medium,utilize the DelistCore.owner account in process_delist_core .,https://github.com/tensor-foundation/marketplace/commit/cbda695d0e2600ff2968e8e5d90a925010c7f555#diff-baf1cdca1649a8b58d07cb5cf7c5f3eb41d3fe76237f04f6a27f360f774e6cf3,High
Sol-190,"Utilization of Improper Payer Account. In close_expired_listing::process_close_expired_listing_core , the list_state account is currently utilized as the payer for the TransferV1CpiBuilder CPI (Cross-Program Invocation). The list_state account is a program-owned account that holds metadata and operational data for the listing. Such accounts are generally funded only with enough lamports to cover rent. If the list_state account lacks sufficient lamports to cover the cost of the CPI invocation, the transaction will fail, resulting in the cleanup of the expired listing to revert. Similarly, in delist::process_delist_core the rent_destination account is utilized as the payer in the TransferV1CpiBuilder . This enforces an unnecessary requirement that the rent_destination account should be a signer. The rent_destination account is not supposed to be responsible for paying transaction fees. Its role is to receive any refunded rent when the list_state account is closed, not to pay for the transfer itself. As a result of the constraint, the delisting may fail if the rent_destination is not a signer.","pub fn process_close_expired_listing_core<'info>( ctx: Context<'_, '_, '_, 'info, CloseExpiredListingCore<'info>>, ) -> Result<()> { let list_state = &ctx.accounts.list_state; validate_core_asset( &ctx.accounts.asset, ctx.accounts.collection.as_ref().map(|c| c.as_ref()), )?; TransferV1CpiBuilder::new(&ctx.accounts.mpl_core_program) .asset(&ctx.accounts.asset) .authority(Some(&ctx.accounts.list_state.to_account_info())) .new_owner(&ctx.accounts.owner.to_account_info()) .payer(&ctx.accounts.list_state.to_account_info()) // pay for what? .collection(ctx.accounts.collection.as_ref().map(|c| c.as_ref())) .invoke_signed(&[&ctx.accounts.list_state.seeds()])?; record_event( &TcompEvent::Maker(MakeEvent { maker: *ctx.accounts.owner.key, bid_id: None, target: Target::AssetId, target_id: list_state.asset_id, field: None, field_id: None, amount: list_state.amount, quantity: 1, // <-- represents how many NFTs got delisted currency: list_state.currency, expiry: list_state.expiry, private_taker: list_state.private_taker, asset_id: Some(list_state.asset_id), }), &ctx.accounts.marketplace_program, TcompSigner::List(&ctx.accounts.list_state), )?; Ok(()) }","pub fn process_close_expired_listing_core<'info>( ctx: Context<'_, '_, '_, 'info, CloseExpiredListingCore<'info>>, ) -> Result<()> { let list_state = &ctx.accounts.list_state; validate_core_asset( &ctx.accounts.asset, ctx.accounts.collection.as_ref().map(|c| c.as_ref()), )?; TransferV1CpiBuilder::new(&ctx.accounts.mpl_core_program) .asset(&ctx.accounts.asset) .authority(Some(&ctx.accounts.list_state.to_account_info())) .new_owner(&ctx.accounts.owner.to_account_info()) // This will break if Metaplex ever adds tx fees as it will take list state below minimum balance .payer(&ctx.accounts.list_state.to_account_info()) .collection(ctx.accounts.collection.as_ref().map(|c| c.as_ref())) .invoke_signed(&[&ctx.accounts.list_state.seeds()])?; record_event( &TcompEvent::Maker(MakeEvent { maker: *ctx.accounts.owner.key, bid_id: None, target: Target::AssetId, target_id: list_state.asset_id, field: None, field_id: None, amount: list_state.amount, quantity: 1, // <-- represents how many NFTs got delisted currency: list_state.currency, expiry: list_state.expiry, private_taker: list_state.private_taker, asset_id: Some(list_state.asset_id), }), &ctx.accounts.marketplace_program, TcompSigner::List(&ctx.accounts.list_state), )?; Ok(()) }",Medium,Replace list_state with a user-provided payer account in process_close_expired_listing_core,https://github.com/tensor-foundation/marketplace/commit/cbda695d0e2600ff2968e8e5d90a925010c7f555#diff-baf1cdca1649a8b58d07cb5cf7c5f3eb41d3fe76237f04f6a27f360f774e6cf3,High
Sol-191,"Legacy NFT Validation Gaps. The vulnerability relates to verification gaps in TakeBidLegacy and the handling of legacy standards for NFTs (non-programmable NFTs). The master_edition account ensures the non-fungibility of an NFT. However, the PDA validation (Program-Derived Address) for master_edition is missing for non-pNFTs. Additionally, the metadata account’s seed checks are missing in the TakeBidLegacy context.","#[derive(Accounts)] pub struct TakeBidLegacy<'info> {pub struct TakeBidLegacy<'info> { /// CHECK: checked in assert_fee_account() #[account(mut)] pub fee_vault: UncheckedAccount<'info>, #[account(mut)] pub seller: Signer<'info>, /// CHECK: this ensures that specific asset_id belongs to specific owner #[account( mut, seeds=[b""bid_state"".as_ref(), owner.key().as_ref(), bid_state.bid_id.as_ref()], bump = bid_state.bump[0], has_one = owner )] pub bid_state: Box<Account<'info, BidState>>, // Owner needs to be passed in as mutable account, so we can reassign lamports back to them /// CHECK: has_one = owner on bid_state #[account(mut)] pub owner: UncheckedAccount<'info>, /// CHECK: none, can be anything #[account(mut)] pub taker_broker: Option<UncheckedAccount<'info>>, /// CHECK: checked in validate() #[account(mut)] pub maker_broker: Option<UncheckedAccount<'info>>, /// CHECK: optional, manually handled in handler: 1)seeds, 2)program owner, 3)normal owner, 4)margin acc stored on pool #[account(mut)] pub shared_escrow: UncheckedAccount<'info>, /// CHECK: manually below, since this account is optional pub whitelist: Option<UncheckedAccount<'info>>, // --------------------------------------- nft #[account(mut, token::mint = mint, token::authority = seller)] pub seller_ta: Box<InterfaceAccount<'info, TokenAccount>>, /// CHECK: whitelist, token::mint in seller_token, associated_token::mint in owner_ata_acc pub mint: Box<InterfaceAccount<'info, Mint>>, //can't deserialize directly coz Anchor traits not implemented /// CHECK: assert_decode_metadata check seeds #[account(mut)] pub metadata: UncheckedAccount<'info>, #[account( init_if_needed, payer = seller, associated_token::mint = mint, associated_token::authority = owner, )] pub owner_ta: Box<InterfaceAccount<'info, TokenAccount>>, // --------------------------------------- pNft //note that MASTER EDITION and EDITION share the same seeds, and so it's valid to check them here /// CHECK: seeds checked on Token Metadata CPI pub edition: UncheckedAccount<'info>, /// CHECK: seeds checked on Token Metadata CPI #[account(mut)] pub seller_token_record: Option<UncheckedAccount<'info>>, /// CHECK: seeds checked on Token Metadata CPI #[account(mut)] pub owner_token_record: Option<UncheckedAccount<'info>>, pub pnft_shared: ProgNftShared<'info>, //using this as temporary escrow to avoid having to rely on delegate /// Implicitly checked via transfer. Will fail if wrong account #[account( init_if_needed, payer = seller, seeds=[ b""nft_escrow"".as_ref(), mint.key().as_ref(), ], bump, token::mint = mint, // NB: super important this is a PDA w/ data, o/w ProgramOwnedList rulesets break. token::authority = bid_state, )] pub bid_ta: Box<InterfaceAccount<'info, TokenAccount>>, /// CHECK: seeds checked on Token Metadata CPI #[account(mut)] pub bid_token_record: Option<UncheckedAccount<'info>>, /// CHECK: validated by mplex's pnft code pub authorization_rules: Option<UncheckedAccount<'info>>, pub token_program: Interface<'info, TokenInterface>, pub associated_token_program: Program<'info, AssociatedToken>, pub system_program: Program<'info, System>, pub marketplace_program: Program<'info, crate::program::MarketplaceProgram>, pub escrow_program: Program<'info, EscrowProgram>, // cosigner is checked in validate() pub cosigner: Option<Signer<'info>>, /// intentionally not deserializing, it would be dummy in the case of VOC/FVC based verification /// CHECK: assert_decode_mint_proof pub mint_proof: Option<UncheckedAccount<'info>>, /// CHECK: bid_state.get_rent_payer() #[account(mut, constraint = rent_destination.key() == bid_state.get_rent_payer() @ TcompError::BadRentDest )] pub rent_destination: UncheckedAccount<'info>, // // Remaining accounts: // 1. creators (1-5) }","#[derive(Accounts)] pub struct TakeBidLegacy<'info> {pub struct TakeBidLegacy<'info> { /// CHECK: checked in assert_fee_account() #[account(mut)] pub fee_vault: UncheckedAccount<'info>, #[account(mut)] pub seller: Signer<'info>, /// CHECK: this ensures that specific asset_id belongs to specific owner #[account( mut, seeds=[b""bid_state"".as_ref(), owner.key().as_ref(), bid_state.bid_id.as_ref()], bump = bid_state.bump[0], has_one = owner )] pub bid_state: Box<Account<'info, BidState>>, // Owner needs to be passed in as mutable account, so we can reassign lamports back to them /// CHECK: has_one = owner on bid_state #[account(mut)] pub owner: UncheckedAccount<'info>, /// CHECK: none, can be anything #[account(mut)] pub taker_broker: Option<UncheckedAccount<'info>>, /// CHECK: checked in validate() #[account(mut)] pub maker_broker: Option<UncheckedAccount<'info>>, /// CHECK: optional, manually handled in handler: 1)seeds, 2)program owner, 3)normal owner, 4)margin acc stored on pool #[account(mut)] pub shared_escrow: UncheckedAccount<'info>, /// CHECK: manually below, since this account is optional pub whitelist: Option<UncheckedAccount<'info>>, // --------------------------------------- nft #[account(mut, token::mint = mint, token::authority = seller)] pub seller_ta: Box<InterfaceAccount<'info, TokenAccount>>, /// CHECK: whitelist, token::mint in seller_token, associated_token::mint in owner_ata_acc #[account( mint::token_program = token_program, )] pub mint: Box<InterfaceAccount<'info, Mint>>, /// CHECK: ownership, structure and mint are checked in assert_decode_metadata, seeds checked here. #[account(mut, seeds = [ Metadata::PREFIX, mpl_token_metadata::ID.as_ref(), mint.key().as_ref(), ], bump, seeds::program = mpl_token_metadata::ID, )] pub metadata: UncheckedAccount<'info>, #[account( init_if_needed, payer = seller, associated_token::mint = mint, associated_token::authority = owner, )] pub owner_ta: Box<InterfaceAccount<'info, TokenAccount>>, // --------------------------------------- pNft /// CHECK: ensure the edition is not empty, is a valid edition account and belongs to the mint. #[account( seeds=[ MasterEdition::PREFIX.0, mpl_token_metadata::ID.as_ref(), mint.key().as_ref(), MasterEdition::PREFIX.1, ], bump, seeds::program = mpl_token_metadata::ID, constraint = edition.data_len() > 0 @ TcompError::EditionDataEmpty, )] pub edition: UncheckedAccount<'info>, /// CHECK: seeds checked on Token Metadata CPI #[account(mut)] pub seller_token_record: Option<UncheckedAccount<'info>>, /// CHECK: seeds checked on Token Metadata CPI #[account(mut)] pub owner_token_record: Option<UncheckedAccount<'info>>, pub pnft_shared: ProgNftShared<'info>, //using this as temporary escrow to avoid having to rely on delegate /// Implicitly checked via transfer. Will fail if wrong account #[account( init_if_needed, payer = seller, seeds=[ b""nft_escrow"".as_ref(), mint.key().as_ref(), ], bump, token::mint = mint, // NB: super important this is a PDA w/ data, o/w ProgramOwnedList rulesets break. token::authority = bid_state, )] pub bid_ta: Box<InterfaceAccount<'info, TokenAccount>>, /// CHECK: seeds checked on Token Metadata CPI #[account(mut)] pub bid_token_record: Option<UncheckedAccount<'info>>, /// CHECK: validated by mplex's pnft code pub authorization_rules: Option<UncheckedAccount<'info>>, pub token_program: Interface<'info, TokenInterface>, pub associated_token_program: Program<'info, AssociatedToken>, pub system_program: Program<'info, System>, pub marketplace_program: Program<'info, crate::program::MarketplaceProgram>, pub escrow_program: Program<'info, EscrowProgram>, // cosigner is checked in validate() pub cosigner: Option<Signer<'info>>, /// intentionally not deserializing, it would be dummy in the case of VOC/FVC based verification /// CHECK: assert_decode_mint_proof pub mint_proof: Option<UncheckedAccount<'info>>, /// CHECK: bid_state.get_rent_payer() #[account(mut, constraint = rent_destination.key() == bid_state.get_rent_payer() @ TcompError::BadRentDest )] pub rent_destination: UncheckedAccount<'info>, // // Remaining accounts: // 1. creators (1-5) }",Medium,"Add PDA, initialized checks on master_edition in all legacy standard instructions and metadata account checks in TakeBidLegacy .",https://github.com/tensor-foundation/marketplace/commit/cbda695d0e2600ff2968e8e5d90a925010c7f555#diff-baf1cdca1649a8b58d07cb5cf7c5f3eb41d3fe76237f04f6a27f360f774e6cf3,High
Sol-192,"Denial of Service Due to ATA Ownership Change. As a result of the WithdrawCollateral token account checks in WithdrawCollateralShared within validate , there is a possibility that a Denial of Service (DoS) attack may occur if the maker (the original creator of the lock) intentionally changes their Associated Token Account (ATA) ownership to prevent the taker (the buyer) from claiming their collateral. Proof of Concept 1. The maker creates an NFT lock and deposits their NFT into the lock, which is held as collateral. 2. The taker buys the locked NFT from the maker, sending yield to the maker. As a result, the value of the NFT increases, which implies that the taker stands to benefit if they sell it. 3. The taker sells the NFT at a higher price. As a result, the price of the NFT drops, implying it is possible to buy back the NFT at a lower price. © 2024 Otter Audits LLC. All Rights Reserved. 18 / 37 Tensor Foundation Audit 04 — Vulnerabilities 4. The taker buys the NFT again at a lower price. Consequently, the NFT ’s value drops drastically. 5. At this point, the maker changes the owner of their ATA (which holds the SOL collateral). 6. If the taker, now in possession of the NFT again, wishes to return the NFT to the maker and withdraw the SOL collateral, they will be unable to do so due to the change in the maker’s ATA ownership.","pub fn validate(&mut self, collateral_type: CollateralType, to_maker: bool) -> Result<()> { [...] // If returning to maker: cannot if to_maker { require!( !order_state.collateral_returned, TLockError::CollateralAlreadyReturned ); } else { require!( order_state.collateral_returned, TLockError::CollateralNotReturned ); } if order_state.is_lock_closeable_by_anyone()? { // NB: anyone can permissionlessly return the collateral back to the maker. } else { require!( order_state.taker.unwrap() == self.signer.key(), TLockError::InvalidSigner ); } [...] Ok(()) }","use spl_token::state::Account as TokenAccount; pub fn validate(&mut self, collateral_type: CollateralType, to_maker: bool) -> Result<()> { // Retrieve the order state (assumed to be available as self.order_state) let order_state = &self.order_state; // Verify that the maker's ATA ownership has not changed. // Assume that order_state.maker holds the expected maker's public key. let expected_maker = order_state.maker; let token_account_data = TokenAccount::unpack(&self.token.order_ta.data.borrow()) .map_err(|_| TLockError::InvalidATAData)?; require!( token_account_data.owner == expected_maker, TLockError::InvalidATAOwnership ); // Proceed with the existing collateral validation logic. // If returning to maker, ensure collateral has not already been returned. if to_maker { require!( !order_state.collateral_returned, TLockError::CollateralAlreadyReturned ); } else { require!( order_state.collateral_returned, TLockError::CollateralNotReturned ); } // Check if the lock is closeable by anyone. if order_state.is_lock_closeable_by_anyone()? { // Anyone can permissionlessly return the collateral back to the maker. } else { // Ensure that the signer is the expected taker. require!( order_state.taker.unwrap() == self.signer.key(), TLockError::InvalidSigner ); } Ok(()) }",Medium,Create the ATA only if it does not already exist.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/8cad4a72-5d69-4c26-9f6c-a296efd8f011/tensor_foundation_audit_final.pdf?table=block&id=19784d4e-4146-80f1-81d5-f7094dea2280&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742522400000&signature=EJjVlegyav7Jm5YuqzTTQ6ubaOxqvVbDchfA4y5K4CQ&downloadName=tensor_foundation_audit_final.pdf,High
Sol-193,Missing Timestamp Update. Description The updated_at field in the BidState structure is not updated during the execution of take_bid_shared and stakeholders will not have an accurate record of when the bid was last modified.,"pub fn take_bid_shared(args: TakeBidArgs) -> Result<()> { let TakeBidArgs { bid_state, seller, escrow, owner, rent_destination, maker_broker, taker_broker, fee_vault, asset_id, token_standard, creators, min_amount, optional_royalty_pct, seller_fee_basis_points, creator_accounts, marketplace_prog, escrow_prog, system_prog, } = args; // Verify & increment quantity require!(bid_state.can_buy_more(), TcompError::BidFullyFilled); bid_state.incr_filled_quantity()?;","pub fn take_bid_shared(args: TakeBidArgs) -> Result<()> { let TakeBidArgs { bid_state, seller, escrow, owner, rent_destination, maker_broker, taker_broker, fee_vault, asset_id, token_standard, creators, min_amount, optional_royalty_pct, seller_fee_basis_points, creator_accounts, marketplace_prog, escrow_prog, system_prog, } = args; // Verify & increment quantity require!(bid_state.can_buy_more(), TcompError::BidFullyFilled); bid_state.incr_filled_quantity()?; bid_state.updated_at = Clock::get()?.unix_timestamp; bid_state.updated_at = Clock::get()?.unix_timestamp;",Low,Ensure updated_at field is updated whenever any modification is made to the BidState .,"https://github.com/tensor-foundation/marketplace/commit/cbda695d0e2600ff2968e8e5d90a925010c7f555, https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/4f0e5931-8de0-4ba1-971b-76011285a661/jito_restaking_audit_final.pdf?table=block&id=15184d4e-4146-80e3-9209-fddf9c04d92e&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742544000000&signature=_QID0SDuvb0JE34X1SKY6Z7BEA8n9HQjSdY6qjIWqKc&downloadName=jito_restaking_audit_final.pdf",High
Sol-194,"Inconsistent Validation of Starting Price. In the current code, there is a check for the starting_price field in create_pool::process_create_pool . This check ensures that the starting price of the pool is not less than 1 when a new pool is created. However, this validation is missing in the edit_pool instruction in validate_pool_config . The edit_pool instruction allows an existing pool to be modified, and the starting_price field may be updated. If the starting_price is not validated in edit_pool , an invalid value may be set for an existing pool.","impl<'info> EditPool<'info> { fn validate_pool_config(&self, new_config: Option<PoolConfig>) -> Result<()> { let new_config = match new_config { Some(config) => config, None => return Ok(()), }; //cannot change pool type if self.pool.config.pool_type != new_config.pool_type { throw_err!(ErrorCode::WrongPoolType); } new_config.validate() } }","impl<'info> EditPool<'info> { fn validate_pool_config( &self, edit_config: Option<EditPoolConfig>, ) -> Result<Option<PoolConfig>> { let new_config = match edit_config { Some(config) => config.into_pool_config(self.pool.config.pool_type), None => return Ok(None), }; //cannot change pool type if self.pool.config.pool_type != new_config.pool_type { throw_err!(ErrorCode::WrongPoolType); } new_config.validate()?; Ok(Some(new_config)) } } //! This code was AUTOGENERATED using the kinobi library. //! Please DO NOT EDIT THIS FILE, instead use visitors //! to add features, then rerun kinobi to update it. //! //! <https://github.com/kinobi-so/kinobi> //! use crate::generated::types::CurveType; use crate::hooked::NullableU16; use borsh::BorshDeserialize; use borsh::BorshSerialize; clients/rust/src/generated/types/edit_pool_config.rs #[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)] #[cfg_attr(feature = ""serde"", derive(serde::Serialize, serde::Deserialize))] pub struct EditPoolConfig { pub curve_type: CurveType, pub starting_price: u64, pub delta: u64, pub mm_compound_fees: bool, pub mm_fee_bps: NullableU16, }",Low,"Move the validation logic for starting_price into PoolConfig::validate . This will ensure it is applied consistently in both the create_pool and edit_pool instructions. This way, the validation is centralized and reusable, which improves code maintainability.",https://github.com/tensor-foundation/amm/commit/06e11ea9321474167a0bf6327c1007ba577ce63d#diff-375a4ee7b3c7f41ab6294c9e23ed08320e047ec6cfaa06a26ffb15b34aa848d9,High
Sol-195,"Unauthorized Withdrawal of Unstaked Amount. The burn instruction may be utilized to withdraw the unstaked amounts intended for withdrawal tickets. In the current implementation, since the function only validates that the amount_in is less than the VRT supply, any user with VRT tokens may call the burn instruction to initiate a withdrawal, regardless of whether they have a legitimate withdrawal ticket. This allows a user to bypass the standard withdrawal process by directly burning tokens and accessing funds","use jito_bytemuck::AccountDeserialize; use jito_jsm_core::loader::{ load_associated_token_account, load_signer, load_system_program, load_token_mint, load_token_program, }; use jito_vault_core::{ config::Config, vault::{BurnSummary, Vault}, }; use solana_program::{ account_info::AccountInfo, clock::Clock, entrypoint::ProgramResult, program::{invoke, invoke_signed}, program_error::ProgramError, pubkey::Pubkey, sysvar::Sysvar, }; use spl_token::instruction::{burn, transfer}; /// Burns the specified amount of tokens from the staker's account and transfers the corresponding amount of VRT tokens to the vault's fee wallet. /// /// It's strongly encouraged to call [`jito_vault_sdk::instruction::VaultInstruction::UpdateVaultBalance`] before burning to ensure the vault's token balance /// is up to date. /// /// Specification: /// - The VRT mint must be correct /// - The vault must be up-to-date /// - If the vault mint burn authority is set, it must match be present and be a signer /// - The amount to burn must be greater than zero /// - The amount to burn must be less than the VRT supply /// - The vault fee wallet must get the fee amount /// - The transaction shall fail if the amount out is less than the minimum amount out /// - The transaction shall fail if the vault does not have enough unstaked assets to transfer to the staker /// - The VRT supply shall be updated correctly to match the VRT token mint supply /// - The tokens deposited shall be updated to match the tokens in the account /// - The fee amount shall be transferred to the vault fee wallet /// - The VRT tokens shall be burned from the staker's account /// - The assets shall be transferred from the vault to the staker's account pub fn process_burn( program_id: &Pubkey, accounts: &[AccountInfo], amount_in: u64, min_amount_out: u64, ) -> ProgramResult { let (required_accounts, optional_accounts) = accounts.split_at(11); let [config, vault_info, vault_token_account, vrt_mint, staker, staker_token_account, staker_vrt_token_account, vault_fee_token_account, program_fee_token_account, token_program, system_program] = required_accounts else { return Err(ProgramError::NotEnoughAccountKeys); }; let clock = Clock::get()?; Config::load(program_id, config, false)?; let config_data = config.data.borrow(); let config = Config::try_from_slice_unchecked(&config_data)?; Vault::load(program_id, vault_info, true)?; let mut vault_data = vault_info.data.borrow_mut(); let vault = Vault::try_from_slice_unchecked_mut(&mut vault_data)?; load_associated_token_account(vault_token_account, vault_info.key, &vault.supported_mint)?; load_token_mint(vrt_mint)?; load_signer(staker, false)?; load_associated_token_account(staker_token_account, staker.key, &vault.supported_mint)?; load_associated_token_account(staker_vrt_token_account, staker.key, &vault.vrt_mint)?; load_associated_token_account( program_fee_token_account, &config.program_fee_wallet, &vault.vrt_mint, )?; load_associated_token_account(vault_fee_token_account, &vault.fee_wallet, &vault.vrt_mint)?; load_token_program(token_program)?; load_system_program(system_program)?; // The vault VRT mint shall be correct // The vault shall not need an update vault.check_vrt_mint(vrt_mint.key)?; vault.check_update_state_ok(clock.slot, config.epoch_length())?; vault.check_mint_burn_admin(optional_accounts.first())?; vault.check_is_paused()?; let BurnSummary { vault_fee_amount, program_fee_amount, burn_amount, out_amount, } = vault.burn_with_fee(config.program_fee_bps(), amount_in, min_amount_out)?; // Burn the VRT tokens from the staker's account invoke( &burn( &spl_token::id(), staker_vrt_token_account.key, vrt_mint.key, staker.key, &[], burn_amount, )?, &[ staker_vrt_token_account.clone(), vrt_mint.clone(), staker.clone(), ], )?; // Transfer the assets from the staker to the vault fee account invoke( &transfer( &spl_token::id(), staker_vrt_token_account.key, vault_fee_token_account.key, staker.key, &[], vault_fee_amount, )?, &[ staker_vrt_token_account.clone(), vault_fee_token_account.clone(), staker.clone(), ], )?; // Transfer the program fee from the staker to the program fee account invoke( &transfer( &spl_token::id(), staker_vrt_token_account.key, program_fee_token_account.key, staker.key, &[], program_fee_amount, )?, &[ staker_vrt_token_account.clone(), program_fee_token_account.clone(), staker.clone(), ], )?; // Transfer the assets from the vault to the staker's account let (_, vault_bump, mut vault_seeds) = Vault::find_program_address(program_id, &vault.base); vault_seeds.push(vec![vault_bump]); let seed_slices: Vec<&[u8]> = vault_seeds.iter().map(|seed| seed.as_slice()).collect(); drop(vault_data); invoke_signed( &transfer( &spl_token::id(), vault_token_account.key, staker_token_account.key, vault_info.key, &[], out_amount, )?, &[ vault_token_account.clone(), staker_token_account.clone(), vault_info.clone(), ], &[seed_slices.as_slice()], )?; Ok(()) }",Remove Entire Code,Critical,Remove the burn instruction from the withdrawal process.,https://github.com/jito-foundation/restaking/pull/137/files,High
Sol-196,"Slashing-Induced Share Dilution. The vulnerability arises when the vault’s underlying tokens have been completely slashed, resulting in a balance of zero deposited tokens but still having outstanding VRT tokens in circulation. In such a scenario, the current implementation of calculate_vrt_mint_amount may result in an unfair outcome for new depositors. If tokens_deposited is zero due to slashing, but there are still outstanding VRT tokens, any new depositor will encounter the initial check: if self.tokens_deposited() == 0 . This check then returns the amount deposited as the minted VRT without considering the existing VRT supply. In effect, this first depositor is assigned an amount of VRT equal to their deposited tokens, but the minted VRT does not accurately reflect their share of ownership because of the outstanding VRT tokens that others still hold. Thus, the first depositor effectively donates their deposited tokens to prior VRT holders without receiving a fair share of VRT . Instead of gaining proportional ownership, their assets unfairly inflate the value of pre-existing VRT tokens. If the vault undergoes multiple slashes, it will progressively reduce tokens_deposited while outstanding VRT tokens remain the same, deflating the value of the VRT token. Consequently, there may be a risk of overflow in the share calculations due to needing to mint too many shares.","restaking/vault_core/src/vault.rs /// Calculate the amount of VRT tokens to mint based on the amount of tokens deposited in ,→ thevault. /// If no tokens have been deposited, the amount is equal to the amount passed in. /// Otherwise, the amount is calculated as the pro-rata share of the total VRT supply. pub fn calculate_vrt_mint_amount(&self, amount: u64) -> Result<u64, VaultError> { if self.tokens_deposited() == 0 { return Ok(amount); } amount .checked_mul(self.vrt_supply()) .and_then(|x| x.checked_div(self.tokens_deposited())) .ok_or(VaultError::VaultOverflow) } vault_program/src/slash.rs use jito_bytemuck::AccountDeserialize; use jito_jsm_core::loader::{load_associated_token_account, load_signer, load_token_program}; use jito_restaking_core::{ ncn::Ncn, ncn_operator_state::NcnOperatorState, ncn_vault_slasher_ticket::NcnVaultSlasherTicket, ncn_vault_ticket::NcnVaultTicket, operator::Operator, operator_vault_ticket::OperatorVaultTicket, }; use jito_vault_core::{ config::Config, vault::Vault, vault_ncn_slasher_operator_ticket::VaultNcnSlasherOperatorTicket, vault_ncn_slasher_ticket::VaultNcnSlasherTicket, vault_ncn_ticket::VaultNcnTicket, vault_operator_delegation::VaultOperatorDelegation, }; use jito_vault_sdk::error::VaultError; use solana_program::{ account_info::AccountInfo, clock::Clock, entrypoint::ProgramResult, msg, program::invoke_signed, program_error::ProgramError, pubkey::Pubkey, sysvar::Sysvar, }; use spl_token::instruction::transfer; /// Processes the vault slash instruction: [`crate::VaultInstruction::Slash`] pub fn process_slash( program_id: &Pubkey, accounts: &[AccountInfo], slash_amount: u64, ) -> ProgramResult { let [config, vault_info, ncn, operator, slasher, ncn_operator_state, ncn_vault_ticket, operator_vault_ticket, vault_ncn_ticket, vault_operator_delegation, ncn_vault_slasher_ticket, vault_ncn_slasher_ticket, vault_ncn_slasher_operator_ticket, vault_token_account, slasher_token_account, token_program] = accounts else { return Err(ProgramError::NotEnoughAccountKeys); }; Config::load(program_id, config, false)?; let config_data = config.data.borrow(); let config = Config::try_from_slice_unchecked(&config_data)?; Vault::load(program_id, vault_info, true)?; let mut vault_data = vault_info.data.borrow_mut(); let vault = Vault::try_from_slice_unchecked_mut(&mut vault_data)?; Ncn::load(&config.restaking_program, ncn, false)?; Operator::load(&config.restaking_program, operator, false)?; load_signer(slasher, false)?; NcnOperatorState::load( &config.restaking_program, ncn_operator_state, ncn, operator, false, )?; let ncn_operator_state_data = ncn_operator_state.data.borrow(); let ncn_operator_state = NcnOperatorState::try_from_slice_unchecked(&ncn_operator_state_data)?; NcnVaultTicket::load( &config.restaking_program, ncn_vault_ticket, ncn, vault_info, false, )?; let ncn_vault_ticket_data = ncn_vault_ticket.data.borrow(); let ncn_vault_ticket = NcnVaultTicket::try_from_slice_unchecked(&ncn_vault_ticket_data)?; OperatorVaultTicket::load( &config.restaking_program, operator_vault_ticket, operator, vault_info, false, )?; let operator_vault_ticket_data = operator_vault_ticket.data.borrow(); let operator_vault_ticket = OperatorVaultTicket::try_from_slice_unchecked(&operator_vault_ticket_data)?; VaultNcnTicket::load(program_id, vault_ncn_ticket, vault_info, ncn, false)?; let vault_ncn_ticket_data = vault_ncn_ticket.data.borrow(); let vault_ncn_ticket = VaultNcnTicket::try_from_slice_unchecked(&vault_ncn_ticket_data)?; VaultOperatorDelegation::load( program_id, vault_operator_delegation, vault_info, operator, true, )?; let mut vault_operator_delegation_data = vault_operator_delegation.data.borrow_mut(); let vault_operator_delegation = VaultOperatorDelegation::try_from_slice_unchecked_mut(&mut vault_operator_delegation_data)?; NcnVaultSlasherTicket::load( &config.restaking_program, ncn_vault_slasher_ticket, ncn, vault_info, slasher, false, )?; let ncn_vault_slasher_ticket_data = ncn_vault_slasher_ticket.data.borrow(); let ncn_vault_slasher_ticket = NcnVaultSlasherTicket::try_from_slice_unchecked(&ncn_vault_slasher_ticket_data)?; VaultNcnSlasherTicket::load( program_id, vault_ncn_slasher_ticket, vault_info, ncn, slasher, false, )?; let vault_ncn_slasher_ticket_data = vault_ncn_slasher_ticket.data.borrow(); let vault_ncn_slasher_ticket = VaultNcnSlasherTicket::try_from_slice_unchecked(&vault_ncn_slasher_ticket_data)?; let slot = Clock::get()?.slot; let ncn_epoch = config.get_epoch_from_slot(slot)?; VaultNcnSlasherOperatorTicket::load( program_id, vault_ncn_slasher_operator_ticket, vault_info, ncn, slasher, operator, ncn_epoch, true, )?; let mut vault_ncn_slasher_operator_ticket_data = vault_ncn_slasher_operator_ticket.data.borrow_mut(); let vault_ncn_slasher_operator_ticket = VaultNcnSlasherOperatorTicket::try_from_slice_unchecked_mut( &mut vault_ncn_slasher_operator_ticket_data, )?; load_associated_token_account(vault_token_account, vault_info.key, &vault.supported_mint)?; load_associated_token_account(slasher_token_account, slasher.key, &vault.supported_mint)?; load_token_program(token_program)?; let slot = Clock::get()?.slot; let epoch_length = config.epoch_length(); // The vault shall be up-to-date before slashing vault.check_update_state_ok(Clock::get()?.slot, epoch_length)?; vault.check_is_paused()?; // All ticket states shall be active or cooling down check_states_active_or_cooling_down( vault_ncn_slasher_ticket, ncn_vault_slasher_ticket, ncn_operator_state, operator_vault_ticket, vault_ncn_ticket, ncn_vault_ticket, slot, epoch_length, )?; // The amount slashed for this operator shall not exceed the maximum slashable amount per epoch vault_ncn_slasher_operator_ticket.check_slashing_amount_not_exceeded( slash_amount, vault_ncn_slasher_ticket.max_slashable_per_epoch(), )?; // The VaultOperatorDelegation shall be slashed and the vault amounts shall be updated slash_and_update_vault( vault, vault_operator_delegation, vault_ncn_slasher_operator_ticket, slash_amount, )?; // transfer the slashed funds let mut vault_seeds = Vault::seeds(&vault.base); vault_seeds.push(vec![vault.bump]); let vault_seeds_slice = vault_seeds .iter() .map(|seed| seed.as_slice()) .collect::<Vec<&[u8]>>(); drop(vault_data); invoke_signed( &transfer( &spl_token::id(), vault_token_account.key, slasher_token_account.key, vault_info.key, &[], slash_amount, )?, &[ vault_token_account.clone(), slasher_token_account.clone(), vault_info.clone(), ], &[vault_seeds_slice.as_slice()], )?; Ok(()) } #[allow(clippy::too_many_arguments)] fn check_states_active_or_cooling_down( vault_ncn_slasher_ticket: &VaultNcnSlasherTicket, ncn_vault_slasher_ticket: &NcnVaultSlasherTicket, ncn_operator_state: &NcnOperatorState, operator_vault_ticket: &OperatorVaultTicket, vault_ncn_ticket: &VaultNcnTicket, ncn_vault_ticket: &NcnVaultTicket, slot: u64, epoch_length: u64, ) -> ProgramResult { if !vault_ncn_slasher_ticket .state .is_active_or_cooldown(slot, epoch_length) { msg!(""Vault NCN slasher ticket is not active or in cooldown""); return Err(VaultError::VaultNcnSlasherTicketUnslashable.into()); } if !ncn_vault_slasher_ticket .state .is_active_or_cooldown(slot, epoch_length) { msg!(""NCN vault slasher ticket is not active or in cooldown""); return Err(VaultError::NcnVaultSlasherTicketUnslashable.into()); } if !ncn_operator_state .ncn_opt_in_state .is_active_or_cooldown(slot, epoch_length) { msg!(""NCN opt-in to operator is not active or in cooldown""); return Err(VaultError::NcnOperatorStateUnslashable.into()); } if !ncn_operator_state .operator_opt_in_state .is_active_or_cooldown(slot, epoch_length) { msg!(""Operator opt-in to NCN is not active or in cooldown""); return Err(VaultError::NcnOperatorStateUnslashable.into()); } if !operator_vault_ticket .state .is_active_or_cooldown(slot, epoch_length) { msg!(""Operator vault ticket is not active or in cooldown""); return Err(VaultError::OperatorVaultTicketUnslashable.into()); } if !vault_ncn_ticket .state .is_active_or_cooldown(slot, epoch_length) { msg!(""Vault NCN ticket is not active or in cooldown""); return Err(VaultError::VaultNcnTicketUnslashable.into()); } if !ncn_vault_ticket .state .is_active_or_cooldown(slot, epoch_length) { msg!(""NCN vault ticket is not active or in cooldown""); return Err(VaultError::NcnVaultTicketUnslashable.into()); } Ok(()) } /// Slashes the vault and updates the vault amounts based on the slashing amount. fn slash_and_update_vault( vault: &mut Vault, vault_operator_delegation: &mut VaultOperatorDelegation, vault_ncn_slasher_operator_ticket: &mut VaultNcnSlasherOperatorTicket, slash_amount: u64, ) -> ProgramResult { // undo the delegation, slash then accumulate the delegation vault .delegation_state .subtract(&vault_operator_delegation.delegation_state)?; vault_operator_delegation .delegation_state .slash(slash_amount)?; vault .delegation_state .accumulate(&vault_operator_delegation.delegation_state)?; vault.decrement_tokens_deposited(slash_amount)?; vault_ncn_slasher_operator_ticket.increment_slashed(slash_amount)?; Ok(()) }",Remove Entire Code (vault_program/src/slash.rs),High,Remove the slashing instruction.,https://github.com/jito-foundation/restaking/pull/141/files#diff-4200ef7af2b6c1734be1438ea2ea643497061bf91824dfd16519556440b81b3e,High
Sol-197,"DOS Due to Withdrawal Ticket Desynchronization. There is a potential Denial of Service (DoS) attack in vault_program::process_burn_withdrawal_ticket that may occur if an attacker manipulates the state of the system by directly sending VRT tokens to the vault_staker_withdrawal_ticket_token_account . This will result in inconsistencies between the amount of VRT tokens recorded in the token account and the amount recorded in the VaultStakerWithdrawalTicket account. The direct transfer will increase the balance of tokens in the token account without updating VaultStakerWithdrawalTicket , creating a desynchronization between these two values since vault_staker_withdrawal_ticket.vrt_amount() would still reflect the original amount of tokens expected by the withdrawal process. close_account checks that the amount stored in the token account is zero before allowing the account to be closed. If the amounts are out of sync, close_account operation may fail, as it verifies that the account’s balance is zero. This effectively prevents the staker from closing their withdrawal ticket and claiming tokens, resulting in a denial-of-service scenario.","/// Burns the withdrawal ticket, transferring the assets to the staker and closing the withdrawal ticket. /// Expand Down Expand Up @@ -58,6 +60,11 @@ pub fn process_burn_withdrawal_ticket( /// One should call the [`crate::VaultInstruction::CrankVaultUpdateStateTracker`] instruction before running this instruction /// to ensure that any rewards that were accrued are accounted for. pub fn process_burn_withdrawal_ticket( program_id: &Pubkey, accounts: &[AccountInfo], ) -> ProgramResult { let (required_accounts, optional_accounts) = accounts.split_at(12); let [config, vault_info, vault_token_account, vrt_mint, staker, staker_token_account, vault_staker_withdrawal_ticket_info, vault_staker_withdrawal_ticket_token_account, vault_fee_token_account, program_fee_token_account, token_program, system_program] = required_accounts else { return Err(ProgramError::NotEnoughAccountKeys); }; Config::load(program_id, config, false)?; let config_data = config.data.borrow(); let config = Config::try_from_slice_unchecked(&config_data)?; Vault::load(program_id, vault_info, true)?; let mut vault_data = vault_info.data.borrow_mut(); let vault = Vault::try_from_slice_unchecked_mut(&mut vault_data)?; load_associated_token_account(vault_token_account, vault_info.key, &vault.supported_mint)?; load_token_mint(vrt_mint)?; // staker load_associated_token_account(staker_token_account, staker.key, &vault.supported_mint)?; VaultStakerWithdrawalTicket::load( program_id, vault_staker_withdrawal_ticket_info, vault_info, true, )?; let vault_staker_withdrawal_ticket_data = vault_staker_withdrawal_ticket_info.data.borrow(); let vault_staker_withdrawal_ticket = VaultStakerWithdrawalTicket::try_from_slice_unchecked( &vault_staker_withdrawal_ticket_data, )?; load_associated_token_account( vault_staker_withdrawal_ticket_token_account, vault_staker_withdrawal_ticket_info.key, &vault.vrt_mint, )?; load_associated_token_account(vault_fee_token_account, &vault.fee_wallet, &vault.vrt_mint)?; load_associated_token_account( program_fee_token_account, Expand Down Expand Up @@ -90,6 +97,18 @@ pub fn process_burn_withdrawal_ticket( &config.program_fee_wallet, &vault.vrt_mint, )?; load_token_program(token_program)?; load_system_program(system_program)?; vault.check_mint_burn_admin(optional_accounts.first())?; vault.check_vrt_mint(vrt_mint.key)?; vault.check_update_state_ok(Clock::get()?.slot, config.epoch_length())?; vault.check_is_paused()?; vault_staker_withdrawal_ticket.check_staker(staker.key)?; if !vault_staker_withdrawal_ticket.is_withdrawable(Clock::get()?.slot, config.epoch_length())? { msg!(""Vault staker withdrawal ticket is not withdrawable""); return Err(VaultError::VaultStakerWithdrawalTicketNotWithdrawable.into()); } let BurnSummary { vault_fee_amount, program_fee_amount, burn_amount, out_amount, } = vault.burn_with_fee( config.program_fee_bps(), vault_staker_withdrawal_ticket.vrt_amount(), vault_staker_withdrawal_ticket.min_amount_out(), )?; vault.decrement_vrt_ready_to_claim_amount(vault_staker_withdrawal_ticket.vrt_amount())?; let (_, vault_staker_withdrawal_bump, mut vault_staker_withdrawal_seeds) = Expand Down VaultStakerWithdrawalTicket::find_program_address( program_id, vault_info.key, &vault_staker_withdrawal_ticket.base, ); vault_staker_withdrawal_seeds.push(vec![vault_staker_withdrawal_bump]); let seed_slices: Vec<&[u8]> = vault_staker_withdrawal_seeds .iter() .map(|seed| seed.as_slice()) .collect(); drop(vault_staker_withdrawal_ticket_data); // transfer fee to fee wallet invoke_signed( &transfer( &spl_token::id(), vault_staker_withdrawal_ticket_token_account.key, vault_fee_token_account.key, vault_staker_withdrawal_ticket_info.key, &[], vault_fee_amount, )?, &[ vault_staker_withdrawal_ticket_token_account.clone(), vault_fee_token_account.clone(), vault_staker_withdrawal_ticket_info.clone(), ], &[&seed_slices], )?; // Transfer program fee to program fee wallet invoke_signed( &transfer( &spl_token::id(), vault_staker_withdrawal_ticket_token_account.key, program_fee_token_account.key, vault_staker_withdrawal_ticket_info.key, &[], program_fee_amount, )?, &[ vault_staker_withdrawal_ticket_token_account.clone(), program_fee_token_account.clone(), vault_staker_withdrawal_ticket_info.clone(), ], &[&seed_slices], )?; // burn the VRT tokens invoke_signed( &burn( &spl_token::id(), vault_staker_withdrawal_ticket_token_account.key, vrt_mint.key, vault_staker_withdrawal_ticket_info.key, &[], burn_amount, )?, &[ vault_staker_withdrawal_ticket_token_account.clone(), vrt_mint.clone(), vault_staker_withdrawal_ticket_info.clone(), ], &[&seed_slices], )?; // close token account invoke_signed( &close_account( &spl_token::id(), vault_staker_withdrawal_ticket_token_account.key, staker.key, vault_staker_withdrawal_ticket_info.key, &[], )?, &[ vault_staker_withdrawal_ticket_token_account.clone(), staker.clone(), vault_staker_withdrawal_ticket_info.clone(), ], &[&seed_slices], )?; close_program_account(program_id, vault_staker_withdrawal_ticket_info, staker)?; // transfer the assets to the staker let (_, vault_bump, mut vault_seeds) = Vault::find_program_address(program_id, &vault.base); vault_seeds.push(vec![vault_bump]); let seed_slices: Vec<&[u8]> = vault_seeds.iter().map(|seed| seed.as_slice()).collect(); drop(vault_data); // avoid double borrow invoke_signed( &transfer( &spl_token::id(), vault_token_account.key, staker_token_account.key, vault_info.key, &[], out_amount, )?, &[ vault_token_account.clone(), staker_token_account.clone(), vault_info.clone(), ], &[&seed_slices], )?; Ok(()) }","program::invoke_signed, program_error::ProgramError, program_pack::Pack, pubkey::Pubkey, sysvar::Sysvar, }; use spl_token::instruction::{burn, close_account, transfer}; use spl_token_2022::state::Account; /// Burns the withdrawal ticket, transferring the assets to the staker and closing the withdrawal ticket. /// Expand Down Expand Up @@ -58,6 +60,11 @@ pub fn process_burn_withdrawal_ticket( /// One should call the [`crate::VaultInstruction::CrankVaultUpdateStateTracker`] instruction before running this instruction /// to ensure that any rewards that were accrued are accounted for. pub fn process_burn_withdrawal_ticket( program_id: &Pubkey, accounts: &[AccountInfo], ) -> ProgramResult { let (required_accounts, optional_accounts) = accounts.split_at(12); let [config, vault_info, vault_token_account, vrt_mint, staker, staker_token_account, vault_staker_withdrawal_ticket_info, vault_staker_withdrawal_ticket_token_account, vault_fee_token_account, program_fee_token_account, token_program, system_program] = required_accounts else { return Err(ProgramError::NotEnoughAccountKeys); }; Config::load(program_id, config, false)?; let config_data = config.data.borrow(); let config = Config::try_from_slice_unchecked(&config_data)?; Vault::load(program_id, vault_info, true)?; let mut vault_data = vault_info.data.borrow_mut(); let vault = Vault::try_from_slice_unchecked_mut(&mut vault_data)?; load_associated_token_account(vault_token_account, vault_info.key, &vault.supported_mint)?; load_token_mint(vrt_mint)?; // staker load_associated_token_account(staker_token_account, staker.key, &vault.supported_mint)?; VaultStakerWithdrawalTicket::load( program_id, vault_staker_withdrawal_ticket_info, vault_info, true, )?; let vault_staker_withdrawal_ticket_data = vault_staker_withdrawal_ticket_info.data.borrow(); let vault_staker_withdrawal_ticket = VaultStakerWithdrawalTicket::try_from_slice_unchecked( &vault_staker_withdrawal_ticket_data, )?; load_associated_token_account( vault_staker_withdrawal_ticket_token_account, vault_staker_withdrawal_ticket_info.key, &vault.vrt_mint, )?; let ticket_vrt_account = Account::unpack(&vault_staker_withdrawal_ticket_token_account.data.borrow())?; let ticket_vrt_amount = ticket_vrt_account.amount; load_associated_token_account(vault_fee_token_account, &vault.fee_wallet, &vault.vrt_mint)?; load_associated_token_account( program_fee_token_account, Expand Down Expand Up @@ -90,6 +97,18 @@ pub fn process_burn_withdrawal_ticket( &config.program_fee_wallet, &vault.vrt_mint, )?; load_token_program(token_program)?; load_system_program(system_program)?; vault.check_mint_burn_admin(optional_accounts.first())?; vault.check_vrt_mint(vrt_mint.key)?; vault.check_update_state_ok(Clock::get()?.slot, config.epoch_length())?; vault.check_is_paused()?; vault_staker_withdrawal_ticket.check_staker(staker.key)?; if !vault_staker_withdrawal_ticket.is_withdrawable(Clock::get()?.slot, config.epoch_length())? { msg!(""Vault staker withdrawal ticket is not withdrawable""); return Err(VaultError::VaultStakerWithdrawalTicketNotWithdrawable.into()); } let BurnSummary { vault_fee_amount, program_fee_amount, burn_amount, out_amount, } = vault.burn_with_fee( config.program_fee_bps(), vault_staker_withdrawal_ticket.vrt_amount(), vault_staker_withdrawal_ticket.min_amount_out(), )?; // To close the token account, the balance needs to be 0. // The only way for vault_staker_withdrawal_ticket.vrt_amount() != ticket_vrt_amount // Is if some party sent VRT to the ticket account after the ticket was created. // This extra VRT will be sent to the program fee wallet. let extra_vrt_in_account = ticket_vrt_amount .checked_sub(vault_staker_withdrawal_ticket.vrt_amount()) .ok_or(VaultError::ArithmeticUnderflow)?; let program_fee_amount = program_fee_amount .checked_add(extra_vrt_in_account) .ok_or(VaultError::ArithmeticOverflow)?; vault.decrement_vrt_ready_to_claim_amount(vault_staker_withdrawal_ticket.vrt_amount())?; let (_, vault_staker_withdrawal_bump, mut vault_staker_withdrawal_seeds) = Expand Down VaultStakerWithdrawalTicket::find_program_address( program_id, vault_info.key, &vault_staker_withdrawal_ticket.base, ); vault_staker_withdrawal_seeds.push(vec![vault_staker_withdrawal_bump]); let seed_slices: Vec<&[u8]> = vault_staker_withdrawal_seeds .iter() .map(|seed| seed.as_slice()) .collect(); drop(vault_staker_withdrawal_ticket_data); // transfer fee to fee wallet invoke_signed( &transfer( &spl_token::id(), vault_staker_withdrawal_ticket_token_account.key, vault_fee_token_account.key, vault_staker_withdrawal_ticket_info.key, &[], vault_fee_amount, )?, &[ vault_staker_withdrawal_ticket_token_account.clone(), vault_fee_token_account.clone(), vault_staker_withdrawal_ticket_info.clone(), ], &[&seed_slices], )?; // Transfer program fee to program fee wallet invoke_signed( &transfer( &spl_token::id(), vault_staker_withdrawal_ticket_token_account.key, program_fee_token_account.key, vault_staker_withdrawal_ticket_info.key, &[], program_fee_amount, )?, &[ vault_staker_withdrawal_ticket_token_account.clone(), program_fee_token_account.clone(), vault_staker_withdrawal_ticket_info.clone(), ], &[&seed_slices], )?; // burn the VRT tokens invoke_signed( &burn( &spl_token::id(), vault_staker_withdrawal_ticket_token_account.key, vrt_mint.key, vault_staker_withdrawal_ticket_info.key, &[], burn_amount, )?, &[ vault_staker_withdrawal_ticket_token_account.clone(), vrt_mint.clone(), vault_staker_withdrawal_ticket_info.clone(), ], &[&seed_slices], )?; // close token account invoke_signed( &close_account( &spl_token::id(), vault_staker_withdrawal_ticket_token_account.key, staker.key, vault_staker_withdrawal_ticket_info.key, &[], )?, &[ vault_staker_withdrawal_ticket_token_account.clone(), staker.clone(), vault_staker_withdrawal_ticket_info.clone(), ], &[&seed_slices], )?; close_program_account(program_id, vault_staker_withdrawal_ticket_info, staker)?; // transfer the assets to the staker let (_, vault_bump, mut vault_seeds) = Vault::find_program_address(program_id, &vault.base); vault_seeds.push(vec![vault_bump]); let seed_slices: Vec<&[u8]> = vault_seeds.iter().map(|seed| seed.as_slice()).collect(); drop(vault_data); // avoid double borrow invoke_signed( &transfer( &spl_token::id(), vault_token_account.key, staker_token_account.key, vault_info.key, &[], out_amount, )?, &[ vault_token_account.clone(), staker_token_account.clone(), vault_info.clone(), ], &[&seed_slices], )?; Ok(()) }",High,Ensure the program always verifies the actual balance of the token account directly via SPL Token Program methods before allowing operations that rely on the amount of tokens.,https://github.com/jito-foundation/restaking/pull/140/files,High
Sol-198,"Incorrect Parameter Encoding. In marginfi_cpi::withdraw_from_lending_account , there is an incorrect encoding of the withdraw_all parameter in the instruction data. withdraw_from_lending_account allows a user to withdraw funds from their lending account. It constructs and sends a cross-program invocation (CPI) to the Marginfi program with the appropriate parameters to perform this withdrawal. One of these parameters, withdraw_all , is a boolean flag indicating whether to withdraw the entire balance from the lending account. However, the withdraw_all field in the instruction is incorrectly assigned as a single byte (1), while the Marginfi program expects the withdraw_all parameter to be an Option<bool> , which is a two-byte representation. Thus, the Marginfi program expects an Option<bool> , but it receives a single byte.","pub fn withdraw_from_lending_account<'info>( ctx: CpiContext<'_, '_, '_, 'info, LendingAccountWithdraw<'info>>, amount: u64, withdraw_all: bool, ) -> Result<()> { [...] }","pub fn withdraw_from_lending_account<'info>( ctx: CpiContext<'_, '_, '_, 'info, LendingAccountWithdraw<'info>>, amount: u64, withdraw_all: Option<bool>, // Updated to Option<bool> ) -> Result<()> { // Function implementation }",Medium,Encode the withdraw_all parameter as Option .,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/6d83ab5f-c00a-4ddf-bc68-d408deb91d5f/marginfi_integration_audit_final.pdf?table=block&id=13c84d4e-4146-80c2-a1fc-ec6e95ee4aa7&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742702400000&signature=MZUOOqCmah8oqBzft5jJhH3USzWXxdSfZzvJW9e3CIY&downloadName=marginfi_integration_audit_final.pdf,High
Sol-199,"Discrepancy in Conversion of Synthetic Yield Tokens. In the RedeemSy instruction, there is a potential discrepancy in the conversion of synthetic yield ( SY ) tokens (shares) to their corresponding base asset amounts. This discrepancy arises due to the way the share-to-asset conversion rate may change after the SY tokens are burned but before the base assets are redeemed. When a user initiates the RedeemSy instruction, the first step is to burn the specified amount of SY tokens ( amount ). Between the time the SY tokens are burned and the base assets are redeemed through the FakeRewards program, the asset share value may be updated. As a result, the calculation utilized to determine the number of base assets corresponding to the burned SY tokens ( shares ) may no longer be accurate, as the base amount to be redeemed is calculated via the asset share value at the time the SY tokens are burned. If this value changes before the redemption is complete, the resulting base amount will not accurately reflect the user’s intended redemption value. Consequently, the invariant check that ensures that the total supply of SY tokens ( mint_sy.supply ) and the corresponding base assets remain in balance will fail.","pub fn handler(ctx: Context<RedeemSy>, amount: u64) -> Result<()> { let bump = ctx.bumps.authority; // Burn SY tokens token_2022::burn( CpiContext::new( ctx.accounts.token_2022_program.to_account_info(), anchor_spl::token_2022::Burn { mint: ctx.accounts.mint_sy.to_account_info(), from: ctx.accounts.sy_account.to_account_info(), authority: ctx.accounts.owner.to_account_info(), }, ), amount, )?; // Redeem shares from FakeRewards and transfer the base asset let seeds: [&[u8]; 2] = [crate::GLOBAL_AUTH_SEED, &[bump]]; [...]","pub fn handler(ctx: Context<RedeemSy>, amount: u64) -> Result<()> { let bump = ctx.bumps.authority; // Start a transaction to ensure atomicity let transaction = Transaction::new(); // Burn SY tokens transaction.add_instruction(token_2022::burn( CpiContext::new( ctx.accounts.token_2022_program.to_account_info(), anchor_spl::token_2022::Burn { mint: ctx.accounts.mint_sy.to_account_info(), from: ctx.accounts.sy_account.to_account_info(), authority: ctx.accounts.owner.to_account_info(), }, ), amount, )?); // Redeem shares from FakeRewards and transfer the base asset let seeds: [&[u8]; 2] = [crate::GLOBAL_AUTH_SEED, &[bump]]; transaction.add_instruction(redeem_shares_instruction( ctx.accounts.fake_rewards_program.to_account_info(), ctx.accounts.base_asset_account.to_account_info(), amount, seeds, )?); // Execute the transaction atomically transaction.execute()?; Ok(()) }",Medium,"Ensure that the burning of SY tokens and the redemption of base assets occur atomically within a single transaction, minimizing the window during which the asset share value may change.",https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/6d83ab5f-c00a-4ddf-bc68-d408deb91d5f/marginfi_integration_audit_final.pdf?table=block&id=13c84d4e-4146-80c2-a1fc-ec6e95ee4aa7&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742702400000&signature=MZUOOqCmah8oqBzft5jJhH3USzWXxdSfZzvJW9e3CIY&downloadName=marginfi_integration_audit_final.pdf,High
Sol-200,"Inconsistencies in the AMM Fee Logic. amm::get_limit_order_size_in_base_and_quote incorrectly applies the fee to the base asset amount rather than the quote asset. The fee is applied after converting the quote asset to the base asset. This results in an incorrect post-fee calculation. The function first converts the quote amount to base via the exchange rate ( base_snapshot / quote_snapshot ), and then applies the fee on the converted base amount. However, fees should only be applied to the quote amount before it is converted to the base asset. This is because the fee should be calculated on the traded amount (in this case, the quote asset) rather than the converted result (base asset). Furthermore, there are inconsistencies in the way the limit order mechanism within the AMM accounts for fees and handles the price snapshot. Currently, the limit order is stopped early to account for fees. This implies that when a user places a trade, the system prematurely adjusts the amount based on fees before fully consuming the limit order. By prematurely adjusting for fees, the order is not fully executed at the actual limit price. The issue arises because, after the limit order is consumed, the price in the pool may improve due to the natural mechanics of the AMM. The user will not benefit from this potential price improvement because the limit order stops early due to fee deductions. Additionally, after a swap that fully consumes the limit order, if a new swap is executed in the same direction, the limit order may be hit again due to the pricing mechanism not resetting properly.","/// This function solves the closed-form solution for the size of the virtual limit order /// in the pool. pub fn get_limit_order_size_in_base_and_quote(&self, side: Side) -> LimitOrderConfiguration { let quote_snapshot = self.quote_reserves_snapshot.upcast(); let base_snapshot = self.base_reserves_snapshot.upcast(); let quote_reserves = self.quote_reserves.upcast(); let base_reserves = self.base_reserves.upcast(); match side { Side::Buy => { let ask = if quote_snapshot * base_reserves > base_snapshot * quote_reserves { let size_in_quote = (quote_snapshot * base_reserves - base_snapshot * quote_reserves) / (base_snapshot + self.post_fee_adjust_rounded_down(base_snapshot)); let size_in_base = self.post_fee_adjust_rounded_down( size_in_quote * base_snapshot / quote_snapshot, ); let fee_in_quote = self.fee_rounded_down(size_in_quote); LimitOrderConfiguration { size_in_base, size_in_quote: size_in_quote - fee_in_quote, fee_in_quote, } } else { LimitOrderConfiguration::new_default() }; ask } Side::Sell => { let bid = if base_snapshot * quote_reserves > quote_snapshot * base_reserves { let size_in_base = (base_snapshot * quote_reserves - quote_snapshot * base_reserves) / (2 * quote_snapshot); let size_in_quote = size_in_base * quote_snapshot / base_snapshot; let fee_in_quote = self.fee_rounded_down(size_in_quote); LimitOrderConfiguration { size_in_base, size_in_quote: size_in_quote - fee_in_quote, fee_in_quote, } } else { LimitOrderConfiguration::new_default() }; bid } } }","/// This function solves the closed-form solution for the size of the virtual limit order /// in the pool. pub fn get_limit_order_size_in_base_and_quote(&self, side: Side) -> LimitOrderConfiguration { let quote_snapshot = self.quote_reserves_snapshot.upcast(); let base_snapshot = self.base_reserves_snapshot.upcast(); let quote_reserves = self.quote_reserves.upcast(); let base_reserves = self.base_reserves.upcast(); match side { Side::Buy => { let ask = if quote_snapshot * base_reserves > base_snapshot * quote_reserves { let size_in_quote = (quote_snapshot * base_reserves - base_snapshot * quote_reserves) / (2 * base_snapshot); let size_in_base = size_in_quote * base_snapshot / quote_snapshot; LimitOrderConfiguration { size_in_base, size_in_quote, } } else { LimitOrderConfiguration::new_default() }; ask } Side::Sell => { let bid = if base_snapshot * quote_reserves > quote_snapshot * base_reserves { let size_in_base = (base_snapshot * quote_reserves - quote_snapshot * base_reserves) / (2 * quote_snapshot); let size_in_quote = size_in_base * quote_snapshot / base_snapshot; LimitOrderConfiguration { size_in_base, size_in_quote, } } else { LimitOrderConfiguration::new_default() }; bid } } }",High,"Apply the fee to the quoted amount first, and then convert the post-fee quote into the base currency. This ensures that the fee is deducted from the traded amount (quote) rather than the converted result (base). Additionally, the fee should only be deducted after the limit order is fully executed. This ensures the order is executed at the correct price and allows traders to benefit from any potential price improvements that may arise.",https://github.com/Ellipsis-Labs/plasma/commit/46b9aa9e6a1ba83ab00c43a7deea05e0169232a7#diff-fd37b892d53929555a7af19738b17b18cf4bcc11fde54385d8b780f0fda9597d,High
Sol-201,"Lack of PDA Validation. In both MintToInstruction and TransferInstruction, the token_pool_pda account is included as a mutable account but does not undergo any seed validation or authority checks. This implies that there are no checks to ensure that token_pool_pda was generated using the expected seeds and bump values. An attacker may provide their own token account as token_pool_pda instead of the intended token pool Program Derived Address (PDA). Since there are no checks to validate that this account is derived from the expected seeds, the program will treat the attacker's account as if it were the legitimate token pool PDA. The attacker may utilize this manipulated token_pool_pda to compress tokens, which involves sending tokens to this account. Since the program does not validate the seeds, the tokens would be added to the attacker's account. Consequently, when decompressing tokens, the attacker will utilize the same token_pool_pda account to withdraw the tokens that were originally in the legitimate token pool. This would allow the attacker to steal tokens from the genuine token pool account and move them to their own account.","programs/compressed-token/src/instructions/transfer.rs use crate::POOL_SEED; #[derive(Accounts)] pub struct TransferInstruction<'info> { /// UNCHECKED: only pays fees. @@ -34,28 +33,28 @@ /// (different program) checked in light system program to derive /// cpi_authority_pda and check that this program is the signer of the cpi. pub self_program: Program<'info, crate::program::LightCompressedToken>, #[account(mut, seeds = [POOL_SEED, &token_pool_pda.mint.key().to_bytes()],bump)] pub token_pool_pda: Option<Account<'info, TokenAccount>>, #[account(mut, constraint= if token_pool_pda.is_some() {Ok(token_pool_pda.as_ref().unwrap().key() != compress_or_decompress_token_account.key())}else {err!(crate::ErrorCode::TokenPoolPdaUndefined)}? @crate::ErrorCode::IsTokenPoolPda)] pub compress_or_decompress_token_account: Option<Account<'info, TokenAccount>>, pub token_program: Option<Program<'info, Token>>, pub system_program: Program<'info, System>, } programs/compressed-token/src/spl_compression.rs use crate::{ process_transfer::get_cpi_signer_seeds, CompressedTokenInstructionDataTransfer, TransferInstruction, }; pub fn process_compression_or_decompression<'info>( @@ -17,6 +17,20 @@ } } pub fn decompress_spl_tokens<'info>( inputs: &CompressedTokenInstructionDataTransfer, ctx: &Context<'_, '_, '_, 'info, TransferInstruction<'info>>, @@ -29,6 +43,8 @@ Some(token_pool_pda) => token_pool_pda.to_account_info(), None => return err!(crate::ErrorCode::CompressedPdaUndefinedForDecompress), }; let amount = match inputs.compress_or_decompress_amount { Some(amount) => amount, None => return err!(crate::ErrorCode::DeCompressAmountUndefinedForDecompress), @@ -50,10 +66,11 @@ inputs: &CompressedTokenInstructionDataTransfer, ctx: &Context<'_, '_, '_, 'info, TransferInstruction<'info>>, ) -> Result<()> { let recipient = match ctx.accounts.token_pool_pda.as_ref() { Some(token_pool_pda) => token_pool_pda.to_account_info(), None => return err!(crate::ErrorCode::CompressedPdaUndefinedForCompress), }; let amount = match inputs.compress_or_decompress_amount { Some(amount) => amount, None => return err!(crate::ErrorCode::DeCompressAmountUndefinedForCompress), @@ -65,28 +82,28 @@ .as_ref() .unwrap() .to_account_info(), &recipient, &ctx.accounts.authority.to_account_info(), &ctx.accounts .token_program .as_ref() .unwrap() .to_account_info(), amount, ) }","programs/compressed-token/src/instructions/transfer.rs #[derive(Accounts)] pub struct TransferInstruction<'info> { /// UNCHECKED: only pays fees. @@ -34,28 +33,28 @@ /// (different program) checked in light system program to derive /// cpi_authority_pda and check that this program is the signer of the cpi. pub self_program: Program<'info, crate::program::LightCompressedToken>, #[account(mut)] pub token_pool_pda: Option<Account<'info, TokenAccount>>, #[account(mut, constraint= if token_pool_pda.is_some() {Ok(token_pool_pda.as_ref().unwrap().key() != compress_or_decompress_token_account.key())}else {err!(crate::ErrorCode::TokenPoolPdaUndefined)}? @crate::ErrorCode::IsTokenPoolPda)] pub compress_or_decompress_token_account: Option<Account<'info, TokenAccount>>, pub token_program: Option<Program<'info, Token>>, pub system_program: Program<'info, System>, } programs/compressed-token/src/spl_compression.rs use crate::{ process_transfer::get_cpi_signer_seeds, CompressedTokenInstructionDataTransfer, TransferInstruction, POOL_SEED, }; pub fn process_compression_or_decompression<'info>( @@ -17,6 +17,20 @@ } } pub fn spl_token_pool_derivation( mint: &Pubkey, program_id: &Pubkey, token_pool_pubkey: &Pubkey, ) -> Result<()> { let seeds = &[POOL_SEED, &mint.to_bytes()[..]]; let (pda, _bump_seed) = Pubkey::find_program_address(seeds, program_id); if pda == *token_pool_pubkey { Ok(()) } else { err!(crate::ErrorCode::InvalidTokenPoolPda) } } pub fn decompress_spl_tokens<'info>( inputs: &CompressedTokenInstructionDataTransfer, ctx: &Context<'_, '_, '_, 'info, TransferInstruction<'info>>, @@ -29,6 +43,8 @@ Some(token_pool_pda) => token_pool_pda.to_account_info(), None => return err!(crate::ErrorCode::CompressedPdaUndefinedForDecompress), }; spl_token_pool_derivation(&inputs.mint, &crate::ID, &token_pool_pda.key())?; let amount = match inputs.compress_or_decompress_amount { Some(amount) => amount, None => return err!(crate::ErrorCode::DeCompressAmountUndefinedForDecompress), @@ -50,10 +66,11 @@ inputs: &CompressedTokenInstructionDataTransfer, ctx: &Context<'_, '_, '_, 'info, TransferInstruction<'info>>, ) -> Result<()> { let recipient_token_pool = match ctx.accounts.token_pool_pda.as_ref() { Some(token_pool_pda) => token_pool_pda.to_account_info(), None => return err!(crate::ErrorCode::CompressedPdaUndefinedForCompress), }; spl_token_pool_derivation(&inputs.mint, &crate::ID, &recipient_token_pool.key())?; let amount = match inputs.compress_or_decompress_amount { Some(amount) => amount, None => return err!(crate::ErrorCode::DeCompressAmountUndefinedForCompress), @@ -65,28 +82,28 @@ .as_ref() .unwrap() .to_account_info(), &recipient_token_pool, &ctx.accounts.authority.to_account_info(), &ctx.accounts .token_program .as_ref() .unwrap() .to_account_info(), amount, ) }",Critical,Ensure that the token_pool_pda account is validated against the expected seeds and bump values to confirm that it is derived correctly.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/162f0926-b84f-4d4a-8966-139fc610a524/light_protocol_audit_final.pdf?table=block&id=0a8bcc85-0c10-495b-92a7-701e5f90053a&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742702400000&signature=NcxekgBOO8I0tPeMN5PuHHA9Np-04BAcxUx1KdjBIso&downloadName=light_protocol_audit_final.pdf,High
Sol-202,"Utilization of Incorrect Authority for Token Transfers spl_compression::compress_spl_tokens is intended to transfer SPL tokens from a specified token account (compress_or_decompress_token_account) to a token pool account (token_pool_pda) to compress tokens.  In the function, transfer is called with cpi_authority_pda as the authority for the token transfer. This implies that cpi_authority_pda is utilized to authorize the transfer instead of ctx.accounts.authority, which is typically expected to be the signer or authority responsible for the action.  The attacker may set up both the token_pool_pda and the compress_or_decompress_token_account to point to the same token account by creating a token account and utilizing it as both the source and destination for the transfer. Since cpi_authority_pda is utilized as the authority, the attacker may authorize the transfer even if it is a self-transfer.  With tokens effectively self-transferred to a pool account, the attacker may then decompress the tokens. Since the attacker controls both accounts involved in the transfer, they may effectively steal tokens from the pool.","pub fn compress_spl_tokens<'info>( inputs: &CompressedTokenInstructionDataTransfer, ctx: &Context<'_, '_, '_, 'info, TransferInstruction<'info>>, ) -> Result<()> { [...] transfer( &ctx.accounts .compress_or_decompress_token_account .as_ref() .unwrap() .to_account_info(), &recipient, &ctx.accounts.cpi_authority_pda.to_account_info(), [...] ) use account_compression::utils::constants::CPI_AUTHORITY_PDA_SEED; use anchor_lang::{prelude::*, solana_program::account_info::AccountInfo}; use anchor_spl::token::Transfer; use crate::{CompressedTokenInstructionDataTransfer, TransferInstruction}; pub fn process_compression_or_decompression<'info>( inputs: &CompressedTokenInstructionDataTransfer, ctx: &Context<'_, '_, '_, 'info, TransferInstruction<'info>>, ) -> Result<()> { if inputs.is_compress { compress_spl_tokens(inputs, ctx) } else if inputs.compress_or_decompress_amount.is_some() { decompress_spl_tokens(inputs, ctx) } else { Ok(()) } } @@ -59,39 +59,54 @@ None => return err!(crate::ErrorCode::DeCompressAmountUndefinedForCompress), }; transfer( &ctx.accounts .compress_or_decompress_token_account .as_ref() .unwrap() .to_account_info(), &recipient, &ctx.accounts.cpi_authority_pda.to_account_info(), &ctx.accounts .token_program .as_ref() .unwrap() .to_account_info(), amount, ) } pub fn transfer<'info>( from: &AccountInfo<'info>, to: &AccountInfo<'info>, authority: &AccountInfo<'info>, token_program: &AccountInfo<'info>, amount: u64, ) -> Result<()> { let (_, bump) = anchor_lang::prelude::Pubkey::find_program_address(&[CPI_AUTHORITY_PDA_SEED], &crate::ID); let bump = &[bump]; let seeds = &[&[CPI_AUTHORITY_PDA_SEED, bump][..]]; let accounts = Transfer { from: from.to_account_info(), to: to.to_account_info(), authority: authority.to_account_info(), }; let cpi_ctx = CpiContext::new_with_signer(token_program.to_account_info(), accounts, seeds); anchor_spl::token::transfer(cpi_ctx, amount) }","use anchor_lang::{prelude::*, solana_program::account_info::AccountInfo}; use anchor_spl::token::Transfer; use crate::{ process_transfer::get_cpi_signer_seeds, CompressedTokenInstructionDataTransfer, TransferInstruction, }; pub fn process_compression_or_decompression<'info>( inputs: &CompressedTokenInstructionDataTransfer, ctx: &Context<'_, '_, '_, 'info, TransferInstruction<'info>>, ) -> Result<()> { if inputs.is_compress { compress_spl_tokens(inputs, ctx) } else { decompress_spl_tokens(inputs, ctx) } } @@ -59,39 +59,54 @@ None => return err!(crate::ErrorCode::DeCompressAmountUndefinedForCompress), }; transfer_compress( &ctx.accounts .compress_or_decompress_token_account .as_ref() .unwrap() .to_account_info(), &recipient, &ctx.accounts.authority.to_account_info(), &ctx.accounts .token_program .as_ref() .unwrap() .to_account_info(), amount, ) } pub fn transfer<'info>( from: &AccountInfo<'info>, to: &AccountInfo<'info>, authority: &AccountInfo<'info>, token_program: &AccountInfo<'info>, amount: u64, ) -> Result<()> { let signer_seeds = get_cpi_signer_seeds(); let signer_seeds_ref = &[&signer_seeds[..]]; let accounts = Transfer { from: from.to_account_info(), to: to.to_account_info(), authority: authority.to_account_info(), }; let cpi_ctx = CpiContext::new_with_signer(token_program.to_account_info(), accounts, signer_seeds_ref); anchor_spl::token::transfer(cpi_ctx, amount) } pub fn transfer_compress<'info>( from: &AccountInfo<'info>, to: &AccountInfo<'info>, authority: &AccountInfo<'info>, token_program: &AccountInfo<'info>, amount: u64, ) -> Result<()> { let accounts = Transfer { from: from.to_account_info(), to: to.to_account_info(), authority: authority.to_account_info(), }; let cpi_ctx = CpiContext::new(token_program.to_account_info(), accounts); anchor_spl::token::transfer(cpi_ctx, amount) }",Critical,ensure that ctx.accounts.authority is used as the authority for token transfers rather than cpi_authority_pda. This ensures that only authorized signers may approve transfers.,https://github.com/Lightprotocol/light-protocol/commit/043e22ad788c9e4b7ac03f07bb2613d081830a39#diff-98099715f41e2c848d7f1498327a3d8b6a3e94e413430c8dd5dde402bf518f65,High
Sol-203,"Changelog Path Update Error. In the original implementation of append_batch, the fillup_index is calculated to determine the upper limit for computing the Merkle path. It includes the condition self.next_index.trailing_ones() as usize + 1, which consists of the last node in the Merkle path computation.  However, during the loop that updates the changelog paths, there is a check if i < self.height - 1 to update the paths. This implies it attempts to update the path even for the last node.  The issue arises because the fillup_index calculation considers the last node (leaf) to be part of the Merkle path computation. Therefore, when updating the changelog paths, it incorrectly attempts to update the path for the last node, which should not be updated.  This inconsistency may result in incorrect Merkle proofs or paths stored in the changelog.","pub fn append_batch( &mut self, leaves: &[&[u8; 32]], ) -> Result<(usize, usize), ConcurrentMerkleTreeError> { [...] for (leaf_i, leaf) in leaves.iter().enumerate() { // Limit until which we fill up the current Merkle path. let fillup_index = if leaf_i < (leaves.len() - 1) { self.next_index.trailing_ones() as usize + 1 } [...] for i in 0..fillup_index { let is_left = current_index % 2 == 0; current_node = if is_left { [...] } else { H::hashv(&[&self.filled_subtrees[i], &current_node])? }; if i < self.height - 1 { self.changelog[self.current_changelog_index].path[i + 1] = current_node; for leaf_j in 0..leaf_i { let changelog_index = (first_changelog_index + leaf_j) % self.changelog_capacity; if self.changelog[changelog_index].path[i + 1] == [0u8; 32] { self.changelog[changelog_index].path[i + 1] = current_node; } } } current_index /= 2; } [...] } [...] } /// Appends a batch of new leaves to the tree.     ///     /// This method contains the common logic and is not intended for external     /// use. Callers should choose between [`append_batch`](ConcurrentMerkleTree::append_batch)     /// and [`append_batch_with_proofs`](ConcurrentMerkleTree::append_batch_with_proofs).     fn append_batch_common<         // The only purpose of this const generic is to force compiler to         // produce separate functions, with and without proof.         //         // Unfortunately, using `Option` is not enough:         //         // https://godbolt.org/z/fEMMfMdPc         // https://godbolt.org/z/T3dxnjMzz         //         // Using the const generic helps and ends up generating two separate         // functions:         //         // https://godbolt.org/z/zGnM7Ycn1         const WITH_PROOFS: bool,     >(         &mut self,         leaves: &[&[u8; 32]],         // Slice for saving Merkle proofs.         //         // Currently it's used only for indexed Merkle trees.         mut proofs: Option<&mut [&mut BoundedVec<[u8; 32]>]>,     ) -> Result<(usize, usize), ConcurrentMerkleTreeError> {         if leaves.is_empty() {             return Err(ConcurrentMerkleTreeError::EmptyLeaves);         }         if (self.next_index() + leaves.len() - 1) >= 1 << self.height {             return Err(ConcurrentMerkleTreeError::TreeFull);         }         if leaves.len() > self.changelog.capacity() {             return Err(ConcurrentMerkleTreeError::BatchGreaterThanChangelog(                 leaves.len(),                 self.changelog.capacity(),             ));         }          let first_leaf_index = self.next_index();         let first_changelog_index = (self.changelog.last_index() + 1) % self.changelog.capacity();         let first_sequence_number = self.sequence_number() + 1;          for (leaf_i, leaf) in leaves.iter().enumerate() {             self.changelog                 .push(ChangelogEntry::<HEIGHT>::default_with_index(                     first_leaf_index + leaf_i,                 ));             let changelog_index = self.changelog_index();              let mut current_index = self.next_index();             let mut current_node = **leaf;              // Limit until which we fill up the current Merkle path.             let fillup_index = if leaf_i < (leaves.len() - 1) {                 self.next_index().trailing_ones() as usize + 1             } else {                 self.height             };              self.changelog[changelog_index].path[0] = **leaf;              // Compute the whole Merkle path up to the `fillup_index`.             //             // On each iteration, we also fill up empty nodes of previous Merkle             // paths with the nodes from the current path - this way we eventually             // fill all the paths while avoiding to calculate too many hashes.             //             // `fillup_index` of the last iteration should be always equal to             // the Merkle tree height. Therefore, after the last iteration, no             // path is going to contain and empty node.             for i in 0..fillup_index {                 let is_left = current_index % 2 == 0;                  if is_left { @@ -577,69 +561,78 @@                     }                      self.filled_subtrees[i] = current_node;                              current_node = H::hashv(&[&current_node, &empty_node])?;                 } else {                     // If the current node is on the right side:                     //                     //     U                     //    / \                     //  SIB  CUR                     //  /     \                     // N       N                     // * The sigling on the left is a ""filled subtree"".                     // * That ""filled subtree"" becomes a part of Merkle proof.                     // * The upper (next current) node is `H(sib, cur)`.                      if WITH_PROOFS {                         // PANICS: `proofs` should be always `Some` at this point.                         proofs.as_mut().unwrap()[leaf_i].push(self.filled_subtrees[i])?;                     }                      current_node = H::hashv(&[&self.filled_subtrees[i], &current_node])?;                 }                  if i < self.height - 1 {                     self.changelog[changelog_index].path[i + 1] = current_node;                      for leaf_j in 0..leaf_i {                         let changelog_index =                             (first_changelog_index + leaf_j) % self.changelog.capacity();                         if self.changelog[changelog_index].path[i + 1] == [0u8; 32] {                             self.changelog[changelog_index].path[i + 1] = current_node;                         }                     }                 }                  current_index /= 2;             }              self.changelog[changelog_index].root = current_node;              self.roots.push(current_node);              self.inc_next_index()?;             self.inc_sequence_number()?;              self.set_rightmost_leaf(leaf);         }          if self.canopy_depth > 0 {             self.update_canopy(first_changelog_index, leaves.len());         }          Ok((first_changelog_index, first_sequence_number))     }","/// Appends a batch of new leaves to the tree.     ///     /// This method contains the common logic and is not intended for external     /// use. Callers should choose between [`append_batch`](ConcurrentMerkleTree::append_batch)     /// and [`append_batch_with_proofs`](ConcurrentMerkleTree::append_batch_with_proofs).     fn append_batch_common<         // The only purpose of this const generic is to force compiler to         // produce separate functions, with and without proof.         //         // Unfortunately, using `Option` is not enough:         //         // https://godbolt.org/z/fEMMfMdPc         // https://godbolt.org/z/T3dxnjMzz         //         // Using the const generic helps and ends up generating two separate         // functions:         //         // https://godbolt.org/z/zGnM7Ycn1         const WITH_PROOFS: bool,     >(         &mut self,         leaves: &[&[u8; 32]],         // Slice for saving Merkle proofs.         //         // Currently it's used only for indexed Merkle trees.         mut proofs: Option<&mut [&mut BoundedVec<[u8; 32]>]>,     ) -> Result<(usize, usize), ConcurrentMerkleTreeError> {         if leaves.is_empty() {             return Err(ConcurrentMerkleTreeError::EmptyLeaves);         }         if (self.next_index() + leaves.len() - 1) >= 1 << self.height {             return Err(ConcurrentMerkleTreeError::TreeFull);         }         if leaves.len() > self.changelog.capacity() {             return Err(ConcurrentMerkleTreeError::BatchGreaterThanChangelog(                 leaves.len(),                 self.changelog.capacity(),             ));         }          let first_leaf_index = self.next_index();         let first_changelog_index = (self.changelog.last_index() + 1) % self.changelog.capacity();         let first_sequence_number = self.sequence_number() + 1;          for (leaf_i, leaf) in leaves.iter().enumerate() {             self.changelog                 .push(ChangelogEntry::<HEIGHT>::default_with_index(                     first_leaf_index + leaf_i,                 ));             let changelog_index = self.changelog_index();              let mut current_index = self.next_index();             let mut current_node = **leaf;                     self.changelog[changelog_index].path[0] = **leaf;              for i in 0..self.height {                          let is_left = current_index % 2 == 0;                  if is_left { @@ -577,69 +561,78 @@                     }                      self.filled_subtrees[i] = current_node;                      // For all non-terminal leaves, stop computing parents as                     // soon as we are on the left side.                     // Computation of the parent nodes is going to happen in                     // the next iterations.                     if leaf_i < leaves.len() - 1 {                         break;                     }                      current_node = H::hashv(&[&current_node, &empty_node])?;                 } else {                     // If the current node is on the right side:                     //                     //     U                     //    / \                     //  SIB  CUR                     //  /     \                     // N       N                     // * The sigling on the left is a ""filled subtree"".                     // * That ""filled subtree"" becomes a part of Merkle proof.                     // * The upper (next current) node is `H(sib, cur)`.                      if WITH_PROOFS {                         // PANICS: `proofs` should be always `Some` at this point.                         proofs.as_mut().unwrap()[leaf_i].push(self.filled_subtrees[i])?;                     }                      current_node = H::hashv(&[&self.filled_subtrees[i], &current_node])?;                 }                  if i < self.height - 1 {                     self.changelog[changelog_index].path[i + 1] = current_node;                      for leaf_j in 0..leaf_i {                         let changelog_index =                             (first_changelog_index + leaf_j) % self.changelog.capacity();                         if self.changelog[changelog_index].path[i + 1] == [0u8; 32] {                             self.changelog[changelog_index].path[i + 1] = current_node;                         }                     }                 }                  current_index /= 2;             }              self.changelog[changelog_index].root = current_node;              self.roots.push(current_node);              self.inc_next_index()?;             self.inc_sequence_number()?;              self.set_rightmost_leaf(leaf);         }          if self.canopy_depth > 0 {             self.update_canopy(first_changelog_index, leaves.len());         }          Ok((first_changelog_index, first_sequence_number))     }",High,Update the loop to exclude the last iteration (fillup_index - 1) during the changelog update. The fillup_index - 1 condition should be incorporated into the i < self.height - 1 check.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/162f0926-b84f-4d4a-8966-139fc610a524/light_protocol_audit_final.pdf?table=block&id=0a8bcc85-0c10-495b-92a7-701e5f90053a&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742702400000&signature=NcxekgBOO8I0tPeMN5PuHHA9Np-04BAcxUx1KdjBIso&downloadName=light_protocol_audit_final.pdf,High
Sol-204,"Absence of Index Validation and Initialization. The IndexedMerkleTree::update function lacks checks to ensure that the new element (new_element) is inserted at its designated index (new_element.index). This validation is critical because the leaf_index in the Merkle tree is derived from new_element.index.  The Merkle tree relies on the correct placement of elements at their respective indices. If an element is inserted at an incorrect index, or if the index does not match the expected value, it will lead to inconsistencies in the Merkle tree structure.","pub fn update(         &mut self,         mut changelog_index: usize,         indexed_changelog_index: usize,         mut new_element: IndexedElement<I>,         mut low_element: IndexedElement<I>,         mut low_element_next_value: BigUint,         low_leaf_proof: &mut BoundedVec<[u8; 32]>,     ) -> Result<IndexedMerkleTreeUpdate<I>, IndexedMerkleTreeError> {                self.patch_elements_and_proof(             indexed_changelog_index,             &mut changelog_index,             &mut new_element,             &mut low_element,             &mut low_element_next_value,             low_leaf_proof,         )?;         // Check that the value of `new_element` belongs to the range         // of `old_low_element`.         if low_element.next_index == I::zero() {             // In this case, the `old_low_element` is the greatest element.             // The value of `new_element` needs to be greater than the value of             // `old_low_element` (and therefore, be the greatest).             if new_element.value <= low_element.value {                 return Err(IndexedMerkleTreeError::LowElementGreaterOrEqualToNewElement);             }         } else {             // The value of `new_element` needs to be greater than the value of             // `old_low_element` (and therefore, be the greatest).             if new_element.value <= low_element.value {                 return Err(IndexedMerkleTreeError::LowElementGreaterOrEqualToNewElement);             }             // The value of `new_element` needs to be lower than the value of             // next element pointed by `old_low_element`.             if new_element.value >= low_element_next_value {                 return Err(IndexedMerkleTreeError::NewElementGreaterOrEqualToNextElement);             }         }         if new_element.next_index != low_element.next_index {             return Err(IndexedMerkleTreeError::NewElementNextIndexMismatch);         }         // Instantiate `new_low_element` - the low element with updated values.         let new_low_element = IndexedElement {             index: low_element.index,             value: low_element.value.clone(),             next_index: new_element.index,         };         // Update low element. If the `old_low_element` does not belong to the         // tree, validating the proof is going to fail.         let old_low_leaf = low_element.hash::<H>(&low_element_next_value)?;          let new_low_leaf = new_low_element.hash::<H>(&new_element.value)?;          let (new_changelog_index, _) = self.merkle_tree.update(             changelog_index,             &old_low_leaf,             &new_low_leaf,             low_element.index.into(),             low_leaf_proof,         )?;          // Emit changelog entry for low element.         let new_low_element = RawIndexedElement {             value: bigint_to_be_bytes_array::<32>(&new_low_element.value).unwrap(),             next_index: new_low_element.next_index,             next_value: bigint_to_be_bytes_array::<32>(&new_element.value)?,             index: new_low_element.index,         };         let low_element_changelog_entry = IndexedChangelogEntry {             element: new_low_element,             proof: low_leaf_proof.as_slice()[..NET_HEIGHT].try_into().unwrap(),             changelog_index: new_changelog_index,         };          self.indexed_changelog.push(low_element_changelog_entry);          // New element is always the newest one in the tree. Since we         // support concurrent updates, the index provided by the caller         // might be outdated. Let's just use the latest index indicated         // by the tree.         new_element.index =             I::try_from(self.next_index()).map_err(|_| IndexedMerkleTreeError::IntegerOverflow)?;          // Append new element.         let mut proof = BoundedVec::with_capacity(self.height);         let new_leaf = new_element.hash::<H>(&low_element_next_value)?;         let (new_changelog_index, _) = self.merkle_tree.append_with_proof(&new_leaf, &mut proof)?;          // Prepare raw new element to save in changelog.         let raw_new_element = RawIndexedElement {             value: bigint_to_be_bytes_array::<32>(&new_element.value).unwrap(),             next_index: new_element.next_index,             next_value: bigint_to_be_bytes_array::<32>(&low_element_next_value)?,             index: new_element.index,         };          // Emit changelog entry for new element.         let new_element_changelog_entry = IndexedChangelogEntry {             element: raw_new_element,             proof: proof.as_slice()[..NET_HEIGHT].try_into().unwrap(),             changelog_index: new_changelog_index,         };         self.indexed_changelog.push(new_element_changelog_entry);          let output = IndexedMerkleTreeUpdate {             new_low_element,             new_low_element_hash: new_low_leaf,             new_high_element: raw_new_element,             new_high_element_hash: new_leaf,         };          Ok(output)     } } ","    pub fn update(         &mut self,         mut changelog_index: usize,         indexed_changelog_index: usize,         new_element_value: BigUint,         mut low_element: IndexedElement<I>,         mut low_element_next_value: BigUint,         low_leaf_proof: &mut BoundedVec<[u8; 32]>,     ) -> Result<IndexedMerkleTreeUpdate<I>, IndexedMerkleTreeError> {         let mut new_element = IndexedElement {             index: I::try_from(self.merkle_tree.next_index())                 .map_err(|_| IndexedMerkleTreeError::IntegerOverflow)?,             value: new_element_value,             next_index: low_element.next_index,         };          self.patch_elements_and_proof(             indexed_changelog_index,             &mut changelog_index,             &mut new_element,             &mut low_element,             &mut low_element_next_value,             low_leaf_proof,         )?;         // Check that the value of `new_element` belongs to the range         // of `old_low_element`.         if low_element.next_index == I::zero() {             // In this case, the `old_low_element` is the greatest element.             // The value of `new_element` needs to be greater than the value of             // `old_low_element` (and therefore, be the greatest).             if new_element.value <= low_element.value {                 return Err(IndexedMerkleTreeError::LowElementGreaterOrEqualToNewElement);             }         } else {             // The value of `new_element` needs to be greater than the value of             // `old_low_element` (and therefore, be the greatest).             if new_element.value <= low_element.value {                 return Err(IndexedMerkleTreeError::LowElementGreaterOrEqualToNewElement);             }             // The value of `new_element` needs to be lower than the value of             // next element pointed by `old_low_element`.             if new_element.value >= low_element_next_value {                 return Err(IndexedMerkleTreeError::NewElementGreaterOrEqualToNextElement);             }         }            // Instantiate `new_low_element` - the low element with updated values.         let new_low_element = IndexedElement {             index: low_element.index,             value: low_element.value.clone(),             next_index: new_element.index,         };         // Update low element. If the `old_low_element` does not belong to the         // tree, validating the proof is going to fail.         let old_low_leaf = low_element.hash::<H>(&low_element_next_value)?;          let new_low_leaf = new_low_element.hash::<H>(&new_element.value)?;          let (new_changelog_index, _) = self.merkle_tree.update(             changelog_index,             &old_low_leaf,             &new_low_leaf,             low_element.index.into(),             low_leaf_proof,         )?;          // Emit changelog entry for low element.         let new_low_element = RawIndexedElement {             value: bigint_to_be_bytes_array::<32>(&new_low_element.value).unwrap(),             next_index: new_low_element.next_index,             next_value: bigint_to_be_bytes_array::<32>(&new_element.value)?,             index: new_low_element.index,         };         let low_element_changelog_entry = IndexedChangelogEntry {             element: new_low_element,             proof: low_leaf_proof.as_slice()[..NET_HEIGHT].try_into().unwrap(),             changelog_index: new_changelog_index,         };          self.indexed_changelog.push(low_element_changelog_entry);          // New element is always the newest one in the tree. Since we         // support concurrent updates, the index provided by the caller         // might be outdated. Let's just use the latest index indicated         // by the tree.         new_element.index =             I::try_from(self.next_index()).map_err(|_| IndexedMerkleTreeError::IntegerOverflow)?;          // Append new element.         let mut proof = BoundedVec::with_capacity(self.height);         let new_leaf = new_element.hash::<H>(&low_element_next_value)?;         let (new_changelog_index, _) = self.merkle_tree.append_with_proof(&new_leaf, &mut proof)?;          // Prepare raw new element to save in changelog.         let raw_new_element = RawIndexedElement {             value: bigint_to_be_bytes_array::<32>(&new_element.value).unwrap(),             next_index: new_element.next_index,             next_value: bigint_to_be_bytes_array::<32>(&low_element_next_value)?,             index: new_element.index,         };          // Emit changelog entry for new element.         let new_element_changelog_entry = IndexedChangelogEntry {             element: raw_new_element,             proof: proof.as_slice()[..NET_HEIGHT].try_into().unwrap(),             changelog_index: new_changelog_index,         };         self.indexed_changelog.push(new_element_changelog_entry);          let output = IndexedMerkleTreeUpdate {             new_low_element,             new_low_element_hash: new_low_leaf,             new_high_element: raw_new_element,             new_high_element_hash: new_leaf,         };          Ok(output)     } } ",High,"Verify that new_element is inserted at new_element.index within the update function. Additionally, since init_value is inserted at index one, ensure that add_highest_element is invoked as part of the tree initialization process.",https://github.com/Lightprotocol/light-protocol/commit/0210a9ac96bff063b3c40d1a50d8724e7d274d85#diff-438f5150c0c85e9cf699a09779704ff2c8d9bd76e77a4cf6b510db11268c6ec8,High
Sol-205,"Inclusion of Lamports as Rent in Rollover Fee Calculation. In the current implementation of the account-compression program, the lamports in the tree and queue are considered as rent for rollover fee calculations. This gives rise to several issues:  During the rollover process, the rent lamports are considered for withdrawal from the old Merkle tree. compute_rollover_fee utilizes ceiling division to calculate the fee based on the rent. Due to ceiling division, the protocol may charge slightly more in fees than required to cover the rent.  For instance, if 10 lamports are the rent and the tree supports 3 node insertions, the ideal fee would be 10 / 3 ≈ 3.33 lamports per insertion. However, with ceiling division, the fee is rounded up to 4 lamports per insertion. Thus, for 3 insertions, the protocol will collect 4 × 3 = 12 lamports in fees instead of 10. These extra lamports collected (2 lamports in this case) are not extracted and remain locked in the tree/queue accounts, effectively becoming inaccessible or unusable funds.  Moreover, the rollover process considers the lamports in the new accounts as rent, allowing that amount to be fetched from the old tree/queue accounts to the fee account. Normally, the program is designed to avoid closing old tree accounts by default (as close_threshold is set to None), but by passing extra lamports to new accounts, the owner may withdraw the total lamports from the old account, resulting in the deletion of the old account.  This manipulation allows the authority owner to bypass the program’s default behavior, prematurely closing and deleting old tree accounts.  ","pub fn compute_rollover_fee( rollover_threshold: u64, tree_height: u32, rent: u64, ) -> Result<u64, UtilsError> { let number_of_transactions = 1 << tree_height; if rollover_threshold > 100 { return Err(UtilsError::InvalidRolloverThreshold); } // rent / (total_number_of_leaves * (rollover_threshold / 100)) // (with ceil division) Ok((rent * 100).div_ceil(number_of_transactions * rollover_threshold)) } programs/account-compression/src/instructions/rollover_state_merkle_tree_and_queue.rs use crate::{     assert_size_equal,     processor::{         initialize_concurrent_merkle_tree::process_initialize_state_merkle_tree,         initialize_nullifier_queue::process_initialize_nullifier_queue,     },     state::{         queue::{queue_from_bytes_zero_copy_mut, QueueAccount},         StateMerkleTreeAccount,     },     state_merkle_tree_from_bytes_zero_copy,     utils::{          check_signer_is_registered_or_authority::{             check_signer_is_registered_or_authority, GroupAccounts,         }, @@ -55,14 +56,19 @@ pub fn process_rollover_state_merkle_tree_nullifier_queue_pair<'a, 'b, 'c: 'info, 'info>(     ctx: Context<'a, 'b, 'c, 'info, RolloverStateMerkleTreeAndNullifierQueue<'info>>, ) -> Result<()> {          assert_size_equal(         &ctx.accounts.old_nullifier_queue.to_account_info(),         &ctx.accounts.new_nullifier_queue.to_account_info(),         ""Queue size mismatch"",     )?;     assert_size_equal(         &ctx.accounts.old_state_merkle_tree.to_account_info(),         &ctx.accounts.new_state_merkle_tree.to_account_info(),         ""Merkle tree size mismatch"",     )?;     let queue_metadata = { @@ -114,8 +120,8 @@             merkle_tree_metadata.rollover_metadata.network_fee,             Some(merkle_tree_metadata.rollover_metadata.rollover_threshold),             Some(merkle_tree_metadata.rollover_metadata.close_threshold),             ctx.accounts.new_state_merkle_tree.get_lamports(),             ctx.accounts.new_nullifier_queue.get_lamports(),         )?;          queue_metadata @@ -138,13 +144,12 @@             queue_metadata.rollover_metadata.network_fee,         )?;     }     let lamports = ctx.accounts.new_nullifier_queue.get_lamports()         + ctx.accounts.new_state_merkle_tree.get_lamports();      transfer_lamports(         &ctx.accounts.old_state_merkle_tree.to_account_info(),         &ctx.accounts.fee_payer.to_account_info(),         lamports,     )?;     Ok(()) }","programs/account-compression/src/utils/check_account.rs use anchor_lang::prelude::*; use anchor_lang::solana_program::{account_info::AccountInfo, msg, rent::Rent};  use crate::errors::AccountCompressionErrorCode;  /// Checks that the account balance is equal to rent exemption. pub fn check_account_balance_is_rent_exempt(account_info: &AccountInfo) -> Result<u64> {     let lamports = account_info.lamports();     let rent_exemption = (Rent::get()?).minimum_balance(account_info.data_len());     if lamports != rent_exemption {         msg!(             ""Account {:?} lamports is not equal to rentexemption: {} != {}"",             account_info.key(),             lamports,             rent_exemption         );         return err!(AccountCompressionErrorCode::InvalidAccountBalance);     }     Ok(lamports) }  programs/account-compression/src/instructions/rollover_state_merkle_tree_and_queue.rs use crate::{     assert_size_equal,     processor::{         initialize_concurrent_merkle_tree::process_initialize_state_merkle_tree,         initialize_nullifier_queue::process_initialize_nullifier_queue,     },     state::{         queue::{queue_from_bytes_zero_copy_mut, QueueAccount},         StateMerkleTreeAccount,     },     state_merkle_tree_from_bytes_zero_copy,     utils::{         check_account::check_account_balance_is_rent_exempt,         check_signer_is_registered_or_authority::{             check_signer_is_registered_or_authority, GroupAccounts,         }, @@ -55,14 +56,19 @@ pub fn process_rollover_state_merkle_tree_nullifier_queue_pair<'a, 'b, 'c: 'info, 'info>(     ctx: Context<'a, 'b, 'c, 'info, RolloverStateMerkleTreeAndNullifierQueue<'info>>, ) -> Result<()> {     // TODO: rollover additional rent as well. (need to add a field to the metadata for this)     let new_merkle_tree_account_info = ctx.accounts.new_state_merkle_tree.to_account_info();     let merkle_tree_rent = check_account_balance_is_rent_exempt(&new_merkle_tree_account_info)?;     let new_queue_account_info = ctx.accounts.new_nullifier_queue.to_account_info();     let queue_rent = check_account_balance_is_rent_exempt(&new_queue_account_info)?;     assert_size_equal(         &ctx.accounts.old_nullifier_queue.to_account_info(),         &new_queue_account_info,         ""Queue size mismatch"",     )?;     assert_size_equal(         &ctx.accounts.old_state_merkle_tree.to_account_info(),         &new_merkle_tree_account_info,         ""Merkle tree size mismatch"",     )?;     let queue_metadata = { @@ -114,8 +120,8 @@             merkle_tree_metadata.rollover_metadata.network_fee,             Some(merkle_tree_metadata.rollover_metadata.rollover_threshold),             Some(merkle_tree_metadata.rollover_metadata.close_threshold),             merkle_tree_rent,             queue_rent,         )?;          queue_metadata @@ -138,13 +144,12 @@             queue_metadata.rollover_metadata.network_fee,         )?;     }     let lamports = merkle_tree_rent + queue_rent;       transfer_lamports(         &ctx.accounts.old_state_merkle_tree.to_account_info(),         &ctx.accounts.fee_payer.to_account_info(),         lamports,     )?;     Ok(()) }",High,"These issues may be mitigated by transferring total_lamports - minimum_rent to the fee account, ensuring that all lamports except the required rent are collected as a fee.  However, this approach introduces a rug pull risk: the tree authority could initialize the tree with excess lamports to artificially inflate the rollover fee, eventually reclaiming both the intended fees and the extra lamports.  To prevent this, it would be more secure to calculate rent explicitly using: let minimum_rent = (Rent::get()?).minimum_balance(size); This ensures that only the required rent is excluded from the fee calculation, reducing the risk of manipulation.",https://github.com/Lightprotocol/light-protocol/commit/afafb283710ec2c2b67ecbc9a0a38dd633fa9b2,High
Sol-206,"Failure to Update Canopy Nodes. The update function in ConcurrentMerkleTree is responsible for updating a leaf node and ensuring that the associated proof remains valid. However, it does not include functionality to update the canopy nodes when a leaf node is updated.  In Merkle trees, a canopy is a subset of nodes that are used in proof generation but are not part of the main tree structure. When generating Merkle proofs, canopy nodes are utilized to compute intermediate hashes.  If canopy nodes are not updated along with the main tree structure, the generated proofs will include outdated or incorrect canopy node hashes. This inconsistency will cause subsequent proof validation to fail.","    pub fn update( &mut self, changelog_index: usize, old_leaf: &[u8; 32], new_leaf: &[u8; 32], leaf_index: usize, proof: &mut BoundedVec<[u8; 32]>, ) -> Result<(usize, usize), ConcurrentMerkleTreeError> { let expected_proof_len = self.height - self.canopy_depth; if proof.len() != expected_proof_len { return Err(ConcurrentMerkleTreeError::InvalidProofLength( expected_proof_len, proof.len(), )); } if leaf_index >= self.next_index() { return Err(ConcurrentMerkleTreeError::CannotUpdateEmpty); } if self.canopy_depth > 0 { self.update_proof_from_canopy(leaf_index, proof)?; } if self.changelog_capacity > 0 && changelog_index != self.changelog_index() { self.update_proof_from_changelog(changelog_index, leaf_index, proof)?; } self.validate_proof(old_leaf, leaf_index, proof)?; self.update_leaf_in_tree(new_leaf, leaf_index, proof); ///     /// 1. Computes the new path and root from `new_leaf` and Merkle proof     ///    (`proof`).     /// 2. Stores the new path as the latest changelog entry and increments the     ///    latest changelog index.     /// 3. Stores the latest root and increments the latest root index.     /// 4. If new leaf is at the rightmost index, stores it as the new     ///    rightmost leaft and stores the Merkle proof as the new rightmost     ///    proof.     ///     /// # Validation     ///     /// This method doesn't validate the proof. Caller is responsible for     /// doing that before.     fn update_leaf_in_tree(         &mut self,         new_leaf: &[u8; 32],         leaf_index: usize,         proof: &BoundedVec<[u8; 32]>,     ) -> Result<(usize, usize), ConcurrentMerkleTreeError> {         let mut current_node = *new_leaf;         let mut changelog_path = [[0u8; 32]; HEIGHT];         for (level, sibling) in proof.iter().enumerate() {             changelog_path[level] = current_node;             current_node = compute_parent_node::<H>(&current_node, sibling, leaf_index, level)?;         }          self.inc_sequence_number()?;          let changelog_entry = ChangelogEntry::new(current_node, changelog_path, leaf_index);          self.roots.push(current_node);          // Check if the leaf is the last leaf in the tree.         if self.next_index() < (1 << self.height) {             changelog_entry.update_proof(self.next_index(), &mut self.filled_subtrees)?;             // Check if we updated the rightmost leaf.             if leaf_index >= self.current_index() {                 self.set_rightmost_leaf(new_leaf);             }         }         self.changelog.push(changelog_entry);              Ok((self.changelog.last_index(), self.sequence_number()))     }      /// Replaces the `old_leaf` under the `leaf_index` with a `new_leaf`, using     /// the given `proof` and `changelog_index` (pointing to the changelog entry     /// which was the newest at the time of preparing the proof).     #[inline(never)]     pub fn update(         &mut self,         changelog_index: usize,         old_leaf: &[u8; 32],         new_leaf: &[u8; 32],         leaf_index: usize,         proof: &mut BoundedVec<[u8; 32]>,     ) -> Result<(usize, usize), ConcurrentMerkleTreeError> {         let expected_proof_len = self.height - self.canopy_depth;         if proof.len() != expected_proof_len {             return Err(ConcurrentMerkleTreeError::InvalidProofLength(                 expected_proof_len,                 proof.len(),             ));         }         if leaf_index >= self.next_index() {             return Err(ConcurrentMerkleTreeError::CannotUpdateEmpty);         }          if self.canopy_depth > 0 {             self.update_proof_from_canopy(leaf_index, proof)?;         }         if changelog_index != self.changelog_index() {             self.update_proof_from_changelog(changelog_index, leaf_index, proof)?;         }         self.validate_proof(old_leaf, leaf_index, proof)?;         self.update_leaf_in_tree(new_leaf, leaf_index, proof)     } ","merkle-tree/concurrent/src/lib.rs  /// Updates the leaf under `leaf_index` with the `new_leaf` value.     ///     /// 1. Computes the new path and root from `new_leaf` and Merkle proof     ///    (`proof`).     /// 2. Stores the new path as the latest changelog entry and increments the     ///    latest changelog index.     /// 3. Stores the latest root and increments the latest root index.     /// 4. If new leaf is at the rightmost index, stores it as the new     ///    rightmost leaft and stores the Merkle proof as the new rightmost     ///    proof.     ///     /// # Validation     ///     /// This method doesn't validate the proof. Caller is responsible for     /// doing that before.     fn update_leaf_in_tree(         &mut self,         new_leaf: &[u8; 32],         leaf_index: usize,         proof: &BoundedVec<[u8; 32]>,     ) -> Result<(usize, usize), ConcurrentMerkleTreeError> {         let mut current_node = *new_leaf;         let mut changelog_path = [[0u8; 32]; HEIGHT];         for (level, sibling) in proof.iter().enumerate() {             changelog_path[level] = current_node;             current_node = compute_parent_node::<H>(&current_node, sibling, leaf_index, level)?;         }          self.inc_sequence_number()?;          let changelog_entry = ChangelogEntry::new(current_node, changelog_path, leaf_index);          self.roots.push(current_node);          // Check if the leaf is the last leaf in the tree.         if self.next_index() < (1 << self.height) {             changelog_entry.update_proof(self.next_index(), &mut self.filled_subtrees)?;             // Check if we updated the rightmost leaf.             if leaf_index >= self.current_index() {                 self.set_rightmost_leaf(new_leaf);             }         }         self.changelog.push(changelog_entry);          if self.canopy_depth > 0 {             self.update_canopy(self.changelog.last_index(), 1);         }          Ok((self.changelog.last_index(), self.sequence_number()))     }      /// Replaces the `old_leaf` under the `leaf_index` with a `new_leaf`, using     /// the given `proof` and `changelog_index` (pointing to the changelog entry     /// which was the newest at the time of preparing the proof).     #[inline(never)]     pub fn update(         &mut self,         changelog_index: usize,         old_leaf: &[u8; 32],         new_leaf: &[u8; 32],         leaf_index: usize,         proof: &mut BoundedVec<[u8; 32]>,     ) -> Result<(usize, usize), ConcurrentMerkleTreeError> {         let expected_proof_len = self.height - self.canopy_depth;         if proof.len() != expected_proof_len {             return Err(ConcurrentMerkleTreeError::InvalidProofLength(                 expected_proof_len,                 proof.len(),             ));         }         if leaf_index >= self.next_index() {             return Err(ConcurrentMerkleTreeError::CannotUpdateEmpty);         }          if self.canopy_depth > 0 {             self.update_proof_from_canopy(leaf_index, proof)?;         }         if changelog_index != self.changelog_index() {             self.update_proof_from_changelog(changelog_index, leaf_index, proof)?;         }         self.validate_proof(old_leaf, leaf_index, proof)?;         self.update_leaf_in_tree(new_leaf, leaf_index, proof)     }   merkle-tree/reference/src/lib.rs    /// Number of nodes to include in canopy, based on `canopy_depth`.     pub fn canopy_size(&self) -> usize {         (1 << (self.canopy_depth + 1)) - 2     }      fn update_upper_layers(&mut self, mut i: usize) -> Result<(), HasherError> {         for level in 1..self.height {             i /= 2; @@ -185,6 +190,28 @@ where         Ok(proof)     }      pub fn get_canopy(&self) -> Result<BoundedVec<[u8; 32]>, BoundedVecError> {         if self.canopy_depth == 0 {             return Ok(BoundedVec::with_capacity(0));         }         let mut canopy = BoundedVec::with_capacity(self.canopy_size());          let mut num_nodes_in_level = 2;         for i in 0..self.canopy_depth {             let level = self.height - 1 - i;             for j in 0..num_nodes_in_level {                 let node = self.layers[level]                     .get(j)                     .cloned()                     .unwrap_or(H::zero_bytes()[level]);                 canopy.push(node)?;             }             num_nodes_in_level *= 2;         }          Ok(canopy)     }",High,Include logic in the update function to update the canopy nodes alongside the main tree structure whenever a leaf node is modified.,https://github.com/Lightprotocol/light-protocol/commit/587ca5f39203cfca1591fde6de02eb2911a5c258#diff-557b7f9d167847113d9dbe17a08803a31d9139ea1f7420cedfa19f8b360f1ee4,High
Sol-207,"Hash Collision in Merkle Tree. This vulnerability arises from an assumption in create_cpi_accounts_and_instruction_data that all remaining accounts in the ctx.remaining_accounts vector are unique. Specifically, it assumes that different Merkle tree accounts should appear only once in the vector.  However, if an attacker manipulates ctx.remaining_accounts to include the same Merkle tree account multiple times (e.g., remaining_accounts[0] = tree_key and remaining_accounts[1] = tree_key), then different output_compressed_accounts may reference the same tree but at different indices.  Each time merkle_tree_index changes between iterations, the value of num_leaves_in_tree is reset to zero. As a result, output_compressed_account_indices[j] for both compressed accounts will be identical, causing multiple compressed accounts to share the same leaf index in the same tree.  This leads to identical leaf hashes being inserted into the tree at the same index for different accounts—resulting in a hash collision in the Merkle tree.","/// Creates CPI accounts, instruction data, and performs checks. /// - Merkle tree indices must be in order. /// - Hashes output accounts for insertion and event. /// - Collects sequence numbers for event. /// /// Checks: /// 1. Checks whether a Merkle tree is program owned, if so checks write ///    eligibility. /// 2. Checks ordering of Merkle tree indices. /// 3. Checks that addresses in output compressed accounts have been created or ///    exist in input compressed accounts. An address may not be used in an ///    output compressed accounts. This will close the account. #[allow(clippy::too_many_arguments)] pub fn create_cpi_accounts_and_instruction_data<'a>(     output_compressed_accounts: &[OutputCompressedAccountWithPackedContext],     output_compressed_account_indices: &mut [u32],     output_compressed_account_hashes: &mut [[u8; 32]],     compressed_account_addresses: &mut Vec<Option<[u8; 32]>>,     invoking_program: &Option<Pubkey>,     hashed_pubkeys: &mut Vec<(Pubkey, [u8; 32])>,     sequence_numbers: &mut Vec<MerkleTreeSequenceNumber>,     remaining_accounts: &'a [AccountInfo<'a>],     account_infos: &mut Vec<AccountInfo<'a>>,     accounts: &mut Vec<AccountMeta>, ) -> Result<Vec<u8>> {     let mut current_index: i16 = -1;     let mut num_leaves_in_tree: u32 = 0;     let mut mt_next_index = 0;     let num_leaves = output_compressed_account_hashes.len();     let mut instruction_data = Vec::<u8>::with_capacity(12 + 33 * num_leaves);     let mut hashed_merkle_tree = [0u8; 32];     let mut index_merkle_tree_account = 0;         // Anchor instruction signature.     instruction_data.extend_from_slice(&[199, 144, 10, 82, 247, 142, 143, 7]);     // leaves vector length (for borsh compat)     instruction_data.extend_from_slice(&(num_leaves as u32).to_le_bytes());      for (j, account) in output_compressed_accounts.iter().enumerate() {         // if mt index == current index Merkle tree account info has already been added.         // if mt index != current index, Merkle tree account info is new, add it.         #[allow(clippy::comparison_chain)]         if account.merkle_tree_index as i16 == current_index {             // Do nothing, but it is the most common case.         } else if account.merkle_tree_index as i16 > current_index {             current_index = account.merkle_tree_index.into();             let seq;             // Check 1.             (mt_next_index, _, seq) = check_program_owner_state_merkle_tree(                 &remaining_accounts[account.merkle_tree_index as usize],                 invoking_program,             )?;             let account_info =                 remaining_accounts[account.merkle_tree_index as usize].to_account_info();              sequence_numbers.push(MerkleTreeSequenceNumber {                 pubkey: account_info.key(),                 seq,             });             hashed_merkle_tree = match hashed_pubkeys.iter().find(|x| x.0 == account_info.key()) {                 Some(hashed_merkle_tree) => hashed_merkle_tree.1,                 None => {                     hash_to_bn254_field_size_be(&account_info.key().to_bytes())                         .unwrap()                         .0                 }             };                   accounts.push(AccountMeta {                 pubkey: account_info.key(),                 is_signer: false,                 is_writable: true,             });             account_infos.push(account_info);              num_leaves_in_tree = 0;             index_merkle_tree_account += 1;         } else {             // Check 2.             // Output Merkle tree indices must be in order since we use the             // number of leaves in a Merkle tree to determine the correct leaf             // index. Since the leaf index is part of the hash this is security             // critical.             return err!(SystemProgramError::OutputMerkleTreeIndicesNotInOrder);         }          // Check 3.         if let Some(address) = account.compressed_account.address {             if let Some(position) = compressed_account_addresses                 .iter()                 .filter(|x| x.is_some())                 .position(|&x| x.unwrap() == address)             {                 compressed_account_addresses.remove(position);             } else {                 msg!(""Address {:?}, is no new address and does not exist in input compressed accounts."", address);                 msg!(                     ""Remaining compressed_account_addresses: {:?}"",                     compressed_account_addresses                 );                 return Err(SystemProgramError::InvalidAddress.into());             }         }          output_compressed_account_indices[j] = mt_next_index + num_leaves_in_tree;         num_leaves_in_tree += 1;         if account.compressed_account.data.is_some() && invoking_program.is_none() {             msg!(""Invoking program is not provided."");             msg!(""Only program owned compressed accounts can have data."");             return err!(SystemProgramError::InvokingProgramNotProvided);         }         let hashed_owner = match hashed_pubkeys             .iter()             .find(|x| x.0 == account.compressed_account.owner)         {             Some(hashed_owner) => hashed_owner.1,             None => {                 let hashed_owner =                     hash_to_bn254_field_size_be(&account.compressed_account.owner.to_bytes())                         .unwrap()                         .0;                 hashed_pubkeys.push((account.compressed_account.owner, hashed_owner));                 hashed_owner             }         };         // Compute output compressed account hash.         output_compressed_account_hashes[j] = account             .compressed_account             .hash_with_hashed_values::<Poseidon>(                 &hashed_owner,                 &hashed_merkle_tree,                 &output_compressed_account_indices[j],             )?;         // - 1 since we want the index of the next account index.         instruction_data.extend_from_slice(&[index_merkle_tree_account - 1]);         instruction_data.extend_from_slice(&output_compressed_account_hashes[j]);     }     Ok(instruction_data) }","/// Creates CPI accounts, instruction data, and performs checks. /// - Merkle tree indices must be in order. /// - Hashes output accounts for insertion and event. /// - Collects sequence numbers for event. /// /// Checks: /// 1. Checks whether a Merkle tree is program owned, if so checks write ///    eligibility. /// 2. Checks ordering of Merkle tree indices. /// 3. Checks that addresses in output compressed accounts have been created or ///    exist in input compressed accounts. An address may not be used in an ///    output compressed accounts. This will close the account. #[allow(clippy::too_many_arguments)] pub fn create_cpi_accounts_and_instruction_data<'a>(     output_compressed_accounts: &[OutputCompressedAccountWithPackedContext],     output_compressed_account_indices: &mut [u32],     output_compressed_account_hashes: &mut [[u8; 32]],     compressed_account_addresses: &mut Vec<Option<[u8; 32]>>,     invoking_program: &Option<Pubkey>,     hashed_pubkeys: &mut Vec<(Pubkey, [u8; 32])>,     sequence_numbers: &mut Vec<MerkleTreeSequenceNumber>,     remaining_accounts: &'a [AccountInfo<'a>],     account_infos: &mut Vec<AccountInfo<'a>>,     accounts: &mut Vec<AccountMeta>, ) -> Result<Vec<u8>> {     let mut current_index: i16 = -1;     let mut num_leaves_in_tree: u32 = 0;     let mut mt_next_index = 0;     let num_leaves = output_compressed_account_hashes.len();     let mut instruction_data = Vec::<u8>::with_capacity(12 + 33 * num_leaves);     let mut hashed_merkle_tree = [0u8; 32];     let mut index_merkle_tree_account = 0;     let number_of_merkle_trees =         output_compressed_accounts.last().unwrap().merkle_tree_index as usize + 1;     let mut merkle_tree_pubkeys = Vec::<Pubkey>::with_capacity(number_of_merkle_trees);      // Anchor instruction signature.     instruction_data.extend_from_slice(&[199, 144, 10, 82, 247, 142, 143, 7]);     // leaves vector length (for borsh compat)     instruction_data.extend_from_slice(&(num_leaves as u32).to_le_bytes());      for (j, account) in output_compressed_accounts.iter().enumerate() {         // if mt index == current index Merkle tree account info has already been added.         // if mt index != current index, Merkle tree account info is new, add it.         #[allow(clippy::comparison_chain)]         if account.merkle_tree_index as i16 == current_index {             // Do nothing, but it is the most common case.         } else if account.merkle_tree_index as i16 > current_index {             current_index = account.merkle_tree_index.into();             let seq;             // Check 1.             (mt_next_index, _, seq) = check_program_owner_state_merkle_tree(                 &remaining_accounts[account.merkle_tree_index as usize],                 invoking_program,             )?;             let account_info =                 remaining_accounts[account.merkle_tree_index as usize].to_account_info();              sequence_numbers.push(MerkleTreeSequenceNumber {                 pubkey: account_info.key(),                 seq,             });             hashed_merkle_tree = match hashed_pubkeys.iter().find(|x| x.0 == account_info.key()) {                 Some(hashed_merkle_tree) => hashed_merkle_tree.1,                 None => {                     hash_to_bn254_field_size_be(&account_info.key().to_bytes())                         .unwrap()                         .0                 }             };             // check Merkle tree uniqueness             if merkle_tree_pubkeys.contains(&account_info.key()) {                 return err!(SystemProgramError::OutputMerkleTreeNotUnique);             } else {                 merkle_tree_pubkeys.push(account_info.key());             }             accounts.push(AccountMeta {                 pubkey: account_info.key(),                 is_signer: false,                 is_writable: true,             });             account_infos.push(account_info);              num_leaves_in_tree = 0;             index_merkle_tree_account += 1;         } else {             // Check 2.             // Output Merkle tree indices must be in order since we use the             // number of leaves in a Merkle tree to determine the correct leaf             // index. Since the leaf index is part of the hash this is security             // critical.             return err!(SystemProgramError::OutputMerkleTreeIndicesNotInOrder);         }          // Check 3.         if let Some(address) = account.compressed_account.address {             if let Some(position) = compressed_account_addresses                 .iter()                 .filter(|x| x.is_some())                 .position(|&x| x.unwrap() == address)             {                 compressed_account_addresses.remove(position);             } else {                 msg!(""Address {:?}, is no new address and does not exist in input compressed accounts."", address);                 msg!(                     ""Remaining compressed_account_addresses: {:?}"",                     compressed_account_addresses                 );                 return Err(SystemProgramError::InvalidAddress.into());             }         }          output_compressed_account_indices[j] = mt_next_index + num_leaves_in_tree;         num_leaves_in_tree += 1;         if account.compressed_account.data.is_some() && invoking_program.is_none() {             msg!(""Invoking program is not provided."");             msg!(""Only program owned compressed accounts can have data."");             return err!(SystemProgramError::InvokingProgramNotProvided);         }         let hashed_owner = match hashed_pubkeys             .iter()             .find(|x| x.0 == account.compressed_account.owner)         {             Some(hashed_owner) => hashed_owner.1,             None => {                 let hashed_owner =                     hash_to_bn254_field_size_be(&account.compressed_account.owner.to_bytes())                         .unwrap()                         .0;                 hashed_pubkeys.push((account.compressed_account.owner, hashed_owner));                 hashed_owner             }         };         // Compute output compressed account hash.         output_compressed_account_hashes[j] = account             .compressed_account             .hash_with_hashed_values::<Poseidon>(                 &hashed_owner,                 &hashed_merkle_tree,                 &output_compressed_account_indices[j],             )?;         // - 1 since we want the index of the next account index.         instruction_data.extend_from_slice(&[index_merkle_tree_account - 1]);         instruction_data.extend_from_slice(&output_compressed_account_hashes[j]);     }     Ok(instruction_data) }",High,Introduce a validation step to ensure that each Merkle tree in ctx.remaining_accounts is unique before processing. This prevents duplicate references to the same tree and mitigates the risk of hash collisions caused by repeated use of the same account.,https://github.com/Lightprotocol/light-protocol/commit/bb222d4961938607e50d5b209c84f1acceb7fca7#diff-2768b720228fc9c7fa739661abf355f30c56e018b539edf7030a39337305ea28,High
Sol-208,"Inadequate Verification of Non-executable Programs In the emit_indexer_event function, the purpose of verifying the public key and executability of the noop_program is to ensure that events are emitted through a legitimate and intended no-operation (noop) program.  However, the current validation logic for the noop_program contains a flaw. It checks whether the public key is correct and whether the program is executable simultaneously, but the logic may allow non-executable programs to pass this check.  As a result, there is a risk that a non-executable program could be incorrectly treated as valid, leading to a failed invocation when attempting to emit the event.","#[inline(never)] pub fn emit_indexer_event(data: Vec<u8>, noop_program: &AccountInfo) -> Result<()> {     if noop_program.key() != Pubkey::new_from_array(NOOP_PUBKEY) && noop_program.executable {         return err!(AccountCompressionErrorCode::InvalidNoopPubkey);     }     let instruction = Instruction {         program_id: noop_program.key(),         accounts: vec![],         data,     };     invoke(&instruction, &[noop_program.to_account_info()])?;     Ok(()) }","#[inline(never)] pub fn emit_indexer_event(data: Vec<u8>, noop_program: &AccountInfo) -> Result<()> {     if noop_program.key() != Pubkey::new_from_array(NOOP_PUBKEY) && !noop_program.executable {         return err!(AccountCompressionErrorCode::InvalidNoopPubkey);     }     let instruction = Instruction {         program_id: noop_program.key(),         accounts: vec![],         data,     };     invoke(&instruction, &[noop_program.to_account_info()])?;     Ok(()) }",Medium,"Update the condition in emit_indexer_event to reject the noop_program if it is either not the correct noop program or if it is not executable. Specifically, ensure the condition checks:  if noop_program.key() != Pubkey::new_from_array(NOOP_PUBKEY) || !noop_program.executable {     return Err(ProgramError::InvalidArgument); }  This guarantees that the event is only emitted through a valid, executable noop program, preventing invocation errors and maintaining program integrity.  ",https://github.com/Lightprotocol/light-protocol/commit/fea5e3a60b4c23d1b1f094dab19f701dd2b038cc,High
Sol-209,"Lack of Merkle Tree Association Check. In invoke_cpi::process_cpi_context, there is no validation to ensure that all input and output compressed accounts belong to the same Merkle tree as specified by CpiContextAccount.associated_merkle_tree. This introduces a significant vulnerability.  The CpiContextAccount is expected to maintain a reference to a specific Merkle tree, which is used to validate compressed accounts via Merkle proofs. Without verifying that the input and output compressed accounts are associated with the same Merkle tree, it becomes possible to pass in accounts from different Merkle trees.  This can result in incorrect or invalid proof verifications, as the proofs and the associated Merkle tree hashes may not match, potentially compromising the integrity of the system.","pub fn process_cpi_context<'info>(     mut inputs: InstructionDataInvokeCpi,     ctx: &mut Context<'_, '_, '_, 'info, InvokeCpiInstruction<'info>>,   ) -> Result<Option<InstructionDataInvokeCpi>> {     let cpi_context = &inputs.cpi_context;     if ctx.accounts.get_cpi_context_account().is_some() && cpi_context.is_none() {         msg!(""cpi context account is some but cpi context is none"");         return err!(SystemProgramError::CpiContextMissing);     }     if ctx.accounts.get_cpi_context_account().is_none() && cpi_context.is_some() {         msg!(""cpi context account is none but cpi context is some"");         return err!(SystemProgramError::CpiContextAccountUndefined);     }      if let Some(cpi_context) = cpi_context {         let fee_payer = ctx.accounts.fee_payer.key();         let cpi_context_account = match ctx.accounts.get_cpi_context_account() {             Some(cpi_context_account) => cpi_context_account,             None => return err!(SystemProgramError::CpiContextMissing),         };                              if cpi_context.set_context {             set_cpi_context(fee_payer, cpi_context_account, inputs)?;             return Ok(None);         } else {             if cpi_context_account.context.is_empty() {                 msg!(""cpi context account : {:?}"", cpi_context_account);                 msg!(""fee payer : {:?}"", fee_payer);                 msg!(""cpi context  : {:?}"", cpi_context);                 return err!(SystemProgramError::CpiContextEmpty);             } else if cpi_context_account.fee_payer != fee_payer || cpi_context.first_set_context {                 msg!(""cpi context account : {:?}"", cpi_context_account);                 msg!(""fee payer : {:?}"", fee_payer);                 msg!(""cpi context  : {:?}"", cpi_context);                 return err!(SystemProgramError::CpiContextFeePayerMismatch);             }             inputs.combine(&cpi_context_account.context);             cpi_context_account.context = Vec::new();             cpi_context_account.fee_payer = Pubkey::default();         }     }     Ok(Some(inputs)) }","/// Cpi context enables the use of input compressed accounts owned by different /// programs. /// /// Example: /// - a transaction calling a pda program needs to transfer tokens and modify a ///   compressed pda /// - the pda is owned by pda program while the tokens are owned by the compressed ///   token program /// /// without cpi context: /// - naively invoking each compressed token via cpi and modifying the pda ///   requires two proofs 128 bytes and ~100,000 CU each /// /// with cpi context: /// - only one proof is required -> less instruction data and CU cost /// 1. first invocation (token program) performs signer checks of the compressed ///    token accounts, caches these in the cpi context and returns. The state ///    transition is not executed yet. /// 2. second invocation (pda program) performs signer checks of the pda ///    compressed account, reads cpi context and combines the instruction inputs ///    with verified inputs from the cpi context. The proof is verified and ///    other state transition is executed with the combined inputs. pub fn process_cpi_context<'info>(     mut inputs: InstructionDataInvokeCpi,     cpi_context_account: &mut Option<Account<'info, CpiContextAccount>>,     fee_payer: Pubkey,     remaining_accounts: &[AccountInfo<'info>], ) -> Result<Option<InstructionDataInvokeCpi>> {     let cpi_context = &inputs.cpi_context;     if cpi_context_account.is_some() && cpi_context.is_none() {         msg!(""cpi context account is some but cpi context is none"");         return err!(SystemProgramError::CpiContextMissing);     }          if let Some(cpi_context) = cpi_context {         let cpi_context_account = match cpi_context_account {              Some(cpi_context_account) => cpi_context_account,             None => return err!(SystemProgramError::CpiContextAccountUndefined),         };         let index = if !inputs             .input_compressed_accounts_with_merkle_context             .is_empty()         {             inputs.input_compressed_accounts_with_merkle_context[0]                 .merkle_context                 .merkle_tree_pubkey_index         } else if !inputs.output_compressed_accounts.is_empty() {             inputs.output_compressed_accounts[0].merkle_tree_index         } else {             return err!(SystemProgramError::NoInputs);         };         let first_merkle_tree_pubkey = remaining_accounts[index as usize].key();         if first_merkle_tree_pubkey != cpi_context_account.associated_merkle_tree {             msg!(                 ""first_merkle_tree_pubkey {:?} != associated_merkle_tree {:?}"",                 first_merkle_tree_pubkey,                 cpi_context_account.associated_merkle_tree             );             return err!(SystemProgramError::CpiContextAssociatedMerkleTreeMismatch);         }         if cpi_context.set_context {             set_cpi_context(fee_payer, cpi_context_account, inputs)?;             return Ok(None);         } else {             if cpi_context_account.context.is_empty() {                 msg!(""cpi context account : {:?}"", cpi_context_account);                 msg!(""fee payer : {:?}"", fee_payer);                 msg!(""cpi context  : {:?}"", cpi_context);                 return err!(SystemProgramError::CpiContextEmpty);             } else if cpi_context_account.fee_payer != fee_payer || cpi_context.first_set_context {                 msg!(""cpi context account : {:?}"", cpi_context_account);                 msg!(""fee payer : {:?}"", fee_payer);                 msg!(""cpi context  : {:?}"", cpi_context);                 return err!(SystemProgramError::CpiContextFeePayerMismatch);             }             inputs.combine(&cpi_context_account.context);             cpi_context_account.context = Vec::new();             cpi_context_account.fee_payer = Pubkey::default();         }     }     Ok(Some(inputs)) }",Medium,"Verify that the Merkle tree associated with each compressed account matches the associated_merkle_tree in CpiContextAccount. This ensures that all accounts involved are validated against the same Merkle tree, maintaining consistency and preventing invalid or mismatched proof verifications.  ",https://github.com/Lightprotocol/light-protocol/commit/0e0fec6de1936eff454c0c498a3a703670c65e10#diff-e9d5d26d4d2ef5207c312ac8f3e41800ef55272874b3642d5312fbc7944e32f0,High
Sol-210,"Insecure Context Management  The vulnerability stems from the lack of explicit access control when utilizing CpiContextAccount in invoke_cpi. In InvokeCpiInstruction, the CpiContextAccount is meant to hold or manage context information required for cross-program invocation (CPI).  However, there are no specific checks or restrictions on who may modify or access this CpiContextAccount. This lack of control may be exploited by injecting a different proof during the utilization of CpiContextAccount—especially when the context spans multiple transactions instead of a single transaction—allowing an attacker to reset the context account and remove unused invoke inputs.","programs/system/src/invoke_cpi/instruction.rs #[derive(Accounts)] pub struct InvokeCpiInstruction<'info> {      #[account(mut)]     pub fee_payer: Signer<'info>,     pub authority: Signer<'info>,     /// CHECK:     #[account(     seeds = [&crate::ID.to_bytes()], bump, seeds::program = &account_compression::ID,     )]     pub registered_program_pda:         Account<'info, account_compression::instructions::register_program::RegisteredProgram>,     /// CHECK: checked in emit_event.rs.     pub noop_program: UncheckedAccount<'info>,     /// CHECK:     #[account(seeds = [CPI_AUTHORITY_PDA_SEED], bump)]     pub account_compression_authority: UncheckedAccount<'info>,     /// CHECK:     pub account_compression_program: Program<'info, AccountCompression>,     /// CHECK: checked in cpi_signer_check.     pub invoking_program: UncheckedAccount<'info>,     #[account(         mut,         seeds = [SOL_POOL_PDA_SEED], bump     )]     pub sol_pool_pda: Option<UncheckedAccount<'info>>,     #[account(mut)]     pub decompression_recipient: Option<UncheckedAccount<'info>>,     pub system_program: Program<'info, System>,     #[account(mut)]     pub cpi_context_account: Option<Account<'info, CpiContextAccount>>, }  impl<'info> InvokeCpiAccounts<'info> for InvokeCpiInstruction<'info> {     fn get_invoking_program(&self) -> &UncheckedAccount<'info> {         &self.invoking_program     }     fn get_cpi_context_account(&mut self) -> &mut Option<Account<'info, CpiContextAccount>> {         &mut self.cpi_context_account     } }  impl<'info> SignerAccounts<'info> for InvokeCpiInstruction<'info> {     fn get_fee_payer(&self) -> &Signer<'info> {         &self.fee_payer     }      fn get_authority(&self) -> &Signer<'info> {         &self.authority     } }  impl<'info> InvokeAccounts<'info> for InvokeCpiInstruction<'info> {     fn get_registered_program_pda(         &self,     ) -> &Account<'info, account_compression::instructions::register_program::RegisteredProgram>     {         &self.registered_program_pda     }      fn get_noop_program(&self) -> &UncheckedAccount<'info> {         &self.noop_program     }      fn get_account_compression_authority(&self) -> &UncheckedAccount<'info> {         &self.account_compression_authority     }      fn get_account_compression_program(&self) -> &Program<'info, AccountCompression> {         &self.account_compression_program     }      fn get_sol_pool_pda(&self) -> Option<&UncheckedAccount<'info>> {         self.sol_pool_pda.as_ref()     }      fn get_decompression_recipient(&self) -> Option<&UncheckedAccount<'info>> {         self.decompression_recipient.as_ref()     }      fn get_system_program(&self) -> &Program<'info, System> {         &self.system_program     } }    programs/system/src/invoke_cpi/process_cpi_context.rs pub fn process_cpi_context<'info>(     mut inputs: InstructionDataInvokeCpi,     ctx: &mut Context<'_, '_, '_, 'info, InvokeCpiInstruction<'info>>,   ) -> Result<Option<InstructionDataInvokeCpi>> {     let cpi_context = &inputs.cpi_context;     if ctx.accounts.get_cpi_context_account().is_some() && cpi_context.is_none() {         msg!(""cpi context account is some but cpi context is none"");         return err!(SystemProgramError::CpiContextMissing);     }     if ctx.accounts.get_cpi_context_account().is_none() && cpi_context.is_some() {         msg!(""cpi context account is none but cpi context is some"");         return err!(SystemProgramError::CpiContextAccountUndefined);     }      if let Some(cpi_context) = cpi_context {         let fee_payer = ctx.accounts.fee_payer.key();         let cpi_context_account = match ctx.accounts.get_cpi_context_account() {             Some(cpi_context_account) => cpi_context_account,             None => return err!(SystemProgramError::CpiContextMissing),         };         if cpi_context.set_context {             set_cpi_context(fee_payer, cpi_context_account, inputs)?;             return Ok(None); @@ -53,12 +90,12 @@ pub fn set_cpi_context(     cpi_context_account: &mut CpiContextAccount,     mut inputs: InstructionDataInvokeCpi, ) -> Result<()> {     // Assumption:     // - This is safe from someone inserting data in the cpi_context_account     //   ahead since we require the account to be wiped in the beginning of a     //   transaction     // - When implemented correctly there cannot be any leftover data in the     //   account since if the transaction fails the account doesn't changes      // Expected usage:     // 1. The first invocation is marked with @@ -88,3 +125,619 @@ fn clean_input_data(inputs: &mut InstructionDataInvokeCpi) {     inputs.signer_seeds = Vec::new();     inputs.proof = None; }","#[derive(Accounts)] pub struct InvokeCpiInstruction<'info> {     /// Fee payer needs to be mutable to pay rollover and protocol fees.     #[account(mut)]     pub fee_payer: Signer<'info>,     pub authority: Signer<'info>,     /// CHECK:     #[account(     seeds = [&crate::ID.to_bytes()], bump, seeds::program = &account_compression::ID,     )]     pub registered_program_pda: AccountInfo<'info>,      /// CHECK: checked in emit_event.rs.     pub noop_program: UncheckedAccount<'info>,     /// CHECK:     #[account(seeds = [CPI_AUTHORITY_PDA_SEED], bump)]     pub account_compression_authority: UncheckedAccount<'info>,     /// CHECK:     pub account_compression_program: Program<'info, AccountCompression>,     /// CHECK: checked in cpi_signer_check.     pub invoking_program: UncheckedAccount<'info>,     #[account(         mut,         seeds = [SOL_POOL_PDA_SEED], bump     )]     pub sol_pool_pda: Option<UncheckedAccount<'info>>,     #[account(mut)]     pub decompression_recipient: Option<UncheckedAccount<'info>>,     pub system_program: Program<'info, System>,     #[account(mut)]     pub cpi_context_account: Option<Account<'info, CpiContextAccount>>, }           impl<'info> SignerAccounts<'info> for InvokeCpiInstruction<'info> {     fn get_fee_payer(&self) -> &Signer<'info> {         &self.fee_payer     }      fn get_authority(&self) -> &Signer<'info> {         &self.authority     } }  impl<'info> InvokeAccounts<'info> for InvokeCpiInstruction<'info> {     fn get_registered_program_pda(&self) -> &AccountInfo<'info> {            &self.registered_program_pda     }      fn get_noop_program(&self) -> &UncheckedAccount<'info> {         &self.noop_program     }      fn get_account_compression_authority(&self) -> &UncheckedAccount<'info> {         &self.account_compression_authority     }      fn get_account_compression_program(&self) -> &Program<'info, AccountCompression> {         &self.account_compression_program     }      fn get_sol_pool_pda(&self) -> Option<&UncheckedAccount<'info>> {         self.sol_pool_pda.as_ref()     }      fn get_decompression_recipient(&self) -> Option<&UncheckedAccount<'info>> {         self.decompression_recipient.as_ref()     }      fn get_system_program(&self) -> &Program<'info, System> {         &self.system_program     } }   programs/system/src/invoke_cpi/process_cpi_context.rs pub fn process_cpi_context<'info>(     mut inputs: InstructionDataInvokeCpi,     cpi_context_account: &mut Option<Account<'info, CpiContextAccount>>,     fee_payer: Pubkey,     remaining_accounts: &[AccountInfo<'info>], ) -> Result<Option<InstructionDataInvokeCpi>> {     let cpi_context = &inputs.cpi_context;     if cpi_context_account.is_some() && cpi_context.is_none() {         msg!(""cpi context account is some but cpi context is none"");         return err!(SystemProgramError::CpiContextMissing);     }          if let Some(cpi_context) = cpi_context {         let cpi_context_account = match cpi_context_account {              Some(cpi_context_account) => cpi_context_account,             None => return err!(SystemProgramError::CpiContextAccountUndefined),         };         let index = if !inputs             .input_compressed_accounts_with_merkle_context             .is_empty()         {             inputs.input_compressed_accounts_with_merkle_context[0]                 .merkle_context                 .merkle_tree_pubkey_index         } else if !inputs.output_compressed_accounts.is_empty() {             inputs.output_compressed_accounts[0].merkle_tree_index         } else {             return err!(SystemProgramError::NoInputs);         };         let first_merkle_tree_pubkey = remaining_accounts[index as usize].key();         if first_merkle_tree_pubkey != cpi_context_account.associated_merkle_tree {             msg!(                 ""first_merkle_tree_pubkey {:?} != associated_merkle_tree {:?}"",                 first_merkle_tree_pubkey,                 cpi_context_account.associated_merkle_tree             );             return err!(SystemProgramError::CpiContextAssociatedMerkleTreeMismatch);         }         if cpi_context.set_context {             set_cpi_context(fee_payer, cpi_context_account, inputs)?;             return Ok(None); @@ -53,12 +90,12 @@ pub fn set_cpi_context(     cpi_context_account: &mut CpiContextAccount,     mut inputs: InstructionDataInvokeCpi, ) -> Result<()> {     // SAFETY Assumptions:     // -  previous data in cpi_context_account     //   -> we require the account to be wiped in the beginning of a     //   transaction     // - leaf over data: There cannot be any leftover data in the     //   account since if the transaction fails the account doesn't change.      // Expected usage:     // 1. The first invocation is marked with @@ -88,3 +125,619 @@ fn clean_input_data(inputs: &mut InstructionDataInvokeCpi) {     inputs.signer_seeds = Vec::new();     inputs.proof = None; }",Medium,Implement strict access control mechanisms to ensure that only authorized entities may modify or interact with CpiContextAccount.,https://github.com/Lightprotocol/light-protocol/commit/0e0fec6de1936eff454c0c498a3a703670c65e10#diff-1c724800521b3ca80925fc753bee5554059048d10c175cda80c1d831c36c5306,High
Sol-211,"Incorrect Element Dequeuing. The dequeue_at_with_low_element_index function in the IndexedArray module is designed to remove an element from the array at a given index and update references accordingly.  However, the function is missing a check to ensure that elements[low_element_index].next_index == index. Without this check, the function may update the next_index of elements[low_element_index] to point to an incorrect element.  If the next_index of the element at low_element_index does not actually point to the element at index, the function may end up removing an element that should not be removed. This can result in unintended dequeuing and corruption of the internal structure of the IndexedArray.","     // TODO: remove since it's not used (hashset replaces this)     /// Returns and removes the element from the given index.     ///     /// It also performs necessary updated of the remaning elements, to     /// preserve the integrity of the array.     ///     /// The low element under `low_element_index` is updated, to point to a new     /// next element instead of the one which is removed.     pub fn dequeue_at_with_low_element_index(         &mut self,         low_element_index: I,         index: I,     ) -> Result<Option<IndexedElement<I>>, IndexedMerkleTreeError> {         if index > self.current_node_index {             // Index out of bounds.             return Ok(None);         }          // Save the element to be removed.         let removed_element = self.elements[usize::from(index)].clone();          // Update the lower element - point to the node which the currently         // removed element is pointing to.         self.elements[usize::from(low_element_index)].next_index = removed_element.next_index;          let mut new_highest_element_index = I::zero();         for i in 0..usize::from(self.current_node_index) {             // Shift elements, which are on the right from the removed element,             // to the left.             if i >= usize::from(index) {                 self.elements[i] = self.elements[i                     .checked_add(1_usize)                     .ok_or(IndexedMerkleTreeError::IntegerOverflow)?]                 .clone();                 self.elements[i].index = self.elements[i]                     .index                     .checked_sub(&I::one())                     .ok_or(IndexedMerkleTreeError::IntegerOverflow)?;             }             // If the `next_index` is greater than the index of the removed             // element, decrement it. Elements on the right from the removed             // element are going to be shifted left.             if self.elements[i].next_index >= index {                 self.elements[i].next_index = self.elements[i]                     .next_index                     .checked_sub(&I::one())                     .ok_or(IndexedMerkleTreeError::IntegerOverflow)?;             }              if self.elements[i].value > self.elements[usize::from(new_highest_element_index)].value             {                 new_highest_element_index = i                     .try_into()                     .map_err(|_| IndexedMerkleTreeError::IntegerOverflow)?;             }         }          // Update current_node_index         self.current_node_index = self             .current_node_index             .checked_sub(&I::one())             .ok_or(IndexedMerkleTreeError::IntegerOverflow)?;         // Update highest_element_index         self.highest_element_index = new_highest_element_index;          Ok(Some(removed_element))     }      /// Returns and removes the element from the given index.     ///     /// It also performs necessary updates of the remaning elements, to     /// preserve the integrity of the array. It searches for the low element     /// and updates it, to point to a new next element instead of the one     pub fn dequeue_at(         &mut self,         index: I,     ) -> Result<Option<IndexedElement<I>>, IndexedMerkleTreeError> {         match self.elements.get(usize::from(index)) {             Some(node) => {                 let low_element_index = self.find_low_element_index_for_existent(&node.value)?;                 self.dequeue_at_with_low_element_index(low_element_index, index)             }             None => Ok(None),         }     }",Remove this code,Medium,Add a check to ensure that the next_index of the element at low_element_index actually points to the element at index before proceeding with the removal.,https://github.com/Lightprotocol/light-protocol/commit/92930cd7b5c3f8c3caede873856b26cef6b69197,High
Sol-212,"Improper Equality Comparison. The CyclicBoundedVec::eq function compares the underlying data of two vectors without accounting for the cyclic nature of the vector, which may result in incorrect outcomes.  This occurs because the data in a CyclicBoundedVec may be stored in a non-contiguous manner due to cyclic indexing. As a result, the order of elements in the underlying data array may not match the logical order of elements in the vector.  The function creates a slice from the start of self.data up to self.length and iterates over its elements. It then compares these elements with those from other.data. However, this approach assumes that self.data and other.data are in the same order, which is not necessarily the case in a cyclic vector.  Due to cyclic indexing, and particularly the positions of first_index and last_index, the logical order of the elements may differ from their physical layout in memory, making direct comparison unreliable.","/// `CyclicBoundedVec` is a wrapper around [`Vec`](std::vec::Vec) which: /// /// * Forbids post-initialization reallocations. /// * Starts overwriting elements from the beginning once it reaches its ///   capacity. #[derive(Debug)] pub struct CyclicBoundedVec<'a, T> where     T: Clone, {     capacity: usize,     length: usize,     first_index: usize,     last_index: usize,     data: &'a mut [T], }  impl<'a, T> CyclicBoundedVec<'a, T> where     T: Clone, {     #[inline]     pub fn with_capacity(capacity: usize) -> Self {         let size = mem::size_of::<T>() * capacity;         let align = mem::align_of::<T>();         // SAFETY: `size` is a multiplication of `capacity`, therefore the         // layout is guaranteed to be aligned.         let layout = unsafe { Layout::from_size_align_unchecked(size, align) };          // SAFETY: We are handling the null pointer case gracefully.         let ptr = unsafe { alloc::alloc(layout) };         if ptr.is_null() {             handle_alloc_error(layout);         }         let data = unsafe { slice::from_raw_parts_mut(ptr as *mut T, capacity) };                 Self {             capacity,             length: 0,             first_index: 0,             last_index: 0,             data,         }        } impl<'a, T> PartialEq for CyclicBoundedVec<'a, T> where     T: Clone + PartialEq, {     fn eq(&self, other: &Self) -> bool {         self.data[..self.length].iter().eq(other.data.iter())     } }","/// `CyclicBoundedVec` is a wrapper around [`Vec`](std::vec::Vec) which: /// /// * Forbids post-initialization reallocations. /// * Starts overwriting elements from the beginning once it reaches its ///   capacity. #[derive(Debug)] pub struct CyclicBoundedVec<T> where     T: Clone, {     metadata: *mut CyclicBoundedVecMetadata,     data: NonNull<T>,    }  impl<T> CyclicBoundedVec<T> where     T: Clone, {     #[inline]     pub fn with_capacity(capacity: usize) -> Self {         let layout = Layout::new::<CyclicBoundedVecMetadata>();         let metadata = unsafe { alloc::alloc(layout) as *mut CyclicBoundedVecMetadata };         if metadata.is_null() {                   handle_alloc_error(layout);         }         unsafe {             *metadata = CyclicBoundedVecMetadata {                 capacity,                 length: 0,                 first_index: 0,                 last_index: 0,             };         }          let layout = Layout::array::<T>(capacity).unwrap();         let data_ptr = unsafe { alloc::alloc(layout) as *mut T };         if data_ptr.is_null() {             handle_alloc_error(layout);           }         let data = NonNull::new(data_ptr).unwrap();          Self { metadata, data } } impl<T> PartialEq for CyclicBoundedVec<T> where     T: Clone + PartialEq, {     fn eq(&self, other: &Self) -> bool {         self.iter().eq(other.iter())     } }",Medium,Ensure the comparison accounts for the cyclic ordering by iterating through the elements in their logical order to properly compare two CyclicBoundedVec instances.,https://github.com/Lightprotocol/light-protocol/commit/534d90f1da5aa6ad5e7fe6eebb69f6fe1b552f5d#diff-baafeefaa4cdaeb001c2048f2bbddcde242bb9dde546c332ca9015f9a03e54c5,High
Sol-213,"Program Account Misuse. The authority field is a Signer<'info>. This implies it is expected to be an account that has signed the transaction and, therefore, is responsible for authorizing the action.  If the authority signer is a program, the program admin may misuse their authority. Since the admin possesses the corresponding private key for the program’s public key, they can generate the Signer for the program’s public key and use the invoke instruction to delete program-owned accounts or transfer lamports.","#[derive(Accounts)] pub struct InvokeInstruction<'info> { #[account(mut)] pub fee_payer: Signer<'info>, pub authority: Signer<'info>, [...] }  pub fn input_compressed_accounts_signer_check(     input_compressed_accounts_with_merkle_context: &[PackedCompressedAccountWithMerkleContext],     authority: &Pubkey, ) -> Result<()> {     input_compressed_accounts_with_merkle_context         .iter()         .try_for_each(             |compressed_account_with_context: &PackedCompressedAccountWithMerkleContext| {                 if compressed_account_with_context.compressed_account.owner == *authority {                          Ok(())                 } else {                     msg!(                         ""signer check failed compressed account owner {} != authority {}"",                         compressed_account_with_context.compressed_account.owner,                         authority                      );                     err!(SystemProgramError::SignerCheckFailed)                 }             },         ) }","#[derive(Accounts)] pub struct InvokeInstruction<'info> { #[account(mut)] pub fee_payer: Signer<'info>, pub authority: Signer<'info>, [...] }  pub fn input_compressed_accounts_signer_check(     input_compressed_accounts_with_merkle_context: &[PackedCompressedAccountWithMerkleContext],     authority: &Pubkey, ) -> Result<()> {     input_compressed_accounts_with_merkle_context         .iter()         .try_for_each(             |compressed_account_with_context: &PackedCompressedAccountWithMerkleContext| {                 if compressed_account_with_context.compressed_account.owner == *authority                     && compressed_account_with_context                         .compressed_account                         .data                         .is_none()                 {                     Ok(())                 } else {                     msg!(                         ""signer check failed compressed account owner {} != authority {} or data is not none {} (only programs can own compressed accounts with data)"",                         compressed_account_with_context.compressed_account.owner,                         authority,                         compressed_account_with_context.compressed_account.data.is_none()                     );                     err!(SystemProgramError::SignerCheckFailed)                 }             },         ) }",Medium,Implement checks to ensure that the authority signer is not a program account.,https://github.com/Lightprotocol/light-protocol/commit/203296b6510679e7ca8e477759f8347c9ea496fb,High
Sol-214,"Inaccurate Reconstruction of Cyclic Bounded Vector The vulnerability in ConcurrentMerkleTree::copy_from_bytes is related to the reconstruction of CyclicBoundedVec structures from byte slices.  A CyclicBoundedVec maintains its elements in a circular buffer, using specific indices to track the start (first_index) and end (last_index) of valid elements. When reconstructing a CyclicBoundedVec from a byte slice, it is crucial to consider these indices in order to preserve the correct logical ordering of elements.  However, in the current implementation of copy_from_bytes, the reconstruction process does not account for these indices. It simply copies elements based on their positions in the byte slice, leading to potential misordering of the logical sequence of elements.  This issue affects various parts of the codebase, including both concurrent and indexed Merkle trees.","//     /// # Safety     ///     /// This is highly unsafe. Ensuring the alignment and that the slice     /// provides actual data of the hash set is the caller's responsibility.     ///     /// Calling it in async context (or anyhwere where the underlying data can     /// be moved in the memory) is certainly going to cause undefined behavior.     pub unsafe fn copy_from_bytes(    pub unsafe fn copy_from_bytes(         bytes_struct: &[u8],         bytes_filled_subtrees: &[u8],         bytes_changelog: &[u8],         bytes_roots: &[u8],         bytes_canopy: &[u8],         bytes_indexed_changelog: &'a [u8],     ) -> Result<Self, IndexedMerkleTreeError> {         let expected_bytes_struct_size = mem::size_of::<IndexedMerkleTree<'a, H, I, HEIGHT>>();         if bytes_struct.len() != expected_bytes_struct_size {             return Err(IndexedMerkleTreeError::ConcurrentMerkleTree(                 ConcurrentMerkleTreeError::StructBufferSize(                     expected_bytes_struct_size,                     bytes_struct.len(),                 ),             ));         }         let struct_ref: *mut IndexedMerkleTree<'a, H, I, HEIGHT> = bytes_struct.as_ptr() as _;          let mut merkle_tree = unsafe {             ConcurrentMerkleTree {                 height: (*struct_ref).merkle_tree.height,                  changelog_capacity: (*struct_ref).merkle_tree.changelog_capacity,                 changelog_length: (*struct_ref).merkle_tree.changelog_length,                 current_changelog_index: (*struct_ref).merkle_tree.current_changelog_index,                  roots_capacity: (*struct_ref).merkle_tree.roots_capacity,                 roots_length: (*struct_ref).merkle_tree.roots_length,                 current_root_index: (*struct_ref).merkle_tree.current_root_index,                  canopy_depth: (*struct_ref).merkle_tree.canopy_depth,                  next_index: (*struct_ref).merkle_tree.next_index,                 sequence_number: (*struct_ref).merkle_tree.sequence_number,                 rightmost_leaf: (*struct_ref).merkle_tree.rightmost_leaf,                  filled_subtrees: BoundedVec::with_capacity((*struct_ref).merkle_tree.height),                 changelog: CyclicBoundedVec::with_capacity(                     (*struct_ref).merkle_tree.changelog_capacity,                 ),                 roots: CyclicBoundedVec::with_capacity((*struct_ref).merkle_tree.roots_capacity),                 canopy: BoundedVec::with_capacity(ConcurrentMerkleTree::<H, HEIGHT>::canopy_size(                     (*struct_ref).merkle_tree.canopy_depth,                 )),                  _hasher: PhantomData,             }         };          let expected_bytes_filled_subtrees_size =             mem::size_of::<[u8; 32]>() * (*struct_ref).merkle_tree.height;         if bytes_filled_subtrees.len() != expected_bytes_filled_subtrees_size {             return Err(ConcurrentMerkleTreeError::FilledSubtreesBufferSize(                 expected_bytes_filled_subtrees_size,                 bytes_filled_subtrees.len(),             )             .into());         }         let filled_subtrees: &[[u8; 32]] = slice::from_raw_parts(             bytes_filled_subtrees.as_ptr() as *const _,             (*struct_ref).merkle_tree.height,         );         for subtree in filled_subtrees.iter() {             merkle_tree.filled_subtrees.push(*subtree)?;         }          let expected_bytes_changelog_size =             mem::size_of::<ChangelogEntry<HEIGHT>>() * (*struct_ref).merkle_tree.changelog_capacity;         if bytes_changelog.len() != expected_bytes_changelog_size {             return Err(ConcurrentMerkleTreeError::ChangelogBufferSize(                 expected_bytes_changelog_size,                 bytes_changelog.len(),             )             .into());         }         let changelog: &[ChangelogEntry<HEIGHT>] = slice::from_raw_parts(             bytes_changelog.as_ptr() as *const _,             (*struct_ref).merkle_tree.changelog_length,         );         for changelog_entry in changelog.iter() {             merkle_tree.changelog.push(changelog_entry.clone());         }          let expected_bytes_roots_size =             mem::size_of::<[u8; 32]>() * (*struct_ref).merkle_tree.roots_capacity;         if bytes_roots.len() != expected_bytes_roots_size {             return Err(ConcurrentMerkleTreeError::RootBufferSize(                 expected_bytes_roots_size,                 bytes_roots.len(),             )             .into());         }         let roots: &[[u8; 32]] = slice::from_raw_parts(             bytes_roots.as_ptr() as *const _,             (*struct_ref).merkle_tree.roots_length,         );         for root in roots.iter() {             merkle_tree.roots.push(*root);         }          let canopy_size =             ConcurrentMerkleTree::<H, HEIGHT>::canopy_size((*struct_ref).merkle_tree.canopy_depth);         let expected_canopy_size = mem::size_of::<[u8; 32]>() * canopy_size;         if bytes_canopy.len() != expected_canopy_size {             return Err(ConcurrentMerkleTreeError::CanopyBufferSize(                 expected_canopy_size,                 bytes_canopy.len(),                                                        )             .into());         }         let canopy: &[[u8; 32]] =             slice::from_raw_parts(bytes_canopy.as_ptr() as *const _, canopy_size);         for node in canopy.iter() {             merkle_tree.canopy.push(*node)?;                   }          let mut indexed_merkle_tree = unsafe {             IndexedMerkleTree {                 merkle_tree,                 changelog: CyclicBoundedVec::with_capacity((*struct_ref).changelog.capacity()),                 _index: PhantomData,             }         };          let expected_bytes_indexed_changelog_size =             mem::size_of::<RawIndexedElement<I>>() * (*struct_ref).changelog.capacity();         if bytes_indexed_changelog.len() != expected_bytes_indexed_changelog_size {             return Err(IndexedMerkleTreeError::ChangelogBufferSize(                 expected_bytes_indexed_changelog_size,                 bytes_indexed_changelog.len(),             ));         }         let indexed_changelog: &[RawIndexedElement<I>] = slice::from_raw_parts(             bytes_indexed_changelog.as_ptr() as *const _,             (*struct_ref).changelog.len(),         );         for changelog_entry in indexed_changelog.iter() {             indexed_merkle_tree.changelog.push(*changelog_entry);         }          Ok(IndexedMerkleTreeCopy(indexed_merkle_tree))         }","///     /// This method is meant to be used mostly in Solana programs, where memory     /// constraints are tight and we want to make sure no data is copied.     pub fn from_bytes_copy(bytes: &[u8]) -> Result<Self, IndexedMerkleTreeError> {         let (merkle_tree, mut offset) =             ConcurrentMerkleTreeCopy::<H, HEIGHT>::struct_from_bytes_copy(bytes)?;          let indexed_changelog_metadata: CyclicBoundedVecMetadata =             unsafe { read_value_at(bytes, &mut offset) };          let expected_size = IndexedMerkleTree::<H, I, HEIGHT>::size_in_account(             merkle_tree.height,             merkle_tree.changelog.capacity(),             merkle_tree.roots.capacity(),             merkle_tree.canopy_depth,             indexed_changelog_metadata.capacity(),         );         if bytes.len() < expected_size {                return Err(IndexedMerkleTreeError::ConcurrentMerkleTree(                 ConcurrentMerkleTreeError::BufferSize(expected_size, bytes.len()),                ));         }                                                           let indexed_changelog =             unsafe { read_cyclic_bounded_vec_at(bytes, &mut offset, &indexed_changelog_metadata) };                        Ok(Self(IndexedMerkleTree {             merkle_tree,             indexed_changelog,             _index: PhantomData,         }))     } }  utils/src/offset.rs  use std::{mem, ptr};  use light_bounded_vec::{     BoundedVec, BoundedVecMetadata, CyclicBoundedVec, CyclicBoundedVecMetadata, };  /// Casts a part of provided `bytes` buffer with the given `offset` to a /// mutable pointer to `T`. /// /// Should be used for single values. /// /// # Safety /// /// This is higly unsafe. This function doesn't ensure alignment and /// correctness of provided buffer. The responsibility of such checks is on /// the caller. pub unsafe fn read_ptr_at<T>(bytes: &[u8], offset: &mut usize) -> *mut T {     let size = mem::size_of::<T>();     let ptr = bytes[*offset..*offset + size].as_ptr() as *mut T;     *offset += size;     ptr }  /// Casts a part of provided `bytes` buffer with the given `offset` to a /// mutable pointer to `T`. /// /// Should be used for array-type sequences. /// /// # Safety /// /// This is higly unsafe. This function doesn't ensure alignment and /// correctness of provided buffer. The responsibility of such checks is on /// the caller. pub unsafe fn read_array_like_ptr_at<T>(bytes: &[u8], offset: &mut usize, len: usize) -> *mut T {     let size = mem::size_of::<T>() * len;     let ptr = bytes[*offset..*offset + size].as_ptr() as *mut T;     *offset += size;     ptr }  /// Creates a copy of value of type `T` based on the provided `bytes` buffer. /// /// # Safety /// /// This is higly unsafe. This function doesn't ensure alignment and /// correctness of provided buffer. The responsibility of such checks is on /// the caller. pub unsafe fn read_value_at<T>(bytes: &[u8], offset: &mut usize) -> T where     T: Clone, {     let size = mem::size_of::<T>();     let ptr = bytes[*offset..*offset + size].as_ptr() as *const T;     *offset += size;     // (*ptr).clone()     ptr::read(ptr) }  /// Creates a `BoundedVec` from the sequence of values provided in `bytes` buffer. /// /// # Safety /// /// This is higly unsafe. This function doesn't ensure alignment and /// correctness of provided buffer. The responsibility of such checks is on /// the caller. pub unsafe fn read_bounded_vec_at<T>(     bytes: &[u8],     offset: &mut usize,     metadata: &BoundedVecMetadata, ) -> BoundedVec<T> where     T: Clone, {     let size = mem::size_of::<T>() * metadata.capacity();     let ptr = bytes[*offset..*offset + size].as_ptr() as *const T;      let mut vec = BoundedVec::with_capacity(metadata.capacity());     for i in 0..metadata.length() {         let val = ptr::read(ptr.add(i));         // PANICS: We ensured the bounds.         vec.push(val).unwrap();     }      *offset += size;      vec }  /// Creates a `CyclicBoundedVec` from the sequence of values provided in /// `bytes` buffer. /// /// # Safety /// /// This is higly unsafe. This function doesn't ensure alignment and /// correctness of provided buffer. The responsibility of such checks is on /// the caller. pub unsafe fn read_cyclic_bounded_vec_at<T>(     bytes: &[u8],     offset: &mut usize,     metadata: &CyclicBoundedVecMetadata, ) -> CyclicBoundedVec<T> where     T: Clone, {     let size = mem::size_of::<T>() * metadata.capacity();     let ptr = bytes[*offset..*offset + size].as_ptr() as *const T;      let mut vec = CyclicBoundedVec::with_capacity(metadata.capacity());     for i in 0..metadata.length() {         let val = ptr::read(ptr.add(i));         vec.push(val);     }      *offset += size;      vec }  /// Writes provided `data` into provided `bytes` buffer with the given /// `offset`. pub fn write_at<T>(bytes: &mut [u8], data: &[u8], offset: &mut usize) {     let size = mem::size_of::<T>();     bytes[*offset..*offset + size].copy_from_slice(data);     *offset += size; }",Medium,Ensure there construction processre stores the first_index and last_index of the CyclicBoundedVec .,https://github.com/Lightprotocol/light-protocol/commit/203296b6510679e7ca8e477759f8347c9ea496fb,High
Sol-215,"Inconsistency in Prime Number Calculation The vulnerability arises from how the find_next_prime function adjusts n to find the next prime number greater than n.  All prime numbers greater than three are either of the form 6k + 1 or 6k + 5. When (remainder != 0.0), the function currently adjusts n by setting it to n + 6.0 - remainder, which ensures that n becomes the nearest number of the form 6k + 5.  However, the function does not explicitly check for a prime of the form 6k + 1. As a result, it may skip valid primes by jumping ahead to the next number of the form 6k + 5, even when the given number is already a prime in the form 6k + 1.  This leads to incorrect identification of the next prime number in some cases.  ","/// Finds the lowest prime number which is greater than the provided number /// `n`. pub fn find_next_prime(mut n: f64) -> f64 {     n = n.round();      // Handle small numbers separately     if n <= 2.0 {         return 2.0;     } else if n <= 3.0 {         return 3.0;     }      // All prime numbers greater than 3 are of the form 6k + 1 or 6k + 5 (or @@ -22,52 +20,68 @@ pub fn find_next_prime(mut n: f64) -> f64 {     // This leaves only 6k + 1 and 6k + 5 as candidates.      // Ensure the candidate is of the form 6k - 1 or 6k + 1.     let remainder = n % 6.0;     if remainder != 0.0 {         n = n + 6.0 - remainder;                let candidate = n - 1.0;            if is_prime(candidate) {             return candidate;         }     }       loop {         let candidate = n + 1.0;         if is_prime(candidate) {             return candidate;         }         let candidate = n + 5.0;         if is_prime(candidate) {             return candidate;         }          n += 6.0;     } }  pub fn find_next_prime_with_load_factor(n: f64, load_factor: f64) -> f64 {     let minimum = n / load_factor;     find_next_prime(minimum)       }  /// Checks whether the provided number `n` is a prime number. pub fn is_prime(n: f64) -> bool {     if n <= 1.0 {         return false;     }     if n <= 3.0 {         return true;     }     if n % 2.0 == 0.0 || n % 3.0 == 0.0 {         return false;     }     let mut i = 5.0;     while i * i <= n {         if n % i == 0.0 || n % (i + 2.0) == 0.0 {             return false;         }         i += 6.0;     }     true }","/// Finds the lowest prime number which is greater than the provided number /// `n`. pub fn find_next_prime(mut n: u32) -> u32 {       // Handle small numbers separately     if n <= 2 {         return 2;     } else if n <= 3 {         return 3;     }      // All prime numbers greater than 3 are of the form 6k + 1 or 6k + 5 (or @@ -22,52 +20,68 @@ pub fn find_next_prime(mut n: f64) -> f64 {     // This leaves only 6k + 1 and 6k + 5 as candidates.      // Ensure the candidate is of the form 6k - 1 or 6k + 1.     let remainder = n % 6;     if remainder != 0 {         // Check if `n` already satisfies the pattern and is prime.         if remainder == 5 && is_prime(n) {             return n;         }         if remainder == 1 && is_prime(n) {             return n;         }          // Add `6 - remainder` to `n`, to it satisfies the `6k` pattern.         n = n + 6 - remainder;         // Check if `6k - 1` candidate is prime.         let candidate = n - 1;         if is_prime(candidate) {             return candidate;         }     }      // Consequently add `6`, keep checking `6k + 1` and `6k + 5` candidates.     loop {         let candidate = n + 1;         if is_prime(candidate) {             return candidate;         }         let candidate = n + 5;         if is_prime(candidate) {             return candidate;         }          n += 6;     } }  pub fn find_next_prime_with_load_factor(n: u32, load_factor: f64) -> u32 {     // SAFETY: These type coercions should not cause any issues.     //     // * `f64` can precisely represent all integer values up to 2^53, which is     //   more than `u32::MAX`. `u64` and `usize` would be too large though.     // * We want to return and find an integer (prime number), so coercing `f64`     //   back to `u32` is intentional here.     let minimum = n as f64 / load_factor;     find_next_prime(minimum as u32) }  /// Checks whether the provided number `n` is a prime number. pub fn is_prime(n: u32) -> bool {     if n <= 1 {         return false;     }     if n <= 3 {         return true;     }     if n % 2 == 0 || n % 3 == 0 {         return false;     }     let mut i = 5;     while i * i <= n {         if n % i == 0 || n % (i + 2) == 0 {             return false;         }         i += 6;     }     true }",Medium,Explicitly check both n - 1.0 and n + 5.0 after adjusting n to the form 6k + 5.,https://github.com/Lightprotocol/light-protocol/commit/f0a7b5b87b0cded5f7e0e08483ffda7287e8228f#diff-c6ffbb012bdf358efd6e1a69d2c74388ac2200cc115b4ed6ea6588d073ebc0c3,High
Sol-216,"Removing validators immediately after a successful EpochMaintenance may result in the desynchronization of the internal state of the Steward Program with the external state of the stake pool validator list, particularly when handling delinquent validators. A validator may be removed from the list in the same epoch if there is no transient stake. The issue arises because the validator is marked for deactivation in one epoch but is not removed until the next. If the internal state of the Steward program does not update synchronously with the stake pool’s external state, the Steward may think it still has the validator in its active pool while the stake pool has already removed it, creating a discrepancy between the two systems. Proof of Concept 1. deactivate_delinquent is called on a validator’s stake account during epoch 1, marking it as delinquent but not immediately removing it from the validator list. 2. epoch_maintenance is executed during epoch 2, which performs necessary checks and updates the internal state of the Steward Program. 3. auto_remove_validator_from_pool is called during the maintenance process, which attempts to remove the delinquent validator from the pool. 4. The stake pool operations may subsequently execute, which will remove the validator from the validator list, resulting in state desynchronization","programs/steward/src/state/steward_state.rs pub fn remove_validator(&mut self, index: usize) -> Result<()> {            require!(             self.validators_to_remove.get(index)?,             StewardError::ValidatorNotMarkedForRemoval         );          self.num_pool_validators = self             .num_pool_validators             .checked_sub(1)             .ok_or(StewardError::ArithmeticError)?;                  let num_pool_validators = self.num_pool_validators as usize;          // Shift all validator state to the left @@ -486,6 +502,8 @@ impl StewardState {             self.progress.set(i, self.progress.get(next_i)?)?;             self.validators_to_remove                 .set(i, self.validators_to_remove.get(next_i)?)?;           }","programs/steward/src/instructions/instant_remove_validator.rs use crate::{     errors::StewardError,     utils::{         check_validator_list_has_stake_status_other_than, deserialize_stake_pool,         get_stake_pool_address, get_validator_list, get_validator_list_length,     },     Config, StewardStateAccount, }; use anchor_lang::prelude::*; use spl_stake_pool::state::StakeStatus;  #[derive(Accounts)] pub struct InstantRemoveValidator<'info> {     pub config: AccountLoader<'info, Config>,      #[account(         mut,         seeds = [StewardStateAccount::SEED, config.key().as_ref()],         bump     )]     pub state_account: AccountLoader<'info, StewardStateAccount>,      /// CHECK: Correct account guaranteed if address is correct     #[account(address = get_validator_list(&config)?)]     pub validator_list: AccountInfo<'info>,      /// CHECK: Correct account guaranteed if address is correct     #[account(         address = get_stake_pool_address(&config)?     )]     pub stake_pool: AccountInfo<'info>, }  /// Removes validators from the pool that have been marked for immediate removal pub fn handler(     ctx: Context<InstantRemoveValidator>,     validator_index_to_remove: usize, ) -> Result<()> {     let stake_pool = deserialize_stake_pool(&ctx.accounts.stake_pool)?;     let mut state_account = ctx.accounts.state_account.load_mut()?;      let clock = Clock::get()?;     let validators_to_remove = state_account.state.validators_for_immediate_removal.count();     let validators_in_list = get_validator_list_length(&ctx.accounts.validator_list)?;      require!(         clock.epoch == stake_pool.last_update_epoch,         StewardError::StakePoolNotUpdated     );      require!(         state_account             .state             .validators_for_immediate_removal             .get(validator_index_to_remove)?,         StewardError::ValidatorNotInList     );      require!(         state_account.state.num_pool_validators as usize             + state_account.state.validators_added as usize             - validators_to_remove             == validators_in_list,         StewardError::ListStateMismatch     );      // Ensure there are no validators in the list that have not been removed, that should be     require!(         !check_validator_list_has_stake_status_other_than(             &ctx.accounts.validator_list,             StakeStatus::Active         )?,         StewardError::ValidatorsHaveNotBeenRemoved     );      state_account         .state         .remove_validator(validator_index_to_remove)?;      Ok(()) }  programs/steward/src/state/steward_state.rs pub fn remove_validator(&mut self, index: usize) -> Result<()> {         let marked_for_regular_removal = self.validators_to_remove.get(index)?;         let marked_for_immediate_removal = self.validators_for_immediate_removal.get(index)?;          require!(             marked_for_regular_removal || marked_for_immediate_removal,             StewardError::ValidatorNotMarkedForRemoval         );          // If the validator was marked for removal in the current cycle, decrement validators_added         if index >= self.num_pool_validators as usize {             self.validators_added = self                 .validators_added                 .checked_sub(1)                 .ok_or(StewardError::ArithmeticError)?;         } else {             self.num_pool_validators = self                 .num_pool_validators                 .checked_sub(1)                 .ok_or(StewardError::ArithmeticError)?;         }          let num_pool_validators = self.num_pool_validators as usize;          // Shift all validator state to the left @@ -486,6 +502,8 @@ impl StewardState {             self.progress.set(i, self.progress.get(next_i)?)?;             self.validators_to_remove                 .set(i, self.validators_to_remove.get(next_i)?)?;             self.validators_for_immediate_removal                 .set(i, self.validators_for_immediate_removal.get(next_i)?)?;         }          // Update score indices @@ -533,9 +551,14 @@ impl StewardState {         self.sorted_yield_score_indices[num_pool_validators] = SORTED_INDEX_DEFAULT;         self.delegations[num_pool_validators] = Delegation::default();         self.instant_unstake.set(num_pool_validators, false)?;          self.progress.set(num_pool_validators, false)?;          if marked_for_regular_removal {             self.validators_to_remove.set(index, false)?;         } else {             self.validators_for_immediate_removal.set(index, false)?;         }          Ok(())     }  @@ -546,6 +569,10 @@ impl StewardState {         self.validators_to_remove.set(index, true)     }      pub fn mark_validator_for_immediate_removal(&mut self, index: usize) -> Result<()> {         self.validators_for_immediate_removal.set(index, true)     }",High,"Implement a mechanism to flag delinquent validators for immediate removal, ensuring that the state machine halts further progress until these validators are removed within the same epoch.",https://github.com/jito-foundation/stakenet/commit/0425db0396f433dc2c26fd7a5d2c29b094950ae7,High
Sol-217,"Missing Associated Token Account Check  stake::process_stake loads various accounts, including the treasury_tokens_info account, which is intended to be the associated token account (ATA) of the treasury.  However, without a strict equality check, there is no assurance that the provided treasury_tokens_info account is actually the correct associated token account.  As a result, an attacker may provide a different token account for treasury_tokens_info, thereby redirecting the staked tokens to an account they control, instead of the intended treasury account.","pub fn process_stake<'a, 'info>(     _program_id: &Pubkey,     accounts: &'a [AccountInfo<'info>],     data: &[u8], ) -> ProgramResult {     // Parse args     let args = StakeArgs::try_from_bytes(data)?;     let amount = u64::from_le_bytes(args.amount);      // Load accounts     let [signer, proof_info, sender_info, treasury_tokens_info, token_program] = accounts else {         return Err(ProgramError::NotEnoughAccountKeys);     };     load_signer(signer)?;     load_proof(proof_info, signer.key, true)?;     load_token_account(sender_info, Some(signer.key), &MINT_ADDRESS, true)?;    load_token_account(sender_info, Some(signer.key), &MINT_ADDRESS, true)?;     load_token_account(    load_token_account(         treasury_tokens_info,         Some(&TREASURY_ADDRESS),         &MINT_ADDRESS,         true,     )?;","pub fn load_treasury_tokens<'a, 'info>(     info: &'a AccountInfo<'info>,     is_writable: bool, ) -> Result<(), ProgramError> {     if info.key.ne(&TREASURY_TOKENS_ADDRESS) {         return Err(ProgramError::InvalidSeeds);     }      load_token_account(info, Some(&TREASURY_ADDRESS), &MINT_ADDRESS, is_writable) }  pub fn process_stake<'a, 'info>(     _program_id: &Pubkey,     accounts: &'a [AccountInfo<'info>],     data: &[u8], ) -> ProgramResult {     // Parse args     let args = StakeArgs::try_from_bytes(data)?;     let amount = u64::from_le_bytes(args.amount);      // Load accounts     let [signer, proof_info, sender_info, treasury_tokens_info, token_program] = accounts else {         return Err(ProgramError::NotEnoughAccountKeys);     };     load_signer(signer)?;     load_proof(proof_info, signer.key, true)?;     load_token_account(sender_info, Some(signer.key), &MINT_ADDRESS, true)?;     load_treasury_tokens(treasury_tokens_info, true)?; ...      ",High,"Implement a strict equality check to ensure that treasury_tokens_info matches the expected associated token account (ATA) for the treasury.  Similarly, apply this check in the claim and rest instructions.","https://github.com/regolith-labs/ore/commit/3b1039b46908647df42dbd66c7967b7ef3dbe27e#diff-0215af55b6e37a0cf2c673e231f8f423472f690a82dc8e3c17ac55c1d5f30f6f, https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/a5efbbe3-b801-46f5-a1ae-28319e2a67e2/audit_ore_final.pdf?table=block&id=54dde62d-7915-48ae-b407-08094a5a7dcd&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742896800000&signature=_nV9M1D2C5iusWj8FCLEHzuDAiKXhrcMjC6lfH61kNU&downloadName=audit_ore_final.pdf",High
Sol-218,"Enhancing Mining Activity Tracking  TOLERANCE is the threshold for what the system considers acceptable levels of spam or delays. Adjusting this tolerance may inadvertently decrease the effective spam duration, which could potentially lower the system’s overall reliability against spam attacks.  Instead of directly manipulating TOLERANCE, consider updating the last_hash_at with logic that ensures a minimum interval between hash submissions or other critical actions. This approach will mitigate spamming or rapid submissions by making sure last_hash_at only reflects significant changes in miner activity, rather than every single hash submission.  ","/// Mine is the primary workhorse instruction of the Ore program. Its responsibilities include: /// 1. Calculate the hash from the provided nonce. /// 2. Payout rewards based on difficulty, staking multiplier, and liveness penalty. /// 3. Generate a new challenge for the miner. /// 4. Update the miner's lifetime stats. /// /// Safety requirements: /// - Mine is a permissionless instruction and can be called by any signer. /// - Can only succeed if mining is not paused. /// - Can only succeed if the last reset was less than 60 seconds ago. /// - Can only succeed if the provided hash satisfies the minimum difficulty requirement. /// - The the provided proof account must be associated with the signer. /// - The provided bus, config, noise, stake, and slot hash sysvar must be valid. pub fn process_mine<'a, 'info>(     _program_id: &Pubkey,     accounts: &'a [AccountInfo<'info>],     data: &[u8], ) -> ProgramResult {     // Parse args     let args = MineArgs::try_from_bytes(data)?;      // Load accounts     let [signer, bus_info, config_info, proof_info, instructions_sysvar, slot_hashes_sysvar] =         accounts     else {         return Err(ProgramError::NotEnoughAccountKeys);     };     load_signer(signer)?;     load_any_bus(bus_info, true)?;     load_config(config_info, false)?;     load_proof_with_miner(proof_info, signer.key, true)?;     load_sysvar(instructions_sysvar, sysvar::instructions::id())?;     load_sysvar(slot_hashes_sysvar, sysvar::slot_hashes::id())?;      // Validate this is the only mine ix in the transaction.     if !validate_transaction(&instructions_sysvar.data.borrow()).unwrap_or(false) {         return Err(OreError::TransactionInvalid.into());     }      // Validate epoch is active.     let config_data = config_info.data.borrow();     let config = Config::try_from_bytes(&config_data)?;     let clock = Clock::get().or(Err(ProgramError::InvalidAccountData))?;     if config         .last_reset_at         .saturating_add(EPOCH_DURATION)         .le(&clock.unix_timestamp)     {         return Err(OreError::NeedsReset.into());     }      // Validate the hash digest.     let mut proof_data = proof_info.data.borrow_mut();     let proof = Proof::try_from_bytes_mut(&mut proof_data)?;     let solution = Solution::new(args.digest, args.nonce);     if !solution.is_valid(&proof.challenge) {         return Err(OreError::HashInvalid.into());     }      // Validate hash satisfies the minimnum difficulty.     let hash = solution.to_hash();     let difficulty = hash.difficulty();     sol_log(&format!(""Diff {}"", difficulty));     if difficulty.lt(&MIN_DIFFICULTY) {         return Err(OreError::HashTooEasy.into());     }      // Calculate base reward rate.     let difficulty = difficulty.saturating_sub(MIN_DIFFICULTY);     let mut reward = config         .base_reward_rate         .saturating_mul(2u64.saturating_pow(difficulty));       // Apply staking multiplier.     // If user has greater than or equal to the max stake on the network, they receive 2x multiplier.     // Any stake less than this will receives between 1x and 2x multipler. The multipler is only active     // if the miner's last stake deposit was more than one minute ago.     if config.max_stake.gt(&0)         && proof             .last_stake_at             .saturating_add(ONE_MINUTE)             .le(&clock.unix_timestamp)     {         let staking_reward = proof             .balance             .min(config.max_stake)             .saturating_mul(reward)             .saturating_div(config.max_stake);         reward = reward.saturating_add(staking_reward);       }      // Reject spam transactions.     let t = clock.unix_timestamp;     let t_target = proof.last_hash_at.saturating_add(ONE_MINUTE);     let t_spam = t_target.saturating_sub(TOLERANCE);     if t.lt(&t_spam) {         return Err(OreError::Spam.into());     }      // Apply liveness penalty.     let t_liveness = t_target.saturating_add(TOLERANCE);     if t.gt(&t_liveness) {         reward = reward.saturating_sub(             reward                 .saturating_mul(t.saturating_sub(t_liveness) as u64)                 .saturating_div(ONE_MINUTE as u64),         );         }      // Limit payout amount to whatever is left in the bus     let mut bus_data = bus_info.data.borrow_mut();     let bus = Bus::try_from_bytes_mut(&mut bus_data)?;     let reward_actual = reward.min(bus.rewards);      // Update balances     bus.theoretical_rewards = bus.theoretical_rewards.saturating_add(reward);     bus.rewards = bus.rewards.saturating_sub(reward_actual);     proof.balance = proof.balance.saturating_add(reward_actual);      // Hash recent slot hash into the next challenge to prevent pre-mining attacks     proof.last_hash = hash.h;     proof.challenge = hashv(&[         hash.h.as_slice(),         &slot_hashes_sysvar.data.borrow()[0..size_of::<SlotHash>()],     ])     .0;      // Update time trackers     proof.last_hash_at = proof         .last_hash_at         .saturating_add(ONE_MINUTE)         .max(clock.unix_timestamp);      // Update lifetime stats     proof.total_hashes = proof.total_hashes.saturating_add(1);     proof.total_rewards = proof.total_rewards.saturating_add(reward);      // Log the mined rewards     set_return_data(         MineEvent {             difficulty: difficulty as u64,             reward: reward_actual,             timing: t.saturating_sub(t_liveness),         }         .to_bytes(),     );      Ok(()) }","/// Mine is the primary workhorse instruction of the Ore program. Its responsibilities include: /// 1. Calculate the hash from the provided nonce. /// 2. Payout rewards based on difficulty, staking multiplier, and liveness penalty. /// 3. Generate a new challenge for the miner. /// 4. Update the miner's lifetime stats. /// /// Safety requirements: /// - Mine is a permissionless instruction and can be called by any signer. /// - Can only succeed if mining is not paused. /// - Can only succeed if the last reset was less than 60 seconds ago. /// - Can only succeed if the provided hash satisfies the minimum difficulty requirement. /// - The the provided proof account must be associated with the signer. /// - The provided bus, config, noise, stake, and slot hash sysvar must be valid. pub fn process_mine<'a, 'info>(     _program_id: &Pubkey,     accounts: &'a [AccountInfo<'info>],     data: &[u8], ) -> ProgramResult {     // Parse args     let args = MineArgs::try_from_bytes(data)?;      // Load accounts     let [signer, bus_info, config_info, proof_info, instructions_sysvar, slot_hashes_sysvar] =         accounts     else {         return Err(ProgramError::NotEnoughAccountKeys);     };     load_signer(signer)?;     load_any_bus(bus_info, true)?;     load_config(config_info, false)?;     load_proof_with_miner(proof_info, signer.key, true)?;     load_sysvar(instructions_sysvar, sysvar::instructions::id())?;     load_sysvar(slot_hashes_sysvar, sysvar::slot_hashes::id())?;      // Validate this is the only mine ix in the transaction.     if !validate_transaction(&instructions_sysvar.data.borrow()).unwrap_or(false) {         return Err(OreError::TransactionInvalid.into());     }      // Validate epoch is active.     let config_data = config_info.data.borrow();     let config = Config::try_from_bytes(&config_data)?;     let clock = Clock::get().or(Err(ProgramError::InvalidAccountData))?;     if config         .last_reset_at         .saturating_add(EPOCH_DURATION)         .le(&clock.unix_timestamp)     {         return Err(OreError::NeedsReset.into());     }      // Validate the hash digest.     let mut proof_data = proof_info.data.borrow_mut();     let proof = Proof::try_from_bytes_mut(&mut proof_data)?;     let solution = Solution::new(args.digest, args.nonce);     if !solution.is_valid(&proof.challenge) {         return Err(OreError::HashInvalid.into());     }      // Validate hash satisfies the minimnum difficulty.     let hash = solution.to_hash();     let difficulty = hash.difficulty();     sol_log(&format!(""Diff {}"", difficulty));     if difficulty.lt(&MIN_DIFFICULTY) {         return Err(OreError::HashTooEasy.into());     }      // Calculate base reward rate.     let difficulty = difficulty.saturating_sub(MIN_DIFFICULTY);     let mut reward = config         .base_reward_rate         .checked_mul(2u64.checked_pow(difficulty).unwrap())         .unwrap();      // Apply staking multiplier.     // If user has greater than or equal to the max stake on the network, they receive 2x multiplier.     // Any stake less than this will receives between 1x and 2x multipler. The multipler is only active     // if the miner's last stake deposit was more than one minute ago.     let t = clock.unix_timestamp;     if config.max_stake.gt(&0) && proof.last_stake_at.saturating_add(ONE_MINUTE).le(&t) {             let staking_reward = proof             .balance             .min(config.max_stake)             .checked_mul(reward)             .unwrap()             .checked_div(config.max_stake)             .unwrap();         reward = reward.checked_add(staking_reward).unwrap();     }      // Reject spam transactions.      let t_target = proof.last_hash_at.saturating_add(ONE_MINUTE);     let t_spam = t_target.saturating_sub(TOLERANCE);     if t.lt(&t_spam) {         return Err(OreError::Spam.into());     }      // Apply liveness penalty.     let t_liveness = t_target.saturating_add(TOLERANCE);     if t.gt(&t_liveness) {         reward = reward             .checked_sub(                 reward                     .checked_mul(t.checked_sub(t_liveness).unwrap() as u64)                     .unwrap()                     .checked_div(ONE_MINUTE as u64)                     .unwrap(),             )             .unwrap();     }      // Limit payout amount to whatever is left in the bus     let mut bus_data = bus_info.data.borrow_mut();     let bus = Bus::try_from_bytes_mut(&mut bus_data)?;     let reward_actual = reward.min(bus.rewards);      // Update balances     bus.theoretical_rewards = bus.theoretical_rewards.checked_add(reward).unwrap();     bus.rewards = bus.rewards.checked_sub(reward_actual).unwrap();     proof.balance = proof.balance.checked_add(reward_actual).unwrap();      // Hash recent slot hash into the next challenge to prevent pre-mining attacks     proof.last_hash = hash.h;     proof.challenge = hashv(&[         hash.h.as_slice(),         &slot_hashes_sysvar.data.borrow()[0..size_of::<SlotHash>()],     ])     .0;      // Update time trackers     proof.last_hash_at = t.max(t_target);         // Update lifetime stats     proof.total_hashes = proof.total_hashes.saturating_add(1);     proof.total_rewards = proof.total_rewards.saturating_add(reward);      // Log the mined rewards     set_return_data(         MineEvent {             difficulty: difficulty as u64,             reward: reward_actual,             timing: t.saturating_sub(t_liveness),         }         .to_bytes(),     );      Ok(()) }",Medium,"Modify the logic that updates last_hash_at. Instead of setting it directly to the current Unix timestamp (clock.unix_timestamp), update it to the maximum value between prev_last_hash_at + ONE_MINUTE and clock.unix_timestamp.  This introduces a minimum interval (ONE_MINUTE) between consecutive hash submissions that are allowed to update last_hash_at.  ",https://github.com/regolith-labs/ore/commit/3e9150503c3febb8eb96821862fea5e268e9b8bd,High
Sol-219,"Incorrect Follows Fee Calculation  In the buy_token::handler function, the Follows fees (follows_fees_lamports) are calculated based on the price after the wrapper program’s fees have been added (follows_price_after_wrapper_fees).  This causes the Follows program to receive a higher effective price for the transaction, which can lead to the collection of higher fees than originally intended.  As a result, users end up paying more for their wrapped token purchases due to these inflated Follows fees.","// Simulation will return price after all fees pub fn handler(ctx: Context<BuyToken>, amount: u64, max_price: u64) -> Result<u64> { [...] // Take fees for wrapper let follows_price = ctx.accounts.token_info.get_token_buy_price(amount)?; let wrapper_fees_lamports = ctx.accounts.platform_info.get_fees_lamports(follows_price); let follows_price_after_wrapper_fees = follows_price.try_add(wrapper_fees_lamports.total()); // Get expected final price let follows_fees_lamports = ,→ ctx.accounts.follows_platform_info.get_fees_lamports(follows_price_after_wrapper_fees); let follows_token_price_after_all_fees = ,→ follows_price_after_wrapper_fees.try_add(follows_fees_lamports.total()); [...] }","// Simulation will return price after all fees pub fn handler(ctx: Context<BuyToken>, amount: u64, max_price: u64) -> Result<u64> { [...] let follows_price = ctx.accounts.token_info.get_token_buy_price(amount)?; let follows_fees_lamports = ctx.accounts.follows_platform_info.get_fees_lamports(follows_price); let wrapper_fees_lamports = ctx.accounts.platform_info.get_fees_lamports(follows_price); let follows_price_after_all_fees = follows_price     .try_add(wrapper_fees_lamports.total())?     .try_add(follows_fees_lamports.total())?;  [...] }",High,Ensure the Follows fees are calculated based on the original buy price (follows_price) before any fees are added.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/e85d7b3e-dc47-4a17-b41e-53cf39227528/follows_audit_final.pdf?table=block&id=fecda538-7053-41b1-8ccf-67334c1f5932&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742954400000&signature=lqLyDrQKe9VQNYLnkievdea6Kk8SB570z546v8GVUwI&downloadName=follows_audit_final.pdf,High
Sol-220,"Improper Calculation of Fees  The function quote::get_pre_fee_amount_ld invokes calculate_pre_fee_amount to compute amount_sent_ld. However, there is an issue within calculate_pre_fee_amount when transfer_fee_basis_points is equal to MAX_FEE_BASIS_POINTS, which represents a 100% fee.  In such a case, the function consistently returns zero as the pre-fee amount. This is problematic because, under a 100% fee rate, the correct pre-fee amount should account for the fact that the entire post-fee amount would be consumed by the fee.","pub fn calculate_pre_fee_amount(&self, post_fee_amount: u64) -> Option<u64> {         let maximum_fee = u64::from(self.maximum_fee);         let transfer_fee_basis_points = u16::from(self.transfer_fee_basis_points) as u128;         if transfer_fee_basis_points == 0 {             Some(post_fee_amount)         } else if transfer_fee_basis_points == ONE_IN_BASIS_POINTS || post_fee_amount == 0 {             Some(0)         } else {             let numerator = (post_fee_amount as u128).checked_mul(ONE_IN_BASIS_POINTS)?;             let denominator = ONE_IN_BASIS_POINTS.checked_sub(transfer_fee_basis_points)?;             let raw_pre_fee_amount = Self::ceil_div(numerator, denominator)?;              if raw_pre_fee_amount.checked_sub(post_fee_amount as u128)? >= maximum_fee as u128 {                 post_fee_amount.checked_add(maximum_fee)             } else {                 // should return `None` if `pre_fee_amount` overflows                 u64::try_from(raw_pre_fee_amount).ok()             }         }     }","pub fn calculate_pre_fee_amount(&self, post_fee_amount: u64) -> Option<u64> {         let maximum_fee = u64::from(self.maximum_fee);         let transfer_fee_basis_points = u16::from(self.transfer_fee_basis_points) as u128;         match (transfer_fee_basis_points, post_fee_amount) {             // no fee, same amount             (0, _) => Some(post_fee_amount),             // 0 zero out, 0 in             (_, 0) => Some(0),             // 100%, cap at max fee             (ONE_IN_BASIS_POINTS, _) => maximum_fee.checked_add(post_fee_amount),             _ => {                 let numerator = (post_fee_amount as u128).checked_mul(ONE_IN_BASIS_POINTS)?;                 let denominator = ONE_IN_BASIS_POINTS.checked_sub(transfer_fee_basis_points)?;                 let raw_pre_fee_amount = Self::ceil_div(numerator, denominator)?;                  if raw_pre_fee_amount.checked_sub(post_fee_amount as u128)? >= maximum_fee as u128 {                     post_fee_amount.checked_add(maximum_fee)                 } else {                     // should return `None` if `pre_fee_amount` overflows                     u64::try_from(raw_pre_fee_amount).ok()                 }             }         }     }",High,Return the pre-fee amount as post_fee_amount + maximum_fee when transfer_fee_basis_points == MAX_FEE_BASIS_POINTS.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/e8652209-92b3-4c46-bcd5-c1bba5a6d709/layerzero_v2_solana_audit_final.pdf?table=block&id=6b7e3fe1-4ed0-45bf-b211-19dc4cc86207&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742954400000&signature=SlBpjvPVTGlfmIi49vQC_G1ZWooFVs6YddLZsLQZ6Jo&downloadName=layerzero_v2_solana_audit_final.pdf,High
Sol-221,"Incorrect Account Ordering. transfer_with_split_proofs assembles a list of seven AccountMeta objects, which provide metadata about accounts involved in the transaction. process_transfer iterates through these accounts; however, these accounts are structured incorrectly. In verify_transfer_proof, account_info_iter iterates through the first three accounts out of the seven accounts listed in transfer_with_split_proofs.In the instance, no_op_on_split_proof_context_state is false, and close_split_context_state_on_execution is true, execution enters into the if condition and account_info_iter loads the next account into lamport_destination_account_info to load lamport_destination, however, due to the incorrect ordering of accounts, source_account_authority is loaded instead, which is a signer account. Therefore, during the closure of each split context state account, it employs lamport_destination_account_info as the destination for lamport transfers, which currently references source_account_authority. This, in essence, results in the transfer of lamports to the signing authority of the source account, a behavior that was not the intended outcome. Note that a similar issue is present when transferring with fees. Furthermore, if no_op_on_split_proof_context_state is set to true and a necessary context state account has not been initialized, the invocation of verify_transfer_proof results in a return of None as demonstrated below. Consequently, in the event that close_split_context_state_on_execution is true, process_transfer clears lamport_destination, context_accounts.authority, and zk_token_proof_program to load source_account_authority into authority_info. However, due to the incorrect ordering of accounts, source_account_authority, lamport_destination and context_accounts.authority accounts are flushed out and authority_info is assigned zk_token_proof_program account. Thus, the incorrect authority may fail to verify the zero-knowledge proof, which is a critical part of ensuring the correctness of the transfer. If the proof fails or the verification process does not execute as intended, the transaction may result in an error and failure of the transfer.","/// Create a `TransferWithSplitProof` instruction without fee #[allow(clippy::too_many_arguments)] #[cfg(not(target_os = ""solana""))] pub fn transfer_with_split_proofs(     token_program_id: &Pubkey,     source_token_account: &Pubkey,     mint: &Pubkey,     destination_token_account: &Pubkey,     new_source_decryptable_available_balance: DecryptableBalance,     source_account_authority: &Pubkey,     context_accounts: TransferSplitContextStateAccounts,     source_decrypt_handles: &SourceDecryptHandles, ) -> Result<Instruction, ProgramError> {     check_program_account(token_program_id)?;     let mut accounts = vec![         AccountMeta::new(*source_token_account, false),         AccountMeta::new_readonly(*mint, false),         AccountMeta::new(*destination_token_account, false),     ];     let close_split_context_state_on_execution =         if let Some(close_split_context_state_on_execution_accounts) =             context_accounts.close_split_context_state_accounts         {             // If `close_split_context_state_accounts` is set, then all context state             // accounts must be `writable`.             accounts.push(AccountMeta::new(*context_accounts.equality_proof, false));             accounts.push(AccountMeta::new(                 *context_accounts.ciphertext_validity_proof,                 false,             ));             accounts.push(AccountMeta::new(*context_accounts.range_proof, false));             accounts.push(AccountMeta::new_readonly(*source_account_authority, true));             accounts.push(AccountMeta::new(                 *close_split_context_state_on_execution_accounts.lamport_destination,                 false,             ));             accounts.push(AccountMeta::new_readonly(*context_accounts.authority, true));             accounts.push(AccountMeta::new_readonly(                 *close_split_context_state_on_execution_accounts.zk_token_proof_program,                 false,             ));             true         } else {             // If `close_split_context_state_accounts` is not set, then context state             // accounts can be read-only.             accounts.push(AccountMeta::new_readonly(                 *context_accounts.equality_proof,                 false,             ));             accounts.push(AccountMeta::new_readonly(                 *context_accounts.ciphertext_validity_proof,                 false,             ));             accounts.push(AccountMeta::new_readonly(                 *context_accounts.range_proof,                 false,             ));             accounts.push(AccountMeta::new_readonly(*source_account_authority, true));             false         };  pub fn verify_transfer_proof( [...] ) -> Result<Option<TransferProofContextInfo>, ProgramError> { // The first three accounts are loaded here [...] if close_split_context_state_on_execution { let lamport_destination_account_info = ,→ next_account_info(account_info_iter)?; let context_state_account_authority_info = ,→ next_account_info(account_info_iter)?; msg!(""Closing equality proof context state account""); invoke( &zk_token_proof_instruction::close_context_state( ContextStateInfo { context_state_account: ,→ equality_proof_context_state_account_info.key, context_state_authority: ,→ context_state_account_authority_info.key, }, lamport_destination_account_info.key, ), &[ equality_proof_context_state_account_info.clone(), lamport_destination_account_info.clone(), context_state_account_authority_info.clone(), ], )?; //Similarly, cipher text validity proof and range proof context state ,→ accounts are also closed [...] }","/// Create a `TransferWithSplitProof` instruction without fee #[allow(clippy::too_many_arguments)] #[cfg(not(target_os = ""solana""))] pub fn transfer_with_split_proofs(     token_program_id: &Pubkey,     source_token_account: &Pubkey,     mint: &Pubkey,     destination_token_account: &Pubkey,     new_source_decryptable_available_balance: DecryptableBalance,     source_account_authority: &Pubkey,     context_accounts: TransferSplitContextStateAccounts,     source_decrypt_handles: &SourceDecryptHandles, ) -> Result<Instruction, ProgramError> {     check_program_account(token_program_id)?;     let mut accounts = vec![         AccountMeta::new(*source_token_account, false),         AccountMeta::new_readonly(*mint, false),         AccountMeta::new(*destination_token_account, false),     ];     let close_split_context_state_on_execution =         if let Some(close_split_context_state_on_execution_accounts) =             context_accounts.close_split_context_state_accounts         {             // If `close_split_context_state_accounts` is set, then all context state             // accounts must be `writable`.             accounts.push(AccountMeta::new(*context_accounts.equality_proof, false));             accounts.push(AccountMeta::new(                 *context_accounts.ciphertext_validity_proof,                 false,             ));             accounts.push(AccountMeta::new(*context_accounts.range_proof, false));             accounts.push(AccountMeta::new(                 *close_split_context_state_on_execution_accounts.lamport_destination,                 false,             ));             accounts.push(AccountMeta::new_readonly(*context_accounts.authority, true));             accounts.push(AccountMeta::new_readonly(                 *close_split_context_state_on_execution_accounts.zk_token_proof_program,                 false,             ));             accounts.push(AccountMeta::new_readonly(*source_account_authority, true));             true         } else {             // If `close_split_context_state_accounts` is not set, then context state             // accounts can be read-only.             accounts.push(AccountMeta::new_readonly(                 *context_accounts.equality_proof,                 false,             ));             accounts.push(AccountMeta::new_readonly(                 *context_accounts.ciphertext_validity_proof,                 false,             ));             accounts.push(AccountMeta::new_readonly(                 *context_accounts.range_proof,                 false,             ));             accounts.push(AccountMeta::new_readonly(*source_account_authority, true));             false         };",Medium,"Modify the conditions in process_transfer, verify_transfer_with_fee_proof, verify_transfer_proof and the structuring of accounts in transfer_with_split_proofs, such that the new conditions accurately reflect the order of accounts as listed in transfer_with_split_proofs.","https://github.com/solana-labs/solana-program-library/pull/5931/files#diff-2595d3cfe17c6e4ddac286e86b3fadfcdda4a44dbd1259890b94ba105fac63e3L1396, https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/e21cbb09-5ce7-48c8-954e-5077c486a579/solana_token22_audit_final.pdf?table=block&id=88fc9b14-b183-49ee-aa0a-29c29c1eaf89&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742961600000&signature=H_I1MmWaBTT1ZTabCmBV6FDaHowAV7WGiNbDzY0_3Yc&downloadName=solana_token22_audit_final.pdf",High
Sol-222,"Missing Side Check On Market Vault Account. The vulnerability is related to a potential mismatch between the side of an order and the market vault utilized for depositing assets in place_order. place_order is responsible for validating and placing a new order in a trading market, ensuring the calculation of the required deposit amount, and transferring assets between the trader’s account and the market’s vault. It is crucial to ensure that the deposit and withdrawal of assets into and from a market vault are consistent with the side of the order, i.e., a bid or an ask order. The issue arises since there is no check to ensure that the market vault account utilized for depositing assets (ctx.accounts.market_vault) matches the side of the order, as seen in the attached code snippet. As a result, an attacker may place a bid order but use an ask-side market vault for depositing assets (or vice versa). This mismatch may result in the attacker draining funds from the market vault without providing the expected assets in return. This imbalance in the market vault disrupts the fairness and integrity of the trading system, resulting in financial losses for legitimate traders. Proof of Concept 1. Trader A places a legitimate bid order to buy one BTC and deposits 10,000 USD into the market vault (as expected for a bid order). 2. Trader B exploits the vulnerability by placing a bid order to buy one BTC but intentionally uses an ask-side market vault (containing BTC) for depositing assets. 3. The attacker’s bid order is accepted due to the lack of a check to ensure that the market vault matches the side of the order. 4. The attacker’s order executes, and they receive one BTC from Trader A’s legitimate order. However, the attacker never deposited the expected USD into the market vault. 5. As a result, Trader A is left with 10,000 USD less in the market vault (as expected), but Trader B never provided the expected USD. This imbalance leaves the market vault with less USD and more BTC.","pub fn place_order(ctx: Context<PlaceOrder>, order: Order, limit: u8) -> ,→ Result<Option<u128>> { require_gte!(order.max_base_lots, 0, OpenBookError::InvalidInputLots); require_gte!( order.max_quote_lots_including_fees, 0, OpenBookError::InvalidInputLots ); [...] let mut market = ctx.accounts.market.load_mut()?; // abscence of checks regarding side of the order. require!( !market.is_expired(clock.unix_timestamp), OpenBookError::MarketHasExpired ); [...] }","pub fn place_order(ctx: Context<PlaceOrder>, order: Order, limit: u8) -> ,→ Result<Option<u128>> { require_gte!(order.max_base_lots, 0, OpenBookError::InvalidInputLots); require_gte!( order.max_quote_lots_including_fees, 0, OpenBookError::InvalidInputLots ); [...] let mut market = ctx.accounts.market.load_mut()?; require_keys_eq!( market.get_vault_by_side(order.side), ctx.accounts.market_vault.key(), OpenBookError::InvalidMarketVault ); // abscence of checks regarding side of the order. require!( !market.is_expired(clock.unix_timestamp), OpenBookError::MarketHasExpired ); [...] }",Critical,"Include checks that ensure the market vault utilized for depositing assets matches the side of the order. If the sides do not match, the order should not be executed, and appropriate error handling should occur.","https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/9b7206a8-60c4-4e96-a6d6-66a864dd1d21/openbook_audit_final.pdf?table=block&id=527e1c3e-b913-4a2a-9d82-88757467e4a0&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742961600000&signature=Cj4h-LnuGst0dqwThVB6AUD7YRx0Z4Z8LQTn1bywiKw&downloadName=openbook_audit_final.pdf, https://github.com/openbook-dex/openbook-v2/commit/1b40b6898f7fca130d47f74c66c8f3017d17753#diff-25d3fff0e41784465ae972be88540e901aac18c4d84ca3541c8e3b06b75538d8",High
Sol-223,"Incorrect Check On Variance Value. In market::oracle_price_from_a_and_b, the target_var value indicates the target variance, which is the upper bound for the permissible range of values for the variance. An issue arises when comparing target_var and var in oracle_price_from_a_and_b. In the existing code, the condition target_var > var implies that if the calculated variance (var) is less than the target variance (target_var), the function returns None. This means that if the actual variance is less than the target variance, the function will not return an oracle price, even though it should. Thus, the only scenario in which it will function without issues is when the variance value is incorrect. In such a situation, users will receive an inaccurate price with a significant error, causing the resulting price to deviate either above or below the actual asset price.","fn oracle_price_from_a_and_b( &self, oracle_a_acc: &impl KeyedAccountReader, oracle_b_acc: &impl KeyedAccountReader, now_slot: u64, ) -> Result<Option<I80F48>> { [...] let (price, var) = oracle_a.combine_div_with_var(&oracle_b); let target_var = self.oracle_config.conf_filter.powi(2); if target_var > var { msg!( ""Combined variance too high; value {}, target {}"", var, target_var ); Ok(None) } else { [...] } }","fn oracle_price_from_a_and_b( &self, oracle_a_acc: &impl KeyedAccountReader, oracle_b_acc: &impl KeyedAccountReader, now_slot: u64, ) -> Result<Option<I80F48>> { [...] let (price, var) = oracle_a.combine_div_with_var(&oracle_b); let target_var = self.oracle_config.conf_filter.powi(2); if var > target_var { msg!( ""Combined variance too high; value {}, target {}"", var, target_var ); Ok(None) } else { [...] } }",High,"Ensure that the calculated variance does not exceed the desired variance by modifying the condition to: target_var <= var. This change will allow the function to return an oracle price when the actual variance is less than or equal to the target variance, which is the correct behavior.",https://github.com/openbook-dex/openbook-v2/commit/dad37aaf02cd668b92b68d022982de41c5a34a16,High
Sol-224,"Proper Access Control Implementation. The issue relates to the security and access control of market-related accounts, specifically market_base_vault and market_quote_vault. These vault accounts store and manage tokens associated with the market and are expected to be controlled by certain authorities. Currently, create_market does not explicitly check if the close_market_admin is set as an authority on the market_base_vault and market_quote_vault accounts. If a malicious actor sets the close_market_admin as an authority on these vaults, they may manipulate or drain the funds held in those vaults, even if the market should be closed. ","use crate::state::*; use anchor_lang::prelude::*; use anchor_spl::token::{Mint, TokenAccount}; #[event_cpi] #[derive(Accounts)] pub struct CreateMarket<'info> { #[account( init, payer = payer, space = 8 + std::mem::size_of::<Market>(), )] pub market: AccountLoader<'info, Market>, #[account( seeds = [b""Market"".as_ref(), market.key().to_bytes().as_ref()], bump, )] /// CHECK: pub market_authority: UncheckedAccount<'info>, /// Accounts are initialized by client, /// anchor discriminator is set first when ix exits, #[account(zero)] pub bids: AccountLoader<'info, BookSide>, #[account(zero)] pub asks: AccountLoader<'info, BookSide>, #[account(zero)] pub event_heap: AccountLoader<'info, EventHeap>, #[account(mut)] pub payer: Signer<'info>, #[account(token::mint = base_mint, token::authority = market_authority)] pub market_base_vault: Account<'info, TokenAccount>, #[account(token::mint = quote_mint, token::authority = market_authority)] pub market_quote_vault: Account<'info, TokenAccount>, pub base_mint: Box<Account<'info, Mint>>, pub quote_mint: Box<Account<'info, Mint>>, pub system_program: Program<'info, System>, /// CHECK: The oracle can be one of several different account types pub oracle_a: Option<UncheckedAccount<'info>>, /// CHECK: The oracle can be one of several different account types pub oracle_b: Option<UncheckedAccount<'info>>, /// CHECK: pub collect_fee_admin: UncheckedAccount<'info>, /// CHECK: pub open_orders_admin: Option<UncheckedAccount<'info>>, /// CHECK: pub consume_events_admin: Option<UncheckedAccount<'info>>, /// CHECK: pub close_market_admin: Option<UncheckedAccount<'info>>, }","use crate::state::*; use anchor_lang::prelude::*; use anchor_spl::{ associated_token::AssociatedToken, token::{Mint, Token, TokenAccount}, }; #[event_cpi] #[derive(Accounts)] pub struct CreateMarket<'info> { #[account( init, payer = payer, space = 8 + std::mem::size_of::<Market>(), )] pub market: AccountLoader<'info, Market>, #[account( seeds = [b""Market"".as_ref(), market.key().to_bytes().as_ref()], bump, )] /// CHECK: pub market_authority: UncheckedAccount<'info>, /// Accounts are initialized by client, /// anchor discriminator is set first when ix exits, #[account(zero)] pub bids: AccountLoader<'info, BookSide>, #[account(zero)] pub asks: AccountLoader<'info, BookSide>, #[account(zero)] pub event_heap: AccountLoader<'info, EventHeap>, #[account(mut)] pub payer: Signer<'info>, #[account( init, payer = payer, associated_token::mint = base_mint, associated_token::authority = market_authority, )] pub market_base_vault: Account<'info, TokenAccount>, #[account( init, payer = payer, associated_token::mint = quote_mint, associated_token::authority = market_authority, )] pub market_quote_vault: Account<'info, TokenAccount>, pub base_mint: Box<Account<'info, Mint>>, pub quote_mint: Box<Account<'info, Mint>>, pub system_program: Program<'info, System>, pub token_program: Program<'info, Token>, pub associated_token_program: Program<'info, AssociatedToken>, /// CHECK: The oracle can be one of several different account types pub oracle_a: Option<UncheckedAccount<'info>>, /// CHECK: The oracle can be one of several different account types pub oracle_b: Option<UncheckedAccount<'info>>, /// CHECK: pub collect_fee_admin: UncheckedAccount<'info>, /// CHECK: pub open_orders_admin: Option<UncheckedAccount<'info>>, /// CHECK: pub consume_events_admin: Option<UncheckedAccount<'info>>, /// CHECK: pub close_market_admin: Option<UncheckedAccount<'info>>, }",Medium,"Implement proper checks and make use of program-derived addresses as detailed below for better security: • Utilize Program Derived Addresses(PDAs) for vaults instead of creating vault accounts directly within create_market, ensuring that the vault accounts are controlled solely by the program and cannot have external authorities. • When creating the market, the program may initialize the vaults with the appropriate data and permissions. This includes setting the program itself as the authority and specifying other necessary parameters. • After creating the market and initializing the vaults, the program should explicitly check and ensure that only authorized entities have the necessary authority over these vaults.","https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/9b7206a8-60c4-4e96-a6d6-66a864dd1d21/openbook_audit_final.pdf?table=block&id=527e1c3e-b913-4a2a-9d82-88757467e4a0&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742961600000&signature=Cj4h-LnuGst0dqwThVB6AUD7YRx0Z4Z8LQTn1bywiKw&downloadName=openbook_audit_final.pdf, https://github.com/openbook-dex/openbook-v2/commit/851eca88af0d52c1818254b0973b0d54acc5cb85#diff-f6f0fd2c552f11dda866417172f286b03edf12c18cd7daa68d176343eb580749",High
Sol-225,"Incorrect Reallocation Size. When adding a member to a multi-signature account, if the pre-allocated memory becomes fully utilized, it is necessary to reallocate. realloc_if_needed assesses the requirement for reallocation and performs reallocation for the account, providing additional space for ten members. The number of members is expanded in two instances: • multisig_add_member. • config_transaction_execute. While the former only increases the member count by one, the latter may increase the member count by more than one due to the possibility of executing multiple actions. Therefore, if the size of members to add exceeds the sum of the remaining space and the size of ten members, the fixed increment of ten members may result in a shortage of space.","/// Check if the multisig account space needs to be reallocated to accommodate `members_length`. /// Returns `true` if the account was reallocated. pub fn realloc_if_needed<'a>( multisig: AccountInfo<'a>, members_length: usize, rent_payer: AccountInfo<'a>, system_program: AccountInfo<'a>, ) -> Result<bool> { let current_account_size = multisig.data.borrow().len(); // Check if we need to reallocate space. if current_account_size >= Multisig::size(members_length) { return Ok(false); } // We need to allocate more space. To avoid doing this operation too often, we increment it by 10 members. let new_size = current_account_size + (10 * Member::INIT_SPACE); // Reallocate more space. AccountInfo::realloc(&multisig, new_size, false)?; // If more lamports are needed, transfer them to the account. let rent_exempt_lamports = Rent::get().unwrap().minimum_balance(new_size).max(1); let top_up_lamports = rent_exempt_lamports.saturating_sub(multisig.to_account_info().lamports()); if top_up_lamports > 0 { system_program::transfer( CpiContext::new( system_program, system_program::Transfer { from: rent_payer, to: multisig, }, ), top_up_lamports, )?; } Ok(true) }","/// Check if the multisig account space needs to be reallocated to accommodate `members_length`. /// Returns `true` if the account was reallocated. pub fn realloc_if_needed<'a>( multisig: AccountInfo<'a>, members_length: usize, rent_payer: AccountInfo<'a>, system_program: AccountInfo<'a>, ) -> Result<bool> { let current_account_size = multisig.data.borrow().len(); let account_size_to_fit_members = Multisig::size(members_length); // Check if we need to reallocate space. if current_account_size >= account_size_to_fit_members { return Ok(false); } let new_size = max( current_account_size + (10 * Member::INIT_SPACE), // We need to allocate more space. To avoid doing this operation too often, we increment it by 10 members. account_size_to_fit_members, ); // Reallocate more space. AccountInfo::realloc(&multisig, new_size, false)?; // If more lamports are needed, transfer them to the account. let rent_exempt_lamports = Rent::get().unwrap().minimum_balance(new_size).max(1); let top_up_lamports = rent_exempt_lamports.saturating_sub(multisig.to_account_info().lamports()); if top_up_lamports > 0 { system_program::transfer( CpiContext::new( system_program, system_program::Transfer { from: rent_payer, to: multisig, }, ), top_up_lamports, )?; } Ok(true) }",Low,Select the larger value between the size increased by ten members and the size increased as needed.,"https://github.com/Squads-Protocol/v4/commit/5640af0cd681148a435c68549b338eb219be0021, https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/568d9d7a-ac1f-4996-94ed-7c8506e47b38/squads_v4_audit_final.pdf?table=block&id=4d707018-e849-40d7-99b2-bbec51b7eeb2&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1742968800000&signature=_i9qmF_3wPp_RRZ_P4KE1AZG0agLVLZHKy8y1cRVI9o&downloadName=squads_v4_audit_final.pdf",High
Sol-226,"Blocked Transaction Addition. After creating a batch, adding transactions necessitates a proposal generated by proposal_create. The program-derived address of the proposal uses the transaction index utilized in batch_create as a seed. When initializing the proposal, the caller may select between the Draft and Active states. In BatchAddTransaction::validate, safeguards permit the addition of transactions to the batch only when the proposal is in a Draft state. However, a malicious attacker may set the proposal to Active, preventing the utilization of transactions created for the batch.","use anchor_lang::prelude::*; use crate::errors::*; use crate::state::*; #[derive(AnchorSerialize, AnchorDeserialize)] pub struct ProposalCreateArgs { /// Index of the multisig transaction this proposal is associated with. pub transaction_index: u64, /// Whether the proposal should be initialized with status `Draft`. pub draft: bool, } #[derive(Accounts)] #[instruction(args: ProposalCreateArgs)] pub struct ProposalCreate<'info> { #[account( seeds = [SEED_PREFIX, SEED_MULTISIG, multisig.create_key.as_ref()], bump = multisig.bump, )] pub multisig: Account<'info, Multisig>, #[account( init, payer = rent_payer, space = Proposal::size(multisig.members.len()), seeds = [ SEED_PREFIX, multisig.key().as_ref(), SEED_TRANSACTION, &args.transaction_index.to_le_bytes(), SEED_PROPOSAL, ], bump )] pub proposal: Account<'info, Proposal>, #[account(mut)] pub rent_payer: Signer<'info>, pub system_program: Program<'info, System>, } impl ProposalCreate<'_> { fn validate(&self, args: &ProposalCreateArgs) -> Result<()> { let Self { multisig, .. } = self; // args // We can only create a proposal for an existing transaction. require!( args.transaction_index <= multisig.transaction_index, MultisigError::InvalidTransactionIndex ); // We can't create a proposal for a stale transaction. require!( args.transaction_index > multisig.stale_transaction_index, MultisigError::StaleProposal ); // Anyone can create a Proposal account. It's similar to ATA in this regard. // We don't require `Permission::Initiate` here because it's already implicitly checked // by the fact that a proposal can only be initialized if the corresponding transaction exists, // so the transaction initializer ""approves"" the creation of the proposal implicitly when it creates the transaction. Ok(()) } /// Create a new multisig proposal. #[access_control(ctx.accounts.validate(&args))] pub fn proposal_create(ctx: Context<Self>, args: ProposalCreateArgs) -> Result<()> { let proposal = &mut ctx.accounts.proposal; proposal.multisig = ctx.accounts.multisig.key(); proposal.transaction_index = args.transaction_index; proposal.status = if args.draft { ProposalStatus::Draft { timestamp: Clock::get()?.unix_timestamp, } } else { ProposalStatus::Active { timestamp: Clock::get()?.unix_timestamp, } }; proposal.bump = *ctx.bumps.get(""proposal"").unwrap(); proposal.approved = vec![]; proposal.rejected = vec![]; proposal.cancelled = vec![]; Ok(()) } }","use anchor_lang::prelude::*; use crate::errors::*; use crate::state::*; #[derive(AnchorSerialize, AnchorDeserialize)] pub struct ProposalCreateArgs { /// Index of the multisig transaction this proposal is associated with. pub transaction_index: u64, /// Whether the proposal should be initialized with status `Draft`. pub draft: bool, } #[derive(Accounts)] #[instruction(args: ProposalCreateArgs)] pub struct ProposalCreate<'info> { #[account( seeds = [SEED_PREFIX, SEED_MULTISIG, multisig.create_key.as_ref()], bump = multisig.bump, )] pub multisig: Account<'info, Multisig>, #[account( init, payer = creator, space = Proposal::size(multisig.members.len()), seeds = [ SEED_PREFIX, multisig.key().as_ref(), SEED_TRANSACTION, &args.transaction_index.to_le_bytes(), SEED_PROPOSAL, ], bump )] pub proposal: Account<'info, Proposal>, #[account(mut)] pub creator: Signer<'info>, pub system_program: Program<'info, System>, } impl ProposalCreate<'_> { fn validate(&self, args: &ProposalCreateArgs) -> Result<()> { let Self { multisig, creator, .. } = self; let creator_key = creator.key(); // args // We can only create a proposal for an existing transaction. require!( args.transaction_index <= multisig.transaction_index, MultisigError::InvalidTransactionIndex ); // We can't create a proposal for a stale transaction. require!( args.transaction_index > multisig.stale_transaction_index, MultisigError::StaleProposal ); // creator // Has to be a member. require!( self.multisig.is_member(self.creator.key()).is_some(), MultisigError::NotAMember ); // Must have at least one of the following permissions: Initiate or Vote. require!( self.multisig .member_has_permission(creator_key, Permission::Initiate) || self .multisig .member_has_permission(creator_key, Permission::Vote), MultisigError::Unauthorized ); Ok(()) } /// Create a new multisig proposal. #[access_control(ctx.accounts.validate(&args))] pub fn proposal_create(ctx: Context<Self>, args: ProposalCreateArgs) -> Result<()> { let proposal = &mut ctx.accounts.proposal; proposal.multisig = ctx.accounts.multisig.key(); proposal.transaction_index = args.transaction_index; proposal.status = if args.draft { ProposalStatus::Draft { timestamp: Clock::get()?.unix_timestamp, } } else { ProposalStatus::Active { timestamp: Clock::get()?.unix_timestamp, } }; proposal.bump = *ctx.bumps.get(""proposal"").unwrap(); proposal.approved = vec![]; proposal.rejected = vec![]; proposal.cancelled = vec![]; Ok(()) } }",Low,Add a cross-program invocation for proposal_create at the end of batch_create to ensure the creation of a proposal in the Draft state for the batch. Fixed by restricting the proposal creation for multi-signature members with the initiate or vote role.,https://github.com/Squads-Protocol/v4/commit/3906ce916a36aa26ebfdc984bd0ea3f055080d0c#diff-851f5d927f0e623bd2a6ddc11f0b6ca55eb4072f93c87c3a3d6da9a799d75345,High
Sol-227,"Incorrect Account And Bump. Withdraw_v2 checks the withdraw_from_burner_ta variable to determine whether the withdrawal will occur from burn_ta or vault_ta. However, if withdraw_from_burner_ta is set to true, it utilizes vault_ta and vault_bump instead of burn_ta and burn_bump. This may result in a runtime error and a denial of service.","pub fn withdraw_v2<'a, 'b, 'c, 'info>( ctx: Context<'a, 'b, 'c, 'info, WithdrawV2>, vault_bump: u8, burn_bump: u8, withdraw_amount: u64, before_amount: u64, final_amount: u64, ) -> Result<()> { let locker = &mut ctx.accounts.locker; let mk = ctx.accounts.mint.key(); let mint_position_option = locker.mints.iter().position(|&lm| lm == mk); if let None = mint_position_option { return Err(error!(ErrorCode::WithdrawForMintNotInLocker)); } let withdraw_from_burner_ta = ctx.accounts.vault_ta.key() == ctx.accounts.burn_ta.key(); let mut sourceTa = match withdraw_from_burner_ta { true => Account::<'_, anchor_spl::token::TokenAccount>::try_from( &ctx.accounts.burn_ta.to_account_info(), )?, false => Account::<'_, anchor_spl::token::TokenAccount>::try_from( &ctx.accounts.vault_ta.to_account_info(), )?, }; if sourceTa.amount < withdraw_amount { return Err(error!(ErrorCode::InsufficientFunds)); } let mint_position = mint_position_option.unwrap(); let withdraw_type = get_withdraw_type( locker, ctx.accounts.user_ta_owner.key(), final_amount, sourceTa.amount, withdraw_amount, ); // Check if locker.amounts[i] is equal to before_amount to avoid duplicates if locker.amounts[mint_position] != before_amount { return Err(error!(ErrorCode::InvalidBeforeState)); } if final_amount > 0 { locker.amounts[mint_position] = final_amount; } else { locker.mints.remove(mint_position); locker.amounts.remove(mint_position); } if *ctx.accounts.user_ta.to_account_info().owner != ctx.accounts.token_program.key() { let cpi_program = ctx.accounts.associated_token_program.to_account_info(); let cpi_accounts = anchor_spl::associated_token::Create { payer: ctx.accounts.user_ta_owner.to_account_info(), associated_token: ctx.accounts.user_ta.to_account_info(), authority: ctx.accounts.user_ta_owner.to_account_info(), mint: ctx.accounts.mint.to_account_info(), system_program: ctx.accounts.system_program.to_account_info(), token_program: ctx.accounts.token_program.to_account_info(), rent: ctx.accounts.rent.to_account_info(), }; let cpi_ctx = anchor_lang::context::CpiContext::new(cpi_program, cpi_accounts); anchor_spl::associated_token::create(cpi_ctx)?; } if withdraw_from_burner_ta { anchor_spl::token::transfer( CpiContext::new_with_signer( ctx.accounts.token_program.to_account_info(), anchor_spl::token::Transfer { from: ctx.accounts.vault_ta.to_account_info(), to: ctx.accounts.user_ta.to_account_info(), authority: ctx.accounts.vault_ta.to_account_info(), }, &[&[ctx.accounts.mint.key().as_ref(), &[vault_bump]]], ), withdraw_amount.into(), )?; }","pub fn withdraw_v2<'a, 'b, 'c, 'info>( ctx: Context<'a, 'b, 'c, 'info, WithdrawV2>, vault_bump: u8, burn_bump: u8, withdraw_amount: u64, before_amount: u64, final_amount: u64, ) -> Result<()> { let locker = &mut ctx.accounts.locker; let mk = ctx.accounts.mint.key(); let mint_position_option = locker.mints.iter().position(|&lm| lm == mk); if let None = mint_position_option { return Err(error!(ErrorCode::WithdrawForMintNotInLocker)); } let withdraw_from_burner_ta = ctx.accounts.vault_ta.key() == ctx.accounts.burn_ta.key(); let mut sourceTa = match withdraw_from_burner_ta { true => Account::<'_, anchor_spl::token::TokenAccount>::try_from( &ctx.accounts.burn_ta.to_account_info(), )?, false => Account::<'_, anchor_spl::token::TokenAccount>::try_from( &ctx.accounts.vault_ta.to_account_info(), )?, }; if sourceTa.amount < withdraw_amount { return Err(error!(ErrorCode::InsufficientFunds)); } let mint_position = mint_position_option.unwrap(); let withdraw_type = get_withdraw_type( locker, ctx.accounts.user_ta_owner.key(), final_amount, sourceTa.amount, withdraw_amount, ); // Check if locker.amounts[i] is equal to before_amount to avoid duplicates if locker.amounts[mint_position] != before_amount { return Err(error!(ErrorCode::InvalidBeforeState)); } if final_amount > 0 { locker.amounts[mint_position] = final_amount; } else { locker.mints.remove(mint_position); locker.amounts.remove(mint_position); } if *ctx.accounts.user_ta.to_account_info().owner != ctx.accounts.token_program.key() { let cpi_program = ctx.accounts.associated_token_program.to_account_info(); let cpi_accounts = anchor_spl::associated_token::Create { payer: ctx.accounts.user_ta_owner.to_account_info(), associated_token: ctx.accounts.user_ta.to_account_info(), authority: ctx.accounts.user_ta_owner.to_account_info(), mint: ctx.accounts.mint.to_account_info(), system_program: ctx.accounts.system_program.to_account_info(), token_program: ctx.accounts.token_program.to_account_info(), rent: ctx.accounts.rent.to_account_info(), }; let cpi_ctx = anchor_lang::context::CpiContext::new(cpi_program, cpi_accounts); anchor_spl::associated_token::create(cpi_ctx)?; } if withdraw_from_burner_ta { anchor_spl::token::transfer( CpiContext::new_with_signer( ctx.accounts.token_program.to_account_info(), anchor_spl::token::Transfer { from: ctx.accounts.burn_ta.to_account_info(), to: ctx.accounts.user_ta.to_account_info(), authority: ctx.accounts.burn_ta.to_account_info(), }, &[&[ctx.accounts.mint.key().as_ref(), &[burn_bump]]], ), withdraw_amount.into(), )?; }",Medium,Replace vault_ta and vault_bump with burn_ta and burn_bump respectively.,https://github.com/Aurory-Game/ocil/commit/91217b35cd3005a2a7ef056cd3a1bddf4b7a3e67#diff-00f6d20af88536a2ed89ff4b04ae4735c78c26ae4bf724b37bf8bd688596dbfc,High
Sol-228,"Incorrect Calculation For Linear Curves. While setting prices of pools, owners have three curves to choose from: Linear, Exponential and ConstantProduct. Additionally, for Trade pools, dealers can buy and sell NFTs to the pool. get_buy_quote and get_sell_quote are used to calculate the price where pools buy and sell NFTs. Since all pricing curves support dynamic prices and Trade pools essentially allow the price to move in both directions, it is crucial for infinity to ensure that pools will not suffer a loss from a sequence of buy and sell actions. To simplify, if a pool buys an NFT and then sells it immediately, the number of tokens spent on buying the NFT should not exceed the number of tokens collected from selling the NFT. This rule is enforced by the following logic • When a pool buys an NFT, the price is calculated with respect to the pool state after the swap has finished. • When a pool sells an NFT, the price is calculated with respect to the current pool state. These rules ensure that the pool state will always be restored if N sells + N buys occur. However, an error in calculating the NFT buy price causes pools using Linear curves to buy at a higher price than it should. This potentially leads to a loss of funds for pool owners","pub fn get_buy_quote(&self, min_quote: Uint128) -> Result<Option<Uint128>, ,→ ContractError> { // Calculate the buy price with respect to pool types and bonding curves let buy_price = match self.pool_type { PoolType::Token => Ok(self.spot_price), PoolType::Nft => Err(ContractError::InvalidPool( ""pool cannot buy nfts"".to_string(), )), PoolType::Trade => match self.bonding_curve { BondingCurve::Linear => self .spot_price .checked_add(self.delta) .map_err(|e| ContractError::Std(StdError::overflow(e))), ... }, }?; // If the pool has insufficient tokens to buy the NFT, return None if self.total_tokens < buy_price || buy_price < min_quote { return Ok(None); } Ok(Some(buy_price)) }","pub fn get_buy_quote(&self, min_quote: Uint128) -> Result<Option<Uint128>, ,→ ContractError> { // Calculate the buy price with respect to pool types and bonding curves let buy_price = match self.pool_type { ... PoolType::Trade => match self.bonding_curve { BondingCurve::Linear => self .spot_price - .checked_add(self.delta) + .checked_sub(self.delta) .map_err(|e| ContractError::Std(StdError::overflow(e))), ... }, }?; ... }",Critical,Calculate the correct price when acquiring NFTs.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/e54a133f-cd3f-4295-b875-ffc2ff17ac6d/infinity_swap_audit_final.pdf?table=block&id=cff181d8-2ba4-4c02-8c00-5ce9cff84551&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743048000000&signature=cNln5anlnzJiPXvu9G74jUHgOuHnFrExaakLjUbDF3w&downloadName=infinity_swap_audit_final.pdf,High
Sol-229,"Incorrect Calculation For Exponential Curves. The inverse operation of V ∗(1+delta)isV /(1+delta). TheExponentialcurves incorrectly implement the price decrement step as V ∗ (1 − delta). Since V ∗ (1 + delta) ∗ (1 − delta) < V , this exposes the Exponential pool to risks of price manipulation and may lead to loss of pool owner funds.","pub fn get_buy_quote(&self, min_quote: Uint128) -> Result<Option<Uint128>, ,→ ContractError> { let buy_price = match self.pool_type { ... PoolType::Trade => match self.bonding_curve { ... BondingCurve::Exponential => { let product = self .spot_price .checked_mul(self.delta) .map_err(|e| StdError::Overflow { source: e })? .checked_div(Uint128::from(MAX_BASIS_POINTS)) .map_err(|e| ContractError::Std(StdError::divide_by_zero(e)))?; self.spot_price .checked_add(product) .map_err(|e| ContractError::Std(StdError::overflow(e))) } ... }, }?; ... } pub fn update_spot_price(&mut self, tx_type: &TransactionType) -> Result<(), ,→ StdError> { let result = match tx_type { ... TransactionType::NftsForTokens => match self.bonding_curve { ... BondingCurve::Exponential => { let product = self .spot_price .checked_mul(self.delta) .map_err(|e| StdError::Overflow { source: e })? .checked_div(Uint128::from(MAX_BASIS_POINTS)) .map_err(|e| StdError::DivideByZero { source: e })?; self.spot_price .checked_sub(product) .map_err(|e| StdError::Overflow { source: e }) } ... }, }; ... }","pub fn get_buy_quote(&self, min_quote: Uint128) -> Result<Option<Uint128>, ,→ ContractError> { ... PoolType BondingCurve::Exponential => self + .spot_price + .checked_mul(Uint128::from(MAX_BASIS_POINTS)) + .map_err(|e| StdError::Overflow { source: e })? + .checked_div( + self.delta.checked_add( + Uint128::from(MAX_BASIS_POINTS) + ) + .map_err(|e| ContractError::Std(StdError::overflow(e)))? + ) + .map_err(|e| ContractError::Std(StdError::divide_by_zero(e))), ... } ... } pub fn update_spot_price(&mut self, tx_type: &TransactionType) -> Result<(), ,→ StdError> { let result = match tx_type { ... TransactionType::NftsForTokens => match self.bonding_curve { ... BondingCurve::Exponential => self + .spot_price + .checked_mul(Uint128::from(MAX_BASIS_POINTS)) + .map_err(|e| StdError::Overflow { source: e })? + .checked_div( + self.delta.checked_add( + Uint128::from(MAX_BASIS_POINTS) + ) + .map_err(|e| ContractError::Std(StdError::overflow(e)))? + ) + .map_err(|e| ContractError::Std(StdError::divide_by_zero(e))) + .checked_add(Uint128::one()) + .map_err(|e| StdError::Overflow { source: e}), ... }, }; ... }",Critical,Use V /(1 + delta) instead of V ∗ (1 − delta).,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/e54a133f-cd3f-4295-b875-ffc2ff17ac6d/infinity_swap_audit_final.pdf?table=block&id=cff181d8-2ba4-4c02-8c00-5ce9cff84551&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743048000000&signature=cNln5anlnzJiPXvu9G74jUHgOuHnFrExaakLjUbDF3w&downloadName=infinity_swap_audit_final.pdf,High
Sol-230,"Lack Of Check Between Collection And Swap Pool. The execute_swap_tokens_for_specific_nfts action takes a user-provided collection and nfts_to_swap_for. Each entry of nfts_to_swap_for includes a pool_id pointing to the target pool for a swap to occur. Unfortunately, while performing swaps, the collection contract address included in the pool configuration is not checked against the user-supplied collection. This potential mismatch between the user-provided and pool collection causes issues since the pools are used in processing the majority of the swap logic, except the final NFT transfer, which is performed on collection instead. The following illustrates how an attacker may abuse this mismatch to steal NFTs from infinity. 1. Attacker aims to steal collectionV::nftX, currently held by poolV on infinity. 2. Attacker deploys mock an NFT contract collectionM. 3. Attacker mints collectionM::nftX from the mock NFT contract. 4. Attacker creates poolM on infinity and assigns collectionM to the pool. 5. Attacker lists collectionM::nftX on poolM for sale. 6. Attacker callsexecute_swap_tokens_for_specific_nftswithnfts_to_swap_for = poolM::nftX and collection = collectionV. 7. Swap logic is processed for poolM::nftX, the attacker pays poolM for collectionM::nftX. Then, the NFT transfer is completed on collectionV::nftX, and the attacker successfully steals the target NFT from infinity.","fn commit_messages(&self, response: &mut Response) -> Result<(), ContractError> { ... // Iterate over swaps and reduce token payments that need to be made for swap in self.swaps.iter() { ... // Push transfer NFT messages transfer_nft( &swap.nft_payment.nft_token_id, &swap.nft_payment.address, self.collection.as_ref(), response, )?; ... } ... }","pub fn swap_tokens_for_specific_nfts( &mut self, storage: &'a dyn Storage, nfts_to_swap_for: Vec<PoolNftSwap>, swap_params: SwapParams, ) -> Result<(), ContractError> { ... for pool_nfts in nfts_to_swap_for { ... // If pool is not in pool_map, load it from storage if !pool_queue_item_map.contains_key(&pool_nfts.pool_id) { let pool_option = pools().may_load(storage, pool_nfts.pool_id)?; // If pool is not found, return error if pool_option.is_none() { return Err(ContractError::PoolNotFound(format!( ""pool {} not found"", pool_nfts.pool_id ))); } // Create PoolQueueItem and insert into pool_queue_item_map let pool = pool_option.unwrap(); + + if pool.collection != self.collection { + return Err(ContractError::InvalidPool( + ""pool does not belong to this collection"".to_string(), + )); + } let quote_price = pool.get_sell_quote(self.min_quote)?; ... } ... } ... }",Critical,Check that each selected pool handles the same collection provided by the user.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/e54a133f-cd3f-4295-b875-ffc2ff17ac6d/infinity_swap_audit_final.pdf?table=block&id=cff181d8-2ba4-4c02-8c00-5ce9cff84551&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743048000000&signature=cNln5anlnzJiPXvu9G74jUHgOuHnFrExaakLjUbDF3w&downloadName=infinity_swap_audit_final.pdf,High
Sol-231,"NFTs Treated As Fungible Tokens During Withdrawal. During NFT withdrawals, no checks against the owner pool are performed. Combined with remove_nft_deposit succeeding regardless of whether the removed pool_id and nft_token_id storage entry exists, attackers will be able to deposit an NFT (nftX) and withdraw another one with a different id (nftY) from infinity.","pub fn remove_nft_deposit(storage: &mut dyn Storage, pool_id: u64, nft_token_id: ,→ &str) { NFT_DEPOSITS.remove(storage, (pool_id, nft_token_id.to_string())) }","pub fn execute_withdraw_nfts( ... ) -> Result<Response, ContractError> { ... // Withdraw NFTs to the asset recipient if specified, otherwise to the sender let recipient = asset_recipient.unwrap_or(info.sender); for nft_token_id in &nft_token_ids { transfer_nft( nft_token_id, recipient.as_ref(), pool.collection.as_ref(), &mut response, )?; + verify_nft_deposit(deps.storage, pool_id, nft_token_id); remove_nft_deposit(deps.storage, pool_id, nft_token_id); } // Track the NFTs that have been withdrawn from the pool pool.withdraw_nfts(&nft_token_ids)?; ... }",Critical,Check that each NFT withdrawn belongs to the provided pool.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/e54a133f-cd3f-4295-b875-ffc2ff17ac6d/infinity_swap_audit_final.pdf?table=block&id=cff181d8-2ba4-4c02-8c00-5ce9cff84551&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743048000000&signature=cNln5anlnzJiPXvu9G74jUHgOuHnFrExaakLjUbDF3w&downloadName=infinity_swap_audit_final.pdf,High
Sol-232,"Rounding Errors In Quote Calculation. Quote calculation for ConstantProduct curves contain division, leading to potential rounding errors. pools may suffer a marginal loss due to prices rounding down when selling NFTs.","pub fn get_sell_quote(&self, min_quote: Uint128) -> Result<Option<Uint128>, ,→ ContractError> { ... let sell_price = match self.bonding_curve { BondingCurve::Linear | BondingCurve::Exponential => self.spot_price, BondingCurve::ConstantProduct => { if self.total_nfts < 2 { return Ok(None); } self.total_tokens .checked_div(Uint128::from(self.total_nfts - 1)) .unwrap() } }; ... }","pub fn get_sell_quote(&self, min_quote: Uint128) -> Result<Option<Uint128>, ,→ ContractError> { ... self.total_tokens .checked_div(Uint128::from(self.total_nfts - 1)) + .unwrap() + .checked_add(Uint128::one()) .unwrap() } }; ... }",Low,Ensure that pool always sells NFTs with rounded-up prices.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/e54a133f-cd3f-4295-b875-ffc2ff17ac6d/infinity_swap_audit_final.pdf?table=block&id=cff181d8-2ba4-4c02-8c00-5ce9cff84551&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743048000000&signature=cNln5anlnzJiPXvu9G74jUHgOuHnFrExaakLjUbDF3w&downloadName=infinity_swap_audit_final.pdf,High
Sol-233,"Robust Flag Not Respected When Buying Specific NFTs. When the robust flag is enabled, a single swap failure should not revert successfully processed swaps. However, in swap_tokens_for_specifc_nfts, when a pool_queue_item becomes unusable and inserted intopools_to_save, the loop around it continues to run. Hence, unwrappingpool_queue_item fetched from pool_queue_item_map in the next iteration will panic.","pub fn swap_tokens_for_specific_nfts( &mut self, storage: &'a dyn Storage, nfts_to_swap_for: Vec<PoolNftSwap>, swap_params: SwapParams, ) -> Result<(), ContractError> { // Create a pool_queue_item map for tracking swap pools let mut pool_queue_item_map: BTreeMap<u64, PoolQueueItem> = BTreeMap::new(); for pool_nfts in nfts_to_swap_for { ... // Iterate over all NFTs selected for the given pool for nft_swap in pool_nfts.nft_swaps { let pool_queue_item = ,→ pool_queue_item_map.remove(&pool_nfts.pool_id).unwrap(); ... if pool_queue_item.usable { // If the swap was a success, and the quote price was updated, save ,→ into pool_queue pool_queue_item_map.insert(pool_queue_item.pool.id, ,→ pool_queue_item); } else { // If the swap was a success, but the quote price was not updated, // withdraw from circulation by inserting into pools_to_save self.pools_to_save .insert(pool_queue_item.pool.id, pool_queue_item.pool); } } } ... }","if pool_queue_item.usable { ... } else { // If the swap was a success, but the quote price was not updated, // withdraw from circulation by inserting into pools_to_save self.pools_to_save .insert(pool_queue_item.pool.id, pool_queue_item.pool); + break; }",Low,Break out of the loop if pool_queue_item is flagged as unusable.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/e54a133f-cd3f-4295-b875-ffc2ff17ac6d/infinity_swap_audit_final.pdf?table=block&id=cff181d8-2ba4-4c02-8c00-5ce9cff84551&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743048000000&signature=cNln5anlnzJiPXvu9G74jUHgOuHnFrExaakLjUbDF3w&downloadName=infinity_swap_audit_final.pdf,High
Sol-234,"Inadequate Access Control Inside HealthRegions. HealthRegion allows multiple instructions to be executed without performing health checks, thereby reducing gas costs, as long as the account remains in a healthy position at the end. However, this feature also introduces new attack surfaces. For instance, an attacker may bypass the limitations of the FlashLoan implementation, which prevents users from calling Mango after receiving a flash loan. To execute a flash loan without using FlashLoanBegin/Start, an attacker can: 1. Borrow any quantity of tokens within a HealthRegion, which would render their account in an unchecked and unhealthy state. 2. Conduct certain operations using the borrowed tokens. 3. Deposit the tokens back to restore their account to a healthy state. Furthermore, rather than returning the borrowed tokens to restore the health of the account, an attacker may exploit the TokenLiqBankruptcy instruction to liquidate the bad debt. This enables the attacker to force the protocol to cover the cost of the liquidation, resulting in the unauthorized appropriation of funds. Proof of Concept To demonstrate how this attack can be carried out, let us consider a scenario where the attacker has two accounts: A and B. Account A will serve as the liquidatee, while Account B will be the liquidator. The attacker may execute a transaction with the following instructions: 1. HealthRegionBegin(A) - pre_init_health is zero. 2. A.TokenWithdraw(amt) - A where amt is the amount of tokens to be borrowed from the liab_bank. As A is within the HealthRegion, it can proceed into a liquidable stage without restriction. 3. B.TokenLiqBankruptcy(A) - B liquidates A through the token_liq_bankruptcy instruction. The protocol repays A’s liabilities, and post_init_health becomes zero. 4. HealthRegionEnd(A). This results in the attacker stealing amt tokens from the bank.","use crate::accounts_ix::*; use crate::error::*; use crate::health::*; use crate::state::*; use anchor_lang::prelude::*; use anchor_lang::solana_program::sysvar::instructions as tx_instructions; use anchor_lang::Discriminator; use fixed::types::I80F48; pub fn health_region_begin<'key, 'accounts, 'remaining, 'info>( ctx: Context<'key, 'accounts, 'remaining, 'info, HealthRegionBegin<'info>>, ) -> Result<()> { // Check if the other instructions in the transactions are compatible { let ixs = ctx.accounts.instructions.as_ref(); let current_index = tx_instructions::load_current_index_checked(ixs)? as usize; // There must be a matching HealthRegionEnd instruction let mut index = current_index + 1; let mut found_end = false; loop { let ix = match tx_instructions::load_instruction_at_checked(index, ixs) { Ok(ix) => ix, Err(ProgramError::InvalidArgument) => break, // past the last instruction Err(e) => return Err(e.into()), }; index += 1; if ix.program_id != crate::id() { continue; } if ix.data[0..8] != crate::instruction::HealthRegionEnd::discriminator() { continue; } // check that it's for the same account require_keys_eq!(ix.accounts[0].pubkey, ctx.accounts.account.key()); found_end = true; index += 1; } require_msg!( found_end, ""found no HealthRegionEnd instruction in transaction"" ); } let mut account = ctx.accounts.account.load_full_mut()?; require_msg!( !account.fixed.is_in_health_region(), ""account must not already be health wrapped"" ); account.fixed.set_in_health_region(true); let group = account.fixed.group; let account_retriever = ScanningAccountRetriever::new(ctx.remaining_accounts, &group) .context(""create account retriever"")?; // Compute pre-health and store it on the account let health_cache = new_health_cache(&account.borrow(), &account_retriever)?; let pre_init_health = account.check_health_pre(&health_cache)?; account.fixed.health_region_begin_init_health = pre_init_health.ceil().to_num(); Ok(()) } pub fn health_region_end<'key, 'accounts, 'remaining, 'info>( ctx: Context<'key, 'accounts, 'remaining, 'info, HealthRegionEnd<'info>>, ) -> Result<()> { let mut account = ctx.accounts.account.load_full_mut()?; require_msg!( account.fixed.is_in_health_region(), ""account must be health wrapped"" ); account.fixed.set_in_health_region(false); let group = account.fixed.group; let account_retriever = ScanningAccountRetriever::new(ctx.remaining_accounts, &group) .context(""create account retriever"")?; let health_cache = new_health_cache(&account.borrow(), &account_retriever)?; let pre_init_health = I80F48::from(account.fixed.health_region_begin_init_health); account.check_health_post(&health_cache, pre_init_health)?; account.fixed.health_region_begin_init_health = 0; Ok(()) }","use crate::accounts_ix::*; use crate::error::*; use crate::health::*; use crate::state::*; use anchor_lang::prelude::*; use anchor_lang::solana_program::sysvar::instructions as tx_instructions; use anchor_lang::Discriminator; use fixed::types::I80F48; pub fn health_region_begin<'key, 'accounts, 'remaining, 'info>( ctx: Context<'key, 'accounts, 'remaining, 'info, HealthRegionBegin<'info>>, ) -> Result<()> { // The instructions that may be called inside a HealthRegion let allowed_inner_ix = [ crate::instruction::PerpCancelAllOrders::discriminator(), crate::instruction::PerpCancelAllOrdersBySide::discriminator(), crate::instruction::PerpCancelOrder::discriminator(), crate::instruction::PerpCancelOrderByClientOrderId::discriminator(), crate::instruction::PerpPlaceOrder::discriminator(), crate::instruction::PerpPlaceOrderPegged::discriminator(), crate::instruction::Serum3CancelAllOrders::discriminator(), crate::instruction::Serum3CancelOrder::discriminator(), crate::instruction::Serum3PlaceOrder::discriminator(), crate::instruction::Serum3SettleFunds::discriminator(), crate::instruction::Serum3SettleFundsV2::discriminator(), ]; // Check if the other instructions in the transaction are compatible { let ixs = ctx.accounts.instructions.as_ref(); let current_index = tx_instructions::load_current_index_checked(ixs)? as usize; // Forbid HealthRegionBegin to be called from CPI (it does not have to be the first instruction) let current_ix = tx_instructions::load_instruction_at_checked(current_index, ixs)?; require_msg!( current_ix.program_id == *ctx.program_id, ""HealthRegionBegin must be a top-level instruction"" ); // There must be a matching HealthRegionEnd instruction let mut index = current_index + 1; let mut found_end = false; loop { let ix = match tx_instructions::load_instruction_at_checked(index, ixs) { Ok(ix) => ix, Err(ProgramError::InvalidArgument) => break, // past the last instruction Err(e) => return Err(e.into()), }; index += 1; require_keys_eq!( ix.program_id, crate::id(), MangoError::HealthRegionBadInnerInstruction ); let discriminator: [u8; 8] = ix.data[0..8].try_into().unwrap(); if discriminator == crate::instruction::HealthRegionEnd::discriminator() { // check that it's for the same account require_keys_eq!(ix.accounts[0].pubkey, ctx.accounts.account.key()); found_end = true; break; } else { require!( allowed_inner_ix.contains(&discriminator), MangoError::HealthRegionBadInnerInstruction ); } } require_msg!( found_end, ""found no HealthRegionEnd instruction in transaction"" ); } let mut account = ctx.accounts.account.load_full_mut()?; require_msg!( !account.fixed.is_in_health_region(), ""account must not already be health wrapped"" ); account.fixed.set_in_health_region(true); let group = account.fixed.group; let account_retriever = ScanningAccountRetriever::new(ctx.remaining_accounts, &group) .context(""create account retriever"")?; // Compute pre-health and store it on the account let health_cache = new_health_cache(&account.borrow(), &account_retriever)?; let pre_init_health = account.check_health_pre(&health_cache)?; account.fixed.health_region_begin_init_health = pre_init_health.ceil().to_num(); Ok(()) } pub fn health_region_end<'key, 'accounts, 'remaining, 'info>( ctx: Context<'key, 'accounts, 'remaining, 'info, HealthRegionEnd<'info>>, ) -> Result<()> { let mut account = ctx.accounts.account.load_full_mut()?; require_msg!( account.fixed.is_in_health_region(), ""account must be health wrapped"" ); account.fixed.set_in_health_region(false); let group = account.fixed.group; let account_retriever = ScanningAccountRetriever::new(ctx.remaining_accounts, &group) .context(""create account retriever"")?; let health_cache = new_health_cache(&account.borrow(), &account_retriever)?; let pre_init_health = I80F48::from(account.fixed.health_region_begin_init_health); account.check_health_post(&health_cache, pre_init_health)?; account.fixed.health_region_begin_init_health = 0; Ok(()) }",Critical,Harden the current HealthRegion implementation to prevent liquidations and withdrawals from being executed inside it. This can be executed by leveraging the existing instruction introspection logic. Resolved in b22a1e7 by explicitly allowing only the instructions necessary to interact with the perp and spot markets inside HealthRegions.,https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/5ce2fca2-1481-4d9c-8b45-7cb241bff7b6/mango_v4_audit_final.pdf?table=block&id=41f58737-a349-4eec-901a-3762d66e27eb&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743048000000&signature=TMEwwf9j4zyMkOPh7MNZ7K1cfmnHgxZcib_TmrY9Bnw&downloadName=mango_v4_audit_final.pdf,High
Sol-235,"Inadequate Sanitization Of Token Indexes. When registering a token, the protocol does not adequately check the provided token_index. While the value TokenIndex::MAX is reserved to represent a disabled TokenPosition, it is not explicitly disallowed from being registered. As a result, if a token is registered with TokenIndex::MAX, all user token accounts for that token will be interpreted as deactivated, and using them will result in an error. This may lead to all user token accounts for this token being interpreted as deactivated, and the attempt to trade them will result in an error. Moreover, there is inconsistent behaviour between is_active_for_token and is_active in this context. Specifically, when token_index == TokenIndex::MAX, then is_active_for_token returns true, while is_active returns false. Similar behaviour occurs for the Serum3MarketIndex and PerpMarketIndex indices which also have a reserved MAX value that is reserved for deactivated entries.","use anchor_lang::prelude::*; use fixed::types::I80F48; use crate::accounts_zerocopy::AccountInfoRef; use crate::error::*; use crate::state::*; use crate::util::fill_from_str; use crate::logs::TokenMetaDataLog; pub const INDEX_START: I80F48 = I80F48::from_bits(1_000_000 * I80F48::ONE.to_bits()); use crate::accounts_ix::*; impl Default for TokenPosition { ... TokenPosition { ... token_index: TokenIndex::MAX, ... } ... } impl TokenPosition { ... pub fn is_active(&self) -> bool { self.token_index != TokenIndex::MAX } pub fn is_active_for_token(&self, token_index: TokenIndex) -> ,→ bool { self.token_index == token_index } ... } #[allow(clippy::too_many_arguments)] pub fn token_register( ctx: Context<TokenRegister>, token_index: TokenIndex, name: String, oracle_config: OracleConfigParams, interest_rate_params: InterestRateParams, loan_fee_rate: f32, loan_origination_fee_rate: f32, maint_asset_weight: f32, init_asset_weight: f32, maint_liab_weight: f32, init_liab_weight: f32, liquidation_fee: f32, min_vault_to_deposits_ratio: f64, net_borrow_limit_window_size_ts: u64, net_borrow_limit_per_window_quote: i64, ) -> Result<()> { // Require token 0 to be in the insurance token if token_index == INSURANCE_TOKEN_INDEX { require_keys_eq!( ctx.accounts.group.load()?.insurance_mint, ctx.accounts.mint.key() ); } let now_ts: u64 = Clock::get()?.unix_timestamp.try_into().unwrap(); let mut bank = ctx.accounts.bank.load_init()?; *bank = Bank { group: ctx.accounts.group.key(), name: fill_from_str(&name)?, mint: ctx.accounts.mint.key(), vault: ctx.accounts.vault.key(), oracle: ctx.accounts.oracle.key(), deposit_index: INDEX_START, borrow_index: INDEX_START, indexed_deposits: I80F48::ZERO, indexed_borrows: I80F48::ZERO, index_last_updated: now_ts, bank_rate_last_updated: now_ts, // TODO: add a require! verifying relation between the parameters avg_utilization: I80F48::ZERO, adjustment_factor: I80F48::from_num(interest_rate_params.adjustment_factor), util0: I80F48::from_num(interest_rate_params.util0), rate0: I80F48::from_num(interest_rate_params.rate0), util1: I80F48::from_num(interest_rate_params.util1), rate1: I80F48::from_num(interest_rate_params.rate1), max_rate: I80F48::from_num(interest_rate_params.max_rate), collected_fees_native: I80F48::ZERO, loan_origination_fee_rate: I80F48::from_num(loan_origination_fee_rate), loan_fee_rate: I80F48::from_num(loan_fee_rate), maint_asset_weight: I80F48::from_num(maint_asset_weight), init_asset_weight: I80F48::from_num(init_asset_weight), maint_liab_weight: I80F48::from_num(maint_liab_weight), init_liab_weight: I80F48::from_num(init_liab_weight), liquidation_fee: I80F48::from_num(liquidation_fee), dust: I80F48::ZERO, flash_loan_token_account_initial: u64::MAX, flash_loan_approved_amount: 0, token_index, bump: *ctx.bumps.get(""bank"").ok_or(MangoError::SomeError)?, mint_decimals: ctx.accounts.mint.decimals, bank_num: 0, oracle_config: oracle_config.to_oracle_config(), stable_price_model: StablePriceModel::default(), min_vault_to_deposits_ratio, net_borrow_limit_window_size_ts, last_net_borrows_window_start_ts: now_ts / net_borrow_limit_window_size_ts * net_borrow_limit_window_size_ts, net_borrow_limit_per_window_quote, net_borrows_in_window: 0, borrow_weight_scale_start_quote: f64::MAX, deposit_weight_scale_start_quote: f64::MAX, reduce_only: 0, reserved: [0; 2119], }; require_gt!(bank.max_rate, MINIMUM_MAX_RATE); let oracle_price = bank.oracle_price(&AccountInfoRef::borrow(ctx.accounts.oracle.as_ref())?, None)?; bank.stable_price_model .reset_to_price(oracle_price.to_num(), now_ts); let mut mint_info = ctx.accounts.mint_info.load_init()?; *mint_info = MintInfo { group: ctx.accounts.group.key(), token_index, group_insurance_fund: 1, padding1: Default::default(), mint: ctx.accounts.mint.key(), banks: Default::default(), vaults: Default::default(), oracle: ctx.accounts.oracle.key(), registration_time: Clock::get()?.unix_timestamp.try_into().unwrap(), reserved: [0; 2560], }; mint_info.banks[0] = ctx.accounts.bank.key(); mint_info.vaults[0] = ctx.accounts.vault.key(); emit!(TokenMetaDataLog { mango_group: ctx.accounts.group.key(), mint: ctx.accounts.mint.key(), token_index, mint_decimals: ctx.accounts.mint.decimals, oracle: ctx.accounts.oracle.key(), mint_info: ctx.accounts.mint_info.key(), }); Ok(()) } #[allow(clippy::too_many_arguments)] pub fn token_register_trustless( ctx: Context<TokenRegisterTrustless>, token_index: TokenIndex, name: String, ) -> Result<()> { require_neq!(token_index, 0); let net_borrow_limit_window_size_ts = 24 * 60 * 60u64; let now_ts: u64 = Clock::get()?.unix_timestamp.try_into().unwrap(); let mut bank = ctx.accounts.bank.load_init()?; *bank = Bank { group: ctx.accounts.group.key(), name: fill_from_str(&name)?, mint: ctx.accounts.mint.key(), vault: ctx.accounts.vault.key(), oracle: ctx.accounts.oracle.key(), oracle_config: OracleConfig { conf_filter: I80F48::from_num(0.10), max_staleness_slots: 600, reserved: [0; 72], }, stable_price_model: StablePriceModel::default(), deposit_index: INDEX_START, borrow_index: INDEX_START, indexed_deposits: I80F48::ZERO, indexed_borrows: I80F48::ZERO, index_last_updated: now_ts, bank_rate_last_updated: now_ts, avg_utilization: I80F48::ZERO, // 10% daily adjustment at 0% or 100% utilization adjustment_factor: I80F48::from_num(0.004), util0: I80F48::from_num(0.7), rate0: I80F48::from_num(0.1), util1: I80F48::from_num(0.85), rate1: I80F48::from_num(0.2), max_rate: I80F48::from_num(2.0), collected_fees_native: I80F48::ZERO, loan_origination_fee_rate: I80F48::from_num(0.0005), loan_fee_rate: I80F48::from_num(0.005), maint_asset_weight: I80F48::from_num(0), init_asset_weight: I80F48::from_num(0), maint_liab_weight: I80F48::from_num(1.4), // 2.5x init_liab_weight: I80F48::from_num(1.8), // 1.25x liquidation_fee: I80F48::from_num(0.2), dust: I80F48::ZERO, flash_loan_token_account_initial: u64::MAX, flash_loan_approved_amount: 0, token_index, bump: *ctx.bumps.get(""bank"").ok_or(MangoError::SomeError)?, mint_decimals: ctx.accounts.mint.decimals, bank_num: 0, min_vault_to_deposits_ratio: 0.2, net_borrow_limit_window_size_ts, last_net_borrows_window_start_ts: now_ts / net_borrow_limit_window_size_ts * net_borrow_limit_window_size_ts, net_borrow_limit_per_window_quote: 1_000_000_000_000, // 1M USD net_borrows_in_window: 0, borrow_weight_scale_start_quote: f64::MAX, deposit_weight_scale_start_quote: f64::MAX, reduce_only: 0, reserved: [0; 2119], }; require_gt!(bank.max_rate, MINIMUM_MAX_RATE); let oracle_price = bank.oracle_price(&AccountInfoRef::borrow(ctx.accounts.oracle.as_ref())?, None)?; bank.stable_price_model .reset_to_price(oracle_price.to_num(), now_ts); let mut mint_info = ctx.accounts.mint_info.load_init()?; *mint_info = MintInfo { group: ctx.accounts.group.key(), token_index, group_insurance_fund: 0, padding1: Default::default(), mint: ctx.accounts.mint.key(), banks: Default::default(), vaults: Default::default(), oracle: ctx.accounts.oracle.key(), registration_time: Clock::get()?.unix_timestamp.try_into().unwrap(), reserved: [0; 2560], }; mint_info.banks[0] = ctx.accounts.bank.key(); mint_info.vaults[0] = ctx.accounts.vault.key(); emit!(TokenMetaDataLog { mango_group: ctx.accounts.group.key(), mint: ctx.accounts.mint.key(), token_index, mint_decimals: ctx.accounts.mint.decimals, oracle: ctx.accounts.oracle.key(), mint_info: ctx.accounts.mint_info.key(), }); Ok(()) }","impl Default for TokenPosition { ... TokenPosition { ... token_index: TokenIndex::MAX, ... } ... } impl TokenPosition { ... pub fn is_active(&self) -> bool { self.token_index != TokenIndex::MAX } pub fn is_active_for_token(&self, token_index: TokenIndex) -> ,→ bool { self.token_index == token_index } ... } use anchor_lang::prelude::*; use fixed::types::I80F48; use crate::accounts_zerocopy::AccountInfoRef; use crate::error::*; use crate::state::*; use crate::util::fill_from_str; use crate::logs::TokenMetaDataLog; pub const INDEX_START: I80F48 = I80F48::from_bits(1_000_000 * I80F48::ONE.to_bits()); use crate::accounts_ix::*; #[allow(clippy::too_many_arguments)] pub fn token_register( ctx: Context<TokenRegister>, token_index: TokenIndex, name: String, oracle_config: OracleConfigParams, interest_rate_params: InterestRateParams, loan_fee_rate: f32, loan_origination_fee_rate: f32, maint_asset_weight: f32, init_asset_weight: f32, maint_liab_weight: f32, init_liab_weight: f32, liquidation_fee: f32, min_vault_to_deposits_ratio: f64, net_borrow_limit_window_size_ts: u64, net_borrow_limit_per_window_quote: i64, ) -> Result<()> { // Require token 0 to be in the insurance token if token_index == INSURANCE_TOKEN_INDEX { require_keys_eq!( ctx.accounts.group.load()?.insurance_mint, ctx.accounts.mint.key() ); } require_neq!(token_index, TokenIndex::MAX); let now_ts: u64 = Clock::get()?.unix_timestamp.try_into().unwrap(); let mut bank = ctx.accounts.bank.load_init()?; *bank = Bank { group: ctx.accounts.group.key(), name: fill_from_str(&name)?, mint: ctx.accounts.mint.key(), vault: ctx.accounts.vault.key(), oracle: ctx.accounts.oracle.key(), deposit_index: INDEX_START, borrow_index: INDEX_START, indexed_deposits: I80F48::ZERO, indexed_borrows: I80F48::ZERO, index_last_updated: now_ts, bank_rate_last_updated: now_ts, // TODO: add a require! verifying relation between the parameters avg_utilization: I80F48::ZERO, adjustment_factor: I80F48::from_num(interest_rate_params.adjustment_factor), util0: I80F48::from_num(interest_rate_params.util0), rate0: I80F48::from_num(interest_rate_params.rate0), util1: I80F48::from_num(interest_rate_params.util1), rate1: I80F48::from_num(interest_rate_params.rate1), max_rate: I80F48::from_num(interest_rate_params.max_rate), collected_fees_native: I80F48::ZERO, loan_origination_fee_rate: I80F48::from_num(loan_origination_fee_rate), loan_fee_rate: I80F48::from_num(loan_fee_rate), maint_asset_weight: I80F48::from_num(maint_asset_weight), init_asset_weight: I80F48::from_num(init_asset_weight), maint_liab_weight: I80F48::from_num(maint_liab_weight), init_liab_weight: I80F48::from_num(init_liab_weight), liquidation_fee: I80F48::from_num(liquidation_fee), dust: I80F48::ZERO, flash_loan_token_account_initial: u64::MAX, flash_loan_approved_amount: 0, token_index, bump: *ctx.bumps.get(""bank"").ok_or(MangoError::SomeError)?, mint_decimals: ctx.accounts.mint.decimals, bank_num: 0, oracle_config: oracle_config.to_oracle_config(), stable_price_model: StablePriceModel::default(), min_vault_to_deposits_ratio, net_borrow_limit_window_size_ts, last_net_borrows_window_start_ts: now_ts / net_borrow_limit_window_size_ts * net_borrow_limit_window_size_ts, net_borrow_limit_per_window_quote, net_borrows_in_window: 0, borrow_weight_scale_start_quote: f64::MAX, deposit_weight_scale_start_quote: f64::MAX, reduce_only: 0, reserved: [0; 2119], }; require_gt!(bank.max_rate, MINIMUM_MAX_RATE); let oracle_price = bank.oracle_price(&AccountInfoRef::borrow(ctx.accounts.oracle.as_ref())?, None)?; bank.stable_price_model .reset_to_price(oracle_price.to_num(), now_ts); let mut mint_info = ctx.accounts.mint_info.load_init()?; *mint_info = MintInfo { group: ctx.accounts.group.key(), token_index, group_insurance_fund: 1, padding1: Default::default(), mint: ctx.accounts.mint.key(), banks: Default::default(), vaults: Default::default(), oracle: ctx.accounts.oracle.key(), registration_time: Clock::get()?.unix_timestamp.try_into().unwrap(), reserved: [0; 2560], }; mint_info.banks[0] = ctx.accounts.bank.key(); mint_info.vaults[0] = ctx.accounts.vault.key(); emit!(TokenMetaDataLog { mango_group: ctx.accounts.group.key(), mint: ctx.accounts.mint.key(), token_index, mint_decimals: ctx.accounts.mint.decimals, oracle: ctx.accounts.oracle.key(), mint_info: ctx.accounts.mint_info.key(), }); Ok(()) } #[allow(clippy::too_many_arguments)] pub fn token_register_trustless( ctx: Context<TokenRegisterTrustless>, token_index: TokenIndex, name: String, ) -> Result<()> { require_neq!(token_index, QUOTE_TOKEN_INDEX); require_neq!(token_index, TokenIndex::MAX); let net_borrow_limit_window_size_ts = 24 * 60 * 60u64; let now_ts: u64 = Clock::get()?.unix_timestamp.try_into().unwrap(); let mut bank = ctx.accounts.bank.load_init()?; *bank = Bank { group: ctx.accounts.group.key(), name: fill_from_str(&name)?, mint: ctx.accounts.mint.key(), vault: ctx.accounts.vault.key(), oracle: ctx.accounts.oracle.key(), oracle_config: OracleConfig { conf_filter: I80F48::from_num(0.10), max_staleness_slots: 600, reserved: [0; 72], }, stable_price_model: StablePriceModel::default(), deposit_index: INDEX_START, borrow_index: INDEX_START, indexed_deposits: I80F48::ZERO, indexed_borrows: I80F48::ZERO, index_last_updated: now_ts, bank_rate_last_updated: now_ts, avg_utilization: I80F48::ZERO, // 10% daily adjustment at 0% or 100% utilization adjustment_factor: I80F48::from_num(0.004), util0: I80F48::from_num(0.7), rate0: I80F48::from_num(0.1), util1: I80F48::from_num(0.85), rate1: I80F48::from_num(0.2), max_rate: I80F48::from_num(2.0), collected_fees_native: I80F48::ZERO, loan_origination_fee_rate: I80F48::from_num(0.0005), loan_fee_rate: I80F48::from_num(0.005), maint_asset_weight: I80F48::from_num(0), init_asset_weight: I80F48::from_num(0), maint_liab_weight: I80F48::from_num(1.4), // 2.5x init_liab_weight: I80F48::from_num(1.8), // 1.25x liquidation_fee: I80F48::from_num(0.2), dust: I80F48::ZERO, flash_loan_token_account_initial: u64::MAX, flash_loan_approved_amount: 0, token_index, bump: *ctx.bumps.get(""bank"").ok_or(MangoError::SomeError)?, mint_decimals: ctx.accounts.mint.decimals, bank_num: 0, min_vault_to_deposits_ratio: 0.2, net_borrow_limit_window_size_ts, last_net_borrows_window_start_ts: now_ts / net_borrow_limit_window_size_ts * net_borrow_limit_window_size_ts, net_borrow_limit_per_window_quote: 1_000_000_000_000, // 1M USD net_borrows_in_window: 0, borrow_weight_scale_start_quote: f64::MAX, deposit_weight_scale_start_quote: f64::MAX, reduce_only: 0, reserved: [0; 2119], }; require_gt!(bank.max_rate, MINIMUM_MAX_RATE); let oracle_price = bank.oracle_price(&AccountInfoRef::borrow(ctx.accounts.oracle.as_ref())?, None)?; bank.stable_price_model .reset_to_price(oracle_price.to_num(), now_ts); let mut mint_info = ctx.accounts.mint_info.load_init()?; *mint_info = MintInfo { group: ctx.accounts.group.key(), token_index, group_insurance_fund: 0, padding1: Default::default(), mint: ctx.accounts.mint.key(), banks: Default::default(), vaults: Default::default(), oracle: ctx.accounts.oracle.key(), registration_time: Clock::get()?.unix_timestamp.try_into().unwrap(), reserved: [0; 2560], }; mint_info.banks[0] = ctx.accounts.bank.key(); mint_info.vaults[0] = ctx.accounts.vault.key(); emit!(TokenMetaDataLog { mango_group: ctx.accounts.group.key(), mint: ctx.accounts.mint.key(), token_index, mint_decimals: ctx.accounts.mint.decimals, oracle: ctx.accounts.oracle.key(), mint_info: ctx.accounts.mint_info.key(), }); Ok(()) }",Low,"Disallow the reserved value TokenIndex::MAX for token registration. Additionally, modify the inconsistent behaviour between is_active_for_token and is_active.",https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/5ce2fca2-1481-4d9c-8b45-7cb241bff7b6/mango_v4_audit_final.pdf?table=block&id=41f58737-a349-4eec-901a-3762d66e27eb&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743048000000&signature=TMEwwf9j4zyMkOPh7MNZ7K1cfmnHgxZcib_TmrY9Bnw&downloadName=mango_v4_audit_final.pdf,High
Sol-236,"Invalid DoubleEndedIterator Trait Implementations. The critbit, AVL tree, and red-black tree do not correctly implement Rust’s DoubleEndedIterator trait, which is described here. For instance, the red-black tree iterator’s next and next_back method will cross each other, “doublecounting” each element. This does not follow the spec, and can even be unsafe: when using iter_mut, one can obtain multiple mutable references to the same value.","pub struct AVLTreeIterator< 'a, K: PartialOrd + Copy + Clone + Default + Pod + Zeroable, V: Default + Copy + Clone + Pod + Zeroable, const MAX_SIZE: usize, > { tree: &'a AVLTree<K, V, MAX_SIZE>, stack: Vec<u32>, rev_stack: Vec<u32>, node: u32, } impl< 'a, K: PartialOrd + Copy + Clone + Default + Pod + Zeroable, V: Default + Copy + Clone + Pod + Zeroable, const MAX_SIZE: usize, > Iterator for AVLTreeIterator<'a, K, V, MAX_SIZE> { type Item = (&'a K, &'a V); fn next(&mut self) -> Option<Self::Item> { while !self.stack.is_empty() || self.node != SENTINEL { if self.node != SENTINEL { self.stack.push(self.node); self.node = self.tree.get_field(self.node, Field::Left); } else { self.node = self.stack.pop().unwrap(); let node = self.tree.get_node(self.node); self.node = self.tree.get_field(self.node, Field::Right); return Some((&node.key, &node.value)); } } None } } impl< 'a, K: PartialOrd + Copy + Clone + Default + Pod + Zeroable, V: Default + Copy + Clone + Pod + Zeroable, const MAX_SIZE: usize, > DoubleEndedIterator for AVLTreeIterator<'a, K, V, MAX_SIZE> { fn next_back(&mut self) -> Option<Self::Item> { while !self.rev_stack.is_empty() || self.node != SENTINEL { if self.node != SENTINEL { self.rev_stack.push(self.node); self.node = self.tree.get_field(self.node, Field::Right); } else { self.node = self.rev_stack.pop().unwrap(); let node = self.tree.get_node(self.node); self.node = self.tree.get_field(self.node, Field::Left); return Some((&node.key, &node.value)); } } Expand All @@ -714,9 +736,13 @@ pub struct AVLTreeIteratorMut< None } } pub struct AVLTreeIteratorMut< 'a, K: PartialOrd + Copy + Clone + Default + Pod + Zeroable, V: Default + Copy + Clone + Pod + Zeroable, const MAX_SIZE: usize, > { tree: &'a mut AVLTree<K, V, MAX_SIZE>, stack: Vec<u32>, rev_stack: Vec<u32>, node: u32, } impl< Expand All @@ -729,14 +755,19 @@ impl< 'a, K: PartialOrd + Copy + Clone + Default + Pod + Zeroable, V: Default + Copy + Clone + Pod + Zeroable, const MAX_SIZE: usize, > Iterator for AVLTreeIteratorMut<'a, K, V, MAX_SIZE> { type Item = (&'a K, &'a mut V); fn next(&mut self) -> Option<Self::Item> { while !self.stack.is_empty() || self.node != SENTINEL { if self.node != SENTINEL { self.stack.push(self.node); self.node = self.tree.get_field(self.node, Field::Left); } else { self.node = self.stack.pop().unwrap(); let ptr = self.node; self.node = self.tree.get_field(ptr, Field::Right); // TODO: How does one remove this unsafe? unsafe { let node = (*self Expand All @@ -762,14 +793,19 @@ impl< .tree .allocator .nodes .as_mut_ptr() .add((ptr - 1) as usize)) .get_value_mut(); return Some((&node.key, &mut node.value)); } } } None } } impl< 'a, K: PartialOrd + Copy + Clone + Default + Pod + Zeroable, V: Default + Copy + Clone + Pod + Zeroable, const MAX_SIZE: usize, > DoubleEndedIterator for AVLTreeIteratorMut<'a, K, V, MAX_SIZE> { fn next_back(&mut self) -> Option<Self::Item> { while !self.rev_stack.is_empty() || self.node != SENTINEL { if self.node != SENTINEL { self.rev_stack.push(self.node); self.node = self.tree.get_field(self.node, Field::Right); } else { self.node = self.rev_stack.pop().unwrap(); let ptr = self.node; self.node = self.tree.get_field(ptr, Field::Left); // TODO: How does one remove this unsafe? unsafe { let node = (*self Expand Down .tree .allocator .nodes .as_mut_ptr() .add((ptr - 1) as usize)) .get_value_mut(); return Some((&node.key, &mut node.value)); } } } None } }","pub struct AVLTreeIterator< 'a, K: PartialOrd + Copy + Clone + Default + Pod + Zeroable, V: Default + Copy + Clone + Pod + Zeroable, const MAX_SIZE: usize, > { tree: &'a AVLTree<K, V, MAX_SIZE>, fwd_stack: Vec<u32>, fwd_ptr: u32, fwd_node: Option<u32>, rev_stack: Vec<u32>, rev_ptr: u32, rev_node: Option<u32>, terminated: bool, } impl< 'a, K: PartialOrd + Copy + Clone + Default + Pod + Zeroable, V: Default + Copy + Clone + Pod + Zeroable, const MAX_SIZE: usize, > Iterator for AVLTreeIterator<'a, K, V, MAX_SIZE> { type Item = (&'a K, &'a V); fn next(&mut self) -> Option<Self::Item> { while !self.terminated && (!self.fwd_stack.is_empty() || self.fwd_ptr != SENTINEL) { if self.fwd_ptr != SENTINEL { self.fwd_stack.push(self.fwd_ptr); self.fwd_ptr = self.tree.get_field(self.fwd_ptr, Field::Left); } else { let current_node = self.fwd_stack.pop(); if current_node == self.rev_node { self.terminated = true; return None; } self.fwd_node = current_node; let node = self.tree.get_node(current_node.unwrap()); self.fwd_ptr = self.tree.get_field(current_node.unwrap(), Field::Right); return Some((&node.key, &node.value)); } } None } } impl< 'a, K: PartialOrd + Copy + Clone + Default + Pod + Zeroable, V: Default + Copy + Clone + Pod + Zeroable, const MAX_SIZE: usize, > DoubleEndedIterator for AVLTreeIterator<'a, K, V, MAX_SIZE> { fn next_back(&mut self) -> Option<Self::Item> { while !self.terminated && (!self.rev_stack.is_empty() || self.rev_ptr != SENTINEL) { if self.rev_ptr != SENTINEL { self.rev_stack.push(self.rev_ptr); self.rev_ptr = self.tree.get_field(self.rev_ptr, Field::Right); } else { let current_node = self.rev_stack.pop(); if current_node == self.fwd_node { self.terminated = true; return None; } self.rev_node = current_node; let node = self.tree.get_node(current_node.unwrap()); self.rev_ptr = self.tree.get_field(current_node.unwrap(), Field::Left); return Some((&node.key, &node.value)); } } Expand All @@ -714,9 +736,13 @@ pub struct AVLTreeIteratorMut< None } } pub struct AVLTreeIteratorMut< 'a, K: PartialOrd + Copy + Clone + Default + Pod + Zeroable, V: Default + Copy + Clone + Pod + Zeroable, const MAX_SIZE: usize, > { tree: &'a mut AVLTree<K, V, MAX_SIZE>, fwd_stack: Vec<u32>, fwd_ptr: u32, fwd_node: Option<u32>, rev_stack: Vec<u32>, rev_ptr: u32, rev_node: Option<u32>, terminated: bool, } impl< Expand All @@ -729,14 +755,19 @@ impl< 'a, K: PartialOrd + Copy + Clone + Default + Pod + Zeroable, V: Default + Copy + Clone + Pod + Zeroable, const MAX_SIZE: usize, > Iterator for AVLTreeIteratorMut<'a, K, V, MAX_SIZE> { type Item = (&'a K, &'a mut V); fn next(&mut self) -> Option<Self::Item> { while !self.terminated && (!self.fwd_stack.is_empty() || self.fwd_ptr != SENTINEL) { if self.fwd_ptr != SENTINEL { self.fwd_stack.push(self.fwd_ptr); self.fwd_ptr = self.tree.get_field(self.fwd_ptr, Field::Left); } else { let current_node = self.fwd_stack.pop(); if current_node == self.rev_node { self.terminated = true; return None; } self.fwd_node = current_node; let ptr = current_node.unwrap(); self.fwd_ptr = self.tree.get_field(ptr, Field::Right); // TODO: How does one remove this unsafe? unsafe { let node = (*self Expand All @@ -762,14 +793,19 @@ impl< .tree .allocator .nodes .as_mut_ptr() .add((ptr - 1) as usize)) .get_value_mut(); return Some((&node.key, &mut node.value)); } } } None } } impl< 'a, K: PartialOrd + Copy + Clone + Default + Pod + Zeroable, V: Default + Copy + Clone + Pod + Zeroable, const MAX_SIZE: usize, > DoubleEndedIterator for AVLTreeIteratorMut<'a, K, V, MAX_SIZE> { fn next_back(&mut self) -> Option<Self::Item> { while !self.terminated && (!self.rev_stack.is_empty() || self.rev_ptr != SENTINEL) { if self.rev_ptr != SENTINEL { self.rev_stack.push(self.rev_ptr); self.rev_ptr = self.tree.get_field(self.rev_ptr, Field::Right); } else { let current_node = self.rev_stack.pop(); if current_node == self.fwd_node { self.terminated = true; return None; } self.rev_node = current_node; let ptr = current_node.unwrap(); self.rev_ptr = self.tree.get_field(ptr, Field::Left); // TODO: How does one remove this unsafe? unsafe { let node = (*self Expand Down .tree .allocator .nodes .as_mut_ptr() .add((ptr - 1) as usize)) .get_value_mut(); return Some((&node.key, &mut node.value)); } } } None } }",High,"Rewrite next and next_back so that they do not cross each other, or remove the implementations of DoubleEndedIterator altogether.","https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/d490abb1-acff-4638-973f-203664bccf1c/ellipsis_phoenix_audit_final.pdf?table=block&id=9888c291-939f-4def-bbb3-77a165bd9230&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743048000000&signature=Q30qii9Z1NRF6BOaqE6ZgfVAvxgDTNp91YjhzAWfRFs&downloadName=ellipsis_phoenix_audit_final.pdf, https://github.com/Ellipsis-Labs/sokoban/pull/11/files#diff-ec08f3ee9629cf28c530930cfdd8b0fafed2fde1367f9dea17cc64803a5d3d5d",High
Sol-237,"When parsing events from transactions, the Phoenix SDK iterates over all the inner instructions to try and parse out PhoenixInstruction::Log instructions. Unfortunately, this loop fails to return when the transaction has errored, as specified in the is_err field. If a malicious user were to manually invoke the Phoenix program from a separate onchain program, inaccurate log events could be subsequently processed in parse_phoenix_events. In conjunction with OS-EPS-SUG-02, this could lead to a denial of service condition for users of the SDK.","pub async fn parse_events_from_transaction( &self, sig: &Signature, ) -> Option<Vec<PhoenixEvent>> { let tx = self.client.get_transaction(sig).await.ok()?; let mut event_list = vec![]; for inner_ixs in tx.inner_instructions.iter() { for inner_ix in inner_ixs.iter() { let current_program_id = inner_ix.instruction.program_id.clone(); if current_program_id != phoenix::id().to_string() { continue; } if inner_ix.instruction.data.is_empty() { continue; } let (tag, data) = match inner_ix.instruction.data.split_first() { Some((tag, data)) => (*tag, data), None => continue, }; let ix_enum = match PhoenixInstruction::try_from(tag).ok() { Some(ix) => ix, None => continue, }; if matches!(ix_enum, PhoenixInstruction::Log) { event_list.push(data.to_vec()); } } } self.parse_phoenix_events(sig, event_list) }","pub async fn parse_events_from_transaction( &self, sig: &Signature, ) -> Option<Vec<PhoenixEvent>> { let tx = self.client.get_transaction(sig).await.ok()?; if tx.is_err { return None; } let mut event_list = vec![]; for inner_ixs in tx.inner_instructions.iter() { for inner_ix in inner_ixs.iter() { let current_program_id = inner_ix.instruction.program_id.clone(); if current_program_id != phoenix::id().to_string() { continue; } if inner_ix.instruction.data.is_empty() { continue; } let (tag, data) = match inner_ix.instruction.data.split_first() { Some((tag, data)) => (*tag, data), None => continue, }; let ix_enum = match PhoenixInstruction::try_from(tag).ok() { Some(ix) => ix, None => continue, }; if matches!(ix_enum, PhoenixInstruction::Log) { event_list.push(data.to_vec()); } } } self.parse_phoenix_events(sig, event_list) }",High,"Check if the transaction was successfully completed, and if not, skip processing of the transaction.","https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/d490abb1-acff-4638-973f-203664bccf1c/ellipsis_phoenix_audit_final.pdf?table=block&id=9888c291-939f-4def-bbb3-77a165bd9230&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743048000000&signature=Q30qii9Z1NRF6BOaqE6ZgfVAvxgDTNp91YjhzAWfRFs&downloadName=ellipsis_phoenix_audit_final.pdf, https://github.com/Ellipsis-Labs/phoenix-sdk/pull/50/files#diff-46eeb1f8fcfbf2818e8a7a6d1bb4111208f298f8e6e9ca2a18264521c1ab8482",High
Sol-238,"Account Creation DOS. Account creation primitives in phoenix will error if the account already has lamports. This could, for example, allow an attacker to deny seat creation. let space = size_of::<Seat>(); invoke_signed( &system_instruction::create_account( payer.key, seat.key, Rent::get()?.minimum_balance(space), space.try_into().unwrap(), &crate::ID, ), &[payer.clone(), seat.clone(), system_program.clone()], &[&[b""seat"", market_key.as_ref(), trader.as_ref(), &[bump]]],","program/src/program/processor/initialize.rs // A trade of 1 base lot at the minimum tick price of 1 must result in an integer number of quote lots // Suppose there are T quote lots per tick and there are B base lots per base unit. // At a price of 1 tick per base unit, for a trade of size 1 base lot, the resulting quote lots N must be an integer // T (quote lots/tick) * 1 (tick/base unit) * 1/B (base units/base lots) * 1 (base lots) = N (quote lots) // T/B = N => B | T (B divides T) assert_with_msg( tick_size_in_quote_lots_per_base_unit % num_base_lots_per_base_unit == 0, ProgramError::InvalidInstructionData, ""The number of quote lots per tick be a multiple of the number of base lots per base unit"", )?; // Create the base and quote vaults of this market let rent = Rent::get()?; let mut bumps = vec![]; for (token_account, mint) in [ (base_vault.as_ref(), base_mint.as_ref()), (quote_vault.as_ref(), quote_mint.as_ref()), ] { let (vault_key, bump) = get_vault_address(market_info.key, mint.key); assert_with_msg( vault_key == *token_account.key, PhoenixError::InvalidMarketSigner, &format!( ""Supplied vault ({}) does not match computed key ({})"", token_account.key, vault_key ), )?; let space = spl_token::state::Account::LEN; invoke_signed( &system_instruction::create_account( market_creator.key, token_account.key, rent.minimum_balance(space), space.try_into().unwrap(), &spl_token::id(), ), &[ market_creator.as_ref().clone(), token_account.clone(), system_program.as_ref().clone(), ], &[&[ b""vault"", market_info.key.as_ref(), mint.key.as_ref(), &[bump], ]], )?;","program/src/program/processor/initialize.rs // A trade of 1 base lot at the minimum tick price of 1 must result in an integer number of quote lots // Suppose there are T quote lots per tick and there are B base lots per base unit. // At a price of 1 tick per base unit, for a trade of size 1 base lot, the resulting quote lots N must be an integer // T (quote lots/tick) * 1 (tick/base unit) * 1/B (base units/base lots) * 1 (base lots) = N (quote lots) // T/B = N => B | T (B divides T) assert_with_msg( tick_size_in_quote_lots_per_base_unit % num_base_lots_per_base_unit == 0, ProgramError::InvalidInstructionData, ""The number of quote lots per tick be a multiple of the number of base lots per base unit"", )?; // Create the base and quote vaults of this market let rent = Rent::get()?; let mut bumps = vec![]; for (token_account, mint) in [ (base_vault.as_ref(), base_mint.as_ref()), (quote_vault.as_ref(), quote_mint.as_ref()), ] { let (vault_key, bump) = get_vault_address(market_info.key, mint.key); assert_with_msg( vault_key == *token_account.key, PhoenixError::InvalidMarketSigner, &format!( ""Supplied vault ({}) does not match computed key ({})"", token_account.key, vault_key ), )?; let space = spl_token::state::Account::LEN; let seeds = vec![ b""vault"".to_vec(), market_info.key.as_ref().to_vec(), mint.key.as_ref().to_vec(), vec![bump], ]; create_account( market_creator.as_ref(), token_account, system_program.as_ref(), &spl_token::id(), &rent, space as u64, seeds, )?; .... program/src/program/system_utils.rs use solana_program::{ account_info::AccountInfo, entrypoint::ProgramResult, program::{invoke, invoke_signed}, pubkey::Pubkey, rent::Rent, system_instruction, }; pub fn create_account<'a, 'info>( payer: &'a AccountInfo<'info>, new_account: &'a AccountInfo<'info>, system_program: &'a AccountInfo<'info>, program_owner: &Pubkey, rent: &Rent, space: u64, seeds: Vec<Vec<u8>>, ) -> ProgramResult { let current_lamports = **new_account.try_borrow_lamports()?; if current_lamports == 0 { // If there are no lamports in the new account, we create it with the create_account instruction invoke_signed( &system_instruction::create_account( payer.key, new_account.key, rent.minimum_balance(space as usize), space, program_owner, ), &[payer.clone(), new_account.clone(), system_program.clone()], &[seeds .iter() .map(|seed| seed.as_slice()) .collect::<Vec<&[u8]>>() .as_slice()], ) } else { // Fund the account for rent exemption. let required_lamports = rent .minimum_balance(space as usize) .max(1) .saturating_sub(current_lamports); if required_lamports > 0 { invoke( &system_instruction::transfer(payer.key, new_account.key, required_lamports), &[payer.clone(), new_account.clone(), system_program.clone()], )?; } // Allocate space. invoke_signed( &system_instruction::allocate(new_account.key, space), &[new_account.clone(), system_program.clone()], &[seeds .iter() .map(|seed| seed.as_slice()) .collect::<Vec<&[u8]>>() .as_slice()], )?; // Assign to the specified program invoke_signed( &system_instruction::assign(new_account.key, program_owner), &[new_account.clone(), system_program.clone()], &[seeds .iter() .map(|seed| seed.as_slice()) .collect::<Vec<&[u8]>>() .as_slice()], ) } }",Medium,Use transfer and allocate instead of create_account similar to what Anchor does.,"https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/d490abb1-acff-4638-973f-203664bccf1c/ellipsis_phoenix_audit_final.pdf?table=block&id=9888c291-939f-4def-bbb3-77a165bd9230&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743048000000&signature=Q30qii9Z1NRF6BOaqE6ZgfVAvxgDTNp91YjhzAWfRFs&downloadName=ellipsis_phoenix_audit_final.pdf, https://github.com/Ellipsis-Labs/phoenix-v1/pull/1/files",High
Sol-239,"Unchecked Type Casting. In the get_delta_amount_0_signed function, there are unchecked conversions from u64 (which get_delta_amount_0_unsigned returns) to i64. The issue is that the value of the u64 returned by get_delta_amount_0_unsigned might be larger than what i64 can represent, which would result in a faulty conversion. The same applies for get_delta_amount_1_signed. We prepared a simple proof of concept test case demonstrating that this could be exploited against the burn liquidity instruction.","/// Helper function to get signed delta amount_0 for given liquidity and price range pub fn get_delta_amount_0_signed( sqrt_ratio_a_x64: u128, sqrt_ratio_b_x64: u128, liquidity: i128, ) -> i64 { if liquidity < 0 { -(get_delta_amount_0_unsigned( sqrt_ratio_a_x64, sqrt_ratio_b_x64, -liquidity as u128, false, ) as i64) } else { // TODO check overflow, since i64::MAX < u64::MAX get_delta_amount_0_unsigned(sqrt_ratio_a_x64, sqrt_ratio_b_x64, liquidity as u128, true) as i64 } }","/// Helper function to get signed delta amount_0 for given liquidity and price range pub fn get_delta_amount_0_signed( sqrt_ratio_a_x64: u128, sqrt_ratio_b_x64: u128, liquidity: i128, ) -> i64 { if liquidity < 0 { -(i64::try_from(get_delta_amount_0_unsigned( sqrt_ratio_a_x64, sqrt_ratio_b_x64, u128::try_from(-liquidity).unwrap(), false, )) .unwrap()) } else { i64::try_from(get_delta_amount_0_unsigned( sqrt_ratio_a_x64, sqrt_ratio_b_x64, u128::try_from(liquidity).unwrap(), true, )) .unwrap() } }",High,A possible method of remediation is using i64::try_from instead of an unchecked cast.,"https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/8464f93a-f2c8-49b8-afb1-5056f4782dfc/Raydium_AMM_V3_Audit_Report.pdf?table=block&id=88f0ad30-c74b-4311-82bb-e6062bf12169&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743307200000&signature=AsG6ddNcRmbP3N5kADqbWt0rxS4L2XD4jBIhoabbCvM&downloadName=Raydium+AMM+V3+Audit+Report.pdf, https://github.com/raydium-io/raydium-clmm/pull/27/files",High
Sol-240,"Closing Personal Positions Is Not Gated. When a personal position is created, the program mints an NFT to the user’s wallet. Subsequent instructions which require authorization of the position, such as increasing and decreasing liquidity, use the is_authorized_for_token function to check that the signer holds the NFT. The ClosePosition instruction should also be privileged, but it does not check NFT ownership. An attacker can create their own empty NFT account, thus spoofing NFT ownership. This allows them to harvest the lamports used for rent.","use crate::error::ErrorCode; use crate::states::*; use crate::util::{burn, close_account, close_spl_account}; use anchor_lang::prelude::*; use anchor_spl::token::{Mint, Token, TokenAccount}; Expand Down Expand Up @@ -31,6 +31,12 @@ pub struct ClosePosition<'info> { #[derive(Accounts)] pub struct ClosePosition<'info> { /// The position nft owner #[account(mut)] pub nft_owner: Signer<'info>, /// Unique token mint address #[account( mut, address = personal_position.nft_mint )] pub position_nft_mint: Box<Account<'info, Mint>>, /// Token account where position NFT will be minted #[account( mut, associated_token::mint = position_nft_mint, associated_token::authority = nft_owner, )] pub position_nft_account: Box<Account<'info, TokenAccount>>, /// To store metaplex metadata /// CHECK: Safety check performed inside function body // #[account(mut)] // pub metadata_account: UncheckedAccount<'info>, /// Metadata for the tokenized position pub personal_position: Box<Account<'info, PersonalPositionState>>, /// Program to create the position manager state account Expand Down Expand Up @@ -84,11 +90,6 @@ pub fn close_position<'a, 'b, 'c, 'info>( pub system_program: Program<'info, System>, /// Program to create mint account and mint tokens pub token_program: Program<'info, Token>, } pub fn close_position<'a, 'b, 'c, 'info>( ctx: Context<'a, 'b, 'c, 'info, ClosePosition<'info>>, ) -> Result<()> { if ctx.accounts.personal_position.liquidity != 0 || ctx.accounts.personal_position.token_fees_owed_0 != 0 || ctx.accounts.personal_position.token_fees_owed_1 != 0 { msg!( ""remaing liquidity:{},token_fees_owed_0:{},token_fees_owed_1:{}"", ctx.accounts.personal_position.liquidity, ctx.accounts.personal_position.token_fees_owed_0, ctx.accounts.personal_position.token_fees_owed_1 ); return err!(ErrorCode::ClosePositionErr); } for i in 0..ctx.accounts.personal_position.reward_infos.len() { if ctx.accounts.personal_position.reward_infos[i].reward_amount_owed != 0 { msg!( ""remaing reward index:{},amount:{}"", i, ctx.accounts.personal_position.reward_infos[i].reward_amount_owed, ); return err!(ErrorCode::ClosePositionErr); } } if ctx.accounts.position_nft_account.amount == 1 { burn( &ctx.accounts.nft_owner, &ctx.accounts.position_nft_mint, &ctx.accounts.position_nft_account, &ctx.accounts.token_program, &[], 1, )?; } close_spl_account( &ctx.accounts.nft_owner, &ctx.accounts.nft_owner.to_account_info(), &ctx.accounts.position_nft_account.to_account_info(), &ctx.accounts.token_program, &[], )?; close_account( &ctx.accounts.personal_position.to_account_info(), &ctx.accounts.nft_owner.to_account_info(), )?; // close_spl_account( // &ctx.accounts.amm_config.to_account_info(), // &ctx.accounts.nft_owner.to_account_info(), Expand Down // &ctx.accounts.position_nft_mint.to_account_info(), // &ctx.accounts.token_program, // &[&[ // AMM_CONFIG_SEED.as_bytes(), // &[ctx.accounts.amm_config.bump] as &[u8], // ]], // )?; Ok(()) }","use crate::error::ErrorCode; use crate::states::*; use crate::util::{burn, close_spl_account}; use anchor_lang::prelude::*; use anchor_spl::token::{Mint, Token, TokenAccount}; Expand Down Expand Up @@ -31,6 +31,12 @@ pub struct ClosePosition<'info> { #[derive(Accounts)] pub struct ClosePosition<'info> { /// The position nft owner #[account(mut)] pub nft_owner: Signer<'info>, /// Unique token mint address #[account( mut, address = personal_position.nft_mint )] pub position_nft_mint: Box<Account<'info, Mint>>, /// Token account where position NFT will be minted #[account( mut, associated_token::mint = position_nft_mint, associated_token::authority = nft_owner, )] pub position_nft_account: Box<Account<'info, TokenAccount>>, /// To store metaplex metadata /// CHECK: Safety check performed inside function body // #[account(mut)] // pub metadata_account: UncheckedAccount<'info>, /// Metadata for the tokenized position #[account( mut, seeds = [POSITION_SEED.as_bytes(), position_nft_mint.key().as_ref()], bump, close = nft_owner )] pub personal_position: Box<Account<'info, PersonalPositionState>>, /// Program to create the position manager state account Expand Down Expand Up @@ -84,11 +90,6 @@ pub fn close_position<'a, 'b, 'c, 'info>( pub system_program: Program<'info, System>, /// Program to create mint account and mint tokens pub token_program: Program<'info, Token>, } pub fn close_position<'a, 'b, 'c, 'info>( ctx: Context<'a, 'b, 'c, 'info, ClosePosition<'info>>, ) -> Result<()> { if ctx.accounts.personal_position.liquidity != 0 || ctx.accounts.personal_position.token_fees_owed_0 != 0 || ctx.accounts.personal_position.token_fees_owed_1 != 0 { msg!( ""remaing liquidity:{},token_fees_owed_0:{},token_fees_owed_1:{}"", ctx.accounts.personal_position.liquidity, ctx.accounts.personal_position.token_fees_owed_0, ctx.accounts.personal_position.token_fees_owed_1 ); return err!(ErrorCode::ClosePositionErr); } for i in 0..ctx.accounts.personal_position.reward_infos.len() { if ctx.accounts.personal_position.reward_infos[i].reward_amount_owed != 0 { msg!( ""remaing reward index:{},amount:{}"", i, ctx.accounts.personal_position.reward_infos[i].reward_amount_owed, ); return err!(ErrorCode::ClosePositionErr); } } if ctx.accounts.position_nft_account.amount == 1 { burn( &ctx.accounts.nft_owner, &ctx.accounts.position_nft_mint, &ctx.accounts.position_nft_account, &ctx.accounts.token_program, &[], 1, )?; } close_spl_account( &ctx.accounts.nft_owner, &ctx.accounts.nft_owner.to_account_info(), &ctx.accounts.position_nft_account.to_account_info(), &ctx.accounts.token_program, &[], )?; // close_spl_account( // &ctx.accounts.amm_config.to_account_info(), // &ctx.accounts.nft_owner.to_account_info(), Expand Down // &ctx.accounts.position_nft_mint.to_account_info(), // &ctx.accounts.token_program, // &[&[ // AMM_CONFIG_SEED.as_bytes(), // &[ctx.accounts.amm_config.bump] as &[u8], // ]], // )?; Ok(()) }",Medium,"In order for the issue to be remediated, the ClosePosition instruction should verify that the position NFT account, which should hold the NFT, is non-empty. This can be done with is_authorized_for_token or, as shown below, with an Anchor constraint.","https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/8464f93a-f2c8-49b8-afb1-5056f4782dfc/Raydium_AMM_V3_Audit_Report.pdf?table=block&id=88f0ad30-c74b-4311-82bb-e6062bf12169&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743307200000&signature=AsG6ddNcRmbP3N5kADqbWt0rxS4L2XD4jBIhoabbCvM&downloadName=Raydium+AMM+V3+Audit+Report.pdf, https://github.com/raydium-io/raydium-clmm/pull/26/files#diff-739eab546955ff1d3b67e630630d40fe254afb66133b8d63762ca58999eaf7f5",High
Sol-241,"Arbitrary AMM Config Possible Usage. Every PoolState is created using one of existing AMM configs. The AmmConfig structure is used in swap_internal function to determine trade_fee_rate, protocol_fee_rate and fund_fee_rate that is used in the current pool. In Swap instruction, there are implemented anchor checks that validate the given AmmConfig to be the one that PoolState was initialised with. However, the instruction SwapRouterBaseIn doesn’t implement those checks. The lack of checks makes it possible to pass any AMM Config to the UwapRouterBaseIn and as a result to manipulate the fee value.","use super::{exact_internal, SwapAccounts}; use crate::error::ErrorCode; use crate::states::*; use anchor_lang::prelude::*; use anchor_spl::token::{Token, TokenAccount}; #[derive(Accounts)] pub struct SwapRouterBaseIn<'info> { /// The user performing the swap pub payer: Signer<'info>, /// The token account that pays input tokens for the swap #[account(mut)] pub input_token_account: Account<'info, TokenAccount>, /// SPL program for token transfers pub token_program: Program<'info, Token>, } pub fn swap_router_base_in<'a, 'b, 'c, 'info>( ctx: Context<'a, 'b, 'c, 'info, SwapRouterBaseIn<'info>>, amount_in: u64, amount_out_minimum: u64, ) -> Result<()> { let mut amount_in_internal = amount_in; let mut input_token_account = Box::new(ctx.accounts.input_token_account.clone()); let mut accounts: &[AccountInfo] = ctx.remaining_accounts; while !accounts.is_empty() { let mut remaining_accounts = accounts.iter(); let account_info = remaining_accounts.next().unwrap(); if accounts.len() != ctx.remaining_accounts.len() && account_info.data_len() != AmmConfig::LEN { accounts = remaining_accounts.as_slice(); continue; } let amm_config = Box::new(Account::<AmmConfig>::try_from(account_info)?); let mut pool_state_loader = AccountLoader::<PoolState>::try_from(remaining_accounts.next().unwrap())?; let output_token_account = Box::new(Account::<TokenAccount>::try_from( &remaining_accounts.next().unwrap(), )?); let input_vault = Box::new(Account::<TokenAccount>::try_from( remaining_accounts.next().unwrap(), )?); let output_vault = Box::new(Account::<TokenAccount>::try_from( remaining_accounts.next().unwrap(), )?); let mut observation_state = AccountLoader::<ObservationState>::try_from(remaining_accounts.next().unwrap())?; // check observation account is owned by the pool require_keys_eq!( pool_state_loader.load()?.observation_key, observation_state.key() ); let mut tick_array = AccountLoader::<TickArrayState>::try_from(remaining_accounts.next().unwrap())?; // solana_program::log::sol_log_compute_units(); accounts = remaining_accounts.as_slice(); amount_in_internal = exact_internal( &mut SwapAccounts { signer: ctx.accounts.payer.clone(), amm_config: &amm_config, input_token_account: input_token_account.clone(), pool_state: &mut pool_state_loader, output_token_account: output_token_account.clone(), input_vault: input_vault.clone(), output_vault: output_vault.clone(), tick_array_state: &mut tick_array, observation_state: &mut observation_state, token_program: ctx.accounts.token_program.clone(), }, accounts, amount_in_internal, 0, true, )?; Expand Down // output token is the new swap input token input_token_account = output_token_account; } require!( amount_in_internal >= amount_out_minimum, ErrorCode::TooLittleOutputReceived ); Ok(()) }","use super::{exact_internal, SwapAccounts}; use crate::error::ErrorCode; use crate::states::*; use anchor_lang::prelude::*; use anchor_spl::token::{Token, TokenAccount}; #[derive(Accounts)] pub struct SwapRouterBaseIn<'info> { /// The user performing the swap pub payer: Signer<'info>, /// The token account that pays input tokens for the swap #[account(mut)] pub input_token_account: Account<'info, TokenAccount>, /// SPL program for token transfers pub token_program: Program<'info, Token>, } pub fn swap_router_base_in<'a, 'b, 'c, 'info>( ctx: Context<'a, 'b, 'c, 'info, SwapRouterBaseIn<'info>>, amount_in: u64, amount_out_minimum: u64, ) -> Result<()> { let mut amount_in_internal = amount_in; let mut input_token_account = Box::new(ctx.accounts.input_token_account.clone()); let mut accounts: &[AccountInfo] = ctx.remaining_accounts; while !accounts.is_empty() { let mut remaining_accounts = accounts.iter(); let account_info = remaining_accounts.next().unwrap(); if accounts.len() != ctx.remaining_accounts.len() && account_info.data_len() != AmmConfig::LEN { accounts = remaining_accounts.as_slice(); continue; } let amm_config = Box::new(Account::<AmmConfig>::try_from(account_info)?); let mut pool_state_loader = AccountLoader::<PoolState>::try_from(remaining_accounts.next().unwrap())?; let output_token_account = Box::new(Account::<TokenAccount>::try_from( &remaining_accounts.next().unwrap(), )?); let input_vault = Box::new(Account::<TokenAccount>::try_from( remaining_accounts.next().unwrap(), )?); let output_vault = Box::new(Account::<TokenAccount>::try_from( remaining_accounts.next().unwrap(), )?); let mut observation_state = AccountLoader::<ObservationState>::try_from(remaining_accounts.next().unwrap())?; { let pool_state = pool_state_loader.load()?; // check observation account is owned by the pool require_keys_eq!(pool_state.observation_key, observation_state.key()); // check ammConfig account is associate with the pool require_keys_eq!(pool_state.amm_config, amm_config.key()); } let mut tick_array = AccountLoader::<TickArrayState>::try_from(remaining_accounts.next().unwrap())?; // solana_program::log::sol_log_compute_units(); accounts = remaining_accounts.as_slice(); amount_in_internal = exact_internal( &mut SwapAccounts { signer: ctx.accounts.payer.clone(), amm_config: &amm_config, input_token_account: input_token_account.clone(), pool_state: &mut pool_state_loader, output_token_account: output_token_account.clone(), input_vault: input_vault.clone(), output_vault: output_vault.clone(), tick_array_state: &mut tick_array, observation_state: &mut observation_state, token_program: ctx.accounts.token_program.clone(), }, accounts, amount_in_internal, 0, true, )?; Expand Down // output token is the new swap input token input_token_account = output_token_account; } require!( amount_in_internal >= amount_out_minimum, ErrorCode::TooLittleOutputReceived ); Ok(()) }",Medium,"In order for the issue to be remediated, the SwapRouterBaseIn instruction should verify that the amm_config, which was passed to the instruction, is the one assigned to the PoolState. This can be done by adding the same check that is implemented for Swap instruction.","https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/8464f93a-f2c8-49b8-afb1-5056f4782dfc/Raydium_AMM_V3_Audit_Report.pdf?table=block&id=88f0ad30-c74b-4311-82bb-e6062bf12169&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743307200000&signature=AsG6ddNcRmbP3N5kADqbWt0rxS4L2XD4jBIhoabbCvM&downloadName=Raydium+AMM+V3+Audit+Report.pdf, https://github.com/raydium-io/raydium-clmm/pull/35/files#diff-b9999aee2d2b188835c85952d3b4e00b8cbe801052dffd196bdb0107103631de",High
Sol-242,"Rewards State DOS. Raydium tracks the total amount of rewards which are supposed to be emitted viareward_total_emissioned. This field is then subtracted from when claiming rewards. Unfortunately, because of small differences in rounding, it is possible to create a discrepancy between the expected rewards emissions and the actual total amount. More specifically, because reward_total_emissioned is updated every time rewards information is updated, but individual user reward emission calculations are only tracked in aggregate, more rewards could be lost due to rounding in the former scenario. Proof of Concept 1. Let’s assume following setup: • open_time = 1665982800 (epoch in seconds), • end_time = open_time + (90 * 24 * 60 * 60) (epoch in seconds, 90 days), • emissions_per_second = 80_000 / (90 * 24 * 60 * 60) = 0.102, • pool_state.liquidity = 100 2. If incurr_timestamp = open_time + 60the user runsPoolState::update_reward_infos() the reward_infos will be updated with reward_0_total_emissioned = 0 3. It is possible to update reward infos to the state in which the reward_growth_global_x64 > 0 && reward_x_total_emissioned == 0 4. By running update_reward_infos instruction every 1 minute (60 seconds), with following setup, it is possible to keep PoolState::reward_x_total_emissioned at value of 0 5. If reward_growth_global_x64will become big enough it is possibleforreward_amount_owed of an user to be greater than 0 6. If personal_position.reward_amount_owed > 0 && reward_x_total_emissioned = 0 the check in decrease_liquidity: check_unclaimed_reward will panic and make it impossible to decrease the liquidity 7. That can result in higher probability of more users gaining Impermanent Loss 8. Even if PoolState::reward_x_total_emissioned will be greater than 0 not all users will be able to decrease liquidity and gain a reward","// Calculates the next global reward growth variables based on the given timestamp. // The provided timestamp must be greater than or equal to the last updated timestamp. pub fn update_reward_infos( &mut self, curr_timestamp: u64, ) -> Result<([RewardInfo; REWARD_NUM])> { #[cfg(feature = ""enable-log"")] msg!(""current block timestamp:{}"", curr_timestamp); let mut next_reward_infos = self.reward_infos; for i in 0..REWARD_NUM { let reward_info = &mut next_reward_infos[i]; if !reward_info.initialized() { continue; } if curr_timestamp <= reward_info.open_time { continue; } let latest_update_timestamp = curr_timestamp.min(reward_info.end_time); if self.liquidity != 0 { let time_delta = latest_update_timestamp .checked_sub(reward_info.last_update_time) .unwrap(); let reward_growth_delta = U256::from(time_delta) .mul_div_floor( U256::from(reward_info.emissions_per_second_x64), U256::from(self.liquidity), ) .unwrap(); reward_info.reward_growth_global_x64 = reward_info .reward_growth_global_x64 .checked_add(reward_growth_delta.as_u128()) .unwrap(); reward_info.reward_total_emissioned = reward_info .reward_total_emissioned .checked_add( U128::from(time_delta) .mul_div_floor( U128::from(reward_info.emissions_per_second_x64), U128::from(fixed_point_64::Q64), ) .unwrap() .as_u64(), ) .unwrap(); #[cfg(feature = ""enable-log"")] msg!( ""reward_index:{},latest_update_timestamp:{},reward_info.reward_last_update_time:{},time_delta:{},reward_emission_per_second_x64:{},reward_growth_delta:{},reward_info.reward_growth_global_x64:{}"", i, latest_update_timestamp, identity(reward_info.last_update_time), time_delta, identity(reward_info.emissions_per_second_x64), reward_growth_delta, identity(reward_info.reward_growth_global_x64) ); } reward_info.last_update_time = latest_update_timestamp; // update reward state if latest_update_timestamp >= reward_info.open_time && latest_update_timestamp < reward_info.end_time { reward_info.reward_state = RewardState::Opening as u8; } else if latest_update_timestamp == next_reward_infos[i].end_time { next_reward_infos[i].reward_state = RewardState::Ended as u8; } } self.reward_infos = next_reward_infos; #[cfg(feature = ""enable-log"")] msg!(""update pool reward info, reward_0_total_emissioned:{}, reward_1_total_emissioned:{}, reward_2_total_emissioned:{}, pool.liquidity:{}"", identity(self.reward_infos[0].reward_total_emissioned),identity(self.reward_infos[1].reward_total_emissioned),identity(self.reward_infos[2].reward_total_emissioned), identity(self.liquidity)); Ok(next_reward_infos) }","// Calculates the next global reward growth variables based on the given timestamp. // The provided timestamp must be greater than or equal to the last updated timestamp. pub fn update_reward_infos( &mut self, curr_timestamp: u64, ) -> Result<([RewardInfo; REWARD_NUM])> { #[cfg(feature = ""enable-log"")] msg!(""current block timestamp:{}"", curr_timestamp); let mut next_reward_infos = self.reward_infos; for i in 0..REWARD_NUM { let reward_info = &mut next_reward_infos[i]; if !reward_info.initialized() { continue; } if curr_timestamp <= reward_info.open_time { continue; } let latest_update_timestamp = curr_timestamp.min(reward_info.end_time); if self.liquidity != 0 { let time_delta = latest_update_timestamp .checked_sub(reward_info.last_update_time) .unwrap(); let reward_growth_delta = U256::from(time_delta) .mul_div_floor( U256::from(reward_info.emissions_per_second_x64), U256::from(self.liquidity), ) .unwrap(); reward_info.reward_growth_global_x64 = reward_info .reward_growth_global_x64 .checked_add(reward_growth_delta.as_u128()) .unwrap(); reward_info.reward_total_emissioned = reward_info .reward_total_emissioned .checked_add( U128::from(time_delta) .mul_div_ceil( U128::from(reward_info.emissions_per_second_x64), U128::from(fixed_point_64::Q64), ) .unwrap() .as_u64(), ) .unwrap(); #[cfg(feature = ""enable-log"")] msg!( ""reward_index:{},latest_update_timestamp:{},reward_info.reward_last_update_time:{},time_delta:{},reward_emission_per_second_x64:{},reward_growth_delta:{},reward_info.reward_growth_global_x64:{}"", i, latest_update_timestamp, identity(reward_info.last_update_time), time_delta, identity(reward_info.emissions_per_second_x64), reward_growth_delta, identity(reward_info.reward_growth_global_x64) ); } reward_info.last_update_time = latest_update_timestamp; // update reward state if latest_update_timestamp >= reward_info.open_time && latest_update_timestamp < reward_info.end_time { reward_info.reward_state = RewardState::Opening as u8; } else if latest_update_timestamp == next_reward_infos[i].end_time { next_reward_infos[i].reward_state = RewardState::Ended as u8; } } self.reward_infos = next_reward_infos; #[cfg(feature = ""enable-log"")] msg!(""update pool reward info, reward_0_total_emissioned:{}, reward_1_total_emissioned:{}, reward_2_total_emissioned:{}, pool.liquidity:{}"", identity(self.reward_infos[0].reward_total_emissioned),identity(self.reward_infos[1].reward_total_emissioned),identity(self.reward_infos[2].reward_total_emissioned), identity(self.liquidity)); Ok(next_reward_infos) }",Low,Consider changing the code of check_unclaimed_reward to get_unclaimed_reward or replacing mul_div_floor() with mul_div_ceil when calculating reward_total_emissioned,"https://file.notion.so/f/f/97ab6450-64d1-4350-a5cf-a0c0c607f5c4/8464f93a-f2c8-49b8-afb1-5056f4782dfc/Raydium_AMM_V3_Audit_Report.pdf?table=block&id=88f0ad30-c74b-4311-82bb-e6062bf12169&spaceId=97ab6450-64d1-4350-a5cf-a0c0c607f5c4&expirationTimestamp=1743307200000&signature=AsG6ddNcRmbP3N5kADqbWt0rxS4L2XD4jBIhoabbCvM&downloadName=Raydium+AMM+V3+Audit+Report.pdf, https://github.com/raydium-io/raydium-clmm/pull/35/files#diff-37af8671e91d3734626c55422d4530a6dc25c885a582ac9008d2c29a0b0e3804",High
Sol-243,,,,,,,
Sol-244,,,,,,,
Sol-245,,,,,,,
Sol-246,,,,,,,
Sol-247,,,,,,,
Sol-248,,,,,,,
Sol-249,,,,,,,
Sol-250,,,,,,,
Sol-251,,,,,,,
Sol-252,,,,,,,
Sol-253,,,,,,,
Sol-254,,,,,,,
Sol-255,,,,,,,
Sol-256,,,,,,,
Sol-257,,,,,,,
Sol-258,,,,,,,
Sol-259,,,,,,,
Sol-260,,,,,,,
Sol-261,,,,,,,
Sol-262,,,,,,,
Sol-263,,,,,,,
Sol-264,,,,,,,
Sol-265,,,,,,,
Sol-266,,,,,,,
Sol-267,,,,,,,
Sol-268,,,,,,,
Sol-269,,,,,,,
Sol-270,,,,,,,
Sol-271,,,,,,,
Sol-272,,,,,,,
Sol-273,,,,,,,
Sol-274,,,,,,,
Sol-275,,,,,,,
Sol-276,,,,,,,
Sol-277,,,,,,,
Sol-278,,,,,,,
Sol-279,,,,,,,
Sol-280,,,,,,,
Sol-281,,,,,,,
Sol-282,,,,,,,
Sol-283,,,,,,,
Sol-284,,,,,,,
Sol-285,,,,,,,
Sol-286,,,,,,,
Sol-287,,,,,,,
Sol-288,,,,,,,
Sol-289,,,,,,,
Sol-290,,,,,,,
Sol-291,,,,,,,
Sol-292,,,,,,,
Sol-293,,,,,,,
Sol-294,,,,,,,
Sol-295,,,,,,,
Sol-296,,,,,,,
Sol-297,,,,,,,
Sol-298,,,,,,,
Sol-299,,,,,,,
Sol-300,,,,,,,
Sol-301,,,,,,,
Sol-302,,,,,,,
Sol-303,,,,,,,
Sol-304,,,,,,,
Sol-305,,,,,,,
Sol-306,,,,,,,
Sol-307,,,,,,,
Sol-308,,,,,,,
Sol-309,,,,,,,
Sol-310,,,,,,,
Sol-311,,,,,,,
Sol-312,,,,,,,
Sol-313,,,,,,,
Sol-314,,,,,,,
Sol-315,,,,,,,
Sol-316,,,,,,,
Sol-317,,,,,,,
Sol-318,,,,,,,
Sol-319,,,,,,,
Sol-320,,,,,,,
Sol-321,,,,,,,
Sol-322,,,,,,,
Sol-323,,,,,,,
Sol-324,,,,,,,
Sol-325,,,,,,,
Sol-326,,,,,,,
Sol-327,,,,,,,
Sol-328,,,,,,,
Sol-329,,,,,,,
Sol-330,,,,,,,
Sol-331,,,,,,,
Sol-332,,,,,,,
Sol-333,,,,,,,
Sol-334,,,,,,,
Sol-335,,,,,,,
Sol-336,,,,,,,
Sol-337,,,,,,,
Sol-338,,,,,,,
Sol-339,,,,,,,
Sol-340,,,,,,,
Sol-341,,,,,,,
Sol-342,,,,,,,
Sol-343,,,,,,,
Sol-344,,,,,,,
Sol-345,,,,,,,
Sol-346,,,,,,,
Sol-347,,,,,,,
Sol-348,,,,,,,
Sol-349,,,,,,,
Sol-350,,,,,,,
Sol-351,,,,,,,
Sol-352,,,,,,,
Sol-353,,,,,,,
Sol-354,,,,,,,
Sol-355,,,,,,,
Sol-356,,,,,,,
Sol-357,,,,,,,
Sol-358,,,,,,,
Sol-359,,,,,,,
Sol-360,,,,,,,
Sol-361,,,,,,,
Sol-362,,,,,,,
Sol-363,,,,,,,
Sol-364,,,,,,,
Sol-365,,,,,,,
Sol-366,,,,,,,
Sol-367,,,,,,,
Sol-368,,,,,,,
Sol-369,,,,,,,
Sol-370,,,,,,,
Sol-371,,,,,,,
Sol-372,,,,,,,
Sol-373,,,,,,,
Sol-374,,,,,,,
Sol-375,,,,,,,
Sol-376,,,,,,,
Sol-377,,,,,,,
Sol-378,,,,,,,
Sol-379,,,,,,,
Sol-380,,,,,,,
Sol-381,,,,,,,
Sol-382,,,,,,,
Sol-383,,,,,,,
Sol-384,,,,,,,
Sol-385,,,,,,,
Sol-386,,,,,,,
Sol-387,,,,,,,
Sol-388,,,,,,,
Sol-389,,,,,,,
Sol-390,,,,,,,
Sol-391,,,,,,,
Sol-392,,,,,,,
Sol-393,,,,,,,
Sol-394,,,,,,,
Sol-395,,,,,,,
Sol-396,,,,,,,
Sol-397,,,,,,,
Sol-398,,,,,,,
Sol-399,,,,,,,
Sol-400,,,,,,,
Sol-401,,,,,,,
Sol-402,,,,,,,
Sol-403,,,,,,,
Sol-404,,,,,,,
Sol-405,,,,,,,
Sol-406,,,,,,,
Sol-407,,,,,,,
Sol-408,,,,,,,
Sol-409,,,,,,,
Sol-410,,,,,,,
Sol-411,,,,,,,
Sol-412,,,,,,,
Sol-413,,,,,,,
Sol-414,,,,,,,
Sol-415,,,,,,,
Sol-416,,,,,,,
Sol-417,,,,,,,
Sol-418,,,,,,,
Sol-419,,,,,,,
Sol-420,,,,,,,
Sol-421,,,,,,,
Sol-422,,,,,,,
Sol-423,,,,,,,
Sol-424,,,,,,,
Sol-425,,,,,,,
Sol-426,,,,,,,
Sol-427,,,,,,,
Sol-428,,,,,,,
Sol-429,,,,,,,
Sol-430,,,,,,,
Sol-431,,,,,,,
Sol-432,,,,,,,
Sol-433,,,,,,,
Sol-434,,,,,,,
Sol-435,,,,,,,
Sol-436,,,,,,,
Sol-437,,,,,,,
Sol-438,,,,,,,
Sol-439,,,,,,,
Sol-440,,,,,,,
Sol-441,,,,,,,
Sol-442,,,,,,,
Sol-443,,,,,,,
Sol-444,,,,,,,
Sol-445,,,,,,,
Sol-446,,,,,,,
Sol-447,,,,,,,
Sol-448,,,,,,,
Sol-449,,,,,,,
Sol-450,,,,,,,
Sol-451,,,,,,,
Sol-452,,,,,,,
Sol-453,,,,,,,
Sol-454,,,,,,,
Sol-455,,,,,,,
Sol-456,,,,,,,
Sol-457,,,,,,,
Sol-458,,,,,,,
Sol-459,,,,,,,
Sol-460,,,,,,,
Sol-461,,,,,,,
Sol-462,,,,,,,
Sol-463,,,,,,,
Sol-464,,,,,,,
Sol-465,,,,,,,
Sol-466,,,,,,,
Sol-467,,,,,,,
Sol-468,,,,,,,
Sol-469,,,,,,,
Sol-470,,,,,,,
Sol-471,,,,,,,
Sol-472,,,,,,,
Sol-473,,,,,,,
Sol-474,,,,,,,
Sol-475,,,,,,,
Sol-476,,,,,,,
Sol-477,,,,,,,
Sol-478,,,,,,,
Sol-479,,,,,,,
Sol-480,,,,,,,
Sol-481,,,,,,,
Sol-482,,,,,,,
Sol-483,,,,,,,
Sol-484,,,,,,,
Sol-485,,,,,,,
Sol-486,,,,,,,
Sol-487,,,,,,,
Sol-488,,,,,,,
Sol-489,,,,,,,
Sol-490,,,,,,,
Sol-491,,,,,,,
Sol-492,,,,,,,
Sol-493,,,,,,,
Sol-494,,,,,,,
Sol-495,,,,,,,
Sol-496,,,,,,,
Sol-497,,,,,,,
Sol-498,,,,,,,
Sol-499,,,,,,,
Sol-500,,,,,,,
Sol-501,,,,,,,
Sol-502,,,,,,,
Sol-503,,,,,,,
Sol-504,,,,,,,
Sol-505,,,,,,,
Sol-506,,,,,,,
Sol-507,,,,,,,
Sol-508,,,,,,,
Sol-509,,,,,,,
Sol-510,,,,,,,
Sol-511,,,,,,,
Sol-512,,,,,,,
Sol-513,,,,,,,
Sol-514,,,,,,,
Sol-515,,,,,,,
Sol-516,,,,,,,
Sol-517,,,,,,,
Sol-518,,,,,,,
Sol-519,,,,,,,
Sol-520,,,,,,,
Sol-521,,,,,,,
Sol-522,,,,,,,
Sol-523,,,,,,,
Sol-524,,,,,,,
Sol-525,,,,,,,
Sol-526,,,,,,,
Sol-527,,,,,,,
Sol-528,,,,,,,
Sol-529,,,,,,,
Sol-530,,,,,,,
Sol-531,,,,,,,
Sol-532,,,,,,,
Sol-533,,,,,,,
Sol-534,,,,,,,
Sol-535,,,,,,,
Sol-536,,,,,,,
Sol-537,,,,,,,
Sol-538,,,,,,,
Sol-539,,,,,,,
Sol-540,,,,,,,
Sol-541,,,,,,,
Sol-542,,,,,,,
Sol-543,,,,,,,
Sol-544,,,,,,,
Sol-545,,,,,,,
Sol-546,,,,,,,
Sol-547,,,,,,,
Sol-548,,,,,,,
Sol-549,,,,,,,
Sol-550,,,,,,,
Sol-551,,,,,,,
Sol-552,,,,,,,
Sol-553,,,,,,,
Sol-554,,,,,,,
Sol-555,,,,,,,
Sol-556,,,,,,,
Sol-557,,,,,,,
Sol-558,,,,,,,
Sol-559,,,,,,,
Sol-560,,,,,,,
Sol-561,,,,,,,
Sol-562,,,,,,,
Sol-563,,,,,,,
Sol-564,,,,,,,
Sol-565,,,,,,,
Sol-566,,,,,,,
Sol-567,,,,,,,
Sol-568,,,,,,,
Sol-569,,,,,,,
Sol-570,,,,,,,
Sol-571,,,,,,,
Sol-572,,,,,,,
Sol-573,,,,,,,
Sol-574,,,,,,,
Sol-575,,,,,,,
Sol-576,,,,,,,
Sol-577,,,,,,,
Sol-578,,,,,,,
Sol-579,,,,,,,
Sol-580,,,,,,,
Sol-581,,,,,,,
Sol-582,,,,,,,
Sol-583,,,,,,,
Sol-584,,,,,,,
Sol-585,,,,,,,
Sol-586,,,,,,,
Sol-587,,,,,,,
Sol-588,,,,,,,
Sol-589,,,,,,,
Sol-590,,,,,,,
Sol-591,,,,,,,
Sol-592,,,,,,,
Sol-593,,,,,,,
Sol-594,,,,,,,
Sol-595,,,,,,,
Sol-596,,,,,,,
Sol-597,,,,,,,
Sol-598,,,,,,,
Sol-599,,,,,,,
Sol-600,,,,,,,
Sol-601,,,,,,,
Sol-602,,,,,,,
Sol-603,,,,,,,
Sol-604,,,,,,,
Sol-605,,,,,,,
Sol-606,,,,,,,
Sol-607,,,,,,,
Sol-608,,,,,,,
Sol-609,,,,,,,
Sol-610,,,,,,,
Sol-611,,,,,,,
Sol-612,,,,,,,
Sol-613,,,,,,,
Sol-614,,,,,,,
Sol-615,,,,,,,
Sol-616,,,,,,,
Sol-617,,,,,,,
Sol-618,,,,,,,
Sol-619,,,,,,,
Sol-620,,,,,,,
Sol-621,,,,,,,
Sol-622,,,,,,,
Sol-623,,,,,,,
Sol-624,,,,,,,
Sol-625,,,,,,,
Sol-626,,,,,,,
Sol-627,,,,,,,
Sol-628,,,,,,,
Sol-629,,,,,,,
Sol-630,,,,,,,
Sol-631,,,,,,,
Sol-632,,,,,,,
Sol-633,,,,,,,
Sol-634,,,,,,,
Sol-635,,,,,,,
Sol-636,,,,,,,
Sol-637,,,,,,,
Sol-638,,,,,,,
Sol-639,,,,,,,
Sol-640,,,,,,,
Sol-641,,,,,,,
Sol-642,,,,,,,
Sol-643,,,,,,,
Sol-644,,,,,,,
Sol-645,,,,,,,
Sol-646,,,,,,,
Sol-647,,,,,,,
Sol-648,,,,,,,
Sol-649,,,,,,,
Sol-650,,,,,,,
Sol-651,,,,,,,
Sol-652,,,,,,,
Sol-653,,,,,,,
Sol-654,,,,,,,
Sol-655,,,,,,,
Sol-656,,,,,,,
Sol-657,,,,,,,
Sol-658,,,,,,,
Sol-659,,,,,,,
Sol-660,,,,,,,
Sol-661,,,,,,,
Sol-662,,,,,,,
Sol-663,,,,,,,
Sol-664,,,,,,,
Sol-665,,,,,,,
Sol-666,,,,,,,
Sol-667,,,,,,,
Sol-668,,,,,,,
Sol-669,,,,,,,
Sol-670,,,,,,,
Sol-671,,,,,,,
Sol-672,,,,,,,
Sol-673,,,,,,,
Sol-674,,,,,,,
Sol-675,,,,,,,
Sol-676,,,,,,,
Sol-677,,,,,,,
Sol-678,,,,,,,
Sol-679,,,,,,,
Sol-680,,,,,,,
Sol-681,,,,,,,
Sol-682,,,,,,,
Sol-683,,,,,,,
Sol-684,,,,,,,
Sol-685,,,,,,,
Sol-686,,,,,,,
Sol-687,,,,,,,
Sol-688,,,,,,,
Sol-689,,,,,,,
Sol-690,,,,,,,
Sol-691,,,,,,,
Sol-692,,,,,,,
Sol-693,,,,,,,
Sol-694,,,,,,,
Sol-695,,,,,,,
Sol-696,,,,,,,
Sol-697,,,,,,,
Sol-698,,,,,,,
Sol-699,,,,,,,
Sol-700,,,,,,,
Sol-701,,,,,,,
Sol-702,,,,,,,
Sol-703,,,,,,,
Sol-704,,,,,,,
Sol-705,,,,,,,
Sol-706,,,,,,,
Sol-707,,,,,,,
Sol-708,,,,,,,
Sol-709,,,,,,,
Sol-710,,,,,,,
Sol-711,,,,,,,
Sol-712,,,,,,,
Sol-713,,,,,,,
Sol-714,,,,,,,
Sol-715,,,,,,,
Sol-716,,,,,,,
Sol-717,,,,,,,
Sol-718,,,,,,,
Sol-719,,,,,,,
Sol-720,,,,,,,
Sol-721,,,,,,,
Sol-722,,,,,,,
Sol-723,,,,,,,
Sol-724,,,,,,,
Sol-725,,,,,,,
Sol-726,,,,,,,
Sol-727,,,,,,,
Sol-728,,,,,,,
Sol-729,,,,,,,
Sol-730,,,,,,,
Sol-731,,,,,,,
Sol-732,,,,,,,
Sol-733,,,,,,,
Sol-734,,,,,,,
Sol-735,,,,,,,
Sol-736,,,,,,,
Sol-737,,,,,,,
Sol-738,,,,,,,
Sol-739,,,,,,,
Sol-740,,,,,,,
Sol-741,,,,,,,
Sol-742,,,,,,,
Sol-743,,,,,,,
Sol-744,,,,,,,
Sol-745,,,,,,,
Sol-746,,,,,,,
Sol-747,,,,,,,
Sol-748,,,,,,,
Sol-749,,,,,,,
Sol-750,,,,,,,
Sol-751,,,,,,,
Sol-752,,,,,,,
Sol-753,,,,,,,
Sol-754,,,,,,,
Sol-755,,,,,,,
Sol-756,,,,,,,
Sol-757,,,,,,,
Sol-758,,,,,,,
Sol-759,,,,,,,
Sol-760,,,,,,,
Sol-761,,,,,,,
Sol-762,,,,,,,
Sol-763,,,,,,,
Sol-764,,,,,,,
Sol-765,,,,,,,
Sol-766,,,,,,,
Sol-767,,,,,,,
Sol-768,,,,,,,
Sol-769,,,,,,,
Sol-770,,,,,,,
Sol-771,,,,,,,
Sol-772,,,,,,,
Sol-773,,,,,,,
Sol-774,,,,,,,
Sol-775,,,,,,,
Sol-776,,,,,,,
Sol-777,,,,,,,
Sol-778,,,,,,,
Sol-779,,,,,,,
Sol-780,,,,,,,
Sol-781,,,,,,,
Sol-782,,,,,,,
Sol-783,,,,,,,
Sol-784,,,,,,,
Sol-785,,,,,,,
Sol-786,,,,,,,
Sol-787,,,,,,,
Sol-788,,,,,,,
Sol-789,,,,,,,
Sol-790,,,,,,,
Sol-791,,,,,,,
Sol-792,,,,,,,
Sol-793,,,,,,,
Sol-794,,,,,,,
Sol-795,,,,,,,
Sol-796,,,,,,,
Sol-797,,,,,,,
Sol-798,,,,,,,
Sol-799,,,,,,,
Sol-800,,,,,,,
Sol-801,,,,,,,
Sol-802,,,,,,,
Sol-803,,,,,,,
Sol-804,,,,,,,
Sol-805,,,,,,,
Sol-806,,,,,,,
Sol-807,,,,,,,
Sol-808,,,,,,,
Sol-809,,,,,,,
Sol-810,,,,,,,
Sol-811,,,,,,,
Sol-812,,,,,,,
Sol-813,,,,,,,
Sol-814,,,,,,,
Sol-815,,,,,,,
Sol-816,,,,,,,
Sol-817,,,,,,,
Sol-818,,,,,,,
Sol-819,,,,,,,
Sol-820,,,,,,,
Sol-821,,,,,,,
Sol-822,,,,,,,
Sol-823,,,,,,,
Sol-824,,,,,,,
Sol-825,,,,,,,
Sol-826,,,,,,,
Sol-827,,,,,,,
Sol-828,,,,,,,
Sol-829,,,,,,,
Sol-830,,,,,,,
Sol-831,,,,,,,
Sol-832,,,,,,,
Sol-833,,,,,,,
Sol-834,,,,,,,
Sol-835,,,,,,,
Sol-836,,,,,,,
Sol-837,,,,,,,
Sol-838,,,,,,,
Sol-839,,,,,,,
Sol-840,,,,,,,
Sol-841,,,,,,,
Sol-842,,,,,,,
Sol-843,,,,,,,
Sol-844,,,,,,,
Sol-845,,,,,,,
Sol-846,,,,,,,
Sol-847,,,,,,,
Sol-848,,,,,,,
Sol-849,,,,,,,
Sol-850,,,,,,,
Sol-851,,,,,,,
Sol-852,,,,,,,
Sol-853,,,,,,,
Sol-854,,,,,,,
Sol-855,,,,,,,
Sol-856,,,,,,,
Sol-857,,,,,,,
Sol-858,,,,,,,
Sol-859,,,,,,,
Sol-860,,,,,,,
Sol-861,,,,,,,
Sol-862,,,,,,,
Sol-863,,,,,,,
Sol-864,,,,,,,
Sol-865,,,,,,,
Sol-866,,,,,,,
Sol-867,,,,,,,
Sol-868,,,,,,,
Sol-869,,,,,,,
Sol-870,,,,,,,
Sol-871,,,,,,,
Sol-872,,,,,,,
Sol-873,,,,,,,
Sol-874,,,,,,,
Sol-875,,,,,,,
Sol-876,,,,,,,
Sol-877,,,,,,,
Sol-878,,,,,,,
Sol-879,,,,,,,
Sol-880,,,,,,,
Sol-881,,,,,,,
Sol-882,,,,,,,
Sol-883,,,,,,,
Sol-884,,,,,,,
Sol-885,,,,,,,
Sol-886,,,,,,,
Sol-887,,,,,,,
Sol-888,,,,,,,
Sol-889,,,,,,,
Sol-890,,,,,,,
Sol-891,,,,,,,
Sol-892,,,,,,,
Sol-893,,,,,,,
Sol-894,,,,,,,
Sol-895,,,,,,,
Sol-896,,,,,,,
Sol-897,,,,,,,
Sol-898,,,,,,,
Sol-899,,,,,,,
Sol-900,,,,,,,
Sol-901,,,,,,,
Sol-902,,,,,,,
Sol-903,,,,,,,
Sol-904,,,,,,,
Sol-905,,,,,,,
Sol-906,,,,,,,
Sol-907,,,,,,,
Sol-908,,,,,,,
Sol-909,,,,,,,
Sol-910,,,,,,,
Sol-911,,,,,,,
Sol-912,,,,,,,
Sol-913,,,,,,,
Sol-914,,,,,,,
Sol-915,,,,,,,
Sol-916,,,,,,,
Sol-917,,,,,,,
Sol-918,,,,,,,
Sol-919,,,,,,,
Sol-920,,,,,,,
Sol-921,,,,,,,
Sol-922,,,,,,,
Sol-923,,,,,,,
Sol-924,,,,,,,
Sol-925,,,,,,,
Sol-926,,,,,,,
Sol-927,,,,,,,
Sol-928,,,,,,,
Sol-929,,,,,,,
Sol-930,,,,,,,
Sol-931,,,,,,,
Sol-932,,,,,,,
Sol-933,,,,,,,
Sol-934,,,,,,,
Sol-935,,,,,,,
Sol-936,,,,,,,
Sol-937,,,,,,,
Sol-938,,,,,,,
Sol-939,,,,,,,
Sol-940,,,,,,,
Sol-941,,,,,,,
Sol-942,,,,,,,
Sol-943,,,,,,,
Sol-944,,,,,,,
Sol-945,,,,,,,
Sol-946,,,,,,,
Sol-947,,,,,,,
Sol-948,,,,,,,
Sol-949,,,,,,,
Sol-950,,,,,,,
Sol-951,,,,,,,
Sol-952,,,,,,,
Sol-953,,,,,,,
Sol-954,,,,,,,
Sol-955,,,,,,,
Sol-956,,,,,,,
Sol-957,,,,,,,
Sol-958,,,,,,,
Sol-959,,,,,,,
Sol-960,,,,,,,
Sol-961,,,,,,,
Sol-962,,,,,,,
Sol-963,,,,,,,
Sol-964,,,,,,,
Sol-965,,,,,,,
Sol-966,,,,,,,
Sol-967,,,,,,,
Sol-968,,,,,,,
Sol-969,,,,,,,
Sol-970,,,,,,,
Sol-971,,,,,,,
Sol-972,,,,,,,
Sol-973,,,,,,,
Sol-974,,,,,,,
Sol-975,,,,,,,
Sol-976,,,,,,,
Sol-977,,,,,,,
Sol-978,,,,,,,
Sol-979,,,,,,,
Sol-980,,,,,,,
Sol-981,,,,,,,
Sol-982,,,,,,,
Sol-983,,,,,,,
Sol-984,,,,,,,
Sol-985,,,,,,,
Sol-986,,,,,,,
Sol-987,,,,,,,
Sol-988,,,,,,,
Sol-989,,,,,,,
Sol-990,,,,,,,
Sol-991,,,,,,,
Sol-992,,,,,,,
Sol-993,,,,,,,
Sol-994,,,,,,,
Sol-995,,,,,,,
Sol-996,,,,,,,
Sol-997,,,,,,,
Sol-998,,,,,,,
Sol-999,,,,,,,
Sol-1000,,,,,,,
Sol-1001,,,,,,,
Sol-1002,,,,,,,
Sol-1003,,,,,,,
Sol-1004,,,,,,,
Sol-1005,,,,,,,
Sol-1006,,,,,,,
Sol-1007,,,,,,,
Sol-1008,,,,,,,
Sol-1009,,,,,,,
Sol-1010,,,,,,,
Sol-1011,,,,,,,
Sol-1012,,,,,,,
Sol-1013,,,,,,,
Sol-1014,,,,,,,
Sol-1015,,,,,,,
Sol-1016,,,,,,,
Sol-1017,,,,,,,
Sol-1018,,,,,,,
Sol-1019,,,,,,,
Sol-1020,,,,,,,
Sol-1021,,,,,,,
Sol-1022,,,,,,,
Sol-1023,,,,,,,
Sol-1024,,,,,,,
Sol-1025,,,,,,,
Sol-1026,,,,,,,
Sol-1027,,,,,,,
Sol-1028,,,,,,,
Sol-1029,,,,,,,
Sol-1030,,,,,,,
Sol-1031,,,,,,,
Sol-1032,,,,,,,
Sol-1033,,,,,,,
Sol-1034,,,,,,,
Sol-1035,,,,,,,
Sol-1036,,,,,,,
Sol-1037,,,,,,,
Sol-1038,,,,,,,
Sol-1039,,,,,,,
Sol-1040,,,,,,,
Sol-1041,,,,,,,
Sol-1042,,,,,,,
Sol-1043,,,,,,,
Sol-1044,,,,,,,
Sol-1045,,,,,,,
Sol-1046,,,,,,,
Sol-1047,,,,,,,
Sol-1048,,,,,,,
Sol-1049,,,,,,,
Sol-1050,,,,,,,
Sol-1051,,,,,,,
Sol-1052,,,,,,,
Sol-1053,,,,,,,
Sol-1054,,,,,,,
Sol-1055,,,,,,,
Sol-1056,,,,,,,
Sol-1057,,,,,,,
Sol-1058,,,,,,,
Sol-1059,,,,,,,
Sol-1060,,,,,,,
Sol-1061,,,,,,,
Sol-1062,,,,,,,
Sol-1063,,,,,,,
Sol-1064,,,,,,,
Sol-1065,,,,,,,
Sol-1066,,,,,,,
Sol-1067,,,,,,,
Sol-1068,,,,,,,
Sol-1069,,,,,,,
Sol-1070,,,,,,,
Sol-1071,,,,,,,
Sol-1072,,,,,,,
Sol-1073,,,,,,,
Sol-1074,,,,,,,
Sol-1075,,,,,,,
Sol-1076,,,,,,,
Sol-1077,,,,,,,
Sol-1078,,,,,,,
Sol-1079,,,,,,,
Sol-1080,,,,,,,
Sol-1081,,,,,,,
Sol-1082,,,,,,,
Sol-1083,,,,,,,
Sol-1084,,,,,,,
Sol-1085,,,,,,,
Sol-1086,,,,,,,
Sol-1087,,,,,,,
Sol-1088,,,,,,,
Sol-1089,,,,,,,
Sol-1090,,,,,,,
Sol-1091,,,,,,,
Sol-1092,,,,,,,
Sol-1093,,,,,,,
Sol-1094,,,,,,,
Sol-1095,,,,,,,
Sol-1096,,,,,,,
Sol-1097,,,,,,,
Sol-1098,,,,,,,
Sol-1099,,,,,,,
Sol-1100,,,,,,,
Sol-1101,,,,,,,
Sol-1102,,,,,,,
Sol-1103,,,,,,,
Sol-1104,,,,,,,
Sol-1105,,,,,,,
Sol-1106,,,,,,,
Sol-1107,,,,,,,
Sol-1108,,,,,,,
Sol-1109,,,,,,,
Sol-1110,,,,,,,
Sol-1111,,,,,,,
Sol-1112,,,,,,,
Sol-1113,,,,,,,
Sol-1114,,,,,,,
Sol-1115,,,,,,,
Sol-1116,,,,,,,
Sol-1117,,,,,,,
Sol-1118,,,,,,,
Sol-1119,,,,,,,
Sol-1120,,,,,,,
Sol-1121,,,,,,,
Sol-1122,,,,,,,
Sol-1123,,,,,,,
Sol-1124,,,,,,,
Sol-1125,,,,,,,
Sol-1126,,,,,,,
Sol-1127,,,,,,,
Sol-1128,,,,,,,
Sol-1129,,,,,,,
Sol-1130,,,,,,,
Sol-1131,,,,,,,
Sol-1132,,,,,,,
Sol-1133,,,,,,,
Sol-1134,,,,,,,
Sol-1135,,,,,,,
Sol-1136,,,,,,,
Sol-1137,,,,,,,
Sol-1138,,,,,,,
Sol-1139,,,,,,,
Sol-1140,,,,,,,
Sol-1141,,,,,,,
Sol-1142,,,,,,,
Sol-1143,,,,,,,
Sol-1144,,,,,,,
Sol-1145,,,,,,,
Sol-1146,,,,,,,
Sol-1147,,,,,,,
Sol-1148,,,,,,,
Sol-1149,,,,,,,
Sol-1150,,,,,,,
Sol-1151,,,,,,,
Sol-1152,,,,,,,
Sol-1153,,,,,,,
Sol-1154,,,,,,,
Sol-1155,,,,,,,
Sol-1156,,,,,,,
Sol-1157,,,,,,,
Sol-1158,,,,,,,
Sol-1159,,,,,,,
Sol-1160,,,,,,,
Sol-1161,,,,,,,
Sol-1162,,,,,,,
Sol-1163,,,,,,,
Sol-1164,,,,,,,
Sol-1165,,,,,,,
Sol-1166,,,,,,,
Sol-1167,,,,,,,
Sol-1168,,,,,,,
Sol-1169,,,,,,,
Sol-1170,,,,,,,
Sol-1171,,,,,,,
Sol-1172,,,,,,,
Sol-1173,,,,,,,
Sol-1174,,,,,,,
Sol-1175,,,,,,,
Sol-1176,,,,,,,
Sol-1177,,,,,,,
Sol-1178,,,,,,,
Sol-1179,,,,,,,
Sol-1180,,,,,,,
Sol-1181,,,,,,,
Sol-1182,,,,,,,
Sol-1183,,,,,,,
Sol-1184,,,,,,,
Sol-1185,,,,,,,
Sol-1186,,,,,,,
Sol-1187,,,,,,,
Sol-1188,,,,,,,
Sol-1189,,,,,,,
Sol-1190,,,,,,,
Sol-1191,,,,,,,
Sol-1192,,,,,,,
Sol-1193,,,,,,,
Sol-1194,,,,,,,
Sol-1195,,,,,,,
Sol-1196,,,,,,,
Sol-1197,,,,,,,
Sol-1198,,,,,,,
Sol-1199,,,,,,,
Sol-1200,,,,,,,
Sol-1201,,,,,,,
Sol-1202,,,,,,,
Sol-1203,,,,,,,
Sol-1204,,,,,,,
Sol-1205,,,,,,,
Sol-1206,,,,,,,
Sol-1207,,,,,,,
Sol-1208,,,,,,,
Sol-1209,,,,,,,
Sol-1210,,,,,,,
Sol-1211,,,,,,,
Sol-1212,,,,,,,
Sol-1213,,,,,,,
Sol-1214,,,,,,,
Sol-1215,,,,,,,
Sol-1216,,,,,,,
Sol-1217,,,,,,,
Sol-1218,,,,,,,
Sol-1219,,,,,,,
Sol-1220,,,,,,,
Sol-1221,,,,,,,
Sol-1222,,,,,,,
Sol-1223,,,,,,,
Sol-1224,,,,,,,
Sol-1225,,,,,,,
Sol-1226,,,,,,,
Sol-1227,,,,,,,
Sol-1228,,,,,,,
Sol-1229,,,,,,,
Sol-1230,,,,,,,
Sol-1231,,,,,,,
Sol-1232,,,,,,,
Sol-1233,,,,,,,
Sol-1234,,,,,,,
Sol-1235,,,,,,,
Sol-1236,,,,,,,
Sol-1237,,,,,,,
Sol-1238,,,,,,,
Sol-1239,,,,,,,
Sol-1240,,,,,,,
Sol-1241,,,,,,,
Sol-1242,,,,,,,
Sol-1243,,,,,,,
Sol-1244,,,,,,,
Sol-1245,,,,,,,
Sol-1246,,,,,,,
Sol-1247,,,,,,,
Sol-1248,,,,,,,
Sol-1249,,,,,,,
Sol-1250,,,,,,,
Sol-1251,,,,,,,
Sol-1252,,,,,,,
Sol-1253,,,,,,,
Sol-1254,,,,,,,
Sol-1255,,,,,,,
Sol-1256,,,,,,,
Sol-1257,,,,,,,
Sol-1258,,,,,,,
Sol-1259,,,,,,,
Sol-1260,,,,,,,
Sol-1261,,,,,,,
Sol-1262,,,,,,,
Sol-1263,,,,,,,
Sol-1264,,,,,,,
Sol-1265,,,,,,,
Sol-1266,,,,,,,
Sol-1267,,,,,,,
Sol-1268,,,,,,,
Sol-1269,,,,,,,
Sol-1270,,,,,,,
Sol-1271,,,,,,,
Sol-1272,,,,,,,
Sol-1273,,,,,,,
Sol-1274,,,,,,,
Sol-1275,,,,,,,
Sol-1276,,,,,,,
Sol-1277,,,,,,,
Sol-1278,,,,,,,
Sol-1279,,,,,,,
Sol-1280,,,,,,,
Sol-1281,,,,,,,
Sol-1282,,,,,,,
Sol-1283,,,,,,,
Sol-1284,,,,,,,
Sol-1285,,,,,,,
Sol-1286,,,,,,,
Sol-1287,,,,,,,
Sol-1288,,,,,,,
Sol-1289,,,,,,,
Sol-1290,,,,,,,
Sol-1291,,,,,,,
Sol-1292,,,,,,,
Sol-1293,,,,,,,
Sol-1294,,,,,,,
Sol-1295,,,,,,,
Sol-1296,,,,,,,
Sol-1297,,,,,,,
Sol-1298,,,,,,,
Sol-1299,,,,,,,
Sol-1300,,,,,,,
Sol-1301,,,,,,,
Sol-1302,,,,,,,
Sol-1303,,,,,,,
Sol-1304,,,,,,,
Sol-1305,,,,,,,
Sol-1306,,,,,,,
Sol-1307,,,,,,,
Sol-1308,,,,,,,
Sol-1309,,,,,,,
Sol-1310,,,,,,,
Sol-1311,,,,,,,
Sol-1312,,,,,,,
Sol-1313,,,,,,,
Sol-1314,,,,,,,
Sol-1315,,,,,,,
Sol-1316,,,,,,,
Sol-1317,,,,,,,
Sol-1318,,,,,,,
Sol-1319,,,,,,,
Sol-1320,,,,,,,
Sol-1321,,,,,,,
Sol-1322,,,,,,,
Sol-1323,,,,,,,
Sol-1324,,,,,,,
Sol-1325,,,,,,,
Sol-1326,,,,,,,
Sol-1327,,,,,,,
Sol-1328,,,,,,,
Sol-1329,,,,,,,
Sol-1330,,,,,,,
Sol-1331,,,,,,,
Sol-1332,,,,,,,
Sol-1333,,,,,,,
Sol-1334,,,,,,,
Sol-1335,,,,,,,
Sol-1336,,,,,,,
Sol-1337,,,,,,,
Sol-1338,,,,,,,
Sol-1339,,,,,,,
Sol-1340,,,,,,,
Sol-1341,,,,,,,
Sol-1342,,,,,,,
Sol-1343,,,,,,,
Sol-1344,,,,,,,
Sol-1345,,,,,,,
Sol-1346,,,,,,,
Sol-1347,,,,,,,
Sol-1348,,,,,,,
Sol-1349,,,,,,,
Sol-1350,,,,,,,
Sol-1351,,,,,,,
Sol-1352,,,,,,,
Sol-1353,,,,,,,
Sol-1354,,,,,,,
Sol-1355,,,,,,,
Sol-1356,,,,,,,
Sol-1357,,,,,,,
Sol-1358,,,,,,,
Sol-1359,,,,,,,
Sol-1360,,,,,,,
Sol-1361,,,,,,,
Sol-1362,,,,,,,
Sol-1363,,,,,,,
Sol-1364,,,,,,,
Sol-1365,,,,,,,
Sol-1366,,,,,,,
Sol-1367,,,,,,,
Sol-1368,,,,,,,
Sol-1369,,,,,,,
Sol-1370,,,,,,,
Sol-1371,,,,,,,
Sol-1372,,,,,,,
Sol-1373,,,,,,,
Sol-1374,,,,,,,
Sol-1375,,,,,,,
Sol-1376,,,,,,,
Sol-1377,,,,,,,
Sol-1378,,,,,,,
Sol-1379,,,,,,,
Sol-1380,,,,,,,
Sol-1381,,,,,,,
Sol-1382,,,,,,,
Sol-1383,,,,,,,
Sol-1384,,,,,,,
Sol-1385,,,,,,,
Sol-1386,,,,,,,
Sol-1387,,,,,,,
Sol-1388,,,,,,,
Sol-1389,,,,,,,
Sol-1390,,,,,,,
Sol-1391,,,,,,,
Sol-1392,,,,,,,
Sol-1393,,,,,,,
Sol-1394,,,,,,,
Sol-1395,,,,,,,
Sol-1396,,,,,,,
Sol-1397,,,,,,,
Sol-1398,,,,,,,
Sol-1399,,,,,,,
Sol-1400,,,,,,,
Sol-1401,,,,,,,
Sol-1402,,,,,,,
Sol-1403,,,,,,,
Sol-1404,,,,,,,
Sol-1405,,,,,,,
Sol-1406,,,,,,,
Sol-1407,,,,,,,
Sol-1408,,,,,,,
Sol-1409,,,,,,,
Sol-1410,,,,,,,
Sol-1411,,,,,,,
Sol-1412,,,,,,,
Sol-1413,,,,,,,
Sol-1414,,,,,,,
Sol-1415,,,,,,,
Sol-1416,,,,,,,
Sol-1417,,,,,,,
Sol-1418,,,,,,,
Sol-1419,,,,,,,
Sol-1420,,,,,,,
Sol-1421,,,,,,,
Sol-1422,,,,,,,
Sol-1423,,,,,,,
Sol-1424,,,,,,,
Sol-1425,,,,,,,
Sol-1426,,,,,,,
Sol-1427,,,,,,,
Sol-1428,,,,,,,
Sol-1429,,,,,,,
Sol-1430,,,,,,,
Sol-1431,,,,,,,
Sol-1432,,,,,,,
Sol-1433,,,,,,,
Sol-1434,,,,,,,
Sol-1435,,,,,,,
Sol-1436,,,,,,,
Sol-1437,,,,,,,
Sol-1438,,,,,,,
Sol-1439,,,,,,,
Sol-1440,,,,,,,
Sol-1441,,,,,,,
Sol-1442,,,,,,,
Sol-1443,,,,,,,
Sol-1444,,,,,,,
Sol-1445,,,,,,,
Sol-1446,,,,,,,
Sol-1447,,,,,,,
Sol-1448,,,,,,,
Sol-1449,,,,,,,
Sol-1450,,,,,,,
Sol-1451,,,,,,,
Sol-1452,,,,,,,
Sol-1453,,,,,,,
Sol-1454,,,,,,,
Sol-1455,,,,,,,
Sol-1456,,,,,,,
Sol-1457,,,,,,,
Sol-1458,,,,,,,
Sol-1459,,,,,,,
Sol-1460,,,,,,,
Sol-1461,,,,,,,
Sol-1462,,,,,,,
Sol-1463,,,,,,,
Sol-1464,,,,,,,
Sol-1465,,,,,,,
Sol-1466,,,,,,,
Sol-1467,,,,,,,
Sol-1468,,,,,,,
Sol-1469,,,,,,,
Sol-1470,,,,,,,
Sol-1471,,,,,,,
Sol-1472,,,,,,,
Sol-1473,,,,,,,
Sol-1474,,,,,,,
Sol-1475,,,,,,,
Sol-1476,,,,,,,
Sol-1477,,,,,,,
Sol-1478,,,,,,,
Sol-1479,,,,,,,
Sol-1480,,,,,,,
Sol-1481,,,,,,,
Sol-1482,,,,,,,
Sol-1483,,,,,,,
Sol-1484,,,,,,,
Sol-1485,,,,,,,
Sol-1486,,,,,,,
Sol-1487,,,,,,,
Sol-1488,,,,,,,
Sol-1489,,,,,,,
Sol-1490,,,,,,,
Sol-1491,,,,,,,
Sol-1492,,,,,,,
Sol-1493,,,,,,,
Sol-1494,,,,,,,
Sol-1495,,,,,,,
Sol-1496,,,,,,,
Sol-1497,,,,,,,
Sol-1498,,,,,,,
Sol-1499,,,,,,,
Sol-1500,,,,,,,
Sol-1501,,,,,,,
Sol-1502,,,,,,,
Sol-1503,,,,,,,
Sol-1504,,,,,,,
Sol-1505,,,,,,,
Sol-1506,,,,,,,
Sol-1507,,,,,,,
Sol-1508,,,,,,,
Sol-1509,,,,,,,
Sol-1510,,,,,,,
Sol-1511,,,,,,,
Sol-1512,,,,,,,
Sol-1513,,,,,,,
Sol-1514,,,,,,,
Sol-1515,,,,,,,
Sol-1516,,,,,,,
Sol-1517,,,,,,,
Sol-1518,,,,,,,
Sol-1519,,,,,,,
Sol-1520,,,,,,,
Sol-1521,,,,,,,
Sol-1522,,,,,,,
Sol-1523,,,,,,,
Sol-1524,,,,,,,
Sol-1525,,,,,,,
Sol-1526,,,,,,,
Sol-1527,,,,,,,
Sol-1528,,,,,,,
Sol-1529,,,,,,,
Sol-1530,,,,,,,
Sol-1531,,,,,,,
Sol-1532,,,,,,,
Sol-1533,,,,,,,
Sol-1534,,,,,,,
Sol-1535,,,,,,,
Sol-1536,,,,,,,
Sol-1537,,,,,,,
Sol-1538,,,,,,,
Sol-1539,,,,,,,
Sol-1540,,,,,,,
Sol-1541,,,,,,,
Sol-1542,,,,,,,
Sol-1543,,,,,,,
Sol-1544,,,,,,,
Sol-1545,,,,,,,
Sol-1546,,,,,,,
Sol-1547,,,,,,,
Sol-1548,,,,,,,
Sol-1549,,,,,,,
Sol-1550,,,,,,,
Sol-1551,,,,,,,
Sol-1552,,,,,,,
Sol-1553,,,,,,,
Sol-1554,,,,,,,
Sol-1555,,,,,,,
Sol-1556,,,,,,,
Sol-1557,,,,,,,
Sol-1558,,,,,,,
Sol-1559,,,,,,,
Sol-1560,,,,,,,
Sol-1561,,,,,,,
Sol-1562,,,,,,,
Sol-1563,,,,,,,
Sol-1564,,,,,,,
Sol-1565,,,,,,,
Sol-1566,,,,,,,
Sol-1567,,,,,,,
Sol-1568,,,,,,,
Sol-1569,,,,,,,
Sol-1570,,,,,,,
Sol-1571,,,,,,,
Sol-1572,,,,,,,
Sol-1573,,,,,,,
Sol-1574,,,,,,,
Sol-1575,,,,,,,
Sol-1576,,,,,,,
Sol-1577,,,,,,,
Sol-1578,,,,,,,
Sol-1579,,,,,,,
Sol-1580,,,,,,,
Sol-1581,,,,,,,
Sol-1582,,,,,,,
Sol-1583,,,,,,,
Sol-1584,,,,,,,
Sol-1585,,,,,,,
Sol-1586,,,,,,,
Sol-1587,,,,,,,
Sol-1588,,,,,,,
Sol-1589,,,,,,,
Sol-1590,,,,,,,
Sol-1591,,,,,,,
Sol-1592,,,,,,,
Sol-1593,,,,,,,
Sol-1594,,,,,,,
Sol-1595,,,,,,,
Sol-1596,,,,,,,
Sol-1597,,,,,,,
Sol-1598,,,,,,,
Sol-1599,,,,,,,
Sol-1600,,,,,,,
Sol-1601,,,,,,,
Sol-1602,,,,,,,
Sol-1603,,,,,,,
Sol-1604,,,,,,,
Sol-1605,,,,,,,
Sol-1606,,,,,,,
Sol-1607,,,,,,,
Sol-1608,,,,,,,
Sol-1609,,,,,,,
Sol-1610,,,,,,,
Sol-1611,,,,,,,
Sol-1612,,,,,,,
Sol-1613,,,,,,,
Sol-1614,,,,,,,
Sol-1615,,,,,,,
Sol-1616,,,,,,,
Sol-1617,,,,,,,
Sol-1618,,,,,,,
Sol-1619,,,,,,,
Sol-1620,,,,,,,
Sol-1621,,,,,,,
Sol-1622,,,,,,,
Sol-1623,,,,,,,
Sol-1624,,,,,,,
Sol-1625,,,,,,,
Sol-1626,,,,,,,
Sol-1627,,,,,,,
Sol-1628,,,,,,,
Sol-1629,,,,,,,
Sol-1630,,,,,,,
Sol-1631,,,,,,,
Sol-1632,,,,,,,
Sol-1633,,,,,,,
Sol-1634,,,,,,,
Sol-1635,,,,,,,
Sol-1636,,,,,,,
Sol-1637,,,,,,,
Sol-1638,,,,,,,
Sol-1639,,,,,,,
Sol-1640,,,,,,,
Sol-1641,,,,,,,
Sol-1642,,,,,,,
Sol-1643,,,,,,,
Sol-1644,,,,,,,
Sol-1645,,,,,,,
Sol-1646,,,,,,,
Sol-1647,,,,,,,
Sol-1648,,,,,,,
Sol-1649,,,,,,,
Sol-1650,,,,,,,
Sol-1651,,,,,,,
Sol-1652,,,,,,,
Sol-1653,,,,,,,
Sol-1654,,,,,,,
Sol-1655,,,,,,,
Sol-1656,,,,,,,
Sol-1657,,,,,,,
Sol-1658,,,,,,,
Sol-1659,,,,,,,
Sol-1660,,,,,,,
Sol-1661,,,,,,,
Sol-1662,,,,,,,
Sol-1663,,,,,,,
Sol-1664,,,,,,,
Sol-1665,,,,,,,
Sol-1666,,,,,,,
Sol-1667,,,,,,,
Sol-1668,,,,,,,
Sol-1669,,,,,,,
Sol-1670,,,,,,,
Sol-1671,,,,,,,
Sol-1672,,,,,,,
Sol-1673,,,,,,,
Sol-1674,,,,,,,
Sol-1675,,,,,,,
Sol-1676,,,,,,,
Sol-1677,,,,,,,
Sol-1678,,,,,,,
Sol-1679,,,,,,,
Sol-1680,,,,,,,
Sol-1681,,,,,,,
Sol-1682,,,,,,,
Sol-1683,,,,,,,
Sol-1684,,,,,,,
Sol-1685,,,,,,,
Sol-1686,,,,,,,
Sol-1687,,,,,,,
Sol-1688,,,,,,,
Sol-1689,,,,,,,
Sol-1690,,,,,,,
Sol-1691,,,,,,,
Sol-1692,,,,,,,
Sol-1693,,,,,,,
Sol-1694,,,,,,,
Sol-1695,,,,,,,
Sol-1696,,,,,,,
Sol-1697,,,,,,,
Sol-1698,,,,,,,
Sol-1699,,,,,,,
Sol-1700,,,,,,,
Sol-1701,,,,,,,
Sol-1702,,,,,,,
Sol-1703,,,,,,,
Sol-1704,,,,,,,
Sol-1705,,,,,,,
Sol-1706,,,,,,,
Sol-1707,,,,,,,
Sol-1708,,,,,,,
Sol-1709,,,,,,,
Sol-1710,,,,,,,
Sol-1711,,,,,,,
Sol-1712,,,,,,,
Sol-1713,,,,,,,
Sol-1714,,,,,,,
Sol-1715,,,,,,,
Sol-1716,,,,,,,
Sol-1717,,,,,,,
Sol-1718,,,,,,,
Sol-1719,,,,,,,
Sol-1720,,,,,,,
Sol-1721,,,,,,,
Sol-1722,,,,,,,
Sol-1723,,,,,,,
Sol-1724,,,,,,,
Sol-1725,,,,,,,
Sol-1726,,,,,,,
Sol-1727,,,,,,,
Sol-1728,,,,,,,
Sol-1729,,,,,,,
Sol-1730,,,,,,,
Sol-1731,,,,,,,
Sol-1732,,,,,,,
Sol-1733,,,,,,,
Sol-1734,,,,,,,
Sol-1735,,,,,,,
Sol-1736,,,,,,,
Sol-1737,,,,,,,
Sol-1738,,,,,,,
Sol-1739,,,,,,,
Sol-1740,,,,,,,
Sol-1741,,,,,,,
Sol-1742,,,,,,,
Sol-1743,,,,,,,
Sol-1744,,,,,,,
Sol-1745,,,,,,,
Sol-1746,,,,,,,
Sol-1747,,,,,,,
Sol-1748,,,,,,,
Sol-1749,,,,,,,
Sol-1750,,,,,,,
Sol-1751,,,,,,,
Sol-1752,,,,,,,
Sol-1753,,,,,,,
Sol-1754,,,,,,,
Sol-1755,,,,,,,
Sol-1756,,,,,,,
Sol-1757,,,,,,,
Sol-1758,,,,,,,
Sol-1759,,,,,,,
Sol-1760,,,,,,,
Sol-1761,,,,,,,
Sol-1762,,,,,,,
Sol-1763,,,,,,,
Sol-1764,,,,,,,
Sol-1765,,,,,,,
Sol-1766,,,,,,,
Sol-1767,,,,,,,
Sol-1768,,,,,,,
Sol-1769,,,,,,,
Sol-1770,,,,,,,
Sol-1771,,,,,,,
Sol-1772,,,,,,,
Sol-1773,,,,,,,
Sol-1774,,,,,,,
Sol-1775,,,,,,,
Sol-1776,,,,,,,
Sol-1777,,,,,,,
Sol-1778,,,,,,,
Sol-1779,,,,,,,
Sol-1780,,,,,,,
Sol-1781,,,,,,,
Sol-1782,,,,,,,
Sol-1783,,,,,,,
Sol-1784,,,,,,,
Sol-1785,,,,,,,
Sol-1786,,,,,,,
Sol-1787,,,,,,,
Sol-1788,,,,,,,
Sol-1789,,,,,,,
Sol-1790,,,,,,,
Sol-1791,,,,,,,
Sol-1792,,,,,,,
Sol-1793,,,,,,,
Sol-1794,,,,,,,
Sol-1795,,,,,,,
Sol-1796,,,,,,,
Sol-1797,,,,,,,
Sol-1798,,,,,,,
Sol-1799,,,,,,,
Sol-1800,,,,,,,
Sol-1801,,,,,,,
Sol-1802,,,,,,,
Sol-1803,,,,,,,
Sol-1804,,,,,,,
Sol-1805,,,,,,,
Sol-1806,,,,,,,
Sol-1807,,,,,,,
Sol-1808,,,,,,,
Sol-1809,,,,,,,
Sol-1810,,,,,,,
Sol-1811,,,,,,,
Sol-1812,,,,,,,
Sol-1813,,,,,,,
Sol-1814,,,,,,,
Sol-1815,,,,,,,
Sol-1816,,,,,,,
Sol-1817,,,,,,,
Sol-1818,,,,,,,
Sol-1819,,,,,,,
Sol-1820,,,,,,,
Sol-1821,,,,,,,
Sol-1822,,,,,,,
Sol-1823,,,,,,,
Sol-1824,,,,,,,
Sol-1825,,,,,,,
Sol-1826,,,,,,,
Sol-1827,,,,,,,
Sol-1828,,,,,,,
Sol-1829,,,,,,,
Sol-1830,,,,,,,
Sol-1831,,,,,,,
Sol-1832,,,,,,,
Sol-1833,,,,,,,
Sol-1834,,,,,,,
Sol-1835,,,,,,,
Sol-1836,,,,,,,
Sol-1837,,,,,,,
Sol-1838,,,,,,,
Sol-1839,,,,,,,
Sol-1840,,,,,,,
Sol-1841,,,,,,,
Sol-1842,,,,,,,
Sol-1843,,,,,,,
Sol-1844,,,,,,,
Sol-1845,,,,,,,
Sol-1846,,,,,,,
Sol-1847,,,,,,,
Sol-1848,,,,,,,
Sol-1849,,,,,,,
Sol-1850,,,,,,,
Sol-1851,,,,,,,
Sol-1852,,,,,,,
Sol-1853,,,,,,,
Sol-1854,,,,,,,
Sol-1855,,,,,,,
Sol-1856,,,,,,,
Sol-1857,,,,,,,
Sol-1858,,,,,,,
Sol-1859,,,,,,,
Sol-1860,,,,,,,
Sol-1861,,,,,,,
Sol-1862,,,,,,,
Sol-1863,,,,,,,
Sol-1864,,,,,,,
Sol-1865,,,,,,,
Sol-1866,,,,,,,
Sol-1867,,,,,,,
Sol-1868,,,,,,,
Sol-1869,,,,,,,
Sol-1870,,,,,,,
Sol-1871,,,,,,,
Sol-1872,,,,,,,
Sol-1873,,,,,,,
Sol-1874,,,,,,,
Sol-1875,,,,,,,
Sol-1876,,,,,,,
Sol-1877,,,,,,,
Sol-1878,,,,,,,
Sol-1879,,,,,,,
Sol-1880,,,,,,,
Sol-1881,,,,,,,
Sol-1882,,,,,,,
Sol-1883,,,,,,,
Sol-1884,,,,,,,
Sol-1885,,,,,,,
Sol-1886,,,,,,,
Sol-1887,,,,,,,
Sol-1888,,,,,,,
Sol-1889,,,,,,,
Sol-1890,,,,,,,
Sol-1891,,,,,,,
Sol-1892,,,,,,,
Sol-1893,,,,,,,
Sol-1894,,,,,,,
Sol-1895,,,,,,,
Sol-1896,,,,,,,
Sol-1897,,,,,,,
Sol-1898,,,,,,,
Sol-1899,,,,,,,
Sol-1900,,,,,,,
Sol-1901,,,,,,,
Sol-1902,,,,,,,
Sol-1903,,,,,,,
Sol-1904,,,,,,,
Sol-1905,,,,,,,
Sol-1906,,,,,,,
Sol-1907,,,,,,,
Sol-1908,,,,,,,
Sol-1909,,,,,,,
Sol-1910,,,,,,,
Sol-1911,,,,,,,
Sol-1912,,,,,,,
Sol-1913,,,,,,,
Sol-1914,,,,,,,
Sol-1915,,,,,,,
Sol-1916,,,,,,,
Sol-1917,,,,,,,
Sol-1918,,,,,,,
Sol-1919,,,,,,,
Sol-1920,,,,,,,
Sol-1921,,,,,,,
Sol-1922,,,,,,,
Sol-1923,,,,,,,
Sol-1924,,,,,,,
Sol-1925,,,,,,,
Sol-1926,,,,,,,
Sol-1927,,,,,,,
Sol-1928,,,,,,,
Sol-1929,,,,,,,
Sol-1930,,,,,,,
Sol-1931,,,,,,,
Sol-1932,,,,,,,
Sol-1933,,,,,,,
Sol-1934,,,,,,,
Sol-1935,,,,,,,
Sol-1936,,,,,,,
Sol-1937,,,,,,,
Sol-1938,,,,,,,
Sol-1939,,,,,,,
Sol-1940,,,,,,,
Sol-1941,,,,,,,
Sol-1942,,,,,,,
Sol-1943,,,,,,,
Sol-1944,,,,,,,
Sol-1945,,,,,,,
Sol-1946,,,,,,,
Sol-1947,,,,,,,
Sol-1948,,,,,,,
Sol-1949,,,,,,,
Sol-1950,,,,,,,
Sol-1951,,,,,,,
Sol-1952,,,,,,,
Sol-1953,,,,,,,
Sol-1954,,,,,,,
Sol-1955,,,,,,,
Sol-1956,,,,,,,
Sol-1957,,,,,,,
Sol-1958,,,,,,,
Sol-1959,,,,,,,
Sol-1960,,,,,,,
Sol-1961,,,,,,,
Sol-1962,,,,,,,
Sol-1963,,,,,,,
Sol-1964,,,,,,,
Sol-1965,,,,,,,
Sol-1966,,,,,,,
Sol-1967,,,,,,,
Sol-1968,,,,,,,
Sol-1969,,,,,,,
Sol-1970,,,,,,,
Sol-1971,,,,,,,
Sol-1972,,,,,,,
Sol-1973,,,,,,,
Sol-1974,,,,,,,
Sol-1975,,,,,,,
Sol-1976,,,,,,,
Sol-1977,,,,,,,
Sol-1978,,,,,,,
Sol-1979,,,,,,,
Sol-1980,,,,,,,
Sol-1981,,,,,,,
Sol-1982,,,,,,,
Sol-1983,,,,,,,
Sol-1984,,,,,,,
Sol-1985,,,,,,,
Sol-1986,,,,,,,
Sol-1987,,,,,,,
Sol-1988,,,,,,,
Sol-1989,,,,,,,
Sol-1990,,,,,,,
Sol-1991,,,,,,,
Sol-1992,,,,,,,
Sol-1993,,,,,,,
Sol-1994,,,,,,,
Sol-1995,,,,,,,
Sol-1996,,,,,,,
Sol-1997,,,,,,,
Sol-1998,,,,,,,
Sol-1999,,,,,,,
Sol-2000,,,,,,,
Sol-2001,,,,,,,
Sol-2002,,,,,,,
Sol-2003,,,,,,,
Sol-2004,,,,,,,
Sol-2005,,,,,,,
Sol-2006,,,,,,,
Sol-2007,,,,,,,
Sol-2008,,,,,,,
Sol-2009,,,,,,,
Sol-2010,,,,,,,
Sol-2011,,,,,,,
Sol-2012,,,,,,,
Sol-2013,,,,,,,
Sol-2014,,,,,,,
Sol-2015,,,,,,,
Sol-2016,,,,,,,
Sol-2017,,,,,,,
Sol-2018,,,,,,,
Sol-2019,,,,,,,
Sol-2020,,,,,,,
Sol-2021,,,,,,,
Sol-2022,,,,,,,
Sol-2023,,,,,,,
Sol-2024,,,,,,,
Sol-2025,,,,,,,
Sol-2026,,,,,,,
Sol-2027,,,,,,,
Sol-2028,,,,,,,
Sol-2029,,,,,,,
Sol-2030,,,,,,,
Sol-2031,,,,,,,
Sol-2032,,,,,,,
Sol-2033,,,,,,,
Sol-2034,,,,,,,
Sol-2035,,,,,,,
Sol-2036,,,,,,,
Sol-2037,,,,,,,
Sol-2038,,,,,,,
Sol-2039,,,,,,,
Sol-2040,,,,,,,
Sol-2041,,,,,,,
Sol-2042,,,,,,,
Sol-2043,,,,,,,
Sol-2044,,,,,,,
Sol-2045,,,,,,,
Sol-2046,,,,,,,
Sol-2047,,,,,,,
Sol-2048,,,,,,,
Sol-2049,,,,,,,
Sol-2050,,,,,,,
Sol-2051,,,,,,,
Sol-2052,,,,,,,
Sol-2053,,,,,,,
Sol-2054,,,,,,,
Sol-2055,,,,,,,
Sol-2056,,,,,,,
Sol-2057,,,,,,,
Sol-2058,,,,,,,
Sol-2059,,,,,,,
Sol-2060,,,,,,,
Sol-2061,,,,,,,
Sol-2062,,,,,,,
Sol-2063,,,,,,,
Sol-2064,,,,,,,
Sol-2065,,,,,,,
Sol-2066,,,,,,,
Sol-2067,,,,,,,
Sol-2068,,,,,,,
Sol-2069,,,,,,,
Sol-2070,,,,,,,
Sol-2071,,,,,,,
Sol-2072,,,,,,,
Sol-2073,,,,,,,
Sol-2074,,,,,,,
Sol-2075,,,,,,,
Sol-2076,,,,,,,
Sol-2077,,,,,,,
Sol-2078,,,,,,,
Sol-2079,,,,,,,
Sol-2080,,,,,,,
Sol-2081,,,,,,,
Sol-2082,,,,,,,
Sol-2083,,,,,,,
Sol-2084,,,,,,,
Sol-2085,,,,,,,
Sol-2086,,,,,,,
Sol-2087,,,,,,,
Sol-2088,,,,,,,
Sol-2089,,,,,,,
Sol-2090,,,,,,,
Sol-2091,,,,,,,
Sol-2092,,,,,,,
Sol-2093,,,,,,,
Sol-2094,,,,,,,
Sol-2095,,,,,,,
Sol-2096,,,,,,,
Sol-2097,,,,,,,
Sol-2098,,,,,,,
Sol-2099,,,,,,,
Sol-2100,,,,,,,
Sol-2101,,,,,,,
Sol-2102,,,,,,,
Sol-2103,,,,,,,
Sol-2104,,,,,,,
Sol-2105,,,,,,,
Sol-2106,,,,,,,
Sol-2107,,,,,,,
Sol-2108,,,,,,,
Sol-2109,,,,,,,
Sol-2110,,,,,,,
Sol-2111,,,,,,,
Sol-2112,,,,,,,
Sol-2113,,,,,,,
Sol-2114,,,,,,,
Sol-2115,,,,,,,
Sol-2116,,,,,,,
Sol-2117,,,,,,,
Sol-2118,,,,,,,
Sol-2119,,,,,,,
Sol-2120,,,,,,,
Sol-2121,,,,,,,
Sol-2122,,,,,,,
Sol-2123,,,,,,,
Sol-2124,,,,,,,
Sol-2125,,,,,,,
Sol-2126,,,,,,,
Sol-2127,,,,,,,
Sol-2128,,,,,,,
Sol-2129,,,,,,,
Sol-2130,,,,,,,
Sol-2131,,,,,,,
Sol-2132,,,,,,,
Sol-2133,,,,,,,
Sol-2134,,,,,,,
Sol-2135,,,,,,,
Sol-2136,,,,,,,
Sol-2137,,,,,,,
Sol-2138,,,,,,,
Sol-2139,,,,,,,
Sol-2140,,,,,,,
Sol-2141,,,,,,,
Sol-2142,,,,,,,
Sol-2143,,,,,,,
Sol-2144,,,,,,,
Sol-2145,,,,,,,
Sol-2146,,,,,,,
Sol-2147,,,,,,,
Sol-2148,,,,,,,
Sol-2149,,,,,,,
Sol-2150,,,,,,,
Sol-2151,,,,,,,
Sol-2152,,,,,,,
Sol-2153,,,,,,,
Sol-2154,,,,,,,
Sol-2155,,,,,,,
Sol-2156,,,,,,,
Sol-2157,,,,,,,
Sol-2158,,,,,,,
Sol-2159,,,,,,,
Sol-2160,,,,,,,
Sol-2161,,,,,,,
Sol-2162,,,,,,,
Sol-2163,,,,,,,
Sol-2164,,,,,,,
Sol-2165,,,,,,,
Sol-2166,,,,,,,
Sol-2167,,,,,,,
Sol-2168,,,,,,,
Sol-2169,,,,,,,
Sol-2170,,,,,,,
Sol-2171,,,,,,,
Sol-2172,,,,,,,
Sol-2173,,,,,,,
Sol-2174,,,,,,,
Sol-2175,,,,,,,
Sol-2176,,,,,,,
Sol-2177,,,,,,,
Sol-2178,,,,,,,
Sol-2179,,,,,,,
Sol-2180,,,,,,,
Sol-2181,,,,,,,
Sol-2182,,,,,,,
Sol-2183,,,,,,,
Sol-2184,,,,,,,
Sol-2185,,,,,,,
Sol-2186,,,,,,,
Sol-2187,,,,,,,
Sol-2188,,,,,,,
Sol-2189,,,,,,,
Sol-2190,,,,,,,
Sol-2191,,,,,,,
Sol-2192,,,,,,,
Sol-2193,,,,,,,
Sol-2194,,,,,,,
Sol-2195,,,,,,,
Sol-2196,,,,,,,
Sol-2197,,,,,,,
Sol-2198,,,,,,,
Sol-2199,,,,,,,
Sol-2200,,,,,,,
Sol-2201,,,,,,,
Sol-2202,,,,,,,
Sol-2203,,,,,,,
Sol-2204,,,,,,,
Sol-2205,,,,,,,
Sol-2206,,,,,,,
Sol-2207,,,,,,,
Sol-2208,,,,,,,
Sol-2209,,,,,,,
Sol-2210,,,,,,,
Sol-2211,,,,,,,
Sol-2212,,,,,,,
Sol-2213,,,,,,,
Sol-2214,,,,,,,
Sol-2215,,,,,,,
Sol-2216,,,,,,,
Sol-2217,,,,,,,
Sol-2218,,,,,,,
Sol-2219,,,,,,,
Sol-2220,,,,,,,
Sol-2221,,,,,,,
Sol-2222,,,,,,,
Sol-2223,,,,,,,
Sol-2224,,,,,,,
Sol-2225,,,,,,,
Sol-2226,,,,,,,
Sol-2227,,,,,,,
Sol-2228,,,,,,,
Sol-2229,,,,,,,
Sol-2230,,,,,,,
Sol-2231,,,,,,,
Sol-2232,,,,,,,
Sol-2233,,,,,,,
Sol-2234,,,,,,,
Sol-2235,,,,,,,
Sol-2236,,,,,,,
Sol-2237,,,,,,,
Sol-2238,,,,,,,
Sol-2239,,,,,,,
Sol-2240,,,,,,,
Sol-2241,,,,,,,
Sol-2242,,,,,,,
Sol-2243,,,,,,,
Sol-2244,,,,,,,
Sol-2245,,,,,,,
Sol-2246,,,,,,,
Sol-2247,,,,,,,
Sol-2248,,,,,,,
Sol-2249,,,,,,,
Sol-2250,,,,,,,
Sol-2251,,,,,,,
Sol-2252,,,,,,,
Sol-2253,,,,,,,
Sol-2254,,,,,,,
Sol-2255,,,,,,,
Sol-2256,,,,,,,
Sol-2257,,,,,,,
Sol-2258,,,,,,,
Sol-2259,,,,,,,
Sol-2260,,,,,,,
Sol-2261,,,,,,,
Sol-2262,,,,,,,
Sol-2263,,,,,,,
Sol-2264,,,,,,,
Sol-2265,,,,,,,
Sol-2266,,,,,,,
Sol-2267,,,,,,,
Sol-2268,,,,,,,
Sol-2269,,,,,,,
Sol-2270,,,,,,,
Sol-2271,,,,,,,
Sol-2272,,,,,,,
Sol-2273,,,,,,,
Sol-2274,,,,,,,
Sol-2275,,,,,,,
Sol-2276,,,,,,,
Sol-2277,,,,,,,
Sol-2278,,,,,,,
Sol-2279,,,,,,,
Sol-2280,,,,,,,
Sol-2281,,,,,,,
Sol-2282,,,,,,,
Sol-2283,,,,,,,
Sol-2284,,,,,,,
Sol-2285,,,,,,,
Sol-2286,,,,,,,
Sol-2287,,,,,,,
Sol-2288,,,,,,,
Sol-2289,,,,,,,
Sol-2290,,,,,,,
Sol-2291,,,,,,,
Sol-2292,,,,,,,
Sol-2293,,,,,,,
Sol-2294,,,,,,,
Sol-2295,,,,,,,
Sol-2296,,,,,,,
Sol-2297,,,,,,,
Sol-2298,,,,,,,
Sol-2299,,,,,,,
Sol-2300,,,,,,,
Sol-2301,,,,,,,
Sol-2302,,,,,,,
Sol-2303,,,,,,,
Sol-2304,,,,,,,
Sol-2305,,,,,,,
Sol-2306,,,,,,,
Sol-2307,,,,,,,
Sol-2308,,,,,,,
Sol-2309,,,,,,,
Sol-2310,,,,,,,
Sol-2311,,,,,,,
Sol-2312,,,,,,,
Sol-2313,,,,,,,
Sol-2314,,,,,,,
Sol-2315,,,,,,,
Sol-2316,,,,,,,
Sol-2317,,,,,,,
Sol-2318,,,,,,,
Sol-2319,,,,,,,
Sol-2320,,,,,,,
Sol-2321,,,,,,,
Sol-2322,,,,,,,
Sol-2323,,,,,,,
Sol-2324,,,,,,,
Sol-2325,,,,,,,
Sol-2326,,,,,,,
Sol-2327,,,,,,,
Sol-2328,,,,,,,
Sol-2329,,,,,,,
Sol-2330,,,,,,,
Sol-2331,,,,,,,
Sol-2332,,,,,,,
Sol-2333,,,,,,,
Sol-2334,,,,,,,
Sol-2335,,,,,,,
Sol-2336,,,,,,,
Sol-2337,,,,,,,
Sol-2338,,,,,,,
Sol-2339,,,,,,,
Sol-2340,,,,,,,
Sol-2341,,,,,,,
Sol-2342,,,,,,,
Sol-2343,,,,,,,
Sol-2344,,,,,,,
Sol-2345,,,,,,,
Sol-2346,,,,,,,
Sol-2347,,,,,,,
Sol-2348,,,,,,,
Sol-2349,,,,,,,
Sol-2350,,,,,,,
Sol-2351,,,,,,,
Sol-2352,,,,,,,
Sol-2353,,,,,,,
Sol-2354,,,,,,,
Sol-2355,,,,,,,
Sol-2356,,,,,,,
Sol-2357,,,,,,,
Sol-2358,,,,,,,
Sol-2359,,,,,,,
Sol-2360,,,,,,,
Sol-2361,,,,,,,
Sol-2362,,,,,,,
Sol-2363,,,,,,,
Sol-2364,,,,,,,
Sol-2365,,,,,,,
Sol-2366,,,,,,,
Sol-2367,,,,,,,
Sol-2368,,,,,,,
Sol-2369,,,,,,,
Sol-2370,,,,,,,
Sol-2371,,,,,,,
Sol-2372,,,,,,,
Sol-2373,,,,,,,
Sol-2374,,,,,,,
Sol-2375,,,,,,,
Sol-2376,,,,,,,
Sol-2377,,,,,,,
Sol-2378,,,,,,,
Sol-2379,,,,,,,
Sol-2380,,,,,,,
Sol-2381,,,,,,,
Sol-2382,,,,,,,
Sol-2383,,,,,,,
Sol-2384,,,,,,,
Sol-2385,,,,,,,
Sol-2386,,,,,,,
Sol-2387,,,,,,,
Sol-2388,,,,,,,
Sol-2389,,,,,,,
Sol-2390,,,,,,,
Sol-2391,,,,,,,
Sol-2392,,,,,,,
Sol-2393,,,,,,,
Sol-2394,,,,,,,
Sol-2395,,,,,,,
Sol-2396,,,,,,,
Sol-2397,,,,,,,
Sol-2398,,,,,,,
Sol-2399,,,,,,,
Sol-2400,,,,,,,
Sol-2401,,,,,,,
Sol-2402,,,,,,,
Sol-2403,,,,,,,
Sol-2404,,,,,,,
Sol-2405,,,,,,,
Sol-2406,,,,,,,
Sol-2407,,,,,,,
Sol-2408,,,,,,,
Sol-2409,,,,,,,
Sol-2410,,,,,,,
Sol-2411,,,,,,,
Sol-2412,,,,,,,
Sol-2413,,,,,,,
Sol-2414,,,,,,,
Sol-2415,,,,,,,
Sol-2416,,,,,,,
Sol-2417,,,,,,,
Sol-2418,,,,,,,
Sol-2419,,,,,,,
Sol-2420,,,,,,,
Sol-2421,,,,,,,
Sol-2422,,,,,,,
Sol-2423,,,,,,,
Sol-2424,,,,,,,
Sol-2425,,,,,,,
Sol-2426,,,,,,,
Sol-2427,,,,,,,
Sol-2428,,,,,,,
Sol-2429,,,,,,,
Sol-2430,,,,,,,
Sol-2431,,,,,,,
Sol-2432,,,,,,,
Sol-2433,,,,,,,
Sol-2434,,,,,,,
Sol-2435,,,,,,,
Sol-2436,,,,,,,
Sol-2437,,,,,,,
Sol-2438,,,,,,,
Sol-2439,,,,,,,
Sol-2440,,,,,,,
Sol-2441,,,,,,,
Sol-2442,,,,,,,
Sol-2443,,,,,,,
Sol-2444,,,,,,,
Sol-2445,,,,,,,
Sol-2446,,,,,,,
Sol-2447,,,,,,,
Sol-2448,,,,,,,
Sol-2449,,,,,,,
Sol-2450,,,,,,,
Sol-2451,,,,,,,
Sol-2452,,,,,,,
Sol-2453,,,,,,,
Sol-2454,,,,,,,
Sol-2455,,,,,,,
Sol-2456,,,,,,,
Sol-2457,,,,,,,
Sol-2458,,,,,,,
Sol-2459,,,,,,,
Sol-2460,,,,,,,
Sol-2461,,,,,,,
Sol-2462,,,,,,,
Sol-2463,,,,,,,
Sol-2464,,,,,,,
Sol-2465,,,,,,,
Sol-2466,,,,,,,
Sol-2467,,,,,,,
Sol-2468,,,,,,,
Sol-2469,,,,,,,
Sol-2470,,,,,,,
Sol-2471,,,,,,,
Sol-2472,,,,,,,
Sol-2473,,,,,,,
Sol-2474,,,,,,,
Sol-2475,,,,,,,
Sol-2476,,,,,,,
Sol-2477,,,,,,,
Sol-2478,,,,,,,
Sol-2479,,,,,,,
Sol-2480,,,,,,,
Sol-2481,,,,,,,
Sol-2482,,,,,,,
Sol-2483,,,,,,,
Sol-2484,,,,,,,
Sol-2485,,,,,,,
Sol-2486,,,,,,,
Sol-2487,,,,,,,
Sol-2488,,,,,,,
Sol-2489,,,,,,,
Sol-2490,,,,,,,
Sol-2491,,,,,,,
Sol-2492,,,,,,,
Sol-2493,,,,,,,
Sol-2494,,,,,,,
Sol-2495,,,,,,,
Sol-2496,,,,,,,
Sol-2497,,,,,,,
Sol-2498,,,,,,,
Sol-2499,,,,,,,
Sol-2500,,,,,,,
Sol-2501,,,,,,,
Sol-2502,,,,,,,
Sol-2503,,,,,,,
Sol-2504,,,,,,,
Sol-2505,,,,,,,
Sol-2506,,,,,,,
Sol-2507,,,,,,,
Sol-2508,,,,,,,
Sol-2509,,,,,,,
Sol-2510,,,,,,,
Sol-2511,,,,,,,
Sol-2512,,,,,,,
Sol-2513,,,,,,,
Sol-2514,,,,,,,
Sol-2515,,,,,,,
Sol-2516,,,,,,,
Sol-2517,,,,,,,
Sol-2518,,,,,,,
Sol-2519,,,,,,,
Sol-2520,,,,,,,
Sol-2521,,,,,,,
Sol-2522,,,,,,,
Sol-2523,,,,,,,
Sol-2524,,,,,,,
Sol-2525,,,,,,,
Sol-2526,,,,,,,
Sol-2527,,,,,,,
Sol-2528,,,,,,,
Sol-2529,,,,,,,
Sol-2530,,,,,,,
Sol-2531,,,,,,,
Sol-2532,,,,,,,
Sol-2533,,,,,,,
Sol-2534,,,,,,,
Sol-2535,,,,,,,
Sol-2536,,,,,,,
Sol-2537,,,,,,,
Sol-2538,,,,,,,
Sol-2539,,,,,,,
Sol-2540,,,,,,,
Sol-2541,,,,,,,
Sol-2542,,,,,,,
Sol-2543,,,,,,,
Sol-2544,,,,,,,
Sol-2545,,,,,,,
Sol-2546,,,,,,,
Sol-2547,,,,,,,
Sol-2548,,,,,,,
Sol-2549,,,,,,,
Sol-2550,,,,,,,
Sol-2551,,,,,,,
Sol-2552,,,,,,,
Sol-2553,,,,,,,
Sol-2554,,,,,,,
Sol-2555,,,,,,,
Sol-2556,,,,,,,
Sol-2557,,,,,,,
Sol-2558,,,,,,,
Sol-2559,,,,,,,
Sol-2560,,,,,,,
Sol-2561,,,,,,,
Sol-2562,,,,,,,
Sol-2563,,,,,,,
Sol-2564,,,,,,,
Sol-2565,,,,,,,
Sol-2566,,,,,,,
Sol-2567,,,,,,,
Sol-2568,,,,,,,
Sol-2569,,,,,,,
Sol-2570,,,,,,,
Sol-2571,,,,,,,
Sol-2572,,,,,,,
Sol-2573,,,,,,,
Sol-2574,,,,,,,
Sol-2575,,,,,,,
Sol-2576,,,,,,,
Sol-2577,,,,,,,
Sol-2578,,,,,,,
Sol-2579,,,,,,,
Sol-2580,,,,,,,
Sol-2581,,,,,,,
Sol-2582,,,,,,,
Sol-2583,,,,,,,
Sol-2584,,,,,,,
Sol-2585,,,,,,,
Sol-2586,,,,,,,
Sol-2587,,,,,,,
Sol-2588,,,,,,,
Sol-2589,,,,,,,
Sol-2590,,,,,,,
Sol-2591,,,,,,,
Sol-2592,,,,,,,
Sol-2593,,,,,,,
Sol-2594,,,,,,,
Sol-2595,,,,,,,
Sol-2596,,,,,,,
Sol-2597,,,,,,,
Sol-2598,,,,,,,
Sol-2599,,,,,,,
Sol-2600,,,,,,,
Sol-2601,,,,,,,
Sol-2602,,,,,,,
Sol-2603,,,,,,,
Sol-2604,,,,,,,
Sol-2605,,,,,,,
Sol-2606,,,,,,,
Sol-2607,,,,,,,
Sol-2608,,,,,,,
Sol-2609,,,,,,,
Sol-2610,,,,,,,
Sol-2611,,,,,,,
Sol-2612,,,,,,,
Sol-2613,,,,,,,
Sol-2614,,,,,,,
Sol-2615,,,,,,,
Sol-2616,,,,,,,
Sol-2617,,,,,,,
Sol-2618,,,,,,,
Sol-2619,,,,,,,
Sol-2620,,,,,,,
Sol-2621,,,,,,,
Sol-2622,,,,,,,
Sol-2623,,,,,,,
Sol-2624,,,,,,,
Sol-2625,,,,,,,
Sol-2626,,,,,,,
Sol-2627,,,,,,,
Sol-2628,,,,,,,
Sol-2629,,,,,,,
Sol-2630,,,,,,,
Sol-2631,,,,,,,
Sol-2632,,,,,,,
Sol-2633,,,,,,,
Sol-2634,,,,,,,
Sol-2635,,,,,,,
Sol-2636,,,,,,,
Sol-2637,,,,,,,
Sol-2638,,,,,,,
Sol-2639,,,,,,,
Sol-2640,,,,,,,
Sol-2641,,,,,,,
Sol-2642,,,,,,,
Sol-2643,,,,,,,
Sol-2644,,,,,,,
Sol-2645,,,,,,,
Sol-2646,,,,,,,
Sol-2647,,,,,,,
Sol-2648,,,,,,,
Sol-2649,,,,,,,
Sol-2650,,,,,,,
Sol-2651,,,,,,,
Sol-2652,,,,,,,
Sol-2653,,,,,,,
Sol-2654,,,,,,,
Sol-2655,,,,,,,
Sol-2656,,,,,,,
Sol-2657,,,,,,,
Sol-2658,,,,,,,
Sol-2659,,,,,,,
Sol-2660,,,,,,,
Sol-2661,,,,,,,
Sol-2662,,,,,,,
Sol-2663,,,,,,,
Sol-2664,,,,,,,
Sol-2665,,,,,,,
Sol-2666,,,,,,,
Sol-2667,,,,,,,
Sol-2668,,,,,,,
Sol-2669,,,,,,,
Sol-2670,,,,,,,
Sol-2671,,,,,,,
Sol-2672,,,,,,,
Sol-2673,,,,,,,
Sol-2674,,,,,,,
Sol-2675,,,,,,,
Sol-2676,,,,,,,
Sol-2677,,,,,,,
Sol-2678,,,,,,,
Sol-2679,,,,,,,
Sol-2680,,,,,,,
Sol-2681,,,,,,,
Sol-2682,,,,,,,
Sol-2683,,,,,,,
Sol-2684,,,,,,,
Sol-2685,,,,,,,
Sol-2686,,,,,,,
Sol-2687,,,,,,,
Sol-2688,,,,,,,
Sol-2689,,,,,,,
Sol-2690,,,,,,,
Sol-2691,,,,,,,
Sol-2692,,,,,,,
Sol-2693,,,,,,,
Sol-2694,,,,,,,
Sol-2695,,,,,,,
Sol-2696,,,,,,,
Sol-2697,,,,,,,
Sol-2698,,,,,,,
Sol-2699,,,,,,,
Sol-2700,,,,,,,
Sol-2701,,,,,,,
Sol-2702,,,,,,,
Sol-2703,,,,,,,
Sol-2704,,,,,,,
Sol-2705,,,,,,,
Sol-2706,,,,,,,
Sol-2707,,,,,,,
Sol-2708,,,,,,,
Sol-2709,,,,,,,
Sol-2710,,,,,,,
Sol-2711,,,,,,,
Sol-2712,,,,,,,
Sol-2713,,,,,,,
Sol-2714,,,,,,,
Sol-2715,,,,,,,
Sol-2716,,,,,,,
Sol-2717,,,,,,,
Sol-2718,,,,,,,
Sol-2719,,,,,,,
Sol-2720,,,,,,,
Sol-2721,,,,,,,
Sol-2722,,,,,,,
Sol-2723,,,,,,,
Sol-2724,,,,,,,
Sol-2725,,,,,,,
Sol-2726,,,,,,,
Sol-2727,,,,,,,
Sol-2728,,,,,,,
Sol-2729,,,,,,,
Sol-2730,,,,,,,
Sol-2731,,,,,,,
Sol-2732,,,,,,,
Sol-2733,,,,,,,
Sol-2734,,,,,,,
Sol-2735,,,,,,,
Sol-2736,,,,,,,
Sol-2737,,,,,,,
Sol-2738,,,,,,,
Sol-2739,,,,,,,
Sol-2740,,,,,,,
Sol-2741,,,,,,,
Sol-2742,,,,,,,
Sol-2743,,,,,,,
Sol-2744,,,,,,,
Sol-2745,,,,,,,
Sol-2746,,,,,,,
Sol-2747,,,,,,,
Sol-2748,,,,,,,
Sol-2749,,,,,,,
Sol-2750,,,,,,,
Sol-2751,,,,,,,
Sol-2752,,,,,,,
Sol-2753,,,,,,,
Sol-2754,,,,,,,
Sol-2755,,,,,,,
Sol-2756,,,,,,,
Sol-2757,,,,,,,
Sol-2758,,,,,,,
Sol-2759,,,,,,,
Sol-2760,,,,,,,
Sol-2761,,,,,,,
Sol-2762,,,,,,,
Sol-2763,,,,,,,
Sol-2764,,,,,,,
Sol-2765,,,,,,,
Sol-2766,,,,,,,
Sol-2767,,,,,,,
Sol-2768,,,,,,,
Sol-2769,,,,,,,
Sol-2770,,,,,,,
Sol-2771,,,,,,,
Sol-2772,,,,,,,
Sol-2773,,,,,,,
Sol-2774,,,,,,,
Sol-2775,,,,,,,
Sol-2776,,,,,,,
Sol-2777,,,,,,,
Sol-2778,,,,,,,
Sol-2779,,,,,,,
Sol-2780,,,,,,,
Sol-2781,,,,,,,
Sol-2782,,,,,,,
Sol-2783,,,,,,,
Sol-2784,,,,,,,
Sol-2785,,,,,,,
Sol-2786,,,,,,,
Sol-2787,,,,,,,
Sol-2788,,,,,,,
Sol-2789,,,,,,,
Sol-2790,,,,,,,
Sol-2791,,,,,,,
Sol-2792,,,,,,,
Sol-2793,,,,,,,
Sol-2794,,,,,,,
Sol-2795,,,,,,,
Sol-2796,,,,,,,
Sol-2797,,,,,,,
Sol-2798,,,,,,,
Sol-2799,,,,,,,
Sol-2800,,,,,,,
Sol-2801,,,,,,,
Sol-2802,,,,,,,
Sol-2803,,,,,,,
Sol-2804,,,,,,,
Sol-2805,,,,,,,
Sol-2806,,,,,,,
Sol-2807,,,,,,,
Sol-2808,,,,,,,
Sol-2809,,,,,,,
Sol-2810,,,,,,,
Sol-2811,,,,,,,
Sol-2812,,,,,,,
Sol-2813,,,,,,,
Sol-2814,,,,,,,
Sol-2815,,,,,,,
Sol-2816,,,,,,,
Sol-2817,,,,,,,
Sol-2818,,,,,,,
Sol-2819,,,,,,,
Sol-2820,,,,,,,
Sol-2821,,,,,,,
Sol-2822,,,,,,,
Sol-2823,,,,,,,
Sol-2824,,,,,,,
Sol-2825,,,,,,,
Sol-2826,,,,,,,
Sol-2827,,,,,,,
Sol-2828,,,,,,,
Sol-2829,,,,,,,
Sol-2830,,,,,,,
Sol-2831,,,,,,,
Sol-2832,,,,,,,
Sol-2833,,,,,,,
Sol-2834,,,,,,,
Sol-2835,,,,,,,
Sol-2836,,,,,,,
Sol-2837,,,,,,,
Sol-2838,,,,,,,
Sol-2839,,,,,,,
Sol-2840,,,,,,,
Sol-2841,,,,,,,
Sol-2842,,,,,,,
Sol-2843,,,,,,,
Sol-2844,,,,,,,
Sol-2845,,,,,,,
Sol-2846,,,,,,,
Sol-2847,,,,,,,
Sol-2848,,,,,,,
Sol-2849,,,,,,,
Sol-2850,,,,,,,
Sol-2851,,,,,,,
Sol-2852,,,,,,,
Sol-2853,,,,,,,
Sol-2854,,,,,,,
Sol-2855,,,,,,,
Sol-2856,,,,,,,
Sol-2857,,,,,,,
Sol-2858,,,,,,,
Sol-2859,,,,,,,
Sol-2860,,,,,,,
Sol-2861,,,,,,,
Sol-2862,,,,,,,
Sol-2863,,,,,,,
Sol-2864,,,,,,,
Sol-2865,,,,,,,
Sol-2866,,,,,,,
Sol-2867,,,,,,,
Sol-2868,,,,,,,
Sol-2869,,,,,,,
Sol-2870,,,,,,,
Sol-2871,,,,,,,
Sol-2872,,,,,,,
Sol-2873,,,,,,,
Sol-2874,,,,,,,
Sol-2875,,,,,,,
Sol-2876,,,,,,,
Sol-2877,,,,,,,
Sol-2878,,,,,,,
Sol-2879,,,,,,,
Sol-2880,,,,,,,
Sol-2881,,,,,,,
Sol-2882,,,,,,,
Sol-2883,,,,,,,
Sol-2884,,,,,,,
Sol-2885,,,,,,,
Sol-2886,,,,,,,
Sol-2887,,,,,,,
Sol-2888,,,,,,,
Sol-2889,,,,,,,
Sol-2890,,,,,,,
Sol-2891,,,,,,,
Sol-2892,,,,,,,
Sol-2893,,,,,,,
Sol-2894,,,,,,,
Sol-2895,,,,,,,
Sol-2896,,,,,,,
Sol-2897,,,,,,,
Sol-2898,,,,,,,
Sol-2899,,,,,,,
Sol-2900,,,,,,,
Sol-2901,,,,,,,
Sol-2902,,,,,,,
Sol-2903,,,,,,,
Sol-2904,,,,,,,
Sol-2905,,,,,,,
Sol-2906,,,,,,,
Sol-2907,,,,,,,
Sol-2908,,,,,,,
Sol-2909,,,,,,,
Sol-2910,,,,,,,
Sol-2911,,,,,,,
Sol-2912,,,,,,,
Sol-2913,,,,,,,
Sol-2914,,,,,,,
Sol-2915,,,,,,,
Sol-2916,,,,,,,
Sol-2917,,,,,,,
Sol-2918,,,,,,,
Sol-2919,,,,,,,
Sol-2920,,,,,,,
Sol-2921,,,,,,,
Sol-2922,,,,,,,
Sol-2923,,,,,,,
Sol-2924,,,,,,,
Sol-2925,,,,,,,
Sol-2926,,,,,,,
Sol-2927,,,,,,,
Sol-2928,,,,,,,
Sol-2929,,,,,,,
Sol-2930,,,,,,,
Sol-2931,,,,,,,
Sol-2932,,,,,,,
Sol-2933,,,,,,,
Sol-2934,,,,,,,
Sol-2935,,,,,,,
Sol-2936,,,,,,,
Sol-2937,,,,,,,
Sol-2938,,,,,,,
Sol-2939,,,,,,,
Sol-2940,,,,,,,
Sol-2941,,,,,,,
Sol-2942,,,,,,,
Sol-2943,,,,,,,
Sol-2944,,,,,,,
Sol-2945,,,,,,,
Sol-2946,,,,,,,
Sol-2947,,,,,,,
Sol-2948,,,,,,,
Sol-2949,,,,,,,
Sol-2950,,,,,,,
Sol-2951,,,,,,,
Sol-2952,,,,,,,
Sol-2953,,,,,,,
Sol-2954,,,,,,,
Sol-2955,,,,,,,
Sol-2956,,,,,,,
Sol-2957,,,,,,,
Sol-2958,,,,,,,
Sol-2959,,,,,,,
Sol-2960,,,,,,,
Sol-2961,,,,,,,
Sol-2962,,,,,,,
Sol-2963,,,,,,,
Sol-2964,,,,,,,
Sol-2965,,,,,,,
Sol-2966,,,,,,,
Sol-2967,,,,,,,
Sol-2968,,,,,,,
Sol-2969,,,,,,,
Sol-2970,,,,,,,
Sol-2971,,,,,,,
Sol-2972,,,,,,,
Sol-2973,,,,,,,
Sol-2974,,,,,,,
Sol-2975,,,,,,,
Sol-2976,,,,,,,
Sol-2977,,,,,,,
Sol-2978,,,,,,,
Sol-2979,,,,,,,
Sol-2980,,,,,,,
Sol-2981,,,,,,,
Sol-2982,,,,,,,
Sol-2983,,,,,,,
Sol-2984,,,,,,,
Sol-2985,,,,,,,
Sol-2986,,,,,,,
Sol-2987,,,,,,,
Sol-2988,,,,,,,
Sol-2989,,,,,,,
Sol-2990,,,,,,,
Sol-2991,,,,,,,
Sol-2992,,,,,,,
Sol-2993,,,,,,,
Sol-2994,,,,,,,
Sol-2995,,,,,,,
Sol-2996,,,,,,,
Sol-2997,,,,,,,
Sol-2998,,,,,,,
Sol-2999,,,,,,,
Sol-3000,,,,,,,
Sol-3001,,,,,,,
Sol-3002,,,,,,,
Sol-3003,,,,,,,
Sol-3004,,,,,,,
Sol-3005,,,,,,,
Sol-3006,,,,,,,
Sol-3007,,,,,,,
Sol-3008,,,,,,,
Sol-3009,,,,,,,
Sol-3010,,,,,,,
Sol-3011,,,,,,,
Sol-3012,,,,,,,
Sol-3013,,,,,,,
Sol-3014,,,,,,,
Sol-3015,,,,,,,
Sol-3016,,,,,,,
Sol-3017,,,,,,,
Sol-3018,,,,,,,
Sol-3019,,,,,,,
Sol-3020,,,,,,,
Sol-3021,,,,,,,
Sol-3022,,,,,,,
Sol-3023,,,,,,,
Sol-3024,,,,,,,
Sol-3025,,,,,,,
Sol-3026,,,,,,,
Sol-3027,,,,,,,
Sol-3028,,,,,,,
Sol-3029,,,,,,,
Sol-3030,,,,,,,
Sol-3031,,,,,,,
Sol-3032,,,,,,,
Sol-3033,,,,,,,
Sol-3034,,,,,,,
Sol-3035,,,,,,,
Sol-3036,,,,,,,
Sol-3037,,,,,,,
Sol-3038,,,,,,,
Sol-3039,,,,,,,
Sol-3040,,,,,,,
Sol-3041,,,,,,,
Sol-3042,,,,,,,
Sol-3043,,,,,,,
Sol-3044,,,,,,,
Sol-3045,,,,,,,
Sol-3046,,,,,,,
Sol-3047,,,,,,,
Sol-3048,,,,,,,
Sol-3049,,,,,,,
Sol-3050,,,,,,,
Sol-3051,,,,,,,
Sol-3052,,,,,,,
Sol-3053,,,,,,,
Sol-3054,,,,,,,
Sol-3055,,,,,,,
Sol-3056,,,,,,,
Sol-3057,,,,,,,
Sol-3058,,,,,,,
Sol-3059,,,,,,,
Sol-3060,,,,,,,
Sol-3061,,,,,,,
Sol-3062,,,,,,,
Sol-3063,,,,,,,
Sol-3064,,,,,,,
Sol-3065,,,,,,,
Sol-3066,,,,,,,
Sol-3067,,,,,,,
Sol-3068,,,,,,,
Sol-3069,,,,,,,
Sol-3070,,,,,,,
Sol-3071,,,,,,,
Sol-3072,,,,,,,
Sol-3073,,,,,,,
Sol-3074,,,,,,,
Sol-3075,,,,,,,
Sol-3076,,,,,,,
Sol-3077,,,,,,,
Sol-3078,,,,,,,
Sol-3079,,,,,,,
Sol-3080,,,,,,,
Sol-3081,,,,,,,
Sol-3082,,,,,,,
Sol-3083,,,,,,,
Sol-3084,,,,,,,
Sol-3085,,,,,,,
Sol-3086,,,,,,,
Sol-3087,,,,,,,
Sol-3088,,,,,,,
Sol-3089,,,,,,,
Sol-3090,,,,,,,
Sol-3091,,,,,,,
Sol-3092,,,,,,,
Sol-3093,,,,,,,
Sol-3094,,,,,,,
Sol-3095,,,,,,,
Sol-3096,,,,,,,
Sol-3097,,,,,,,
Sol-3098,,,,,,,
Sol-3099,,,,,,,
Sol-3100,,,,,,,
Sol-3101,,,,,,,
Sol-3102,,,,,,,
Sol-3103,,,,,,,
Sol-3104,,,,,,,
Sol-3105,,,,,,,
Sol-3106,,,,,,,
Sol-3107,,,,,,,
Sol-3108,,,,,,,
Sol-3109,,,,,,,
Sol-3110,,,,,,,
Sol-3111,,,,,,,
Sol-3112,,,,,,,
Sol-3113,,,,,,,
Sol-3114,,,,,,,
Sol-3115,,,,,,,
Sol-3116,,,,,,,
Sol-3117,,,,,,,
Sol-3118,,,,,,,
Sol-3119,,,,,,,
Sol-3120,,,,,,,
Sol-3121,,,,,,,
Sol-3122,,,,,,,
Sol-3123,,,,,,,
Sol-3124,,,,,,,
Sol-3125,,,,,,,
Sol-3126,,,,,,,
Sol-3127,,,,,,,
Sol-3128,,,,,,,
Sol-3129,,,,,,,
Sol-3130,,,,,,,
Sol-3131,,,,,,,
Sol-3132,,,,,,,
Sol-3133,,,,,,,
Sol-3134,,,,,,,
Sol-3135,,,,,,,
Sol-3136,,,,,,,
Sol-3137,,,,,,,
Sol-3138,,,,,,,
Sol-3139,,,,,,,
Sol-3140,,,,,,,
Sol-3141,,,,,,,
Sol-3142,,,,,,,
Sol-3143,,,,,,,
Sol-3144,,,,,,,
Sol-3145,,,,,,,
Sol-3146,,,,,,,
Sol-3147,,,,,,,
Sol-3148,,,,,,,
Sol-3149,,,,,,,
Sol-3150,,,,,,,
Sol-3151,,,,,,,
Sol-3152,,,,,,,
Sol-3153,,,,,,,
Sol-3154,,,,,,,
Sol-3155,,,,,,,
Sol-3156,,,,,,,
Sol-3157,,,,,,,
Sol-3158,,,,,,,
Sol-3159,,,,,,,
Sol-3160,,,,,,,
Sol-3161,,,,,,,
Sol-3162,,,,,,,
Sol-3163,,,,,,,
Sol-3164,,,,,,,
Sol-3165,,,,,,,
Sol-3166,,,,,,,
Sol-3167,,,,,,,
Sol-3168,,,,,,,
Sol-3169,,,,,,,
Sol-3170,,,,,,,
Sol-3171,,,,,,,
Sol-3172,,,,,,,
Sol-3173,,,,,,,
Sol-3174,,,,,,,
Sol-3175,,,,,,,
Sol-3176,,,,,,,
Sol-3177,,,,,,,
Sol-3178,,,,,,,
Sol-3179,,,,,,,
Sol-3180,,,,,,,
Sol-3181,,,,,,,
Sol-3182,,,,,,,
Sol-3183,,,,,,,
Sol-3184,,,,,,,
Sol-3185,,,,,,,
Sol-3186,,,,,,,
Sol-3187,,,,,,,
Sol-3188,,,,,,,
Sol-3189,,,,,,,
Sol-3190,,,,,,,
Sol-3191,,,,,,,
Sol-3192,,,,,,,
Sol-3193,,,,,,,
Sol-3194,,,,,,,
Sol-3195,,,,,,,
Sol-3196,,,,,,,
Sol-3197,,,,,,,
Sol-3198,,,,,,,
Sol-3199,,,,,,,
Sol-3200,,,,,,,
Sol-3201,,,,,,,
Sol-3202,,,,,,,
Sol-3203,,,,,,,
Sol-3204,,,,,,,
Sol-3205,,,,,,,
Sol-3206,,,,,,,
Sol-3207,,,,,,,
Sol-3208,,,,,,,
Sol-3209,,,,,,,
Sol-3210,,,,,,,
Sol-3211,,,,,,,
Sol-3212,,,,,,,
Sol-3213,,,,,,,
Sol-3214,,,,,,,
Sol-3215,,,,,,,
Sol-3216,,,,,,,
Sol-3217,,,,,,,
Sol-3218,,,,,,,
Sol-3219,,,,,,,
Sol-3220,,,,,,,
Sol-3221,,,,,,,
Sol-3222,,,,,,,
Sol-3223,,,,,,,
Sol-3224,,,,,,,
Sol-3225,,,,,,,
Sol-3226,,,,,,,
Sol-3227,,,,,,,
Sol-3228,,,,,,,
Sol-3229,,,,,,,
Sol-3230,,,,,,,
Sol-3231,,,,,,,
Sol-3232,,,,,,,
Sol-3233,,,,,,,
Sol-3234,,,,,,,
Sol-3235,,,,,,,
Sol-3236,,,,,,,
Sol-3237,,,,,,,
Sol-3238,,,,,,,
Sol-3239,,,,,,,
Sol-3240,,,,,,,
Sol-3241,,,,,,,
Sol-3242,,,,,,,
Sol-3243,,,,,,,
Sol-3244,,,,,,,
Sol-3245,,,,,,,
Sol-3246,,,,,,,
Sol-3247,,,,,,,
Sol-3248,,,,,,,
Sol-3249,,,,,,,
Sol-3250,,,,,,,
Sol-3251,,,,,,,
Sol-3252,,,,,,,
Sol-3253,,,,,,,
Sol-3254,,,,,,,
Sol-3255,,,,,,,
Sol-3256,,,,,,,
Sol-3257,,,,,,,
Sol-3258,,,,,,,
Sol-3259,,,,,,,
Sol-3260,,,,,,,
Sol-3261,,,,,,,
Sol-3262,,,,,,,
Sol-3263,,,,,,,
Sol-3264,,,,,,,
Sol-3265,,,,,,,
Sol-3266,,,,,,,
Sol-3267,,,,,,,
Sol-3268,,,,,,,
Sol-3269,,,,,,,
Sol-3270,,,,,,,
Sol-3271,,,,,,,
Sol-3272,,,,,,,
Sol-3273,,,,,,,
Sol-3274,,,,,,,
Sol-3275,,,,,,,
Sol-3276,,,,,,,
Sol-3277,,,,,,,
Sol-3278,,,,,,,
Sol-3279,,,,,,,
Sol-3280,,,,,,,
Sol-3281,,,,,,,
Sol-3282,,,,,,,
Sol-3283,,,,,,,
Sol-3284,,,,,,,
Sol-3285,,,,,,,
Sol-3286,,,,,,,
Sol-3287,,,,,,,
Sol-3288,,,,,,,
Sol-3289,,,,,,,
Sol-3290,,,,,,,
Sol-3291,,,,,,,
Sol-3292,,,,,,,
Sol-3293,,,,,,,
Sol-3294,,,,,,,
Sol-3295,,,,,,,
Sol-3296,,,,,,,
Sol-3297,,,,,,,
Sol-3298,,,,,,,
Sol-3299,,,,,,,
Sol-3300,,,,,,,
Sol-3301,,,,,,,
Sol-3302,,,,,,,
Sol-3303,,,,,,,
Sol-3304,,,,,,,
Sol-3305,,,,,,,
Sol-3306,,,,,,,
Sol-3307,,,,,,,
Sol-3308,,,,,,,
Sol-3309,,,,,,,
Sol-3310,,,,,,,
Sol-3311,,,,,,,
Sol-3312,,,,,,,
Sol-3313,,,,,,,
Sol-3314,,,,,,,
Sol-3315,,,,,,,
Sol-3316,,,,,,,
Sol-3317,,,,,,,
Sol-3318,,,,,,,
Sol-3319,,,,,,,
Sol-3320,,,,,,,
Sol-3321,,,,,,,
Sol-3322,,,,,,,
Sol-3323,,,,,,,
Sol-3324,,,,,,,
Sol-3325,,,,,,,
Sol-3326,,,,,,,
Sol-3327,,,,,,,
Sol-3328,,,,,,,
Sol-3329,,,,,,,
Sol-3330,,,,,,,
Sol-3331,,,,,,,
Sol-3332,,,,,,,
Sol-3333,,,,,,,
Sol-3334,,,,,,,
Sol-3335,,,,,,,
Sol-3336,,,,,,,
Sol-3337,,,,,,,
Sol-3338,,,,,,,
Sol-3339,,,,,,,
Sol-3340,,,,,,,
Sol-3341,,,,,,,
Sol-3342,,,,,,,
Sol-3343,,,,,,,
Sol-3344,,,,,,,
Sol-3345,,,,,,,
Sol-3346,,,,,,,
Sol-3347,,,,,,,
Sol-3348,,,,,,,
Sol-3349,,,,,,,
Sol-3350,,,,,,,
Sol-3351,,,,,,,
Sol-3352,,,,,,,
Sol-3353,,,,,,,
Sol-3354,,,,,,,
Sol-3355,,,,,,,
Sol-3356,,,,,,,
Sol-3357,,,,,,,
Sol-3358,,,,,,,
Sol-3359,,,,,,,
Sol-3360,,,,,,,
Sol-3361,,,,,,,
Sol-3362,,,,,,,
Sol-3363,,,,,,,
Sol-3364,,,,,,,
Sol-3365,,,,,,,
Sol-3366,,,,,,,
Sol-3367,,,,,,,
Sol-3368,,,,,,,
Sol-3369,,,,,,,
Sol-3370,,,,,,,
Sol-3371,,,,,,,
Sol-3372,,,,,,,
Sol-3373,,,,,,,
Sol-3374,,,,,,,
Sol-3375,,,,,,,
Sol-3376,,,,,,,
Sol-3377,,,,,,,
Sol-3378,,,,,,,
Sol-3379,,,,,,,
Sol-3380,,,,,,,
Sol-3381,,,,,,,
Sol-3382,,,,,,,
Sol-3383,,,,,,,
Sol-3384,,,,,,,
Sol-3385,,,,,,,
Sol-3386,,,,,,,
Sol-3387,,,,,,,
Sol-3388,,,,,,,
Sol-3389,,,,,,,
Sol-3390,,,,,,,
Sol-3391,,,,,,,
Sol-3392,,,,,,,
Sol-3393,,,,,,,
Sol-3394,,,,,,,
Sol-3395,,,,,,,
Sol-3396,,,,,,,
Sol-3397,,,,,,,
Sol-3398,,,,,,,
Sol-3399,,,,,,,
Sol-3400,,,,,,,
Sol-3401,,,,,,,
Sol-3402,,,,,,,
Sol-3403,,,,,,,
Sol-3404,,,,,,,
Sol-3405,,,,,,,
Sol-3406,,,,,,,
Sol-3407,,,,,,,
Sol-3408,,,,,,,
Sol-3409,,,,,,,
Sol-3410,,,,,,,
Sol-3411,,,,,,,
Sol-3412,,,,,,,
Sol-3413,,,,,,,
Sol-3414,,,,,,,
Sol-3415,,,,,,,
Sol-3416,,,,,,,
Sol-3417,,,,,,,
Sol-3418,,,,,,,
Sol-3419,,,,,,,
Sol-3420,,,,,,,
Sol-3421,,,,,,,
Sol-3422,,,,,,,
Sol-3423,,,,,,,
Sol-3424,,,,,,,
Sol-3425,,,,,,,
Sol-3426,,,,,,,
Sol-3427,,,,,,,
Sol-3428,,,,,,,
Sol-3429,,,,,,,
Sol-3430,,,,,,,
Sol-3431,,,,,,,
Sol-3432,,,,,,,
Sol-3433,,,,,,,
Sol-3434,,,,,,,
Sol-3435,,,,,,,
Sol-3436,,,,,,,
Sol-3437,,,,,,,
Sol-3438,,,,,,,
Sol-3439,,,,,,,
Sol-3440,,,,,,,
Sol-3441,,,,,,,
Sol-3442,,,,,,,
Sol-3443,,,,,,,
Sol-3444,,,,,,,
Sol-3445,,,,,,,
Sol-3446,,,,,,,
Sol-3447,,,,,,,
Sol-3448,,,,,,,
Sol-3449,,,,,,,
Sol-3450,,,,,,,
Sol-3451,,,,,,,
Sol-3452,,,,,,,
Sol-3453,,,,,,,
Sol-3454,,,,,,,
Sol-3455,,,,,,,
Sol-3456,,,,,,,
Sol-3457,,,,,,,
Sol-3458,,,,,,,
Sol-3459,,,,,,,
Sol-3460,,,,,,,
Sol-3461,,,,,,,
Sol-3462,,,,,,,
Sol-3463,,,,,,,
Sol-3464,,,,,,,
Sol-3465,,,,,,,
Sol-3466,,,,,,,
Sol-3467,,,,,,,
Sol-3468,,,,,,,
Sol-3469,,,,,,,
Sol-3470,,,,,,,
Sol-3471,,,,,,,
Sol-3472,,,,,,,
Sol-3473,,,,,,,
Sol-3474,,,,,,,
Sol-3475,,,,,,,
Sol-3476,,,,,,,
Sol-3477,,,,,,,
Sol-3478,,,,,,,
Sol-3479,,,,,,,
Sol-3480,,,,,,,
Sol-3481,,,,,,,
Sol-3482,,,,,,,
Sol-3483,,,,,,,
Sol-3484,,,,,,,
Sol-3485,,,,,,,
Sol-3486,,,,,,,
Sol-3487,,,,,,,
Sol-3488,,,,,,,
Sol-3489,,,,,,,
Sol-3490,,,,,,,
Sol-3491,,,,,,,
Sol-3492,,,,,,,
Sol-3493,,,,,,,
Sol-3494,,,,,,,
Sol-3495,,,,,,,
Sol-3496,,,,,,,
Sol-3497,,,,,,,
Sol-3498,,,,,,,
Sol-3499,,,,,,,
Sol-3500,,,,,,,
Sol-3501,,,,,,,
Sol-3502,,,,,,,
Sol-3503,,,,,,,
Sol-3504,,,,,,,
Sol-3505,,,,,,,
Sol-3506,,,,,,,
Sol-3507,,,,,,,
Sol-3508,,,,,,,
Sol-3509,,,,,,,
Sol-3510,,,,,,,
Sol-3511,,,,,,,
Sol-3512,,,,,,,
Sol-3513,,,,,,,
Sol-3514,,,,,,,
Sol-3515,,,,,,,
Sol-3516,,,,,,,
Sol-3517,,,,,,,
Sol-3518,,,,,,,
Sol-3519,,,,,,,
Sol-3520,,,,,,,
Sol-3521,,,,,,,
Sol-3522,,,,,,,
Sol-3523,,,,,,,
Sol-3524,,,,,,,
Sol-3525,,,,,,,
Sol-3526,,,,,,,
Sol-3527,,,,,,,
Sol-3528,,,,,,,
Sol-3529,,,,,,,
Sol-3530,,,,,,,
Sol-3531,,,,,,,
Sol-3532,,,,,,,
Sol-3533,,,,,,,
Sol-3534,,,,,,,
Sol-3535,,,,,,,
Sol-3536,,,,,,,
Sol-3537,,,,,,,
Sol-3538,,,,,,,
Sol-3539,,,,,,,
Sol-3540,,,,,,,
Sol-3541,,,,,,,
Sol-3542,,,,,,,
Sol-3543,,,,,,,
Sol-3544,,,,,,,
Sol-3545,,,,,,,
Sol-3546,,,,,,,
Sol-3547,,,,,,,
Sol-3548,,,,,,,
Sol-3549,,,,,,,
Sol-3550,,,,,,,
Sol-3551,,,,,,,
Sol-3552,,,,,,,
Sol-3553,,,,,,,
Sol-3554,,,,,,,
Sol-3555,,,,,,,
Sol-3556,,,,,,,
Sol-3557,,,,,,,
Sol-3558,,,,,,,
Sol-3559,,,,,,,
Sol-3560,,,,,,,
Sol-3561,,,,,,,
Sol-3562,,,,,,,
Sol-3563,,,,,,,
Sol-3564,,,,,,,
Sol-3565,,,,,,,
Sol-3566,,,,,,,
Sol-3567,,,,,,,
Sol-3568,,,,,,,
Sol-3569,,,,,,,
Sol-3570,,,,,,,
Sol-3571,,,,,,,
Sol-3572,,,,,,,
Sol-3573,,,,,,,
Sol-3574,,,,,,,
Sol-3575,,,,,,,
Sol-3576,,,,,,,
Sol-3577,,,,,,,
Sol-3578,,,,,,,
Sol-3579,,,,,,,
Sol-3580,,,,,,,
Sol-3581,,,,,,,
Sol-3582,,,,,,,
Sol-3583,,,,,,,
Sol-3584,,,,,,,
Sol-3585,,,,,,,
Sol-3586,,,,,,,
Sol-3587,,,,,,,
Sol-3588,,,,,,,
Sol-3589,,,,,,,
Sol-3590,,,,,,,
Sol-3591,,,,,,,
Sol-3592,,,,,,,
Sol-3593,,,,,,,
Sol-3594,,,,,,,
Sol-3595,,,,,,,
Sol-3596,,,,,,,
Sol-3597,,,,,,,
Sol-3598,,,,,,,
Sol-3599,,,,,,,
Sol-3600,,,,,,,
Sol-3601,,,,,,,
Sol-3602,,,,,,,
Sol-3603,,,,,,,
Sol-3604,,,,,,,
Sol-3605,,,,,,,
Sol-3606,,,,,,,
Sol-3607,,,,,,,
Sol-3608,,,,,,,
Sol-3609,,,,,,,
Sol-3610,,,,,,,
Sol-3611,,,,,,,
Sol-3612,,,,,,,
Sol-3613,,,,,,,
Sol-3614,,,,,,,
Sol-3615,,,,,,,
Sol-3616,,,,,,,
Sol-3617,,,,,,,
Sol-3618,,,,,,,
Sol-3619,,,,,,,
Sol-3620,,,,,,,
Sol-3621,,,,,,,
Sol-3622,,,,,,,
Sol-3623,,,,,,,
Sol-3624,,,,,,,
Sol-3625,,,,,,,
Sol-3626,,,,,,,
Sol-3627,,,,,,,
Sol-3628,,,,,,,
Sol-3629,,,,,,,
Sol-3630,,,,,,,
Sol-3631,,,,,,,
Sol-3632,,,,,,,
Sol-3633,,,,,,,
Sol-3634,,,,,,,
Sol-3635,,,,,,,
Sol-3636,,,,,,,
Sol-3637,,,,,,,
Sol-3638,,,,,,,
Sol-3639,,,,,,,
Sol-3640,,,,,,,
Sol-3641,,,,,,,
Sol-3642,,,,,,,
Sol-3643,,,,,,,
Sol-3644,,,,,,,
Sol-3645,,,,,,,
Sol-3646,,,,,,,
Sol-3647,,,,,,,
Sol-3648,,,,,,,
Sol-3649,,,,,,,
Sol-3650,,,,,,,
Sol-3651,,,,,,,
Sol-3652,,,,,,,
Sol-3653,,,,,,,
Sol-3654,,,,,,,
Sol-3655,,,,,,,
Sol-3656,,,,,,,
Sol-3657,,,,,,,
Sol-3658,,,,,,,
Sol-3659,,,,,,,
Sol-3660,,,,,,,
Sol-3661,,,,,,,
Sol-3662,,,,,,,
Sol-3663,,,,,,,
Sol-3664,,,,,,,
Sol-3665,,,,,,,
Sol-3666,,,,,,,
Sol-3667,,,,,,,
Sol-3668,,,,,,,
Sol-3669,,,,,,,
Sol-3670,,,,,,,
Sol-3671,,,,,,,
Sol-3672,,,,,,,
Sol-3673,,,,,,,
Sol-3674,,,,,,,
Sol-3675,,,,,,,
Sol-3676,,,,,,,
Sol-3677,,,,,,,
Sol-3678,,,,,,,
Sol-3679,,,,,,,
Sol-3680,,,,,,,
Sol-3681,,,,,,,
Sol-3682,,,,,,,
Sol-3683,,,,,,,
Sol-3684,,,,,,,
Sol-3685,,,,,,,
Sol-3686,,,,,,,
Sol-3687,,,,,,,
Sol-3688,,,,,,,
Sol-3689,,,,,,,
Sol-3690,,,,,,,
Sol-3691,,,,,,,
Sol-3692,,,,,,,
Sol-3693,,,,,,,
Sol-3694,,,,,,,
Sol-3695,,,,,,,
Sol-3696,,,,,,,
Sol-3697,,,,,,,
Sol-3698,,,,,,,
Sol-3699,,,,,,,
Sol-3700,,,,,,,
Sol-3701,,,,,,,
Sol-3702,,,,,,,
Sol-3703,,,,,,,
Sol-3704,,,,,,,
Sol-3705,,,,,,,
Sol-3706,,,,,,,
Sol-3707,,,,,,,
Sol-3708,,,,,,,
Sol-3709,,,,,,,
Sol-3710,,,,,,,
Sol-3711,,,,,,,
Sol-3712,,,,,,,
Sol-3713,,,,,,,
Sol-3714,,,,,,,
Sol-3715,,,,,,,
Sol-3716,,,,,,,
Sol-3717,,,,,,,
Sol-3718,,,,,,,
Sol-3719,,,,,,,
Sol-3720,,,,,,,
Sol-3721,,,,,,,
Sol-3722,,,,,,,
Sol-3723,,,,,,,
Sol-3724,,,,,,,
Sol-3725,,,,,,,
Sol-3726,,,,,,,
Sol-3727,,,,,,,
Sol-3728,,,,,,,
Sol-3729,,,,,,,
Sol-3730,,,,,,,
Sol-3731,,,,,,,
Sol-3732,,,,,,,
Sol-3733,,,,,,,
Sol-3734,,,,,,,
Sol-3735,,,,,,,
Sol-3736,,,,,,,
Sol-3737,,,,,,,
Sol-3738,,,,,,,
Sol-3739,,,,,,,
Sol-3740,,,,,,,
Sol-3741,,,,,,,
Sol-3742,,,,,,,
Sol-3743,,,,,,,
Sol-3744,,,,,,,
Sol-3745,,,,,,,
Sol-3746,,,,,,,
Sol-3747,,,,,,,
Sol-3748,,,,,,,
Sol-3749,,,,,,,
Sol-3750,,,,,,,
Sol-3751,,,,,,,
Sol-3752,,,,,,,
Sol-3753,,,,,,,
Sol-3754,,,,,,,
Sol-3755,,,,,,,
Sol-3756,,,,,,,
Sol-3757,,,,,,,
Sol-3758,,,,,,,
Sol-3759,,,,,,,
Sol-3760,,,,,,,
Sol-3761,,,,,,,
Sol-3762,,,,,,,
Sol-3763,,,,,,,
Sol-3764,,,,,,,
Sol-3765,,,,,,,
Sol-3766,,,,,,,
Sol-3767,,,,,,,
Sol-3768,,,,,,,
Sol-3769,,,,,,,
Sol-3770,,,,,,,
Sol-3771,,,,,,,
Sol-3772,,,,,,,
Sol-3773,,,,,,,
Sol-3774,,,,,,,
Sol-3775,,,,,,,
Sol-3776,,,,,,,
Sol-3777,,,,,,,
Sol-3778,,,,,,,
Sol-3779,,,,,,,
Sol-3780,,,,,,,
Sol-3781,,,,,,,
Sol-3782,,,,,,,
Sol-3783,,,,,,,
Sol-3784,,,,,,,
Sol-3785,,,,,,,
Sol-3786,,,,,,,
Sol-3787,,,,,,,
Sol-3788,,,,,,,
Sol-3789,,,,,,,
Sol-3790,,,,,,,
Sol-3791,,,,,,,
Sol-3792,,,,,,,
Sol-3793,,,,,,,
Sol-3794,,,,,,,
Sol-3795,,,,,,,
Sol-3796,,,,,,,
Sol-3797,,,,,,,
Sol-3798,,,,,,,
Sol-3799,,,,,,,
Sol-3800,,,,,,,
Sol-3801,,,,,,,
Sol-3802,,,,,,,
Sol-3803,,,,,,,
Sol-3804,,,,,,,
Sol-3805,,,,,,,
Sol-3806,,,,,,,
Sol-3807,,,,,,,
Sol-3808,,,,,,,
Sol-3809,,,,,,,
Sol-3810,,,,,,,
Sol-3811,,,,,,,
Sol-3812,,,,,,,
Sol-3813,,,,,,,
Sol-3814,,,,,,,
Sol-3815,,,,,,,
Sol-3816,,,,,,,
Sol-3817,,,,,,,
Sol-3818,,,,,,,
Sol-3819,,,,,,,
Sol-3820,,,,,,,
Sol-3821,,,,,,,
Sol-3822,,,,,,,
Sol-3823,,,,,,,
Sol-3824,,,,,,,
Sol-3825,,,,,,,
Sol-3826,,,,,,,
Sol-3827,,,,,,,
Sol-3828,,,,,,,
Sol-3829,,,,,,,
Sol-3830,,,,,,,
Sol-3831,,,,,,,
Sol-3832,,,,,,,
Sol-3833,,,,,,,
Sol-3834,,,,,,,
Sol-3835,,,,,,,
Sol-3836,,,,,,,
Sol-3837,,,,,,,
Sol-3838,,,,,,,
Sol-3839,,,,,,,
Sol-3840,,,,,,,
Sol-3841,,,,,,,
Sol-3842,,,,,,,
Sol-3843,,,,,,,
Sol-3844,,,,,,,
Sol-3845,,,,,,,
Sol-3846,,,,,,,
Sol-3847,,,,,,,
Sol-3848,,,,,,,
Sol-3849,,,,,,,
Sol-3850,,,,,,,
Sol-3851,,,,,,,
Sol-3852,,,,,,,
Sol-3853,,,,,,,
Sol-3854,,,,,,,
Sol-3855,,,,,,,
Sol-3856,,,,,,,
Sol-3857,,,,,,,
Sol-3858,,,,,,,
Sol-3859,,,,,,,
Sol-3860,,,,,,,
Sol-3861,,,,,,,
Sol-3862,,,,,,,
Sol-3863,,,,,,,
Sol-3864,,,,,,,
Sol-3865,,,,,,,
Sol-3866,,,,,,,
Sol-3867,,,,,,,
Sol-3868,,,,,,,
Sol-3869,,,,,,,
Sol-3870,,,,,,,
Sol-3871,,,,,,,
Sol-3872,,,,,,,
Sol-3873,,,,,,,
Sol-3874,,,,,,,
Sol-3875,,,,,,,
Sol-3876,,,,,,,
Sol-3877,,,,,,,
Sol-3878,,,,,,,
Sol-3879,,,,,,,
Sol-3880,,,,,,,
Sol-3881,,,,,,,
Sol-3882,,,,,,,
Sol-3883,,,,,,,
Sol-3884,,,,,,,
Sol-3885,,,,,,,
Sol-3886,,,,,,,
Sol-3887,,,,,,,
Sol-3888,,,,,,,
Sol-3889,,,,,,,
Sol-3890,,,,,,,
Sol-3891,,,,,,,
Sol-3892,,,,,,,
Sol-3893,,,,,,,
Sol-3894,,,,,,,
Sol-3895,,,,,,,
Sol-3896,,,,,,,
Sol-3897,,,,,,,
Sol-3898,,,,,,,
Sol-3899,,,,,,,
Sol-3900,,,,,,,
Sol-3901,,,,,,,
Sol-3902,,,,,,,
Sol-3903,,,,,,,
Sol-3904,,,,,,,
Sol-3905,,,,,,,
Sol-3906,,,,,,,
Sol-3907,,,,,,,
Sol-3908,,,,,,,
Sol-3909,,,,,,,
Sol-3910,,,,,,,
Sol-3911,,,,,,,
Sol-3912,,,,,,,
Sol-3913,,,,,,,
Sol-3914,,,,,,,
Sol-3915,,,,,,,
Sol-3916,,,,,,,
Sol-3917,,,,,,,
Sol-3918,,,,,,,
Sol-3919,,,,,,,
Sol-3920,,,,,,,
Sol-3921,,,,,,,
Sol-3922,,,,,,,
Sol-3923,,,,,,,
Sol-3924,,,,,,,
Sol-3925,,,,,,,
Sol-3926,,,,,,,
Sol-3927,,,,,,,
Sol-3928,,,,,,,
Sol-3929,,,,,,,
Sol-3930,,,,,,,
Sol-3931,,,,,,,
Sol-3932,,,,,,,
Sol-3933,,,,,,,
Sol-3934,,,,,,,
Sol-3935,,,,,,,
Sol-3936,,,,,,,
Sol-3937,,,,,,,
Sol-3938,,,,,,,
Sol-3939,,,,,,,
Sol-3940,,,,,,,
Sol-3941,,,,,,,
Sol-3942,,,,,,,
Sol-3943,,,,,,,
Sol-3944,,,,,,,
Sol-3945,,,,,,,
Sol-3946,,,,,,,
Sol-3947,,,,,,,
Sol-3948,,,,,,,
Sol-3949,,,,,,,
Sol-3950,,,,,,,
Sol-3951,,,,,,,
Sol-3952,,,,,,,
Sol-3953,,,,,,,
Sol-3954,,,,,,,
Sol-3955,,,,,,,
Sol-3956,,,,,,,
Sol-3957,,,,,,,
Sol-3958,,,,,,,
Sol-3959,,,,,,,
Sol-3960,,,,,,,
Sol-3961,,,,,,,
Sol-3962,,,,,,,
Sol-3963,,,,,,,
Sol-3964,,,,,,,
Sol-3965,,,,,,,
Sol-3966,,,,,,,
Sol-3967,,,,,,,
Sol-3968,,,,,,,
Sol-3969,,,,,,,
Sol-3970,,,,,,,
Sol-3971,,,,,,,
Sol-3972,,,,,,,
Sol-3973,,,,,,,
Sol-3974,,,,,,,
Sol-3975,,,,,,,
Sol-3976,,,,,,,
Sol-3977,,,,,,,
Sol-3978,,,,,,,
Sol-3979,,,,,,,
Sol-3980,,,,,,,
Sol-3981,,,,,,,
Sol-3982,,,,,,,
Sol-3983,,,,,,,
Sol-3984,,,,,,,
Sol-3985,,,,,,,
Sol-3986,,,,,,,
Sol-3987,,,,,,,
Sol-3988,,,,,,,
Sol-3989,,,,,,,
Sol-3990,,,,,,,
Sol-3991,,,,,,,
Sol-3992,,,,,,,
Sol-3993,,,,,,,
Sol-3994,,,,,,,
Sol-3995,,,,,,,
Sol-3996,,,,,,,
Sol-3997,,,,,,,
Sol-3998,,,,,,,
Sol-3999,,,,,,,
Sol-4000,,,,,,,
Sol-4001,,,,,,,
Sol-4002,,,,,,,
Sol-4003,,,,,,,
Sol-4004,,,,,,,
Sol-4005,,,,,,,
Sol-4006,,,,,,,
Sol-4007,,,,,,,
Sol-4008,,,,,,,
Sol-4009,,,,,,,
Sol-4010,,,,,,,
Sol-4011,,,,,,,
Sol-4012,,,,,,,
Sol-4013,,,,,,,
Sol-4014,,,,,,,
Sol-4015,,,,,,,
Sol-4016,,,,,,,
Sol-4017,,,,,,,
Sol-4018,,,,,,,
Sol-4019,,,,,,,
Sol-4020,,,,,,,
Sol-4021,,,,,,,
Sol-4022,,,,,,,
Sol-4023,,,,,,,
Sol-4024,,,,,,,
Sol-4025,,,,,,,
Sol-4026,,,,,,,
Sol-4027,,,,,,,
Sol-4028,,,,,,,
Sol-4029,,,,,,,
Sol-4030,,,,,,,
Sol-4031,,,,,,,
Sol-4032,,,,,,,
Sol-4033,,,,,,,
Sol-4034,,,,,,,
Sol-4035,,,,,,,
Sol-4036,,,,,,,
Sol-4037,,,,,,,
Sol-4038,,,,,,,
Sol-4039,,,,,,,
Sol-4040,,,,,,,
Sol-4041,,,,,,,
Sol-4042,,,,,,,
Sol-4043,,,,,,,
Sol-4044,,,,,,,
Sol-4045,,,,,,,
Sol-4046,,,,,,,
Sol-4047,,,,,,,
Sol-4048,,,,,,,
Sol-4049,,,,,,,
Sol-4050,,,,,,,
Sol-4051,,,,,,,
Sol-4052,,,,,,,
Sol-4053,,,,,,,
Sol-4054,,,,,,,
Sol-4055,,,,,,,
Sol-4056,,,,,,,
Sol-4057,,,,,,,
Sol-4058,,,,,,,
Sol-4059,,,,,,,
Sol-4060,,,,,,,
Sol-4061,,,,,,,
Sol-4062,,,,,,,
Sol-4063,,,,,,,
Sol-4064,,,,,,,
Sol-4065,,,,,,,
Sol-4066,,,,,,,
Sol-4067,,,,,,,
Sol-4068,,,,,,,
Sol-4069,,,,,,,
Sol-4070,,,,,,,
Sol-4071,,,,,,,
Sol-4072,,,,,,,
Sol-4073,,,,,,,
Sol-4074,,,,,,,
Sol-4075,,,,,,,
Sol-4076,,,,,,,
Sol-4077,,,,,,,
Sol-4078,,,,,,,
Sol-4079,,,,,,,
Sol-4080,,,,,,,
Sol-4081,,,,,,,
Sol-4082,,,,,,,
Sol-4083,,,,,,,
Sol-4084,,,,,,,
Sol-4085,,,,,,,
Sol-4086,,,,,,,
Sol-4087,,,,,,,
Sol-4088,,,,,,,
Sol-4089,,,,,,,
Sol-4090,,,,,,,
Sol-4091,,,,,,,
Sol-4092,,,,,,,
Sol-4093,,,,,,,
Sol-4094,,,,,,,
Sol-4095,,,,,,,
Sol-4096,,,,,,,
Sol-4097,,,,,,,
Sol-4098,,,,,,,
Sol-4099,,,,,,,
Sol-4100,,,,,,,
Sol-4101,,,,,,,
Sol-4102,,,,,,,
Sol-4103,,,,,,,
Sol-4104,,,,,,,
Sol-4105,,,,,,,
Sol-4106,,,,,,,
Sol-4107,,,,,,,
Sol-4108,,,,,,,
Sol-4109,,,,,,,
Sol-4110,,,,,,,
Sol-4111,,,,,,,
Sol-4112,,,,,,,
Sol-4113,,,,,,,
Sol-4114,,,,,,,
Sol-4115,,,,,,,
Sol-4116,,,,,,,
Sol-4117,,,,,,,
Sol-4118,,,,,,,
Sol-4119,,,,,,,
Sol-4120,,,,,,,
Sol-4121,,,,,,,
Sol-4122,,,,,,,
Sol-4123,,,,,,,
Sol-4124,,,,,,,
Sol-4125,,,,,,,
Sol-4126,,,,,,,
Sol-4127,,,,,,,
Sol-4128,,,,,,,
Sol-4129,,,,,,,
Sol-4130,,,,,,,
Sol-4131,,,,,,,
Sol-4132,,,,,,,
Sol-4133,,,,,,,
Sol-4134,,,,,,,
Sol-4135,,,,,,,
Sol-4136,,,,,,,
Sol-4137,,,,,,,
Sol-4138,,,,,,,
Sol-4139,,,,,,,
Sol-4140,,,,,,,
Sol-4141,,,,,,,
Sol-4142,,,,,,,
Sol-4143,,,,,,,
Sol-4144,,,,,,,
Sol-4145,,,,,,,
Sol-4146,,,,,,,
Sol-4147,,,,,,,
Sol-4148,,,,,,,
Sol-4149,,,,,,,
Sol-4150,,,,,,,
Sol-4151,,,,,,,
Sol-4152,,,,,,,
Sol-4153,,,,,,,
Sol-4154,,,,,,,
Sol-4155,,,,,,,
Sol-4156,,,,,,,
Sol-4157,,,,,,,
Sol-4158,,,,,,,
Sol-4159,,,,,,,
Sol-4160,,,,,,,
Sol-4161,,,,,,,
Sol-4162,,,,,,,
Sol-4163,,,,,,,
Sol-4164,,,,,,,
Sol-4165,,,,,,,
Sol-4166,,,,,,,
Sol-4167,,,,,,,
Sol-4168,,,,,,,
Sol-4169,,,,,,,
Sol-4170,,,,,,,
Sol-4171,,,,,,,
Sol-4172,,,,,,,
Sol-4173,,,,,,,
Sol-4174,,,,,,,
Sol-4175,,,,,,,
Sol-4176,,,,,,,
Sol-4177,,,,,,,
Sol-4178,,,,,,,
Sol-4179,,,,,,,
Sol-4180,,,,,,,
Sol-4181,,,,,,,
Sol-4182,,,,,,,
Sol-4183,,,,,,,
Sol-4184,,,,,,,
Sol-4185,,,,,,,
Sol-4186,,,,,,,
Sol-4187,,,,,,,
Sol-4188,,,,,,,
Sol-4189,,,,,,,
Sol-4190,,,,,,,
Sol-4191,,,,,,,
Sol-4192,,,,,,,
Sol-4193,,,,,,,
Sol-4194,,,,,,,
Sol-4195,,,,,,,
Sol-4196,,,,,,,
Sol-4197,,,,,,,
Sol-4198,,,,,,,
Sol-4199,,,,,,,
Sol-4200,,,,,,,
Sol-4201,,,,,,,
Sol-4202,,,,,,,
Sol-4203,,,,,,,
Sol-4204,,,,,,,
Sol-4205,,,,,,,
Sol-4206,,,,,,,
Sol-4207,,,,,,,
Sol-4208,,,,,,,
Sol-4209,,,,,,,
Sol-4210,,,,,,,
Sol-4211,,,,,,,
Sol-4212,,,,,,,
Sol-4213,,,,,,,
Sol-4214,,,,,,,
Sol-4215,,,,,,,
Sol-4216,,,,,,,
Sol-4217,,,,,,,
Sol-4218,,,,,,,
Sol-4219,,,,,,,
Sol-4220,,,,,,,
Sol-4221,,,,,,,
Sol-4222,,,,,,,
Sol-4223,,,,,,,
Sol-4224,,,,,,,
Sol-4225,,,,,,,
Sol-4226,,,,,,,
Sol-4227,,,,,,,
Sol-4228,,,,,,,
Sol-4229,,,,,,,
Sol-4230,,,,,,,
Sol-4231,,,,,,,
Sol-4232,,,,,,,
Sol-4233,,,,,,,
Sol-4234,,,,,,,
Sol-4235,,,,,,,
Sol-4236,,,,,,,
Sol-4237,,,,,,,
Sol-4238,,,,,,,
Sol-4239,,,,,,,
Sol-4240,,,,,,,
Sol-4241,,,,,,,
Sol-4242,,,,,,,
Sol-4243,,,,,,,
Sol-4244,,,,,,,
Sol-4245,,,,,,,
Sol-4246,,,,,,,
Sol-4247,,,,,,,
Sol-4248,,,,,,,
Sol-4249,,,,,,,
Sol-4250,,,,,,,
Sol-4251,,,,,,,
Sol-4252,,,,,,,
Sol-4253,,,,,,,
Sol-4254,,,,,,,
Sol-4255,,,,,,,
Sol-4256,,,,,,,
Sol-4257,,,,,,,
Sol-4258,,,,,,,
Sol-4259,,,,,,,
Sol-4260,,,,,,,
Sol-4261,,,,,,,
Sol-4262,,,,,,,
Sol-4263,,,,,,,
Sol-4264,,,,,,,
Sol-4265,,,,,,,
Sol-4266,,,,,,,
Sol-4267,,,,,,,
Sol-4268,,,,,,,
Sol-4269,,,,,,,
Sol-4270,,,,,,,
Sol-4271,,,,,,,
Sol-4272,,,,,,,
Sol-4273,,,,,,,
Sol-4274,,,,,,,
Sol-4275,,,,,,,
Sol-4276,,,,,,,
Sol-4277,,,,,,,
Sol-4278,,,,,,,
Sol-4279,,,,,,,
Sol-4280,,,,,,,
Sol-4281,,,,,,,
Sol-4282,,,,,,,
Sol-4283,,,,,,,
Sol-4284,,,,,,,
Sol-4285,,,,,,,
Sol-4286,,,,,,,
Sol-4287,,,,,,,
Sol-4288,,,,,,,
Sol-4289,,,,,,,
Sol-4290,,,,,,,
Sol-4291,,,,,,,
Sol-4292,,,,,,,
Sol-4293,,,,,,,
Sol-4294,,,,,,,
Sol-4295,,,,,,,
Sol-4296,,,,,,,
Sol-4297,,,,,,,
Sol-4298,,,,,,,
Sol-4299,,,,,,,
Sol-4300,,,,,,,
Sol-4301,,,,,,,
Sol-4302,,,,,,,
Sol-4303,,,,,,,
Sol-4304,,,,,,,
Sol-4305,,,,,,,
Sol-4306,,,,,,,
Sol-4307,,,,,,,
Sol-4308,,,,,,,
Sol-4309,,,,,,,
Sol-4310,,,,,,,
Sol-4311,,,,,,,
Sol-4312,,,,,,,
Sol-4313,,,,,,,
Sol-4314,,,,,,,
Sol-4315,,,,,,,
Sol-4316,,,,,,,
Sol-4317,,,,,,,
Sol-4318,,,,,,,
Sol-4319,,,,,,,
Sol-4320,,,,,,,
Sol-4321,,,,,,,
Sol-4322,,,,,,,
Sol-4323,,,,,,,
Sol-4324,,,,,,,
Sol-4325,,,,,,,
Sol-4326,,,,,,,
Sol-4327,,,,,,,
Sol-4328,,,,,,,
Sol-4329,,,,,,,
Sol-4330,,,,,,,
Sol-4331,,,,,,,
Sol-4332,,,,,,,
Sol-4333,,,,,,,
Sol-4334,,,,,,,
Sol-4335,,,,,,,
Sol-4336,,,,,,,
Sol-4337,,,,,,,
Sol-4338,,,,,,,
Sol-4339,,,,,,,
Sol-4340,,,,,,,
Sol-4341,,,,,,,
Sol-4342,,,,,,,
Sol-4343,,,,,,,
Sol-4344,,,,,,,
Sol-4345,,,,,,,
Sol-4346,,,,,,,
Sol-4347,,,,,,,
Sol-4348,,,,,,,
Sol-4349,,,,,,,
Sol-4350,,,,,,,
Sol-4351,,,,,,,
Sol-4352,,,,,,,
Sol-4353,,,,,,,
Sol-4354,,,,,,,
Sol-4355,,,,,,,
Sol-4356,,,,,,,
Sol-4357,,,,,,,
Sol-4358,,,,,,,
Sol-4359,,,,,,,
Sol-4360,,,,,,,
Sol-4361,,,,,,,
Sol-4362,,,,,,,
Sol-4363,,,,,,,
Sol-4364,,,,,,,
Sol-4365,,,,,,,
Sol-4366,,,,,,,
Sol-4367,,,,,,,
Sol-4368,,,,,,,
Sol-4369,,,,,,,
Sol-4370,,,,,,,
Sol-4371,,,,,,,
Sol-4372,,,,,,,
Sol-4373,,,,,,,
Sol-4374,,,,,,,
Sol-4375,,,,,,,
Sol-4376,,,,,,,
Sol-4377,,,,,,,
Sol-4378,,,,,,,
Sol-4379,,,,,,,
Sol-4380,,,,,,,
Sol-4381,,,,,,,
Sol-4382,,,,,,,
Sol-4383,,,,,,,
Sol-4384,,,,,,,
Sol-4385,,,,,,,
Sol-4386,,,,,,,
Sol-4387,,,,,,,
Sol-4388,,,,,,,
Sol-4389,,,,,,,
Sol-4390,,,,,,,
Sol-4391,,,,,,,
Sol-4392,,,,,,,
Sol-4393,,,,,,,
Sol-4394,,,,,,,
Sol-4395,,,,,,,
Sol-4396,,,,,,,
Sol-4397,,,,,,,
Sol-4398,,,,,,,
Sol-4399,,,,,,,
Sol-4400,,,,,,,
Sol-4401,,,,,,,
Sol-4402,,,,,,,
Sol-4403,,,,,,,
Sol-4404,,,,,,,
Sol-4405,,,,,,,
Sol-4406,,,,,,,
Sol-4407,,,,,,,
Sol-4408,,,,,,,
Sol-4409,,,,,,,
Sol-4410,,,,,,,
Sol-4411,,,,,,,
Sol-4412,,,,,,,
Sol-4413,,,,,,,
Sol-4414,,,,,,,
Sol-4415,,,,,,,
Sol-4416,,,,,,,
Sol-4417,,,,,,,
Sol-4418,,,,,,,
Sol-4419,,,,,,,
Sol-4420,,,,,,,
Sol-4421,,,,,,,
Sol-4422,,,,,,,
Sol-4423,,,,,,,
Sol-4424,,,,,,,
Sol-4425,,,,,,,
Sol-4426,,,,,,,
Sol-4427,,,,,,,
Sol-4428,,,,,,,
Sol-4429,,,,,,,
Sol-4430,,,,,,,
Sol-4431,,,,,,,
Sol-4432,,,,,,,
Sol-4433,,,,,,,
Sol-4434,,,,,,,
Sol-4435,,,,,,,
Sol-4436,,,,,,,
Sol-4437,,,,,,,
Sol-4438,,,,,,,
Sol-4439,,,,,,,
Sol-4440,,,,,,,
Sol-4441,,,,,,,
Sol-4442,,,,,,,
Sol-4443,,,,,,,
Sol-4444,,,,,,,
Sol-4445,,,,,,,
Sol-4446,,,,,,,
Sol-4447,,,,,,,
Sol-4448,,,,,,,
Sol-4449,,,,,,,
Sol-4450,,,,,,,
Sol-4451,,,,,,,
Sol-4452,,,,,,,
Sol-4453,,,,,,,
Sol-4454,,,,,,,
Sol-4455,,,,,,,
Sol-4456,,,,,,,
Sol-4457,,,,,,,
Sol-4458,,,,,,,
Sol-4459,,,,,,,
Sol-4460,,,,,,,
Sol-4461,,,,,,,
Sol-4462,,,,,,,
Sol-4463,,,,,,,
Sol-4464,,,,,,,
Sol-4465,,,,,,,
Sol-4466,,,,,,,
Sol-4467,,,,,,,
Sol-4468,,,,,,,
Sol-4469,,,,,,,
Sol-4470,,,,,,,
Sol-4471,,,,,,,
Sol-4472,,,,,,,
Sol-4473,,,,,,,
Sol-4474,,,,,,,
Sol-4475,,,,,,,
Sol-4476,,,,,,,
Sol-4477,,,,,,,
Sol-4478,,,,,,,
Sol-4479,,,,,,,
Sol-4480,,,,,,,
Sol-4481,,,,,,,
Sol-4482,,,,,,,
Sol-4483,,,,,,,
Sol-4484,,,,,,,
Sol-4485,,,,,,,
Sol-4486,,,,,,,
Sol-4487,,,,,,,
Sol-4488,,,,,,,
Sol-4489,,,,,,,
Sol-4490,,,,,,,
Sol-4491,,,,,,,
Sol-4492,,,,,,,
Sol-4493,,,,,,,
Sol-4494,,,,,,,
Sol-4495,,,,,,,
Sol-4496,,,,,,,
Sol-4497,,,,,,,
Sol-4498,,,,,,,
Sol-4499,,,,,,,
Sol-4500,,,,,,,
Sol-4501,,,,,,,
Sol-4502,,,,,,,
Sol-4503,,,,,,,
Sol-4504,,,,,,,
Sol-4505,,,,,,,
Sol-4506,,,,,,,
Sol-4507,,,,,,,
Sol-4508,,,,,,,
Sol-4509,,,,,,,
Sol-4510,,,,,,,
Sol-4511,,,,,,,
Sol-4512,,,,,,,
Sol-4513,,,,,,,
Sol-4514,,,,,,,
Sol-4515,,,,,,,
Sol-4516,,,,,,,
Sol-4517,,,,,,,
Sol-4518,,,,,,,
Sol-4519,,,,,,,
Sol-4520,,,,,,,
Sol-4521,,,,,,,
Sol-4522,,,,,,,
Sol-4523,,,,,,,
Sol-4524,,,,,,,
Sol-4525,,,,,,,
Sol-4526,,,,,,,
Sol-4527,,,,,,,
Sol-4528,,,,,,,
Sol-4529,,,,,,,
Sol-4530,,,,,,,
Sol-4531,,,,,,,
Sol-4532,,,,,,,
Sol-4533,,,,,,,
Sol-4534,,,,,,,
Sol-4535,,,,,,,
Sol-4536,,,,,,,
Sol-4537,,,,,,,
Sol-4538,,,,,,,
Sol-4539,,,,,,,
Sol-4540,,,,,,,
Sol-4541,,,,,,,
Sol-4542,,,,,,,
Sol-4543,,,,,,,
Sol-4544,,,,,,,
Sol-4545,,,,,,,
Sol-4546,,,,,,,
Sol-4547,,,,,,,
Sol-4548,,,,,,,
Sol-4549,,,,,,,
Sol-4550,,,,,,,
Sol-4551,,,,,,,
Sol-4552,,,,,,,
Sol-4553,,,,,,,
Sol-4554,,,,,,,
Sol-4555,,,,,,,
Sol-4556,,,,,,,
Sol-4557,,,,,,,
Sol-4558,,,,,,,
Sol-4559,,,,,,,
Sol-4560,,,,,,,
Sol-4561,,,,,,,
Sol-4562,,,,,,,
Sol-4563,,,,,,,
Sol-4564,,,,,,,
Sol-4565,,,,,,,
Sol-4566,,,,,,,
Sol-4567,,,,,,,
Sol-4568,,,,,,,
Sol-4569,,,,,,,
Sol-4570,,,,,,,
Sol-4571,,,,,,,
Sol-4572,,,,,,,
Sol-4573,,,,,,,
Sol-4574,,,,,,,
Sol-4575,,,,,,,
Sol-4576,,,,,,,
Sol-4577,,,,,,,
Sol-4578,,,,,,,
Sol-4579,,,,,,,
Sol-4580,,,,,,,
Sol-4581,,,,,,,
Sol-4582,,,,,,,
Sol-4583,,,,,,,
Sol-4584,,,,,,,
Sol-4585,,,,,,,
Sol-4586,,,,,,,
Sol-4587,,,,,,,
Sol-4588,,,,,,,
Sol-4589,,,,,,,
Sol-4590,,,,,,,
Sol-4591,,,,,,,
Sol-4592,,,,,,,
Sol-4593,,,,,,,
Sol-4594,,,,,,,
Sol-4595,,,,,,,
Sol-4596,,,,,,,
Sol-4597,,,,,,,
Sol-4598,,,,,,,
Sol-4599,,,,,,,
Sol-4600,,,,,,,
Sol-4601,,,,,,,
Sol-4602,,,,,,,
Sol-4603,,,,,,,
Sol-4604,,,,,,,
Sol-4605,,,,,,,
Sol-4606,,,,,,,
Sol-4607,,,,,,,
Sol-4608,,,,,,,
Sol-4609,,,,,,,
Sol-4610,,,,,,,
Sol-4611,,,,,,,
Sol-4612,,,,,,,
Sol-4613,,,,,,,
Sol-4614,,,,,,,
Sol-4615,,,,,,,
Sol-4616,,,,,,,
Sol-4617,,,,,,,
Sol-4618,,,,,,,
Sol-4619,,,,,,,
Sol-4620,,,,,,,
Sol-4621,,,,,,,
Sol-4622,,,,,,,
Sol-4623,,,,,,,
Sol-4624,,,,,,,
Sol-4625,,,,,,,
Sol-4626,,,,,,,
Sol-4627,,,,,,,
Sol-4628,,,,,,,
Sol-4629,,,,,,,
Sol-4630,,,,,,,
Sol-4631,,,,,,,
Sol-4632,,,,,,,
Sol-4633,,,,,,,
Sol-4634,,,,,,,
Sol-4635,,,,,,,
Sol-4636,,,,,,,
Sol-4637,,,,,,,
Sol-4638,,,,,,,
Sol-4639,,,,,,,
Sol-4640,,,,,,,
Sol-4641,,,,,,,
Sol-4642,,,,,,,
Sol-4643,,,,,,,
Sol-4644,,,,,,,
Sol-4645,,,,,,,
Sol-4646,,,,,,,
Sol-4647,,,,,,,
Sol-4648,,,,,,,
Sol-4649,,,,,,,
Sol-4650,,,,,,,
Sol-4651,,,,,,,
Sol-4652,,,,,,,
Sol-4653,,,,,,,
Sol-4654,,,,,,,
Sol-4655,,,,,,,
Sol-4656,,,,,,,
Sol-4657,,,,,,,
Sol-4658,,,,,,,
Sol-4659,,,,,,,
Sol-4660,,,,,,,
Sol-4661,,,,,,,
Sol-4662,,,,,,,
Sol-4663,,,,,,,
Sol-4664,,,,,,,
Sol-4665,,,,,,,
Sol-4666,,,,,,,
Sol-4667,,,,,,,
Sol-4668,,,,,,,
Sol-4669,,,,,,,
Sol-4670,,,,,,,
Sol-4671,,,,,,,
Sol-4672,,,,,,,
Sol-4673,,,,,,,
Sol-4674,,,,,,,
Sol-4675,,,,,,,
Sol-4676,,,,,,,
Sol-4677,,,,,,,
Sol-4678,,,,,,,
Sol-4679,,,,,,,
Sol-4680,,,,,,,
Sol-4681,,,,,,,
Sol-4682,,,,,,,
Sol-4683,,,,,,,
Sol-4684,,,,,,,
Sol-4685,,,,,,,
Sol-4686,,,,,,,
Sol-4687,,,,,,,
Sol-4688,,,,,,,
Sol-4689,,,,,,,
Sol-4690,,,,,,,
Sol-4691,,,,,,,
Sol-4692,,,,,,,
Sol-4693,,,,,,,
Sol-4694,,,,,,,
Sol-4695,,,,,,,
Sol-4696,,,,,,,
Sol-4697,,,,,,,
Sol-4698,,,,,,,
Sol-4699,,,,,,,
Sol-4700,,,,,,,
Sol-4701,,,,,,,
Sol-4702,,,,,,,
Sol-4703,,,,,,,
Sol-4704,,,,,,,
Sol-4705,,,,,,,
Sol-4706,,,,,,,
Sol-4707,,,,,,,
Sol-4708,,,,,,,
Sol-4709,,,,,,,
Sol-4710,,,,,,,
Sol-4711,,,,,,,
Sol-4712,,,,,,,
Sol-4713,,,,,,,
Sol-4714,,,,,,,
Sol-4715,,,,,,,
Sol-4716,,,,,,,
Sol-4717,,,,,,,
Sol-4718,,,,,,,
Sol-4719,,,,,,,
Sol-4720,,,,,,,
Sol-4721,,,,,,,
Sol-4722,,,,,,,
Sol-4723,,,,,,,
Sol-4724,,,,,,,
Sol-4725,,,,,,,
Sol-4726,,,,,,,
Sol-4727,,,,,,,
Sol-4728,,,,,,,
Sol-4729,,,,,,,
Sol-4730,,,,,,,
Sol-4731,,,,,,,
Sol-4732,,,,,,,
Sol-4733,,,,,,,
Sol-4734,,,,,,,
Sol-4735,,,,,,,
Sol-4736,,,,,,,
Sol-4737,,,,,,,
Sol-4738,,,,,,,
Sol-4739,,,,,,,
Sol-4740,,,,,,,
Sol-4741,,,,,,,
Sol-4742,,,,,,,
Sol-4743,,,,,,,
Sol-4744,,,,,,,
Sol-4745,,,,,,,
Sol-4746,,,,,,,
Sol-4747,,,,,,,
Sol-4748,,,,,,,
Sol-4749,,,,,,,
Sol-4750,,,,,,,
Sol-4751,,,,,,,
Sol-4752,,,,,,,
Sol-4753,,,,,,,
Sol-4754,,,,,,,
Sol-4755,,,,,,,
Sol-4756,,,,,,,
Sol-4757,,,,,,,
Sol-4758,,,,,,,
Sol-4759,,,,,,,
Sol-4760,,,,,,,
Sol-4761,,,,,,,
Sol-4762,,,,,,,
Sol-4763,,,,,,,
Sol-4764,,,,,,,
Sol-4765,,,,,,,
Sol-4766,,,,,,,
Sol-4767,,,,,,,
Sol-4768,,,,,,,
Sol-4769,,,,,,,
Sol-4770,,,,,,,
Sol-4771,,,,,,,
Sol-4772,,,,,,,
Sol-4773,,,,,,,
Sol-4774,,,,,,,
Sol-4775,,,,,,,
Sol-4776,,,,,,,
Sol-4777,,,,,,,
Sol-4778,,,,,,,
Sol-4779,,,,,,,
Sol-4780,,,,,,,
Sol-4781,,,,,,,
Sol-4782,,,,,,,
Sol-4783,,,,,,,
Sol-4784,,,,,,,
Sol-4785,,,,,,,
Sol-4786,,,,,,,
Sol-4787,,,,,,,
Sol-4788,,,,,,,
Sol-4789,,,,,,,
Sol-4790,,,,,,,
Sol-4791,,,,,,,
Sol-4792,,,,,,,
Sol-4793,,,,,,,
Sol-4794,,,,,,,
Sol-4795,,,,,,,
Sol-4796,,,,,,,
Sol-4797,,,,,,,
Sol-4798,,,,,,,
Sol-4799,,,,,,,
Sol-4800,,,,,,,
Sol-4801,,,,,,,
Sol-4802,,,,,,,
Sol-4803,,,,,,,
Sol-4804,,,,,,,
Sol-4805,,,,,,,
Sol-4806,,,,,,,
Sol-4807,,,,,,,
Sol-4808,,,,,,,
Sol-4809,,,,,,,
Sol-4810,,,,,,,
Sol-4811,,,,,,,
Sol-4812,,,,,,,
Sol-4813,,,,,,,
Sol-4814,,,,,,,
Sol-4815,,,,,,,
Sol-4816,,,,,,,
Sol-4817,,,,,,,
Sol-4818,,,,,,,
Sol-4819,,,,,,,
Sol-4820,,,,,,,
Sol-4821,,,,,,,
Sol-4822,,,,,,,
Sol-4823,,,,,,,
Sol-4824,,,,,,,
Sol-4825,,,,,,,
Sol-4826,,,,,,,
Sol-4827,,,,,,,
Sol-4828,,,,,,,
Sol-4829,,,,,,,
Sol-4830,,,,,,,
Sol-4831,,,,,,,
Sol-4832,,,,,,,
Sol-4833,,,,,,,
Sol-4834,,,,,,,
Sol-4835,,,,,,,
Sol-4836,,,,,,,
Sol-4837,,,,,,,
Sol-4838,,,,,,,
Sol-4839,,,,,,,
Sol-4840,,,,,,,
Sol-4841,,,,,,,
Sol-4842,,,,,,,
Sol-4843,,,,,,,
Sol-4844,,,,,,,
Sol-4845,,,,,,,
Sol-4846,,,,,,,
Sol-4847,,,,,,,
Sol-4848,,,,,,,
Sol-4849,,,,,,,
Sol-4850,,,,,,,
Sol-4851,,,,,,,
Sol-4852,,,,,,,
Sol-4853,,,,,,,
Sol-4854,,,,,,,
Sol-4855,,,,,,,
Sol-4856,,,,,,,
Sol-4857,,,,,,,
Sol-4858,,,,,,,
Sol-4859,,,,,,,
Sol-4860,,,,,,,
Sol-4861,,,,,,,
Sol-4862,,,,,,,
Sol-4863,,,,,,,
Sol-4864,,,,,,,
Sol-4865,,,,,,,
Sol-4866,,,,,,,
Sol-4867,,,,,,,
Sol-4868,,,,,,,
Sol-4869,,,,,,,
Sol-4870,,,,,,,
Sol-4871,,,,,,,
Sol-4872,,,,,,,
Sol-4873,,,,,,,
Sol-4874,,,,,,,
Sol-4875,,,,,,,
Sol-4876,,,,,,,
Sol-4877,,,,,,,
Sol-4878,,,,,,,
Sol-4879,,,,,,,
Sol-4880,,,,,,,
Sol-4881,,,,,,,
Sol-4882,,,,,,,
Sol-4883,,,,,,,
Sol-4884,,,,,,,
Sol-4885,,,,,,,
Sol-4886,,,,,,,
Sol-4887,,,,,,,
Sol-4888,,,,,,,
Sol-4889,,,,,,,
Sol-4890,,,,,,,
Sol-4891,,,,,,,
Sol-4892,,,,,,,
Sol-4893,,,,,,,
Sol-4894,,,,,,,
Sol-4895,,,,,,,
Sol-4896,,,,,,,
Sol-4897,,,,,,,
Sol-4898,,,,,,,
Sol-4899,,,,,,,
Sol-4900,,,,,,,
Sol-4901,,,,,,,
Sol-4902,,,,,,,
Sol-4903,,,,,,,
Sol-4904,,,,,,,
Sol-4905,,,,,,,
Sol-4906,,,,,,,
Sol-4907,,,,,,,
Sol-4908,,,,,,,
Sol-4909,,,,,,,
Sol-4910,,,,,,,
Sol-4911,,,,,,,
Sol-4912,,,,,,,
Sol-4913,,,,,,,
Sol-4914,,,,,,,
Sol-4915,,,,,,,
Sol-4916,,,,,,,
Sol-4917,,,,,,,
Sol-4918,,,,,,,
Sol-4919,,,,,,,
Sol-4920,,,,,,,
Sol-4921,,,,,,,
Sol-4922,,,,,,,
Sol-4923,,,,,,,
Sol-4924,,,,,,,
Sol-4925,,,,,,,
Sol-4926,,,,,,,
Sol-4927,,,,,,,
Sol-4928,,,,,,,
Sol-4929,,,,,,,
Sol-4930,,,,,,,
Sol-4931,,,,,,,
Sol-4932,,,,,,,
Sol-4933,,,,,,,
Sol-4934,,,,,,,
Sol-4935,,,,,,,
Sol-4936,,,,,,,
Sol-4937,,,,,,,
Sol-4938,,,,,,,
Sol-4939,,,,,,,
Sol-4940,,,,,,,
Sol-4941,,,,,,,
Sol-4942,,,,,,,
Sol-4943,,,,,,,
Sol-4944,,,,,,,
Sol-4945,,,,,,,
Sol-4946,,,,,,,
Sol-4947,,,,,,,
Sol-4948,,,,,,,
Sol-4949,,,,,,,
Sol-4950,,,,,,,
Sol-4951,,,,,,,
Sol-4952,,,,,,,
Sol-4953,,,,,,,
Sol-4954,,,,,,,
Sol-4955,,,,,,,
Sol-4956,,,,,,,
Sol-4957,,,,,,,
Sol-4958,,,,,,,
Sol-4959,,,,,,,
Sol-4960,,,,,,,
Sol-4961,,,,,,,
Sol-4962,,,,,,,
Sol-4963,,,,,,,
Sol-4964,,,,,,,
Sol-4965,,,,,,,
Sol-4966,,,,,,,
Sol-4967,,,,,,,
Sol-4968,,,,,,,
Sol-4969,,,,,,,
Sol-4970,,,,,,,
Sol-4971,,,,,,,
Sol-4972,,,,,,,
Sol-4973,,,,,,,
Sol-4974,,,,,,,
Sol-4975,,,,,,,
Sol-4976,,,,,,,
Sol-4977,,,,,,,
Sol-4978,,,,,,,
Sol-4979,,,,,,,
Sol-4980,,,,,,,
Sol-4981,,,,,,,
Sol-4982,,,,,,,
Sol-4983,,,,,,,
Sol-4984,,,,,,,
Sol-4985,,,,,,,
Sol-4986,,,,,,,
Sol-4987,,,,,,,
Sol-4988,,,,,,,
Sol-4989,,,,,,,
Sol-4990,,,,,,,
Sol-4991,,,,,,,
Sol-4992,,,,,,,
Sol-4993,,,,,,,
Sol-4994,,,,,,,
Sol-4995,,,,,,,
Sol-4996,,,,,,,
Sol-4997,,,,,,,
Sol-4998,,,,,,,
Sol-4999,,,,,,,
Sol-5000,,,,,,,
Sol-5001,,,,,,,
Sol-5002,,,,,,,
Sol-5003,,,,,,,
Sol-5004,,,,,,,
Sol-5005,,,,,,,
Sol-5006,,,,,,,
Sol-5007,,,,,,,
Sol-5008,,,,,,,
Sol-5009,,,,,,,
Sol-5010,,,,,,,
Sol-5011,,,,,,,
Sol-5012,,,,,,,
Sol-5013,,,,,,,
Sol-5014,,,,,,,
Sol-5015,,,,,,,
Sol-5016,,,,,,,
Sol-5017,,,,,,,
Sol-5018,,,,,,,
Sol-5019,,,,,,,
Sol-5020,,,,,,,
Sol-5021,,,,,,,
Sol-5022,,,,,,,
Sol-5023,,,,,,,
Sol-5024,,,,,,,
Sol-5025,,,,,,,
Sol-5026,,,,,,,
Sol-5027,,,,,,,
Sol-5028,,,,,,,
Sol-5029,,,,,,,
Sol-5030,,,,,,,
Sol-5031,,,,,,,
Sol-5032,,,,,,,
Sol-5033,,,,,,,
Sol-5034,,,,,,,
Sol-5035,,,,,,,
Sol-5036,,,,,,,
Sol-5037,,,,,,,
Sol-5038,,,,,,,
Sol-5039,,,,,,,
Sol-5040,,,,,,,
Sol-5041,,,,,,,
Sol-5042,,,,,,,
Sol-5043,,,,,,,
Sol-5044,,,,,,,
Sol-5045,,,,,,,
Sol-5046,,,,,,,
Sol-5047,,,,,,,
Sol-5048,,,,,,,
Sol-5049,,,,,,,
Sol-5050,,,,,,,
Sol-5051,,,,,,,
Sol-5052,,,,,,,
Sol-5053,,,,,,,
Sol-5054,,,,,,,
Sol-5055,,,,,,,
Sol-5056,,,,,,,
Sol-5057,,,,,,,
Sol-5058,,,,,,,
Sol-5059,,,,,,,
Sol-5060,,,,,,,
Sol-5061,,,,,,,
Sol-5062,,,,,,,
Sol-5063,,,,,,,
Sol-5064,,,,,,,
Sol-5065,,,,,,,
Sol-5066,,,,,,,
Sol-5067,,,,,,,
Sol-5068,,,,,,,
Sol-5069,,,,,,,
Sol-5070,,,,,,,
Sol-5071,,,,,,,
Sol-5072,,,,,,,
Sol-5073,,,,,,,
Sol-5074,,,,,,,
Sol-5075,,,,,,,
Sol-5076,,,,,,,
Sol-5077,,,,,,,
Sol-5078,,,,,,,
Sol-5079,,,,,,,
Sol-5080,,,,,,,
Sol-5081,,,,,,,
Sol-5082,,,,,,,
Sol-5083,,,,,,,
Sol-5084,,,,,,,
Sol-5085,,,,,,,
Sol-5086,,,,,,,
Sol-5087,,,,,,,
Sol-5088,,,,,,,
Sol-5089,,,,,,,
Sol-5090,,,,,,,
Sol-5091,,,,,,,
Sol-5092,,,,,,,
Sol-5093,,,,,,,
Sol-5094,,,,,,,
Sol-5095,,,,,,,
Sol-5096,,,,,,,
Sol-5097,,,,,,,
Sol-5098,,,,,,,
Sol-5099,,,,,,,
Sol-5100,,,,,,,
Sol-5101,,,,,,,
Sol-5102,,,,,,,
Sol-5103,,,,,,,
Sol-5104,,,,,,,
Sol-5105,,,,,,,
Sol-5106,,,,,,,
Sol-5107,,,,,,,
Sol-5108,,,,,,,
Sol-5109,,,,,,,
Sol-5110,,,,,,,
Sol-5111,,,,,,,
Sol-5112,,,,,,,
Sol-5113,,,,,,,
Sol-5114,,,,,,,
Sol-5115,,,,,,,
Sol-5116,,,,,,,
Sol-5117,,,,,,,
Sol-5118,,,,,,,
Sol-5119,,,,,,,
Sol-5120,,,,,,,
Sol-5121,,,,,,,
Sol-5122,,,,,,,
Sol-5123,,,,,,,
Sol-5124,,,,,,,
Sol-5125,,,,,,,
Sol-5126,,,,,,,
Sol-5127,,,,,,,
Sol-5128,,,,,,,
Sol-5129,,,,,,,
Sol-5130,,,,,,,
Sol-5131,,,,,,,
Sol-5132,,,,,,,
Sol-5133,,,,,,,
Sol-5134,,,,,,,
Sol-5135,,,,,,,
Sol-5136,,,,,,,
Sol-5137,,,,,,,
Sol-5138,,,,,,,
Sol-5139,,,,,,,
Sol-5140,,,,,,,
Sol-5141,,,,,,,
Sol-5142,,,,,,,
Sol-5143,,,,,,,
Sol-5144,,,,,,,
Sol-5145,,,,,,,
Sol-5146,,,,,,,
Sol-5147,,,,,,,
Sol-5148,,,,,,,
Sol-5149,,,,,,,
Sol-5150,,,,,,,
Sol-5151,,,,,,,
Sol-5152,,,,,,,
Sol-5153,,,,,,,
Sol-5154,,,,,,,
Sol-5155,,,,,,,
Sol-5156,,,,,,,
Sol-5157,,,,,,,
Sol-5158,,,,,,,
Sol-5159,,,,,,,
Sol-5160,,,,,,,
Sol-5161,,,,,,,
Sol-5162,,,,,,,
Sol-5163,,,,,,,
Sol-5164,,,,,,,
Sol-5165,,,,,,,
Sol-5166,,,,,,,
Sol-5167,,,,,,,
Sol-5168,,,,,,,
Sol-5169,,,,,,,
Sol-5170,,,,,,,
Sol-5171,,,,,,,
Sol-5172,,,,,,,
Sol-5173,,,,,,,
Sol-5174,,,,,,,
Sol-5175,,,,,,,
Sol-5176,,,,,,,
Sol-5177,,,,,,,
Sol-5178,,,,,,,
Sol-5179,,,,,,,
Sol-5180,,,,,,,
Sol-5181,,,,,,,
Sol-5182,,,,,,,
Sol-5183,,,,,,,
Sol-5184,,,,,,,
Sol-5185,,,,,,,
Sol-5186,,,,,,,
Sol-5187,,,,,,,
Sol-5188,,,,,,,
Sol-5189,,,,,,,
Sol-5190,,,,,,,
Sol-5191,,,,,,,
Sol-5192,,,,,,,
Sol-5193,,,,,,,
Sol-5194,,,,,,,
Sol-5195,,,,,,,
Sol-5196,,,,,,,
Sol-5197,,,,,,,
Sol-5198,,,,,,,
Sol-5199,,,,,,,
Sol-5200,,,,,,,
Sol-5201,,,,,,,
Sol-5202,,,,,,,
Sol-5203,,,,,,,
Sol-5204,,,,,,,
Sol-5205,,,,,,,
Sol-5206,,,,,,,
Sol-5207,,,,,,,
Sol-5208,,,,,,,
Sol-5209,,,,,,,
Sol-5210,,,,,,,
Sol-5211,,,,,,,
Sol-5212,,,,,,,
Sol-5213,,,,,,,
Sol-5214,,,,,,,
Sol-5215,,,,,,,
Sol-5216,,,,,,,
Sol-5217,,,,,,,
Sol-5218,,,,,,,
Sol-5219,,,,,,,
Sol-5220,,,,,,,
Sol-5221,,,,,,,
Sol-5222,,,,,,,
Sol-5223,,,,,,,
Sol-5224,,,,,,,
Sol-5225,,,,,,,
Sol-5226,,,,,,,
Sol-5227,,,,,,,
Sol-5228,,,,,,,
Sol-5229,,,,,,,
Sol-5230,,,,,,,
Sol-5231,,,,,,,
Sol-5232,,,,,,,
Sol-5233,,,,,,,
Sol-5234,,,,,,,
Sol-5235,,,,,,,
Sol-5236,,,,,,,
Sol-5237,,,,,,,
Sol-5238,,,,,,,
Sol-5239,,,,,,,
Sol-5240,,,,,,,
Sol-5241,,,,,,,
Sol-5242,,,,,,,
Sol-5243,,,,,,,
Sol-5244,,,,,,,
Sol-5245,,,,,,,
Sol-5246,,,,,,,
Sol-5247,,,,,,,
Sol-5248,,,,,,,
Sol-5249,,,,,,,
Sol-5250,,,,,,,
Sol-5251,,,,,,,
Sol-5252,,,,,,,
Sol-5253,,,,,,,
Sol-5254,,,,,,,
Sol-5255,,,,,,,
Sol-5256,,,,,,,
Sol-5257,,,,,,,
Sol-5258,,,,,,,
Sol-5259,,,,,,,
Sol-5260,,,,,,,
Sol-5261,,,,,,,
Sol-5262,,,,,,,
Sol-5263,,,,,,,
Sol-5264,,,,,,,
Sol-5265,,,,,,,
Sol-5266,,,,,,,
Sol-5267,,,,,,,
Sol-5268,,,,,,,
Sol-5269,,,,,,,
Sol-5270,,,,,,,
Sol-5271,,,,,,,
Sol-5272,,,,,,,
Sol-5273,,,,,,,
Sol-5274,,,,,,,
Sol-5275,,,,,,,
Sol-5276,,,,,,,
Sol-5277,,,,,,,
Sol-5278,,,,,,,
Sol-5279,,,,,,,
Sol-5280,,,,,,,
Sol-5281,,,,,,,
Sol-5282,,,,,,,
Sol-5283,,,,,,,
Sol-5284,,,,,,,
Sol-5285,,,,,,,
Sol-5286,,,,,,,
Sol-5287,,,,,,,
Sol-5288,,,,,,,
Sol-5289,,,,,,,
Sol-5290,,,,,,,
Sol-5291,,,,,,,
Sol-5292,,,,,,,
Sol-5293,,,,,,,
Sol-5294,,,,,,,
Sol-5295,,,,,,,
Sol-5296,,,,,,,
Sol-5297,,,,,,,
Sol-5298,,,,,,,
Sol-5299,,,,,,,
Sol-5300,,,,,,,
Sol-5301,,,,,,,
Sol-5302,,,,,,,
Sol-5303,,,,,,,
Sol-5304,,,,,,,
Sol-5305,,,,,,,
Sol-5306,,,,,,,
Sol-5307,,,,,,,
Sol-5308,,,,,,,
Sol-5309,,,,,,,
Sol-5310,,,,,,,
Sol-5311,,,,,,,
Sol-5312,,,,,,,
Sol-5313,,,,,,,
Sol-5314,,,,,,,
Sol-5315,,,,,,,
Sol-5316,,,,,,,
Sol-5317,,,,,,,
Sol-5318,,,,,,,
Sol-5319,,,,,,,
Sol-5320,,,,,,,
Sol-5321,,,,,,,
Sol-5322,,,,,,,
Sol-5323,,,,,,,
Sol-5324,,,,,,,
Sol-5325,,,,,,,
Sol-5326,,,,,,,
Sol-5327,,,,,,,
Sol-5328,,,,,,,
Sol-5329,,,,,,,
Sol-5330,,,,,,,
Sol-5331,,,,,,,
Sol-5332,,,,,,,
Sol-5333,,,,,,,
Sol-5334,,,,,,,
Sol-5335,,,,,,,
Sol-5336,,,,,,,
Sol-5337,,,,,,,
Sol-5338,,,,,,,
Sol-5339,,,,,,,
Sol-5340,,,,,,,
Sol-5341,,,,,,,
Sol-5342,,,,,,,
Sol-5343,,,,,,,
Sol-5344,,,,,,,
Sol-5345,,,,,,,
Sol-5346,,,,,,,
Sol-5347,,,,,,,
Sol-5348,,,,,,,
Sol-5349,,,,,,,
Sol-5350,,,,,,,
Sol-5351,,,,,,,
Sol-5352,,,,,,,
Sol-5353,,,,,,,
Sol-5354,,,,,,,
Sol-5355,,,,,,,
Sol-5356,,,,,,,
Sol-5357,,,,,,,
Sol-5358,,,,,,,
Sol-5359,,,,,,,
Sol-5360,,,,,,,
Sol-5361,,,,,,,
Sol-5362,,,,,,,
Sol-5363,,,,,,,
Sol-5364,,,,,,,
Sol-5365,,,,,,,
Sol-5366,,,,,,,
Sol-5367,,,,,,,
Sol-5368,,,,,,,
Sol-5369,,,,,,,
Sol-5370,,,,,,,
Sol-5371,,,,,,,
Sol-5372,,,,,,,
Sol-5373,,,,,,,
Sol-5374,,,,,,,
Sol-5375,,,,,,,
Sol-5376,,,,,,,
Sol-5377,,,,,,,
Sol-5378,,,,,,,
Sol-5379,,,,,,,
Sol-5380,,,,,,,
Sol-5381,,,,,,,
Sol-5382,,,,,,,
Sol-5383,,,,,,,
Sol-5384,,,,,,,
Sol-5385,,,,,,,
Sol-5386,,,,,,,
Sol-5387,,,,,,,
Sol-5388,,,,,,,
Sol-5389,,,,,,,
Sol-5390,,,,,,,
Sol-5391,,,,,,,
Sol-5392,,,,,,,
Sol-5393,,,,,,,
Sol-5394,,,,,,,
Sol-5395,,,,,,,
Sol-5396,,,,,,,
Sol-5397,,,,,,,
Sol-5398,,,,,,,
Sol-5399,,,,,,,
Sol-5400,,,,,,,
Sol-5401,,,,,,,
Sol-5402,,,,,,,
Sol-5403,,,,,,,
Sol-5404,,,,,,,
Sol-5405,,,,,,,
Sol-5406,,,,,,,
Sol-5407,,,,,,,
Sol-5408,,,,,,,
Sol-5409,,,,,,,
Sol-5410,,,,,,,
Sol-5411,,,,,,,
Sol-5412,,,,,,,
Sol-5413,,,,,,,
Sol-5414,,,,,,,
Sol-5415,,,,,,,
Sol-5416,,,,,,,
Sol-5417,,,,,,,
Sol-5418,,,,,,,
Sol-5419,,,,,,,
Sol-5420,,,,,,,
Sol-5421,,,,,,,
Sol-5422,,,,,,,
Sol-5423,,,,,,,
Sol-5424,,,,,,,
Sol-5425,,,,,,,
Sol-5426,,,,,,,
Sol-5427,,,,,,,
Sol-5428,,,,,,,
Sol-5429,,,,,,,
Sol-5430,,,,,,,
Sol-5431,,,,,,,
Sol-5432,,,,,,,
Sol-5433,,,,,,,
Sol-5434,,,,,,,
Sol-5435,,,,,,,
Sol-5436,,,,,,,
Sol-5437,,,,,,,
Sol-5438,,,,,,,
Sol-5439,,,,,,,
Sol-5440,,,,,,,
Sol-5441,,,,,,,
Sol-5442,,,,,,,
Sol-5443,,,,,,,
Sol-5444,,,,,,,
Sol-5445,,,,,,,
Sol-5446,,,,,,,
Sol-5447,,,,,,,
Sol-5448,,,,,,,
Sol-5449,,,,,,,
Sol-5450,,,,,,,
Sol-5451,,,,,,,
Sol-5452,,,,,,,
Sol-5453,,,,,,,
Sol-5454,,,,,,,
Sol-5455,,,,,,,
Sol-5456,,,,,,,
Sol-5457,,,,,,,
Sol-5458,,,,,,,
Sol-5459,,,,,,,
Sol-5460,,,,,,,
Sol-5461,,,,,,,
Sol-5462,,,,,,,
Sol-5463,,,,,,,
Sol-5464,,,,,,,
Sol-5465,,,,,,,
Sol-5466,,,,,,,
Sol-5467,,,,,,,
Sol-5468,,,,,,,
Sol-5469,,,,,,,
Sol-5470,,,,,,,
Sol-5471,,,,,,,
Sol-5472,,,,,,,
Sol-5473,,,,,,,
Sol-5474,,,,,,,
Sol-5475,,,,,,,
Sol-5476,,,,,,,
Sol-5477,,,,,,,
Sol-5478,,,,,,,
Sol-5479,,,,,,,
Sol-5480,,,,,,,
Sol-5481,,,,,,,
Sol-5482,,,,,,,
Sol-5483,,,,,,,
Sol-5484,,,,,,,
Sol-5485,,,,,,,
Sol-5486,,,,,,,
Sol-5487,,,,,,,
Sol-5488,,,,,,,
Sol-5489,,,,,,,
Sol-5490,,,,,,,
Sol-5491,,,,,,,
Sol-5492,,,,,,,
Sol-5493,,,,,,,
Sol-5494,,,,,,,
Sol-5495,,,,,,,
Sol-5496,,,,,,,
Sol-5497,,,,,,,
Sol-5498,,,,,,,
Sol-5499,,,,,,,
Sol-5500,,,,,,,
Sol-5501,,,,,,,
Sol-5502,,,,,,,
Sol-5503,,,,,,,
Sol-5504,,,,,,,
Sol-5505,,,,,,,
Sol-5506,,,,,,,
Sol-5507,,,,,,,
Sol-5508,,,,,,,
Sol-5509,,,,,,,
Sol-5510,,,,,,,
Sol-5511,,,,,,,
Sol-5512,,,,,,,
Sol-5513,,,,,,,
Sol-5514,,,,,,,
Sol-5515,,,,,,,
Sol-5516,,,,,,,
Sol-5517,,,,,,,
Sol-5518,,,,,,,
Sol-5519,,,,,,,
Sol-5520,,,,,,,
Sol-5521,,,,,,,
Sol-5522,,,,,,,
Sol-5523,,,,,,,
Sol-5524,,,,,,,
Sol-5525,,,,,,,
Sol-5526,,,,,,,
Sol-5527,,,,,,,
Sol-5528,,,,,,,
Sol-5529,,,,,,,
Sol-5530,,,,,,,
Sol-5531,,,,,,,
Sol-5532,,,,,,,
Sol-5533,,,,,,,
Sol-5534,,,,,,,
Sol-5535,,,,,,,
Sol-5536,,,,,,,
Sol-5537,,,,,,,
Sol-5538,,,,,,,
Sol-5539,,,,,,,
Sol-5540,,,,,,,
Sol-5541,,,,,,,
Sol-5542,,,,,,,
Sol-5543,,,,,,,
Sol-5544,,,,,,,
Sol-5545,,,,,,,
Sol-5546,,,,,,,
Sol-5547,,,,,,,
Sol-5548,,,,,,,
Sol-5549,,,,,,,
Sol-5550,,,,,,,
Sol-5551,,,,,,,
Sol-5552,,,,,,,
Sol-5553,,,,,,,
Sol-5554,,,,,,,
Sol-5555,,,,,,,
Sol-5556,,,,,,,
Sol-5557,,,,,,,
Sol-5558,,,,,,,
Sol-5559,,,,,,,
Sol-5560,,,,,,,
Sol-5561,,,,,,,
Sol-5562,,,,,,,
Sol-5563,,,,,,,
Sol-5564,,,,,,,
Sol-5565,,,,,,,
Sol-5566,,,,,,,
Sol-5567,,,,,,,
Sol-5568,,,,,,,
Sol-5569,,,,,,,
Sol-5570,,,,,,,
Sol-5571,,,,,,,
Sol-5572,,,,,,,
Sol-5573,,,,,,,
Sol-5574,,,,,,,
Sol-5575,,,,,,,
Sol-5576,,,,,,,
Sol-5577,,,,,,,
Sol-5578,,,,,,,
Sol-5579,,,,,,,
Sol-5580,,,,,,,
Sol-5581,,,,,,,
Sol-5582,,,,,,,
Sol-5583,,,,,,,
Sol-5584,,,,,,,
Sol-5585,,,,,,,
Sol-5586,,,,,,,
Sol-5587,,,,,,,
Sol-5588,,,,,,,
Sol-5589,,,,,,,
Sol-5590,,,,,,,
Sol-5591,,,,,,,
Sol-5592,,,,,,,
Sol-5593,,,,,,,
Sol-5594,,,,,,,
Sol-5595,,,,,,,
Sol-5596,,,,,,,
Sol-5597,,,,,,,
Sol-5598,,,,,,,
Sol-5599,,,,,,,
Sol-5600,,,,,,,
Sol-5601,,,,,,,
Sol-5602,,,,,,,
Sol-5603,,,,,,,
Sol-5604,,,,,,,
Sol-5605,,,,,,,
Sol-5606,,,,,,,
Sol-5607,,,,,,,
Sol-5608,,,,,,,
Sol-5609,,,,,,,
Sol-5610,,,,,,,
Sol-5611,,,,,,,
Sol-5612,,,,,,,
Sol-5613,,,,,,,
Sol-5614,,,,,,,
Sol-5615,,,,,,,
Sol-5616,,,,,,,
Sol-5617,,,,,,,
Sol-5618,,,,,,,
Sol-5619,,,,,,,
Sol-5620,,,,,,,
Sol-5621,,,,,,,
Sol-5622,,,,,,,
Sol-5623,,,,,,,
Sol-5624,,,,,,,
Sol-5625,,,,,,,
Sol-5626,,,,,,,
Sol-5627,,,,,,,
Sol-5628,,,,,,,
Sol-5629,,,,,,,
Sol-5630,,,,,,,
Sol-5631,,,,,,,
Sol-5632,,,,,,,
Sol-5633,,,,,,,
Sol-5634,,,,,,,
Sol-5635,,,,,,,
Sol-5636,,,,,,,
Sol-5637,,,,,,,
Sol-5638,,,,,,,
Sol-5639,,,,,,,
Sol-5640,,,,,,,
Sol-5641,,,,,,,
Sol-5642,,,,,,,
Sol-5643,,,,,,,
Sol-5644,,,,,,,
Sol-5645,,,,,,,
Sol-5646,,,,,,,
Sol-5647,,,,,,,
Sol-5648,,,,,,,
Sol-5649,,,,,,,
Sol-5650,,,,,,,
Sol-5651,,,,,,,
Sol-5652,,,,,,,
Sol-5653,,,,,,,
Sol-5654,,,,,,,
Sol-5655,,,,,,,
Sol-5656,,,,,,,
Sol-5657,,,,,,,
Sol-5658,,,,,,,
Sol-5659,,,,,,,
Sol-5660,,,,,,,
Sol-5661,,,,,,,
Sol-5662,,,,,,,
Sol-5663,,,,,,,
Sol-5664,,,,,,,
Sol-5665,,,,,,,
Sol-5666,,,,,,,
Sol-5667,,,,,,,
Sol-5668,,,,,,,
Sol-5669,,,,,,,
Sol-5670,,,,,,,
Sol-5671,,,,,,,
Sol-5672,,,,,,,
Sol-5673,,,,,,,
Sol-5674,,,,,,,
Sol-5675,,,,,,,
Sol-5676,,,,,,,
Sol-5677,,,,,,,
Sol-5678,,,,,,,
Sol-5679,,,,,,,
Sol-5680,,,,,,,
Sol-5681,,,,,,,
Sol-5682,,,,,,,
Sol-5683,,,,,,,
Sol-5684,,,,,,,
Sol-5685,,,,,,,
Sol-5686,,,,,,,
Sol-5687,,,,,,,
Sol-5688,,,,,,,
Sol-5689,,,,,,,
Sol-5690,,,,,,,
Sol-5691,,,,,,,
Sol-5692,,,,,,,
Sol-5693,,,,,,,
Sol-5694,,,,,,,
Sol-5695,,,,,,,
Sol-5696,,,,,,,
Sol-5697,,,,,,,
Sol-5698,,,,,,,
Sol-5699,,,,,,,
Sol-5700,,,,,,,
Sol-5701,,,,,,,
Sol-5702,,,,,,,
Sol-5703,,,,,,,
Sol-5704,,,,,,,
Sol-5705,,,,,,,
Sol-5706,,,,,,,
Sol-5707,,,,,,,
Sol-5708,,,,,,,
Sol-5709,,,,,,,
Sol-5710,,,,,,,
Sol-5711,,,,,,,
Sol-5712,,,,,,,
Sol-5713,,,,,,,
Sol-5714,,,,,,,
Sol-5715,,,,,,,
Sol-5716,,,,,,,
Sol-5717,,,,,,,
Sol-5718,,,,,,,
Sol-5719,,,,,,,
Sol-5720,,,,,,,
Sol-5721,,,,,,,
Sol-5722,,,,,,,
Sol-5723,,,,,,,
Sol-5724,,,,,,,
Sol-5725,,,,,,,
Sol-5726,,,,,,,
Sol-5727,,,,,,,
Sol-5728,,,,,,,
Sol-5729,,,,,,,
Sol-5730,,,,,,,
Sol-5731,,,,,,,
Sol-5732,,,,,,,
Sol-5733,,,,,,,
Sol-5734,,,,,,,
Sol-5735,,,,,,,
Sol-5736,,,,,,,
Sol-5737,,,,,,,
Sol-5738,,,,,,,
Sol-5739,,,,,,,
Sol-5740,,,,,,,
Sol-5741,,,,,,,
Sol-5742,,,,,,,
Sol-5743,,,,,,,
Sol-5744,,,,,,,
Sol-5745,,,,,,,
Sol-5746,,,,,,,
Sol-5747,,,,,,,
Sol-5748,,,,,,,
Sol-5749,,,,,,,
Sol-5750,,,,,,,
Sol-5751,,,,,,,
Sol-5752,,,,,,,
Sol-5753,,,,,,,
Sol-5754,,,,,,,
Sol-5755,,,,,,,
Sol-5756,,,,,,,
Sol-5757,,,,,,,
Sol-5758,,,,,,,
Sol-5759,,,,,,,
Sol-5760,,,,,,,
Sol-5761,,,,,,,
Sol-5762,,,,,,,
Sol-5763,,,,,,,
Sol-5764,,,,,,,
Sol-5765,,,,,,,
Sol-5766,,,,,,,
Sol-5767,,,,,,,
Sol-5768,,,,,,,
Sol-5769,,,,,,,
Sol-5770,,,,,,,
Sol-5771,,,,,,,
Sol-5772,,,,,,,
Sol-5773,,,,,,,
Sol-5774,,,,,,,
Sol-5775,,,,,,,
Sol-5776,,,,,,,
Sol-5777,,,,,,,
Sol-5778,,,,,,,
Sol-5779,,,,,,,
Sol-5780,,,,,,,
Sol-5781,,,,,,,
Sol-5782,,,,,,,
Sol-5783,,,,,,,
Sol-5784,,,,,,,
Sol-5785,,,,,,,
Sol-5786,,,,,,,
Sol-5787,,,,,,,
Sol-5788,,,,,,,
Sol-5789,,,,,,,
Sol-5790,,,,,,,
Sol-5791,,,,,,,
Sol-5792,,,,,,,
Sol-5793,,,,,,,
Sol-5794,,,,,,,
Sol-5795,,,,,,,
Sol-5796,,,,,,,
Sol-5797,,,,,,,
Sol-5798,,,,,,,
Sol-5799,,,,,,,
Sol-5800,,,,,,,
Sol-5801,,,,,,,
Sol-5802,,,,,,,
Sol-5803,,,,,,,
Sol-5804,,,,,,,
Sol-5805,,,,,,,
Sol-5806,,,,,,,
Sol-5807,,,,,,,
Sol-5808,,,,,,,
Sol-5809,,,,,,,
Sol-5810,,,,,,,
Sol-5811,,,,,,,
Sol-5812,,,,,,,
Sol-5813,,,,,,,
Sol-5814,,,,,,,
Sol-5815,,,,,,,
Sol-5816,,,,,,,
Sol-5817,,,,,,,
Sol-5818,,,,,,,
Sol-5819,,,,,,,
Sol-5820,,,,,,,
Sol-5821,,,,,,,
Sol-5822,,,,,,,
Sol-5823,,,,,,,
Sol-5824,,,,,,,
Sol-5825,,,,,,,
Sol-5826,,,,,,,
Sol-5827,,,,,,,
Sol-5828,,,,,,,
Sol-5829,,,,,,,
Sol-5830,,,,,,,
Sol-5831,,,,,,,
Sol-5832,,,,,,,
Sol-5833,,,,,,,
Sol-5834,,,,,,,
Sol-5835,,,,,,,
Sol-5836,,,,,,,
Sol-5837,,,,,,,
Sol-5838,,,,,,,
Sol-5839,,,,,,,
Sol-5840,,,,,,,
Sol-5841,,,,,,,
Sol-5842,,,,,,,
Sol-5843,,,,,,,
Sol-5844,,,,,,,
Sol-5845,,,,,,,
Sol-5846,,,,,,,
Sol-5847,,,,,,,
Sol-5848,,,,,,,
Sol-5849,,,,,,,
Sol-5850,,,,,,,
Sol-5851,,,,,,,
Sol-5852,,,,,,,
Sol-5853,,,,,,,
Sol-5854,,,,,,,
Sol-5855,,,,,,,
Sol-5856,,,,,,,
Sol-5857,,,,,,,
Sol-5858,,,,,,,
Sol-5859,,,,,,,
Sol-5860,,,,,,,
Sol-5861,,,,,,,
Sol-5862,,,,,,,
Sol-5863,,,,,,,
Sol-5864,,,,,,,
Sol-5865,,,,,,,
Sol-5866,,,,,,,
Sol-5867,,,,,,,
Sol-5868,,,,,,,
Sol-5869,,,,,,,
Sol-5870,,,,,,,
Sol-5871,,,,,,,
Sol-5872,,,,,,,
Sol-5873,,,,,,,
Sol-5874,,,,,,,
Sol-5875,,,,,,,
Sol-5876,,,,,,,
Sol-5877,,,,,,,
Sol-5878,,,,,,,
Sol-5879,,,,,,,
Sol-5880,,,,,,,
Sol-5881,,,,,,,
Sol-5882,,,,,,,
Sol-5883,,,,,,,
Sol-5884,,,,,,,
Sol-5885,,,,,,,
Sol-5886,,,,,,,
Sol-5887,,,,,,,
Sol-5888,,,,,,,
Sol-5889,,,,,,,
Sol-5890,,,,,,,
Sol-5891,,,,,,,
Sol-5892,,,,,,,
Sol-5893,,,,,,,
Sol-5894,,,,,,,
Sol-5895,,,,,,,
Sol-5896,,,,,,,
Sol-5897,,,,,,,
Sol-5898,,,,,,,
Sol-5899,,,,,,,
Sol-5900,,,,,,,
Sol-5901,,,,,,,
Sol-5902,,,,,,,
Sol-5903,,,,,,,
Sol-5904,,,,,,,
Sol-5905,,,,,,,
Sol-5906,,,,,,,
Sol-5907,,,,,,,
Sol-5908,,,,,,,
Sol-5909,,,,,,,
Sol-5910,,,,,,,
Sol-5911,,,,,,,
Sol-5912,,,,,,,
Sol-5913,,,,,,,
Sol-5914,,,,,,,
Sol-5915,,,,,,,
Sol-5916,,,,,,,
Sol-5917,,,,,,,
Sol-5918,,,,,,,
Sol-5919,,,,,,,
Sol-5920,,,,,,,
Sol-5921,,,,,,,
Sol-5922,,,,,,,
Sol-5923,,,,,,,
Sol-5924,,,,,,,
Sol-5925,,,,,,,
Sol-5926,,,,,,,
Sol-5927,,,,,,,
Sol-5928,,,,,,,
Sol-5929,,,,,,,
Sol-5930,,,,,,,
Sol-5931,,,,,,,
Sol-5932,,,,,,,
Sol-5933,,,,,,,
Sol-5934,,,,,,,
Sol-5935,,,,,,,
Sol-5936,,,,,,,
Sol-5937,,,,,,,
Sol-5938,,,,,,,
Sol-5939,,,,,,,
Sol-5940,,,,,,,
Sol-5941,,,,,,,
Sol-5942,,,,,,,
Sol-5943,,,,,,,
Sol-5944,,,,,,,
Sol-5945,,,,,,,
Sol-5946,,,,,,,
Sol-5947,,,,,,,
Sol-5948,,,,,,,
Sol-5949,,,,,,,
Sol-5950,,,,,,,
Sol-5951,,,,,,,
Sol-5952,,,,,,,
Sol-5953,,,,,,,
Sol-5954,,,,,,,
Sol-5955,,,,,,,
Sol-5956,,,,,,,
Sol-5957,,,,,,,
Sol-5958,,,,,,,
Sol-5959,,,,,,,
Sol-5960,,,,,,,
Sol-5961,,,,,,,
Sol-5962,,,,,,,
Sol-5963,,,,,,,
Sol-5964,,,,,,,
Sol-5965,,,,,,,
Sol-5966,,,,,,,
Sol-5967,,,,,,,
Sol-5968,,,,,,,
Sol-5969,,,,,,,
Sol-5970,,,,,,,
Sol-5971,,,,,,,
Sol-5972,,,,,,,
Sol-5973,,,,,,,
Sol-5974,,,,,,,
Sol-5975,,,,,,,
Sol-5976,,,,,,,
Sol-5977,,,,,,,
Sol-5978,,,,,,,
Sol-5979,,,,,,,
Sol-5980,,,,,,,
Sol-5981,,,,,,,
Sol-5982,,,,,,,
Sol-5983,,,,,,,
Sol-5984,,,,,,,
Sol-5985,,,,,,,
Sol-5986,,,,,,,
Sol-5987,,,,,,,
Sol-5988,,,,,,,
Sol-5989,,,,,,,
Sol-5990,,,,,,,
Sol-5991,,,,,,,
Sol-5992,,,,,,,
Sol-5993,,,,,,,
Sol-5994,,,,,,,
Sol-5995,,,,,,,
Sol-5996,,,,,,,
Sol-5997,,,,,,,
Sol-5998,,,,,,,
Sol-5999,,,,,,,
Sol-6000,,,,,,,
Sol-6001,,,,,,,
Sol-6002,,,,,,,
Sol-6003,,,,,,,
Sol-6004,,,,,,,
Sol-6005,,,,,,,
Sol-6006,,,,,,,
Sol-6007,,,,,,,
Sol-6008,,,,,,,
Sol-6009,,,,,,,
Sol-6010,,,,,,,
Sol-6011,,,,,,,
Sol-6012,,,,,,,
Sol-6013,,,,,,,
Sol-6014,,,,,,,
Sol-6015,,,,,,,
Sol-6016,,,,,,,
Sol-6017,,,,,,,
Sol-6018,,,,,,,
Sol-6019,,,,,,,
Sol-6020,,,,,,,
Sol-6021,,,,,,,
Sol-6022,,,,,,,
Sol-6023,,,,,,,
Sol-6024,,,,,,,
Sol-6025,,,,,,,
Sol-6026,,,,,,,
Sol-6027,,,,,,,
Sol-6028,,,,,,,
Sol-6029,,,,,,,
Sol-6030,,,,,,,
Sol-6031,,,,,,,
Sol-6032,,,,,,,
Sol-6033,,,,,,,
Sol-6034,,,,,,,
Sol-6035,,,,,,,
Sol-6036,,,,,,,
Sol-6037,,,,,,,
Sol-6038,,,,,,,
Sol-6039,,,,,,,
Sol-6040,,,,,,,
Sol-6041,,,,,,,
Sol-6042,,,,,,,
Sol-6043,,,,,,,
Sol-6044,,,,,,,
Sol-6045,,,,,,,
Sol-6046,,,,,,,
Sol-6047,,,,,,,
Sol-6048,,,,,,,
Sol-6049,,,,,,,
Sol-6050,,,,,,,
Sol-6051,,,,,,,
Sol-6052,,,,,,,
Sol-6053,,,,,,,
Sol-6054,,,,,,,
Sol-6055,,,,,,,
Sol-6056,,,,,,,
Sol-6057,,,,,,,
Sol-6058,,,,,,,
Sol-6059,,,,,,,
Sol-6060,,,,,,,
Sol-6061,,,,,,,
Sol-6062,,,,,,,
Sol-6063,,,,,,,
Sol-6064,,,,,,,
Sol-6065,,,,,,,
Sol-6066,,,,,,,
Sol-6067,,,,,,,
Sol-6068,,,,,,,
Sol-6069,,,,,,,
Sol-6070,,,,,,,
Sol-6071,,,,,,,
Sol-6072,,,,,,,
Sol-6073,,,,,,,
Sol-6074,,,,,,,
Sol-6075,,,,,,,
Sol-6076,,,,,,,
Sol-6077,,,,,,,
Sol-6078,,,,,,,
Sol-6079,,,,,,,
Sol-6080,,,,,,,
Sol-6081,,,,,,,
Sol-6082,,,,,,,
Sol-6083,,,,,,,
Sol-6084,,,,,,,
Sol-6085,,,,,,,
Sol-6086,,,,,,,
Sol-6087,,,,,,,
Sol-6088,,,,,,,
Sol-6089,,,,,,,
Sol-6090,,,,,,,
Sol-6091,,,,,,,
Sol-6092,,,,,,,
Sol-6093,,,,,,,
Sol-6094,,,,,,,
Sol-6095,,,,,,,
Sol-6096,,,,,,,
Sol-6097,,,,,,,
Sol-6098,,,,,,,
Sol-6099,,,,,,,
Sol-6100,,,,,,,
Sol-6101,,,,,,,
Sol-6102,,,,,,,
Sol-6103,,,,,,,
Sol-6104,,,,,,,
Sol-6105,,,,,,,
Sol-6106,,,,,,,
Sol-6107,,,,,,,
Sol-6108,,,,,,,
Sol-6109,,,,,,,
Sol-6110,,,,,,,
Sol-6111,,,,,,,
Sol-6112,,,,,,,
Sol-6113,,,,,,,
Sol-6114,,,,,,,
Sol-6115,,,,,,,
Sol-6116,,,,,,,
Sol-6117,,,,,,,
Sol-6118,,,,,,,
Sol-6119,,,,,,,
Sol-6120,,,,,,,
Sol-6121,,,,,,,
Sol-6122,,,,,,,
Sol-6123,,,,,,,
Sol-6124,,,,,,,
Sol-6125,,,,,,,
Sol-6126,,,,,,,
Sol-6127,,,,,,,
Sol-6128,,,,,,,
Sol-6129,,,,,,,
Sol-6130,,,,,,,
Sol-6131,,,,,,,
Sol-6132,,,,,,,
Sol-6133,,,,,,,
Sol-6134,,,,,,,
Sol-6135,,,,,,,
Sol-6136,,,,,,,
Sol-6137,,,,,,,
Sol-6138,,,,,,,
Sol-6139,,,,,,,
Sol-6140,,,,,,,
Sol-6141,,,,,,,
Sol-6142,,,,,,,
Sol-6143,,,,,,,
Sol-6144,,,,,,,
Sol-6145,,,,,,,
Sol-6146,,,,,,,
Sol-6147,,,,,,,
Sol-6148,,,,,,,
Sol-6149,,,,,,,
Sol-6150,,,,,,,
Sol-6151,,,,,,,
Sol-6152,,,,,,,
Sol-6153,,,,,,,
Sol-6154,,,,,,,
Sol-6155,,,,,,,
Sol-6156,,,,,,,
Sol-6157,,,,,,,
Sol-6158,,,,,,,
Sol-6159,,,,,,,
Sol-6160,,,,,,,
Sol-6161,,,,,,,
Sol-6162,,,,,,,
Sol-6163,,,,,,,
Sol-6164,,,,,,,
Sol-6165,,,,,,,
Sol-6166,,,,,,,
Sol-6167,,,,,,,
Sol-6168,,,,,,,
Sol-6169,,,,,,,
Sol-6170,,,,,,,
Sol-6171,,,,,,,
Sol-6172,,,,,,,
Sol-6173,,,,,,,
Sol-6174,,,,,,,
Sol-6175,,,,,,,
Sol-6176,,,,,,,
Sol-6177,,,,,,,
Sol-6178,,,,,,,
Sol-6179,,,,,,,
Sol-6180,,,,,,,
Sol-6181,,,,,,,
Sol-6182,,,,,,,
Sol-6183,,,,,,,
Sol-6184,,,,,,,
Sol-6185,,,,,,,
Sol-6186,,,,,,,
Sol-6187,,,,,,,
Sol-6188,,,,,,,
Sol-6189,,,,,,,
Sol-6190,,,,,,,
Sol-6191,,,,,,,
Sol-6192,,,,,,,
Sol-6193,,,,,,,
Sol-6194,,,,,,,
Sol-6195,,,,,,,
Sol-6196,,,,,,,
Sol-6197,,,,,,,
Sol-6198,,,,,,,
Sol-6199,,,,,,,
Sol-6200,,,,,,,
Sol-6201,,,,,,,
Sol-6202,,,,,,,
Sol-6203,,,,,,,
Sol-6204,,,,,,,
Sol-6205,,,,,,,
Sol-6206,,,,,,,
Sol-6207,,,,,,,
Sol-6208,,,,,,,
Sol-6209,,,,,,,
Sol-6210,,,,,,,
Sol-6211,,,,,,,
Sol-6212,,,,,,,
Sol-6213,,,,,,,
Sol-6214,,,,,,,
Sol-6215,,,,,,,
Sol-6216,,,,,,,
Sol-6217,,,,,,,
Sol-6218,,,,,,,
Sol-6219,,,,,,,
Sol-6220,,,,,,,
Sol-6221,,,,,,,
Sol-6222,,,,,,,
Sol-6223,,,,,,,
Sol-6224,,,,,,,
Sol-6225,,,,,,,
Sol-6226,,,,,,,
Sol-6227,,,,,,,
Sol-6228,,,,,,,
Sol-6229,,,,,,,
Sol-6230,,,,,,,
Sol-6231,,,,,,,
Sol-6232,,,,,,,
Sol-6233,,,,,,,
Sol-6234,,,,,,,
Sol-6235,,,,,,,
Sol-6236,,,,,,,
Sol-6237,,,,,,,
Sol-6238,,,,,,,
Sol-6239,,,,,,,
Sol-6240,,,,,,,
Sol-6241,,,,,,,
Sol-6242,,,,,,,
Sol-6243,,,,,,,
Sol-6244,,,,,,,
Sol-6245,,,,,,,
Sol-6246,,,,,,,
Sol-6247,,,,,,,
Sol-6248,,,,,,,
Sol-6249,,,,,,,
Sol-6250,,,,,,,
Sol-6251,,,,,,,
Sol-6252,,,,,,,
Sol-6253,,,,,,,
Sol-6254,,,,,,,
Sol-6255,,,,,,,
Sol-6256,,,,,,,
Sol-6257,,,,,,,
Sol-6258,,,,,,,
Sol-6259,,,,,,,
Sol-6260,,,,,,,
Sol-6261,,,,,,,
Sol-6262,,,,,,,
Sol-6263,,,,,,,
Sol-6264,,,,,,,
Sol-6265,,,,,,,
Sol-6266,,,,,,,
Sol-6267,,,,,,,
Sol-6268,,,,,,,
Sol-6269,,,,,,,
Sol-6270,,,,,,,
Sol-6271,,,,,,,
Sol-6272,,,,,,,
Sol-6273,,,,,,,
Sol-6274,,,,,,,
Sol-6275,,,,,,,
Sol-6276,,,,,,,
Sol-6277,,,,,,,
Sol-6278,,,,,,,
Sol-6279,,,,,,,
Sol-6280,,,,,,,
Sol-6281,,,,,,,
Sol-6282,,,,,,,
Sol-6283,,,,,,,
Sol-6284,,,,,,,
Sol-6285,,,,,,,
Sol-6286,,,,,,,
Sol-6287,,,,,,,
Sol-6288,,,,,,,
Sol-6289,,,,,,,
Sol-6290,,,,,,,
Sol-6291,,,,,,,
Sol-6292,,,,,,,
Sol-6293,,,,,,,
Sol-6294,,,,,,,
Sol-6295,,,,,,,
Sol-6296,,,,,,,
Sol-6297,,,,,,,
Sol-6298,,,,,,,
Sol-6299,,,,,,,
Sol-6300,,,,,,,
Sol-6301,,,,,,,
Sol-6302,,,,,,,
Sol-6303,,,,,,,
Sol-6304,,,,,,,
Sol-6305,,,,,,,
Sol-6306,,,,,,,
Sol-6307,,,,,,,
Sol-6308,,,,,,,
Sol-6309,,,,,,,
Sol-6310,,,,,,,
Sol-6311,,,,,,,
Sol-6312,,,,,,,
Sol-6313,,,,,,,
Sol-6314,,,,,,,
Sol-6315,,,,,,,
Sol-6316,,,,,,,
Sol-6317,,,,,,,
Sol-6318,,,,,,,
Sol-6319,,,,,,,
Sol-6320,,,,,,,
Sol-6321,,,,,,,
Sol-6322,,,,,,,
Sol-6323,,,,,,,
Sol-6324,,,,,,,
Sol-6325,,,,,,,
Sol-6326,,,,,,,
Sol-6327,,,,,,,
Sol-6328,,,,,,,
Sol-6329,,,,,,,
Sol-6330,,,,,,,
Sol-6331,,,,,,,
Sol-6332,,,,,,,
Sol-6333,,,,,,,
Sol-6334,,,,,,,
Sol-6335,,,,,,,
Sol-6336,,,,,,,
Sol-6337,,,,,,,
Sol-6338,,,,,,,
Sol-6339,,,,,,,
Sol-6340,,,,,,,
Sol-6341,,,,,,,
Sol-6342,,,,,,,
Sol-6343,,,,,,,
Sol-6344,,,,,,,
Sol-6345,,,,,,,
Sol-6346,,,,,,,
Sol-6347,,,,,,,
Sol-6348,,,,,,,
Sol-6349,,,,,,,
Sol-6350,,,,,,,
Sol-6351,,,,,,,
Sol-6352,,,,,,,
Sol-6353,,,,,,,
Sol-6354,,,,,,,
Sol-6355,,,,,,,
Sol-6356,,,,,,,
Sol-6357,,,,,,,
Sol-6358,,,,,,,
Sol-6359,,,,,,,
Sol-6360,,,,,,,
Sol-6361,,,,,,,
Sol-6362,,,,,,,
Sol-6363,,,,,,,
Sol-6364,,,,,,,
Sol-6365,,,,,,,
Sol-6366,,,,,,,
Sol-6367,,,,,,,
Sol-6368,,,,,,,
Sol-6369,,,,,,,
Sol-6370,,,,,,,
Sol-6371,,,,,,,
Sol-6372,,,,,,,
Sol-6373,,,,,,,
Sol-6374,,,,,,,
Sol-6375,,,,,,,
Sol-6376,,,,,,,
Sol-6377,,,,,,,
Sol-6378,,,,,,,
Sol-6379,,,,,,,
Sol-6380,,,,,,,
Sol-6381,,,,,,,
Sol-6382,,,,,,,
Sol-6383,,,,,,,
Sol-6384,,,,,,,
Sol-6385,,,,,,,
Sol-6386,,,,,,,
Sol-6387,,,,,,,
Sol-6388,,,,,,,
Sol-6389,,,,,,,
Sol-6390,,,,,,,
Sol-6391,,,,,,,
Sol-6392,,,,,,,
Sol-6393,,,,,,,
Sol-6394,,,,,,,
Sol-6395,,,,,,,
Sol-6396,,,,,,,
Sol-6397,,,,,,,
Sol-6398,,,,,,,
Sol-6399,,,,,,,
Sol-6400,,,,,,,
Sol-6401,,,,,,,
Sol-6402,,,,,,,
Sol-6403,,,,,,,
Sol-6404,,,,,,,
Sol-6405,,,,,,,
Sol-6406,,,,,,,
Sol-6407,,,,,,,
Sol-6408,,,,,,,
Sol-6409,,,,,,,
Sol-6410,,,,,,,
Sol-6411,,,,,,,
Sol-6412,,,,,,,
Sol-6413,,,,,,,
Sol-6414,,,,,,,
Sol-6415,,,,,,,
Sol-6416,,,,,,,
Sol-6417,,,,,,,
Sol-6418,,,,,,,
Sol-6419,,,,,,,
Sol-6420,,,,,,,
Sol-6421,,,,,,,
Sol-6422,,,,,,,
Sol-6423,,,,,,,
Sol-6424,,,,,,,
Sol-6425,,,,,,,
Sol-6426,,,,,,,
Sol-6427,,,,,,,
Sol-6428,,,,,,,
Sol-6429,,,,,,,
Sol-6430,,,,,,,
Sol-6431,,,,,,,
Sol-6432,,,,,,,
Sol-6433,,,,,,,
Sol-6434,,,,,,,
Sol-6435,,,,,,,
Sol-6436,,,,,,,
Sol-6437,,,,,,,
Sol-6438,,,,,,,
Sol-6439,,,,,,,
Sol-6440,,,,,,,
Sol-6441,,,,,,,
Sol-6442,,,,,,,
Sol-6443,,,,,,,
Sol-6444,,,,,,,
Sol-6445,,,,,,,
Sol-6446,,,,,,,
Sol-6447,,,,,,,
Sol-6448,,,,,,,
Sol-6449,,,,,,,
Sol-6450,,,,,,,
Sol-6451,,,,,,,
Sol-6452,,,,,,,
Sol-6453,,,,,,,
Sol-6454,,,,,,,
Sol-6455,,,,,,,
Sol-6456,,,,,,,
Sol-6457,,,,,,,
Sol-6458,,,,,,,
Sol-6459,,,,,,,
Sol-6460,,,,,,,
Sol-6461,,,,,,,
Sol-6462,,,,,,,
Sol-6463,,,,,,,
Sol-6464,,,,,,,
Sol-6465,,,,,,,
Sol-6466,,,,,,,
Sol-6467,,,,,,,
Sol-6468,,,,,,,
Sol-6469,,,,,,,
Sol-6470,,,,,,,
Sol-6471,,,,,,,
Sol-6472,,,,,,,
Sol-6473,,,,,,,
Sol-6474,,,,,,,
Sol-6475,,,,,,,
Sol-6476,,,,,,,
Sol-6477,,,,,,,
Sol-6478,,,,,,,
Sol-6479,,,,,,,
Sol-6480,,,,,,,
Sol-6481,,,,,,,
Sol-6482,,,,,,,
Sol-6483,,,,,,,
Sol-6484,,,,,,,
Sol-6485,,,,,,,
Sol-6486,,,,,,,
Sol-6487,,,,,,,
Sol-6488,,,,,,,
Sol-6489,,,,,,,
Sol-6490,,,,,,,
Sol-6491,,,,,,,
Sol-6492,,,,,,,
Sol-6493,,,,,,,
Sol-6494,,,,,,,
Sol-6495,,,,,,,
Sol-6496,,,,,,,
Sol-6497,,,,,,,
Sol-6498,,,,,,,
Sol-6499,,,,,,,
Sol-6500,,,,,,,
Sol-6501,,,,,,,
Sol-6502,,,,,,,
Sol-6503,,,,,,,
Sol-6504,,,,,,,
Sol-6505,,,,,,,
Sol-6506,,,,,,,
Sol-6507,,,,,,,
Sol-6508,,,,,,,
Sol-6509,,,,,,,
Sol-6510,,,,,,,
Sol-6511,,,,,,,
Sol-6512,,,,,,,
Sol-6513,,,,,,,
Sol-6514,,,,,,,
Sol-6515,,,,,,,
Sol-6516,,,,,,,
Sol-6517,,,,,,,
Sol-6518,,,,,,,
Sol-6519,,,,,,,
Sol-6520,,,,,,,
Sol-6521,,,,,,,
Sol-6522,,,,,,,
Sol-6523,,,,,,,
Sol-6524,,,,,,,
Sol-6525,,,,,,,
Sol-6526,,,,,,,
Sol-6527,,,,,,,
Sol-6528,,,,,,,
Sol-6529,,,,,,,
Sol-6530,,,,,,,
Sol-6531,,,,,,,
Sol-6532,,,,,,,
Sol-6533,,,,,,,
Sol-6534,,,,,,,
Sol-6535,,,,,,,
Sol-6536,,,,,,,
Sol-6537,,,,,,,
Sol-6538,,,,,,,
Sol-6539,,,,,,,
Sol-6540,,,,,,,
Sol-6541,,,,,,,
Sol-6542,,,,,,,
Sol-6543,,,,,,,
Sol-6544,,,,,,,
Sol-6545,,,,,,,
Sol-6546,,,,,,,
Sol-6547,,,,,,,
Sol-6548,,,,,,,
Sol-6549,,,,,,,
Sol-6550,,,,,,,
Sol-6551,,,,,,,
Sol-6552,,,,,,,
Sol-6553,,,,,,,
Sol-6554,,,,,,,
Sol-6555,,,,,,,
Sol-6556,,,,,,,
Sol-6557,,,,,,,
Sol-6558,,,,,,,
Sol-6559,,,,,,,
Sol-6560,,,,,,,
Sol-6561,,,,,,,
Sol-6562,,,,,,,
Sol-6563,,,,,,,
Sol-6564,,,,,,,
Sol-6565,,,,,,,
Sol-6566,,,,,,,
Sol-6567,,,,,,,
Sol-6568,,,,,,,
Sol-6569,,,,,,,
Sol-6570,,,,,,,
Sol-6571,,,,,,,
Sol-6572,,,,,,,
Sol-6573,,,,,,,
Sol-6574,,,,,,,
Sol-6575,,,,,,,
Sol-6576,,,,,,,
Sol-6577,,,,,,,
Sol-6578,,,,,,,
Sol-6579,,,,,,,
Sol-6580,,,,,,,
Sol-6581,,,,,,,
Sol-6582,,,,,,,
Sol-6583,,,,,,,
Sol-6584,,,,,,,
Sol-6585,,,,,,,
Sol-6586,,,,,,,
Sol-6587,,,,,,,
Sol-6588,,,,,,,
Sol-6589,,,,,,,
Sol-6590,,,,,,,
Sol-6591,,,,,,,
Sol-6592,,,,,,,
Sol-6593,,,,,,,
Sol-6594,,,,,,,
Sol-6595,,,,,,,
Sol-6596,,,,,,,
Sol-6597,,,,,,,
Sol-6598,,,,,,,
Sol-6599,,,,,,,
Sol-6600,,,,,,,
Sol-6601,,,,,,,
Sol-6602,,,,,,,
Sol-6603,,,,,,,
Sol-6604,,,,,,,
Sol-6605,,,,,,,
Sol-6606,,,,,,,
Sol-6607,,,,,,,
Sol-6608,,,,,,,
Sol-6609,,,,,,,
Sol-6610,,,,,,,
Sol-6611,,,,,,,
Sol-6612,,,,,,,
Sol-6613,,,,,,,
Sol-6614,,,,,,,
Sol-6615,,,,,,,
Sol-6616,,,,,,,
Sol-6617,,,,,,,
Sol-6618,,,,,,,
Sol-6619,,,,,,,
Sol-6620,,,,,,,
Sol-6621,,,,,,,
Sol-6622,,,,,,,
Sol-6623,,,,,,,
Sol-6624,,,,,,,
Sol-6625,,,,,,,
Sol-6626,,,,,,,
Sol-6627,,,,,,,
Sol-6628,,,,,,,
Sol-6629,,,,,,,
Sol-6630,,,,,,,
Sol-6631,,,,,,,
Sol-6632,,,,,,,
Sol-6633,,,,,,,
Sol-6634,,,,,,,
Sol-6635,,,,,,,
Sol-6636,,,,,,,
Sol-6637,,,,,,,
Sol-6638,,,,,,,
Sol-6639,,,,,,,
Sol-6640,,,,,,,
Sol-6641,,,,,,,
Sol-6642,,,,,,,
Sol-6643,,,,,,,
Sol-6644,,,,,,,
Sol-6645,,,,,,,
Sol-6646,,,,,,,
Sol-6647,,,,,,,
Sol-6648,,,,,,,
Sol-6649,,,,,,,
Sol-6650,,,,,,,
Sol-6651,,,,,,,
Sol-6652,,,,,,,
Sol-6653,,,,,,,
Sol-6654,,,,,,,
Sol-6655,,,,,,,
Sol-6656,,,,,,,
Sol-6657,,,,,,,
Sol-6658,,,,,,,
Sol-6659,,,,,,,
Sol-6660,,,,,,,
Sol-6661,,,,,,,
Sol-6662,,,,,,,
Sol-6663,,,,,,,
Sol-6664,,,,,,,
Sol-6665,,,,,,,
Sol-6666,,,,,,,
Sol-6667,,,,,,,
Sol-6668,,,,,,,
Sol-6669,,,,,,,
Sol-6670,,,,,,,
Sol-6671,,,,,,,
Sol-6672,,,,,,,
Sol-6673,,,,,,,
Sol-6674,,,,,,,
Sol-6675,,,,,,,
Sol-6676,,,,,,,
Sol-6677,,,,,,,
Sol-6678,,,,,,,
Sol-6679,,,,,,,
Sol-6680,,,,,,,
Sol-6681,,,,,,,
Sol-6682,,,,,,,
Sol-6683,,,,,,,
Sol-6684,,,,,,,
Sol-6685,,,,,,,
Sol-6686,,,,,,,
Sol-6687,,,,,,,
Sol-6688,,,,,,,
Sol-6689,,,,,,,
Sol-6690,,,,,,,
Sol-6691,,,,,,,
Sol-6692,,,,,,,
Sol-6693,,,,,,,
Sol-6694,,,,,,,
Sol-6695,,,,,,,
Sol-6696,,,,,,,
Sol-6697,,,,,,,
Sol-6698,,,,,,,
Sol-6699,,,,,,,
Sol-6700,,,,,,,
Sol-6701,,,,,,,
Sol-6702,,,,,,,
Sol-6703,,,,,,,
Sol-6704,,,,,,,
Sol-6705,,,,,,,
Sol-6706,,,,,,,
Sol-6707,,,,,,,
Sol-6708,,,,,,,
Sol-6709,,,,,,,
Sol-6710,,,,,,,
Sol-6711,,,,,,,
Sol-6712,,,,,,,
Sol-6713,,,,,,,
Sol-6714,,,,,,,
Sol-6715,,,,,,,
Sol-6716,,,,,,,
Sol-6717,,,,,,,
Sol-6718,,,,,,,
Sol-6719,,,,,,,
Sol-6720,,,,,,,
Sol-6721,,,,,,,
Sol-6722,,,,,,,
Sol-6723,,,,,,,
Sol-6724,,,,,,,
Sol-6725,,,,,,,
Sol-6726,,,,,,,
Sol-6727,,,,,,,
Sol-6728,,,,,,,
Sol-6729,,,,,,,
Sol-6730,,,,,,,
Sol-6731,,,,,,,
Sol-6732,,,,,,,
Sol-6733,,,,,,,
Sol-6734,,,,,,,
Sol-6735,,,,,,,
Sol-6736,,,,,,,
Sol-6737,,,,,,,
Sol-6738,,,,,,,
Sol-6739,,,,,,,
Sol-6740,,,,,,,
Sol-6741,,,,,,,
Sol-6742,,,,,,,
Sol-6743,,,,,,,
Sol-6744,,,,,,,
Sol-6745,,,,,,,
Sol-6746,,,,,,,
Sol-6747,,,,,,,
Sol-6748,,,,,,,
Sol-6749,,,,,,,
Sol-6750,,,,,,,
Sol-6751,,,,,,,
Sol-6752,,,,,,,
Sol-6753,,,,,,,
Sol-6754,,,,,,,
Sol-6755,,,,,,,
Sol-6756,,,,,,,
Sol-6757,,,,,,,
Sol-6758,,,,,,,
Sol-6759,,,,,,,
Sol-6760,,,,,,,
Sol-6761,,,,,,,
Sol-6762,,,,,,,
Sol-6763,,,,,,,
Sol-6764,,,,,,,
Sol-6765,,,,,,,
Sol-6766,,,,,,,
Sol-6767,,,,,,,
Sol-6768,,,,,,,
Sol-6769,,,,,,,
Sol-6770,,,,,,,
Sol-6771,,,,,,,
Sol-6772,,,,,,,
Sol-6773,,,,,,,
Sol-6774,,,,,,,
Sol-6775,,,,,,,
Sol-6776,,,,,,,
Sol-6777,,,,,,,
Sol-6778,,,,,,,
Sol-6779,,,,,,,
Sol-6780,,,,,,,
Sol-6781,,,,,,,
Sol-6782,,,,,,,
Sol-6783,,,,,,,
Sol-6784,,,,,,,
Sol-6785,,,,,,,
Sol-6786,,,,,,,
Sol-6787,,,,,,,
Sol-6788,,,,,,,
Sol-6789,,,,,,,
Sol-6790,,,,,,,
Sol-6791,,,,,,,
Sol-6792,,,,,,,
Sol-6793,,,,,,,
Sol-6794,,,,,,,
Sol-6795,,,,,,,
Sol-6796,,,,,,,
Sol-6797,,,,,,,
Sol-6798,,,,,,,
Sol-6799,,,,,,,
Sol-6800,,,,,,,
Sol-6801,,,,,,,
Sol-6802,,,,,,,
Sol-6803,,,,,,,
Sol-6804,,,,,,,
Sol-6805,,,,,,,
Sol-6806,,,,,,,
Sol-6807,,,,,,,
Sol-6808,,,,,,,
Sol-6809,,,,,,,
Sol-6810,,,,,,,
Sol-6811,,,,,,,
Sol-6812,,,,,,,
Sol-6813,,,,,,,
Sol-6814,,,,,,,
Sol-6815,,,,,,,
Sol-6816,,,,,,,
Sol-6817,,,,,,,
Sol-6818,,,,,,,
Sol-6819,,,,,,,
Sol-6820,,,,,,,
Sol-6821,,,,,,,
Sol-6822,,,,,,,
Sol-6823,,,,,,,
Sol-6824,,,,,,,
Sol-6825,,,,,,,
Sol-6826,,,,,,,
Sol-6827,,,,,,,
Sol-6828,,,,,,,
Sol-6829,,,,,,,
Sol-6830,,,,,,,
Sol-6831,,,,,,,
Sol-6832,,,,,,,
Sol-6833,,,,,,,
Sol-6834,,,,,,,
Sol-6835,,,,,,,
Sol-6836,,,,,,,
Sol-6837,,,,,,,
Sol-6838,,,,,,,
Sol-6839,,,,,,,
Sol-6840,,,,,,,
Sol-6841,,,,,,,
Sol-6842,,,,,,,
Sol-6843,,,,,,,
Sol-6844,,,,,,,
Sol-6845,,,,,,,
Sol-6846,,,,,,,
Sol-6847,,,,,,,
Sol-6848,,,,,,,
Sol-6849,,,,,,,
Sol-6850,,,,,,,
Sol-6851,,,,,,,
Sol-6852,,,,,,,
Sol-6853,,,,,,,
Sol-6854,,,,,,,
Sol-6855,,,,,,,
Sol-6856,,,,,,,
Sol-6857,,,,,,,
Sol-6858,,,,,,,
Sol-6859,,,,,,,
Sol-6860,,,,,,,
Sol-6861,,,,,,,
Sol-6862,,,,,,,
Sol-6863,,,,,,,
Sol-6864,,,,,,,
Sol-6865,,,,,,,
Sol-6866,,,,,,,
Sol-6867,,,,,,,
Sol-6868,,,,,,,
Sol-6869,,,,,,,
Sol-6870,,,,,,,
Sol-6871,,,,,,,
Sol-6872,,,,,,,
Sol-6873,,,,,,,
Sol-6874,,,,,,,
Sol-6875,,,,,,,
Sol-6876,,,,,,,
Sol-6877,,,,,,,
Sol-6878,,,,,,,
Sol-6879,,,,,,,
Sol-6880,,,,,,,
Sol-6881,,,,,,,
Sol-6882,,,,,,,
Sol-6883,,,,,,,
Sol-6884,,,,,,,
Sol-6885,,,,,,,
Sol-6886,,,,,,,
Sol-6887,,,,,,,
Sol-6888,,,,,,,
Sol-6889,,,,,,,
Sol-6890,,,,,,,
Sol-6891,,,,,,,
Sol-6892,,,,,,,
Sol-6893,,,,,,,
Sol-6894,,,,,,,
Sol-6895,,,,,,,
Sol-6896,,,,,,,
Sol-6897,,,,,,,
Sol-6898,,,,,,,
Sol-6899,,,,,,,
Sol-6900,,,,,,,
Sol-6901,,,,,,,
Sol-6902,,,,,,,
Sol-6903,,,,,,,
Sol-6904,,,,,,,
Sol-6905,,,,,,,
Sol-6906,,,,,,,
Sol-6907,,,,,,,
Sol-6908,,,,,,,
Sol-6909,,,,,,,
Sol-6910,,,,,,,
Sol-6911,,,,,,,
Sol-6912,,,,,,,
Sol-6913,,,,,,,
Sol-6914,,,,,,,
Sol-6915,,,,,,,
Sol-6916,,,,,,,
Sol-6917,,,,,,,
Sol-6918,,,,,,,
Sol-6919,,,,,,,
Sol-6920,,,,,,,
Sol-6921,,,,,,,
Sol-6922,,,,,,,
Sol-6923,,,,,,,
Sol-6924,,,,,,,
Sol-6925,,,,,,,
Sol-6926,,,,,,,
Sol-6927,,,,,,,
Sol-6928,,,,,,,
Sol-6929,,,,,,,
Sol-6930,,,,,,,
Sol-6931,,,,,,,
Sol-6932,,,,,,,
Sol-6933,,,,,,,
Sol-6934,,,,,,,
Sol-6935,,,,,,,
Sol-6936,,,,,,,
Sol-6937,,,,,,,
Sol-6938,,,,,,,
Sol-6939,,,,,,,
Sol-6940,,,,,,,
Sol-6941,,,,,,,
Sol-6942,,,,,,,
Sol-6943,,,,,,,
Sol-6944,,,,,,,
Sol-6945,,,,,,,
Sol-6946,,,,,,,
Sol-6947,,,,,,,
Sol-6948,,,,,,,
Sol-6949,,,,,,,
Sol-6950,,,,,,,
Sol-6951,,,,,,,
Sol-6952,,,,,,,
Sol-6953,,,,,,,
Sol-6954,,,,,,,
Sol-6955,,,,,,,
Sol-6956,,,,,,,
Sol-6957,,,,,,,
Sol-6958,,,,,,,
Sol-6959,,,,,,,
Sol-6960,,,,,,,
Sol-6961,,,,,,,
Sol-6962,,,,,,,
Sol-6963,,,,,,,
Sol-6964,,,,,,,
Sol-6965,,,,,,,
Sol-6966,,,,,,,
Sol-6967,,,,,,,
Sol-6968,,,,,,,
Sol-6969,,,,,,,
Sol-6970,,,,,,,
Sol-6971,,,,,,,
Sol-6972,,,,,,,
Sol-6973,,,,,,,
Sol-6974,,,,,,,
Sol-6975,,,,,,,
Sol-6976,,,,,,,
Sol-6977,,,,,,,
Sol-6978,,,,,,,
Sol-6979,,,,,,,
Sol-6980,,,,,,,
Sol-6981,,,,,,,
Sol-6982,,,,,,,
Sol-6983,,,,,,,
Sol-6984,,,,,,,
Sol-6985,,,,,,,
Sol-6986,,,,,,,
Sol-6987,,,,,,,
Sol-6988,,,,,,,
Sol-6989,,,,,,,
Sol-6990,,,,,,,
Sol-6991,,,,,,,
Sol-6992,,,,,,,
Sol-6993,,,,,,,
Sol-6994,,,,,,,
Sol-6995,,,,,,,
Sol-6996,,,,,,,
Sol-6997,,,,,,,
Sol-6998,,,,,,,
Sol-6999,,,,,,,
Sol-7000,,,,,,,
Sol-7001,,,,,,,
Sol-7002,,,,,,,
Sol-7003,,,,,,,
Sol-7004,,,,,,,
Sol-7005,,,,,,,
Sol-7006,,,,,,,
Sol-7007,,,,,,,
Sol-7008,,,,,,,
Sol-7009,,,,,,,
Sol-7010,,,,,,,
Sol-7011,,,,,,,
Sol-7012,,,,,,,
Sol-7013,,,,,,,
Sol-7014,,,,,,,
Sol-7015,,,,,,,
Sol-7016,,,,,,,
Sol-7017,,,,,,,
Sol-7018,,,,,,,
Sol-7019,,,,,,,
Sol-7020,,,,,,,
Sol-7021,,,,,,,
Sol-7022,,,,,,,
Sol-7023,,,,,,,
Sol-7024,,,,,,,
Sol-7025,,,,,,,
Sol-7026,,,,,,,
Sol-7027,,,,,,,
Sol-7028,,,,,,,
Sol-7029,,,,,,,
Sol-7030,,,,,,,
Sol-7031,,,,,,,
Sol-7032,,,,,,,
Sol-7033,,,,,,,
Sol-7034,,,,,,,
Sol-7035,,,,,,,
Sol-7036,,,,,,,
Sol-7037,,,,,,,
Sol-7038,,,,,,,
Sol-7039,,,,,,,
Sol-7040,,,,,,,
Sol-7041,,,,,,,
Sol-7042,,,,,,,
Sol-7043,,,,,,,
Sol-7044,,,,,,,
Sol-7045,,,,,,,
Sol-7046,,,,,,,
Sol-7047,,,,,,,
Sol-7048,,,,,,,
Sol-7049,,,,,,,
Sol-7050,,,,,,,
Sol-7051,,,,,,,
Sol-7052,,,,,,,
Sol-7053,,,,,,,
Sol-7054,,,,,,,
Sol-7055,,,,,,,
Sol-7056,,,,,,,
Sol-7057,,,,,,,
Sol-7058,,,,,,,
Sol-7059,,,,,,,
Sol-7060,,,,,,,
Sol-7061,,,,,,,
Sol-7062,,,,,,,
Sol-7063,,,,,,,
Sol-7064,,,,,,,
Sol-7065,,,,,,,
Sol-7066,,,,,,,
Sol-7067,,,,,,,
Sol-7068,,,,,,,
Sol-7069,,,,,,,
Sol-7070,,,,,,,
Sol-7071,,,,,,,
Sol-7072,,,,,,,
Sol-7073,,,,,,,
Sol-7074,,,,,,,
Sol-7075,,,,,,,
Sol-7076,,,,,,,
Sol-7077,,,,,,,
Sol-7078,,,,,,,
Sol-7079,,,,,,,
Sol-7080,,,,,,,
Sol-7081,,,,,,,
Sol-7082,,,,,,,
Sol-7083,,,,,,,
Sol-7084,,,,,,,
Sol-7085,,,,,,,
Sol-7086,,,,,,,
Sol-7087,,,,,,,
Sol-7088,,,,,,,
Sol-7089,,,,,,,
Sol-7090,,,,,,,
Sol-7091,,,,,,,
Sol-7092,,,,,,,
Sol-7093,,,,,,,
Sol-7094,,,,,,,
Sol-7095,,,,,,,
Sol-7096,,,,,,,
Sol-7097,,,,,,,
Sol-7098,,,,,,,
Sol-7099,,,,,,,
Sol-7100,,,,,,,
Sol-7101,,,,,,,
Sol-7102,,,,,,,
Sol-7103,,,,,,,
Sol-7104,,,,,,,
Sol-7105,,,,,,,
Sol-7106,,,,,,,
Sol-7107,,,,,,,
Sol-7108,,,,,,,
Sol-7109,,,,,,,
Sol-7110,,,,,,,
Sol-7111,,,,,,,
Sol-7112,,,,,,,
Sol-7113,,,,,,,
Sol-7114,,,,,,,
Sol-7115,,,,,,,
Sol-7116,,,,,,,
Sol-7117,,,,,,,
Sol-7118,,,,,,,
Sol-7119,,,,,,,
Sol-7120,,,,,,,
Sol-7121,,,,,,,
Sol-7122,,,,,,,
Sol-7123,,,,,,,
Sol-7124,,,,,,,
Sol-7125,,,,,,,
Sol-7126,,,,,,,
Sol-7127,,,,,,,
Sol-7128,,,,,,,
Sol-7129,,,,,,,
Sol-7130,,,,,,,
Sol-7131,,,,,,,
Sol-7132,,,,,,,
Sol-7133,,,,,,,
Sol-7134,,,,,,,
Sol-7135,,,,,,,
Sol-7136,,,,,,,
Sol-7137,,,,,,,
Sol-7138,,,,,,,
Sol-7139,,,,,,,
Sol-7140,,,,,,,
Sol-7141,,,,,,,
Sol-7142,,,,,,,
Sol-7143,,,,,,,
Sol-7144,,,,,,,
Sol-7145,,,,,,,
Sol-7146,,,,,,,
Sol-7147,,,,,,,
Sol-7148,,,,,,,
Sol-7149,,,,,,,
Sol-7150,,,,,,,
Sol-7151,,,,,,,
Sol-7152,,,,,,,
Sol-7153,,,,,,,
Sol-7154,,,,,,,
Sol-7155,,,,,,,
Sol-7156,,,,,,,
Sol-7157,,,,,,,
Sol-7158,,,,,,,
Sol-7159,,,,,,,
Sol-7160,,,,,,,
Sol-7161,,,,,,,
Sol-7162,,,,,,,
Sol-7163,,,,,,,
Sol-7164,,,,,,,
Sol-7165,,,,,,,
Sol-7166,,,,,,,
Sol-7167,,,,,,,
Sol-7168,,,,,,,
Sol-7169,,,,,,,
Sol-7170,,,,,,,
Sol-7171,,,,,,,
Sol-7172,,,,,,,
Sol-7173,,,,,,,
Sol-7174,,,,,,,
Sol-7175,,,,,,,
Sol-7176,,,,,,,
Sol-7177,,,,,,,
Sol-7178,,,,,,,
Sol-7179,,,,,,,
Sol-7180,,,,,,,
Sol-7181,,,,,,,
Sol-7182,,,,,,,
Sol-7183,,,,,,,
Sol-7184,,,,,,,
Sol-7185,,,,,,,
Sol-7186,,,,,,,
Sol-7187,,,,,,,
Sol-7188,,,,,,,
Sol-7189,,,,,,,
Sol-7190,,,,,,,
Sol-7191,,,,,,,
Sol-7192,,,,,,,
Sol-7193,,,,,,,
Sol-7194,,,,,,,
Sol-7195,,,,,,,
Sol-7196,,,,,,,
Sol-7197,,,,,,,
Sol-7198,,,,,,,
Sol-7199,,,,,,,
Sol-7200,,,,,,,
Sol-7201,,,,,,,
Sol-7202,,,,,,,
Sol-7203,,,,,,,
Sol-7204,,,,,,,
Sol-7205,,,,,,,
Sol-7206,,,,,,,
Sol-7207,,,,,,,
Sol-7208,,,,,,,
Sol-7209,,,,,,,
Sol-7210,,,,,,,
Sol-7211,,,,,,,
Sol-7212,,,,,,,
Sol-7213,,,,,,,
Sol-7214,,,,,,,
Sol-7215,,,,,,,
Sol-7216,,,,,,,
Sol-7217,,,,,,,
Sol-7218,,,,,,,
Sol-7219,,,,,,,
Sol-7220,,,,,,,
Sol-7221,,,,,,,
Sol-7222,,,,,,,
Sol-7223,,,,,,,
Sol-7224,,,,,,,
Sol-7225,,,,,,,
Sol-7226,,,,,,,
Sol-7227,,,,,,,
Sol-7228,,,,,,,
Sol-7229,,,,,,,
Sol-7230,,,,,,,
Sol-7231,,,,,,,
Sol-7232,,,,,,,
Sol-7233,,,,,,,
Sol-7234,,,,,,,
Sol-7235,,,,,,,
Sol-7236,,,,,,,
Sol-7237,,,,,,,
Sol-7238,,,,,,,
Sol-7239,,,,,,,
Sol-7240,,,,,,,
Sol-7241,,,,,,,
Sol-7242,,,,,,,
Sol-7243,,,,,,,
Sol-7244,,,,,,,
Sol-7245,,,,,,,
Sol-7246,,,,,,,
Sol-7247,,,,,,,
Sol-7248,,,,,,,
Sol-7249,,,,,,,
Sol-7250,,,,,,,
Sol-7251,,,,,,,
Sol-7252,,,,,,,
Sol-7253,,,,,,,
Sol-7254,,,,,,,
Sol-7255,,,,,,,
Sol-7256,,,,,,,
Sol-7257,,,,,,,
Sol-7258,,,,,,,
Sol-7259,,,,,,,
Sol-7260,,,,,,,
Sol-7261,,,,,,,
Sol-7262,,,,,,,
Sol-7263,,,,,,,
Sol-7264,,,,,,,
Sol-7265,,,,,,,
Sol-7266,,,,,,,
Sol-7267,,,,,,,
Sol-7268,,,,,,,
Sol-7269,,,,,,,
Sol-7270,,,,,,,
Sol-7271,,,,,,,
Sol-7272,,,,,,,
Sol-7273,,,,,,,
Sol-7274,,,,,,,
Sol-7275,,,,,,,
Sol-7276,,,,,,,
Sol-7277,,,,,,,
Sol-7278,,,,,,,
Sol-7279,,,,,,,
Sol-7280,,,,,,,
Sol-7281,,,,,,,
Sol-7282,,,,,,,
Sol-7283,,,,,,,
Sol-7284,,,,,,,
Sol-7285,,,,,,,
Sol-7286,,,,,,,
Sol-7287,,,,,,,
Sol-7288,,,,,,,
Sol-7289,,,,,,,
Sol-7290,,,,,,,
Sol-7291,,,,,,,
Sol-7292,,,,,,,
Sol-7293,,,,,,,
Sol-7294,,,,,,,
Sol-7295,,,,,,,
Sol-7296,,,,,,,
Sol-7297,,,,,,,
Sol-7298,,,,,,,
Sol-7299,,,,,,,
Sol-7300,,,,,,,
Sol-7301,,,,,,,
Sol-7302,,,,,,,
Sol-7303,,,,,,,
Sol-7304,,,,,,,
Sol-7305,,,,,,,
Sol-7306,,,,,,,
Sol-7307,,,,,,,
Sol-7308,,,,,,,
Sol-7309,,,,,,,
Sol-7310,,,,,,,
Sol-7311,,,,,,,
Sol-7312,,,,,,,
Sol-7313,,,,,,,
Sol-7314,,,,,,,
Sol-7315,,,,,,,
Sol-7316,,,,,,,
Sol-7317,,,,,,,
Sol-7318,,,,,,,
Sol-7319,,,,,,,
Sol-7320,,,,,,,
Sol-7321,,,,,,,
Sol-7322,,,,,,,
Sol-7323,,,,,,,
Sol-7324,,,,,,,
Sol-7325,,,,,,,
Sol-7326,,,,,,,
Sol-7327,,,,,,,
Sol-7328,,,,,,,
Sol-7329,,,,,,,
Sol-7330,,,,,,,
Sol-7331,,,,,,,
Sol-7332,,,,,,,
Sol-7333,,,,,,,
Sol-7334,,,,,,,
Sol-7335,,,,,,,
Sol-7336,,,,,,,
Sol-7337,,,,,,,
Sol-7338,,,,,,,
Sol-7339,,,,,,,
Sol-7340,,,,,,,
Sol-7341,,,,,,,
Sol-7342,,,,,,,
Sol-7343,,,,,,,
Sol-7344,,,,,,,
Sol-7345,,,,,,,
Sol-7346,,,,,,,
Sol-7347,,,,,,,
Sol-7348,,,,,,,
Sol-7349,,,,,,,
Sol-7350,,,,,,,
Sol-7351,,,,,,,
Sol-7352,,,,,,,
Sol-7353,,,,,,,
Sol-7354,,,,,,,
Sol-7355,,,,,,,
Sol-7356,,,,,,,
Sol-7357,,,,,,,
Sol-7358,,,,,,,
Sol-7359,,,,,,,
Sol-7360,,,,,,,
Sol-7361,,,,,,,
Sol-7362,,,,,,,
Sol-7363,,,,,,,
Sol-7364,,,,,,,
Sol-7365,,,,,,,
Sol-7366,,,,,,,
Sol-7367,,,,,,,
Sol-7368,,,,,,,
Sol-7369,,,,,,,
Sol-7370,,,,,,,
Sol-7371,,,,,,,
Sol-7372,,,,,,,
Sol-7373,,,,,,,
Sol-7374,,,,,,,
Sol-7375,,,,,,,
Sol-7376,,,,,,,
Sol-7377,,,,,,,
Sol-7378,,,,,,,
Sol-7379,,,,,,,
Sol-7380,,,,,,,
Sol-7381,,,,,,,
Sol-7382,,,,,,,
Sol-7383,,,,,,,
Sol-7384,,,,,,,
Sol-7385,,,,,,,
Sol-7386,,,,,,,
Sol-7387,,,,,,,
Sol-7388,,,,,,,
Sol-7389,,,,,,,
Sol-7390,,,,,,,
Sol-7391,,,,,,,
Sol-7392,,,,,,,
Sol-7393,,,,,,,
Sol-7394,,,,,,,
Sol-7395,,,,,,,
Sol-7396,,,,,,,
Sol-7397,,,,,,,
Sol-7398,,,,,,,
Sol-7399,,,,,,,
Sol-7400,,,,,,,
Sol-7401,,,,,,,
Sol-7402,,,,,,,
Sol-7403,,,,,,,
Sol-7404,,,,,,,
Sol-7405,,,,,,,
Sol-7406,,,,,,,
Sol-7407,,,,,,,
Sol-7408,,,,,,,
Sol-7409,,,,,,,
Sol-7410,,,,,,,
Sol-7411,,,,,,,
Sol-7412,,,,,,,
Sol-7413,,,,,,,
Sol-7414,,,,,,,
Sol-7415,,,,,,,
Sol-7416,,,,,,,
Sol-7417,,,,,,,
Sol-7418,,,,,,,
Sol-7419,,,,,,,
Sol-7420,,,,,,,
Sol-7421,,,,,,,
Sol-7422,,,,,,,
Sol-7423,,,,,,,
Sol-7424,,,,,,,
Sol-7425,,,,,,,
Sol-7426,,,,,,,
Sol-7427,,,,,,,
Sol-7428,,,,,,,
Sol-7429,,,,,,,
Sol-7430,,,,,,,
Sol-7431,,,,,,,
Sol-7432,,,,,,,
Sol-7433,,,,,,,
Sol-7434,,,,,,,
Sol-7435,,,,,,,
Sol-7436,,,,,,,
Sol-7437,,,,,,,
Sol-7438,,,,,,,
Sol-7439,,,,,,,
Sol-7440,,,,,,,
Sol-7441,,,,,,,
Sol-7442,,,,,,,
Sol-7443,,,,,,,
Sol-7444,,,,,,,
Sol-7445,,,,,,,
Sol-7446,,,,,,,
Sol-7447,,,,,,,
Sol-7448,,,,,,,
Sol-7449,,,,,,,
Sol-7450,,,,,,,
Sol-7451,,,,,,,
Sol-7452,,,,,,,
Sol-7453,,,,,,,
Sol-7454,,,,,,,
Sol-7455,,,,,,,
Sol-7456,,,,,,,
Sol-7457,,,,,,,
Sol-7458,,,,,,,
Sol-7459,,,,,,,
Sol-7460,,,,,,,
Sol-7461,,,,,,,
Sol-7462,,,,,,,
Sol-7463,,,,,,,
Sol-7464,,,,,,,
Sol-7465,,,,,,,
Sol-7466,,,,,,,
Sol-7467,,,,,,,
Sol-7468,,,,,,,
Sol-7469,,,,,,,
Sol-7470,,,,,,,
Sol-7471,,,,,,,
Sol-7472,,,,,,,
Sol-7473,,,,,,,
Sol-7474,,,,,,,
Sol-7475,,,,,,,
Sol-7476,,,,,,,
Sol-7477,,,,,,,
Sol-7478,,,,,,,
Sol-7479,,,,,,,
Sol-7480,,,,,,,
Sol-7481,,,,,,,
Sol-7482,,,,,,,
Sol-7483,,,,,,,
Sol-7484,,,,,,,
Sol-7485,,,,,,,
Sol-7486,,,,,,,
Sol-7487,,,,,,,
Sol-7488,,,,,,,
Sol-7489,,,,,,,
Sol-7490,,,,,,,
Sol-7491,,,,,,,
Sol-7492,,,,,,,
Sol-7493,,,,,,,
Sol-7494,,,,,,,
Sol-7495,,,,,,,
Sol-7496,,,,,,,
Sol-7497,,,,,,,
Sol-7498,,,,,,,
Sol-7499,,,,,,,
Sol-7500,,,,,,,
Sol-7501,,,,,,,
Sol-7502,,,,,,,
Sol-7503,,,,,,,
Sol-7504,,,,,,,
Sol-7505,,,,,,,
Sol-7506,,,,,,,
Sol-7507,,,,,,,
Sol-7508,,,,,,,
Sol-7509,,,,,,,
Sol-7510,,,,,,,
Sol-7511,,,,,,,
Sol-7512,,,,,,,
Sol-7513,,,,,,,
Sol-7514,,,,,,,
Sol-7515,,,,,,,
Sol-7516,,,,,,,
Sol-7517,,,,,,,
Sol-7518,,,,,,,
Sol-7519,,,,,,,
Sol-7520,,,,,,,
Sol-7521,,,,,,,
Sol-7522,,,,,,,
Sol-7523,,,,,,,
Sol-7524,,,,,,,
Sol-7525,,,,,,,
Sol-7526,,,,,,,
Sol-7527,,,,,,,
Sol-7528,,,,,,,
Sol-7529,,,,,,,
Sol-7530,,,,,,,
Sol-7531,,,,,,,
Sol-7532,,,,,,,
Sol-7533,,,,,,,
Sol-7534,,,,,,,
Sol-7535,,,,,,,
Sol-7536,,,,,,,
Sol-7537,,,,,,,
Sol-7538,,,,,,,
Sol-7539,,,,,,,
Sol-7540,,,,,,,
Sol-7541,,,,,,,
Sol-7542,,,,,,,
Sol-7543,,,,,,,
Sol-7544,,,,,,,
Sol-7545,,,,,,,
Sol-7546,,,,,,,
Sol-7547,,,,,,,
Sol-7548,,,,,,,
Sol-7549,,,,,,,
Sol-7550,,,,,,,
Sol-7551,,,,,,,
Sol-7552,,,,,,,
Sol-7553,,,,,,,
Sol-7554,,,,,,,
Sol-7555,,,,,,,
Sol-7556,,,,,,,
Sol-7557,,,,,,,
Sol-7558,,,,,,,
Sol-7559,,,,,,,
Sol-7560,,,,,,,
Sol-7561,,,,,,,
Sol-7562,,,,,,,
Sol-7563,,,,,,,
Sol-7564,,,,,,,
Sol-7565,,,,,,,
Sol-7566,,,,,,,
Sol-7567,,,,,,,
Sol-7568,,,,,,,
Sol-7569,,,,,,,
Sol-7570,,,,,,,
Sol-7571,,,,,,,
Sol-7572,,,,,,,
Sol-7573,,,,,,,
Sol-7574,,,,,,,
Sol-7575,,,,,,,
Sol-7576,,,,,,,
Sol-7577,,,,,,,
Sol-7578,,,,,,,
Sol-7579,,,,,,,
Sol-7580,,,,,,,
Sol-7581,,,,,,,
Sol-7582,,,,,,,
Sol-7583,,,,,,,
Sol-7584,,,,,,,
Sol-7585,,,,,,,
Sol-7586,,,,,,,
Sol-7587,,,,,,,
Sol-7588,,,,,,,
Sol-7589,,,,,,,
Sol-7590,,,,,,,
Sol-7591,,,,,,,
Sol-7592,,,,,,,
Sol-7593,,,,,,,
Sol-7594,,,,,,,
Sol-7595,,,,,,,
Sol-7596,,,,,,,
Sol-7597,,,,,,,
Sol-7598,,,,,,,
Sol-7599,,,,,,,
Sol-7600,,,,,,,
Sol-7601,,,,,,,
Sol-7602,,,,,,,
Sol-7603,,,,,,,
Sol-7604,,,,,,,
Sol-7605,,,,,,,
Sol-7606,,,,,,,
Sol-7607,,,,,,,
Sol-7608,,,,,,,
Sol-7609,,,,,,,
Sol-7610,,,,,,,
Sol-7611,,,,,,,
Sol-7612,,,,,,,
Sol-7613,,,,,,,
Sol-7614,,,,,,,
Sol-7615,,,,,,,
Sol-7616,,,,,,,
Sol-7617,,,,,,,
Sol-7618,,,,,,,
Sol-7619,,,,,,,
Sol-7620,,,,,,,
Sol-7621,,,,,,,
Sol-7622,,,,,,,
Sol-7623,,,,,,,
Sol-7624,,,,,,,
Sol-7625,,,,,,,
Sol-7626,,,,,,,
Sol-7627,,,,,,,
Sol-7628,,,,,,,
Sol-7629,,,,,,,
Sol-7630,,,,,,,
Sol-7631,,,,,,,
Sol-7632,,,,,,,
Sol-7633,,,,,,,
Sol-7634,,,,,,,
Sol-7635,,,,,,,
Sol-7636,,,,,,,
Sol-7637,,,,,,,
Sol-7638,,,,,,,
Sol-7639,,,,,,,
Sol-7640,,,,,,,
Sol-7641,,,,,,,
Sol-7642,,,,,,,
Sol-7643,,,,,,,
Sol-7644,,,,,,,
Sol-7645,,,,,,,
Sol-7646,,,,,,,
Sol-7647,,,,,,,
Sol-7648,,,,,,,
Sol-7649,,,,,,,
Sol-7650,,,,,,,
Sol-7651,,,,,,,
Sol-7652,,,,,,,
Sol-7653,,,,,,,
Sol-7654,,,,,,,
Sol-7655,,,,,,,
Sol-7656,,,,,,,
Sol-7657,,,,,,,
Sol-7658,,,,,,,
Sol-7659,,,,,,,
Sol-7660,,,,,,,
Sol-7661,,,,,,,
Sol-7662,,,,,,,
Sol-7663,,,,,,,
Sol-7664,,,,,,,
Sol-7665,,,,,,,
Sol-7666,,,,,,,
Sol-7667,,,,,,,
Sol-7668,,,,,,,
Sol-7669,,,,,,,
Sol-7670,,,,,,,
Sol-7671,,,,,,,
Sol-7672,,,,,,,
Sol-7673,,,,,,,
Sol-7674,,,,,,,
Sol-7675,,,,,,,
Sol-7676,,,,,,,
Sol-7677,,,,,,,
Sol-7678,,,,,,,
Sol-7679,,,,,,,
Sol-7680,,,,,,,
Sol-7681,,,,,,,
Sol-7682,,,,,,,
Sol-7683,,,,,,,
Sol-7684,,,,,,,
Sol-7685,,,,,,,
Sol-7686,,,,,,,
Sol-7687,,,,,,,
Sol-7688,,,,,,,
Sol-7689,,,,,,,
Sol-7690,,,,,,,
Sol-7691,,,,,,,
Sol-7692,,,,,,,
Sol-7693,,,,,,,
Sol-7694,,,,,,,
Sol-7695,,,,,,,
Sol-7696,,,,,,,
Sol-7697,,,,,,,
Sol-7698,,,,,,,
Sol-7699,,,,,,,
Sol-7700,,,,,,,
Sol-7701,,,,,,,
Sol-7702,,,,,,,
Sol-7703,,,,,,,
Sol-7704,,,,,,,
Sol-7705,,,,,,,
Sol-7706,,,,,,,
Sol-7707,,,,,,,
Sol-7708,,,,,,,
Sol-7709,,,,,,,
Sol-7710,,,,,,,
Sol-7711,,,,,,,
Sol-7712,,,,,,,
Sol-7713,,,,,,,
Sol-7714,,,,,,,
Sol-7715,,,,,,,
Sol-7716,,,,,,,
Sol-7717,,,,,,,
Sol-7718,,,,,,,
Sol-7719,,,,,,,
Sol-7720,,,,,,,
Sol-7721,,,,,,,
Sol-7722,,,,,,,
Sol-7723,,,,,,,
Sol-7724,,,,,,,
Sol-7725,,,,,,,
Sol-7726,,,,,,,
Sol-7727,,,,,,,
Sol-7728,,,,,,,
Sol-7729,,,,,,,
Sol-7730,,,,,,,
Sol-7731,,,,,,,
Sol-7732,,,,,,,
Sol-7733,,,,,,,
Sol-7734,,,,,,,
Sol-7735,,,,,,,
Sol-7736,,,,,,,
Sol-7737,,,,,,,
Sol-7738,,,,,,,
Sol-7739,,,,,,,
Sol-7740,,,,,,,
Sol-7741,,,,,,,
Sol-7742,,,,,,,
Sol-7743,,,,,,,
Sol-7744,,,,,,,
Sol-7745,,,,,,,
Sol-7746,,,,,,,
Sol-7747,,,,,,,
Sol-7748,,,,,,,
Sol-7749,,,,,,,
Sol-7750,,,,,,,
Sol-7751,,,,,,,
Sol-7752,,,,,,,
Sol-7753,,,,,,,
Sol-7754,,,,,,,
Sol-7755,,,,,,,
Sol-7756,,,,,,,
Sol-7757,,,,,,,
Sol-7758,,,,,,,
Sol-7759,,,,,,,
Sol-7760,,,,,,,
Sol-7761,,,,,,,
Sol-7762,,,,,,,
Sol-7763,,,,,,,
Sol-7764,,,,,,,
Sol-7765,,,,,,,
Sol-7766,,,,,,,
Sol-7767,,,,,,,
Sol-7768,,,,,,,
Sol-7769,,,,,,,
Sol-7770,,,,,,,
Sol-7771,,,,,,,
Sol-7772,,,,,,,
Sol-7773,,,,,,,
Sol-7774,,,,,,,
Sol-7775,,,,,,,
Sol-7776,,,,,,,
Sol-7777,,,,,,,
Sol-7778,,,,,,,
Sol-7779,,,,,,,
Sol-7780,,,,,,,
Sol-7781,,,,,,,
Sol-7782,,,,,,,
Sol-7783,,,,,,,
Sol-7784,,,,,,,
Sol-7785,,,,,,,
Sol-7786,,,,,,,
Sol-7787,,,,,,,
Sol-7788,,,,,,,
Sol-7789,,,,,,,
Sol-7790,,,,,,,
Sol-7791,,,,,,,
Sol-7792,,,,,,,
Sol-7793,,,,,,,
Sol-7794,,,,,,,
Sol-7795,,,,,,,
Sol-7796,,,,,,,
Sol-7797,,,,,,,
Sol-7798,,,,,,,
Sol-7799,,,,,,,
Sol-7800,,,,,,,
Sol-7801,,,,,,,
Sol-7802,,,,,,,
Sol-7803,,,,,,,
Sol-7804,,,,,,,
Sol-7805,,,,,,,
Sol-7806,,,,,,,
Sol-7807,,,,,,,
Sol-7808,,,,,,,
Sol-7809,,,,,,,
Sol-7810,,,,,,,
Sol-7811,,,,,,,
Sol-7812,,,,,,,
Sol-7813,,,,,,,
Sol-7814,,,,,,,
Sol-7815,,,,,,,
Sol-7816,,,,,,,
Sol-7817,,,,,,,
Sol-7818,,,,,,,
Sol-7819,,,,,,,
Sol-7820,,,,,,,
Sol-7821,,,,,,,
Sol-7822,,,,,,,
Sol-7823,,,,,,,
Sol-7824,,,,,,,
Sol-7825,,,,,,,
Sol-7826,,,,,,,
Sol-7827,,,,,,,
Sol-7828,,,,,,,
Sol-7829,,,,,,,
Sol-7830,,,,,,,
Sol-7831,,,,,,,
Sol-7832,,,,,,,
Sol-7833,,,,,,,
Sol-7834,,,,,,,
Sol-7835,,,,,,,
Sol-7836,,,,,,,
Sol-7837,,,,,,,
Sol-7838,,,,,,,
Sol-7839,,,,,,,
Sol-7840,,,,,,,
Sol-7841,,,,,,,
Sol-7842,,,,,,,
Sol-7843,,,,,,,
Sol-7844,,,,,,,
Sol-7845,,,,,,,
Sol-7846,,,,,,,
Sol-7847,,,,,,,
Sol-7848,,,,,,,
Sol-7849,,,,,,,
Sol-7850,,,,,,,
Sol-7851,,,,,,,
Sol-7852,,,,,,,
Sol-7853,,,,,,,
Sol-7854,,,,,,,
Sol-7855,,,,,,,
Sol-7856,,,,,,,
Sol-7857,,,,,,,
Sol-7858,,,,,,,
Sol-7859,,,,,,,
Sol-7860,,,,,,,
Sol-7861,,,,,,,
Sol-7862,,,,,,,
Sol-7863,,,,,,,
Sol-7864,,,,,,,
Sol-7865,,,,,,,
Sol-7866,,,,,,,
Sol-7867,,,,,,,
Sol-7868,,,,,,,
Sol-7869,,,,,,,
Sol-7870,,,,,,,
Sol-7871,,,,,,,
Sol-7872,,,,,,,
Sol-7873,,,,,,,
Sol-7874,,,,,,,
Sol-7875,,,,,,,
Sol-7876,,,,,,,
Sol-7877,,,,,,,
Sol-7878,,,,,,,
Sol-7879,,,,,,,
Sol-7880,,,,,,,
Sol-7881,,,,,,,
Sol-7882,,,,,,,
Sol-7883,,,,,,,
Sol-7884,,,,,,,
Sol-7885,,,,,,,
Sol-7886,,,,,,,
Sol-7887,,,,,,,
Sol-7888,,,,,,,
Sol-7889,,,,,,,
Sol-7890,,,,,,,
Sol-7891,,,,,,,
Sol-7892,,,,,,,
Sol-7893,,,,,,,
Sol-7894,,,,,,,
Sol-7895,,,,,,,
Sol-7896,,,,,,,
Sol-7897,,,,,,,
Sol-7898,,,,,,,
Sol-7899,,,,,,,
Sol-7900,,,,,,,
Sol-7901,,,,,,,
Sol-7902,,,,,,,
Sol-7903,,,,,,,
Sol-7904,,,,,,,
Sol-7905,,,,,,,
Sol-7906,,,,,,,
Sol-7907,,,,,,,
Sol-7908,,,,,,,
Sol-7909,,,,,,,
Sol-7910,,,,,,,
Sol-7911,,,,,,,
Sol-7912,,,,,,,
Sol-7913,,,,,,,
Sol-7914,,,,,,,
Sol-7915,,,,,,,
Sol-7916,,,,,,,
Sol-7917,,,,,,,
Sol-7918,,,,,,,
Sol-7919,,,,,,,
Sol-7920,,,,,,,
Sol-7921,,,,,,,
Sol-7922,,,,,,,
Sol-7923,,,,,,,
Sol-7924,,,,,,,
Sol-7925,,,,,,,
Sol-7926,,,,,,,
Sol-7927,,,,,,,
Sol-7928,,,,,,,
Sol-7929,,,,,,,
Sol-7930,,,,,,,
Sol-7931,,,,,,,
Sol-7932,,,,,,,
Sol-7933,,,,,,,
Sol-7934,,,,,,,
Sol-7935,,,,,,,
Sol-7936,,,,,,,
Sol-7937,,,,,,,
Sol-7938,,,,,,,
Sol-7939,,,,,,,
Sol-7940,,,,,,,
Sol-7941,,,,,,,
Sol-7942,,,,,,,
Sol-7943,,,,,,,
Sol-7944,,,,,,,
Sol-7945,,,,,,,
Sol-7946,,,,,,,
Sol-7947,,,,,,,
Sol-7948,,,,,,,
Sol-7949,,,,,,,
Sol-7950,,,,,,,
Sol-7951,,,,,,,
Sol-7952,,,,,,,
Sol-7953,,,,,,,
Sol-7954,,,,,,,
Sol-7955,,,,,,,
Sol-7956,,,,,,,
Sol-7957,,,,,,,
Sol-7958,,,,,,,
Sol-7959,,,,,,,
Sol-7960,,,,,,,
Sol-7961,,,,,,,
Sol-7962,,,,,,,
Sol-7963,,,,,,,
Sol-7964,,,,,,,
Sol-7965,,,,,,,
Sol-7966,,,,,,,
Sol-7967,,,,,,,
Sol-7968,,,,,,,
Sol-7969,,,,,,,
Sol-7970,,,,,,,
Sol-7971,,,,,,,
Sol-7972,,,,,,,
Sol-7973,,,,,,,
Sol-7974,,,,,,,
Sol-7975,,,,,,,
Sol-7976,,,,,,,
Sol-7977,,,,,,,
Sol-7978,,,,,,,
Sol-7979,,,,,,,
Sol-7980,,,,,,,
Sol-7981,,,,,,,
Sol-7982,,,,,,,
Sol-7983,,,,,,,
Sol-7984,,,,,,,
Sol-7985,,,,,,,
Sol-7986,,,,,,,
Sol-7987,,,,,,,
Sol-7988,,,,,,,
Sol-7989,,,,,,,
Sol-7990,,,,,,,
Sol-7991,,,,,,,
Sol-7992,,,,,,,
Sol-7993,,,,,,,
Sol-7994,,,,,,,
Sol-7995,,,,,,,
Sol-7996,,,,,,,
Sol-7997,,,,,,,
Sol-7998,,,,,,,
Sol-7999,,,,,,,
Sol-8000,,,,,,,
Sol-8001,,,,,,,
Sol-8002,,,,,,,
Sol-8003,,,,,,,
Sol-8004,,,,,,,
Sol-8005,,,,,,,
Sol-8006,,,,,,,
Sol-8007,,,,,,,
Sol-8008,,,,,,,
Sol-8009,,,,,,,
Sol-8010,,,,,,,
Sol-8011,,,,,,,
Sol-8012,,,,,,,
Sol-8013,,,,,,,
Sol-8014,,,,,,,
Sol-8015,,,,,,,
Sol-8016,,,,,,,
Sol-8017,,,,,,,
Sol-8018,,,,,,,
Sol-8019,,,,,,,
Sol-8020,,,,,,,
Sol-8021,,,,,,,
Sol-8022,,,,,,,
Sol-8023,,,,,,,
Sol-8024,,,,,,,
Sol-8025,,,,,,,
Sol-8026,,,,,,,
Sol-8027,,,,,,,
Sol-8028,,,,,,,
Sol-8029,,,,,,,
Sol-8030,,,,,,,
Sol-8031,,,,,,,
Sol-8032,,,,,,,
Sol-8033,,,,,,,
Sol-8034,,,,,,,
Sol-8035,,,,,,,
Sol-8036,,,,,,,
Sol-8037,,,,,,,
Sol-8038,,,,,,,
Sol-8039,,,,,,,
Sol-8040,,,,,,,
Sol-8041,,,,,,,
Sol-8042,,,,,,,
Sol-8043,,,,,,,
Sol-8044,,,,,,,
Sol-8045,,,,,,,
Sol-8046,,,,,,,
Sol-8047,,,,,,,
Sol-8048,,,,,,,
Sol-8049,,,,,,,
Sol-8050,,,,,,,
Sol-8051,,,,,,,
Sol-8052,,,,,,,
Sol-8053,,,,,,,
Sol-8054,,,,,,,
Sol-8055,,,,,,,
Sol-8056,,,,,,,
Sol-8057,,,,,,,
Sol-8058,,,,,,,
Sol-8059,,,,,,,
Sol-8060,,,,,,,
Sol-8061,,,,,,,
Sol-8062,,,,,,,
Sol-8063,,,,,,,
Sol-8064,,,,,,,
Sol-8065,,,,,,,
Sol-8066,,,,,,,
Sol-8067,,,,,,,
Sol-8068,,,,,,,
Sol-8069,,,,,,,
Sol-8070,,,,,,,
Sol-8071,,,,,,,
Sol-8072,,,,,,,
Sol-8073,,,,,,,
Sol-8074,,,,,,,
Sol-8075,,,,,,,
Sol-8076,,,,,,,
Sol-8077,,,,,,,
Sol-8078,,,,,,,
Sol-8079,,,,,,,
Sol-8080,,,,,,,
Sol-8081,,,,,,,
Sol-8082,,,,,,,
Sol-8083,,,,,,,
Sol-8084,,,,,,,
Sol-8085,,,,,,,
Sol-8086,,,,,,,
Sol-8087,,,,,,,
Sol-8088,,,,,,,
Sol-8089,,,,,,,
Sol-8090,,,,,,,
Sol-8091,,,,,,,
Sol-8092,,,,,,,
Sol-8093,,,,,,,
Sol-8094,,,,,,,
Sol-8095,,,,,,,
Sol-8096,,,,,,,
Sol-8097,,,,,,,
Sol-8098,,,,,,,
Sol-8099,,,,,,,
Sol-8100,,,,,,,
Sol-8101,,,,,,,
Sol-8102,,,,,,,
Sol-8103,,,,,,,
Sol-8104,,,,,,,
Sol-8105,,,,,,,
Sol-8106,,,,,,,
Sol-8107,,,,,,,
Sol-8108,,,,,,,
Sol-8109,,,,,,,
Sol-8110,,,,,,,
Sol-8111,,,,,,,
Sol-8112,,,,,,,
Sol-8113,,,,,,,
Sol-8114,,,,,,,
Sol-8115,,,,,,,
Sol-8116,,,,,,,
Sol-8117,,,,,,,
Sol-8118,,,,,,,
Sol-8119,,,,,,,
Sol-8120,,,,,,,
Sol-8121,,,,,,,
Sol-8122,,,,,,,
Sol-8123,,,,,,,
Sol-8124,,,,,,,
Sol-8125,,,,,,,
Sol-8126,,,,,,,
Sol-8127,,,,,,,
Sol-8128,,,,,,,
Sol-8129,,,,,,,
Sol-8130,,,,,,,
Sol-8131,,,,,,,
Sol-8132,,,,,,,
Sol-8133,,,,,,,
Sol-8134,,,,,,,
Sol-8135,,,,,,,
Sol-8136,,,,,,,
Sol-8137,,,,,,,
Sol-8138,,,,,,,
Sol-8139,,,,,,,
Sol-8140,,,,,,,
Sol-8141,,,,,,,
Sol-8142,,,,,,,
Sol-8143,,,,,,,
Sol-8144,,,,,,,
Sol-8145,,,,,,,
Sol-8146,,,,,,,
Sol-8147,,,,,,,
Sol-8148,,,,,,,
Sol-8149,,,,,,,
Sol-8150,,,,,,,
Sol-8151,,,,,,,
Sol-8152,,,,,,,
Sol-8153,,,,,,,
Sol-8154,,,,,,,
Sol-8155,,,,,,,
Sol-8156,,,,,,,
Sol-8157,,,,,,,
Sol-8158,,,,,,,
Sol-8159,,,,,,,
Sol-8160,,,,,,,
Sol-8161,,,,,,,
Sol-8162,,,,,,,
Sol-8163,,,,,,,
Sol-8164,,,,,,,
Sol-8165,,,,,,,
Sol-8166,,,,,,,
Sol-8167,,,,,,,
Sol-8168,,,,,,,
Sol-8169,,,,,,,
Sol-8170,,,,,,,
Sol-8171,,,,,,,
Sol-8172,,,,,,,
Sol-8173,,,,,,,
Sol-8174,,,,,,,
Sol-8175,,,,,,,
Sol-8176,,,,,,,
Sol-8177,,,,,,,
Sol-8178,,,,,,,
Sol-8179,,,,,,,
Sol-8180,,,,,,,
Sol-8181,,,,,,,
Sol-8182,,,,,,,
Sol-8183,,,,,,,
Sol-8184,,,,,,,
Sol-8185,,,,,,,
Sol-8186,,,,,,,
Sol-8187,,,,,,,
Sol-8188,,,,,,,
Sol-8189,,,,,,,
Sol-8190,,,,,,,
Sol-8191,,,,,,,
Sol-8192,,,,,,,
Sol-8193,,,,,,,
Sol-8194,,,,,,,
Sol-8195,,,,,,,
Sol-8196,,,,,,,
Sol-8197,,,,,,,
Sol-8198,,,,,,,
Sol-8199,,,,,,,
Sol-8200,,,,,,,
Sol-8201,,,,,,,
Sol-8202,,,,,,,
Sol-8203,,,,,,,
Sol-8204,,,,,,,
Sol-8205,,,,,,,
Sol-8206,,,,,,,
Sol-8207,,,,,,,
Sol-8208,,,,,,,
Sol-8209,,,,,,,
Sol-8210,,,,,,,
Sol-8211,,,,,,,
Sol-8212,,,,,,,
Sol-8213,,,,,,,
Sol-8214,,,,,,,
Sol-8215,,,,,,,
Sol-8216,,,,,,,
Sol-8217,,,,,,,
Sol-8218,,,,,,,
Sol-8219,,,,,,,
Sol-8220,,,,,,,
Sol-8221,,,,,,,
Sol-8222,,,,,,,
Sol-8223,,,,,,,
Sol-8224,,,,,,,
Sol-8225,,,,,,,
Sol-8226,,,,,,,
Sol-8227,,,,,,,
Sol-8228,,,,,,,
Sol-8229,,,,,,,
Sol-8230,,,,,,,
Sol-8231,,,,,,,
Sol-8232,,,,,,,
Sol-8233,,,,,,,
Sol-8234,,,,,,,
Sol-8235,,,,,,,
Sol-8236,,,,,,,
Sol-8237,,,,,,,
Sol-8238,,,,,,,
Sol-8239,,,,,,,
Sol-8240,,,,,,,
Sol-8241,,,,,,,
Sol-8242,,,,,,,
Sol-8243,,,,,,,
Sol-8244,,,,,,,
Sol-8245,,,,,,,
Sol-8246,,,,,,,
Sol-8247,,,,,,,
Sol-8248,,,,,,,
Sol-8249,,,,,,,
Sol-8250,,,,,,,
Sol-8251,,,,,,,
Sol-8252,,,,,,,
Sol-8253,,,,,,,
Sol-8254,,,,,,,
Sol-8255,,,,,,,
Sol-8256,,,,,,,
Sol-8257,,,,,,,
Sol-8258,,,,,,,
Sol-8259,,,,,,,
Sol-8260,,,,,,,
Sol-8261,,,,,,,
Sol-8262,,,,,,,
Sol-8263,,,,,,,
Sol-8264,,,,,,,
Sol-8265,,,,,,,
Sol-8266,,,,,,,
Sol-8267,,,,,,,
Sol-8268,,,,,,,
Sol-8269,,,,,,,
Sol-8270,,,,,,,
Sol-8271,,,,,,,
Sol-8272,,,,,,,
Sol-8273,,,,,,,
Sol-8274,,,,,,,
Sol-8275,,,,,,,
Sol-8276,,,,,,,
Sol-8277,,,,,,,
Sol-8278,,,,,,,
Sol-8279,,,,,,,
Sol-8280,,,,,,,
Sol-8281,,,,,,,
Sol-8282,,,,,,,
Sol-8283,,,,,,,
Sol-8284,,,,,,,
Sol-8285,,,,,,,
Sol-8286,,,,,,,
Sol-8287,,,,,,,
Sol-8288,,,,,,,
Sol-8289,,,,,,,
Sol-8290,,,,,,,
Sol-8291,,,,,,,
Sol-8292,,,,,,,
Sol-8293,,,,,,,
Sol-8294,,,,,,,
Sol-8295,,,,,,,
Sol-8296,,,,,,,
Sol-8297,,,,,,,
Sol-8298,,,,,,,
Sol-8299,,,,,,,
Sol-8300,,,,,,,
Sol-8301,,,,,,,
Sol-8302,,,,,,,
Sol-8303,,,,,,,
Sol-8304,,,,,,,
Sol-8305,,,,,,,
Sol-8306,,,,,,,
Sol-8307,,,,,,,
Sol-8308,,,,,,,
Sol-8309,,,,,,,
Sol-8310,,,,,,,
Sol-8311,,,,,,,
Sol-8312,,,,,,,
Sol-8313,,,,,,,
Sol-8314,,,,,,,
Sol-8315,,,,,,,
Sol-8316,,,,,,,
Sol-8317,,,,,,,
Sol-8318,,,,,,,
Sol-8319,,,,,,,
Sol-8320,,,,,,,
Sol-8321,,,,,,,
Sol-8322,,,,,,,
Sol-8323,,,,,,,
Sol-8324,,,,,,,
Sol-8325,,,,,,,
Sol-8326,,,,,,,
Sol-8327,,,,,,,
Sol-8328,,,,,,,
Sol-8329,,,,,,,
Sol-8330,,,,,,,
Sol-8331,,,,,,,
Sol-8332,,,,,,,
Sol-8333,,,,,,,
Sol-8334,,,,,,,
Sol-8335,,,,,,,
Sol-8336,,,,,,,
Sol-8337,,,,,,,
Sol-8338,,,,,,,
Sol-8339,,,,,,,
Sol-8340,,,,,,,
Sol-8341,,,,,,,
Sol-8342,,,,,,,
Sol-8343,,,,,,,
Sol-8344,,,,,,,
Sol-8345,,,,,,,
Sol-8346,,,,,,,
Sol-8347,,,,,,,
Sol-8348,,,,,,,
Sol-8349,,,,,,,
Sol-8350,,,,,,,
Sol-8351,,,,,,,
Sol-8352,,,,,,,
Sol-8353,,,,,,,
Sol-8354,,,,,,,
Sol-8355,,,,,,,
Sol-8356,,,,,,,
Sol-8357,,,,,,,
Sol-8358,,,,,,,
Sol-8359,,,,,,,
Sol-8360,,,,,,,
Sol-8361,,,,,,,
Sol-8362,,,,,,,
Sol-8363,,,,,,,
Sol-8364,,,,,,,
Sol-8365,,,,,,,
Sol-8366,,,,,,,
Sol-8367,,,,,,,
Sol-8368,,,,,,,
Sol-8369,,,,,,,
Sol-8370,,,,,,,
Sol-8371,,,,,,,
Sol-8372,,,,,,,
Sol-8373,,,,,,,
Sol-8374,,,,,,,
Sol-8375,,,,,,,
Sol-8376,,,,,,,
Sol-8377,,,,,,,
Sol-8378,,,,,,,
Sol-8379,,,,,,,
Sol-8380,,,,,,,
Sol-8381,,,,,,,
Sol-8382,,,,,,,
Sol-8383,,,,,,,
Sol-8384,,,,,,,
Sol-8385,,,,,,,
Sol-8386,,,,,,,
Sol-8387,,,,,,,
Sol-8388,,,,,,,
Sol-8389,,,,,,,
Sol-8390,,,,,,,
Sol-8391,,,,,,,
Sol-8392,,,,,,,
Sol-8393,,,,,,,
Sol-8394,,,,,,,
Sol-8395,,,,,,,
Sol-8396,,,,,,,
Sol-8397,,,,,,,
Sol-8398,,,,,,,
Sol-8399,,,,,,,
Sol-8400,,,,,,,
Sol-8401,,,,,,,
Sol-8402,,,,,,,
Sol-8403,,,,,,,
Sol-8404,,,,,,,
Sol-8405,,,,,,,
Sol-8406,,,,,,,
Sol-8407,,,,,,,
Sol-8408,,,,,,,
Sol-8409,,,,,,,
Sol-8410,,,,,,,
Sol-8411,,,,,,,
Sol-8412,,,,,,,
Sol-8413,,,,,,,
Sol-8414,,,,,,,
Sol-8415,,,,,,,
Sol-8416,,,,,,,
Sol-8417,,,,,,,
Sol-8418,,,,,,,
Sol-8419,,,,,,,
Sol-8420,,,,,,,
Sol-8421,,,,,,,
Sol-8422,,,,,,,
Sol-8423,,,,,,,
Sol-8424,,,,,,,
Sol-8425,,,,,,,
Sol-8426,,,,,,,
Sol-8427,,,,,,,
Sol-8428,,,,,,,
Sol-8429,,,,,,,
Sol-8430,,,,,,,
Sol-8431,,,,,,,
Sol-8432,,,,,,,
Sol-8433,,,,,,,
Sol-8434,,,,,,,
Sol-8435,,,,,,,
Sol-8436,,,,,,,
Sol-8437,,,,,,,
Sol-8438,,,,,,,
Sol-8439,,,,,,,
Sol-8440,,,,,,,
Sol-8441,,,,,,,
Sol-8442,,,,,,,
Sol-8443,,,,,,,
Sol-8444,,,,,,,
Sol-8445,,,,,,,
Sol-8446,,,,,,,
Sol-8447,,,,,,,
Sol-8448,,,,,,,
Sol-8449,,,,,,,
Sol-8450,,,,,,,
Sol-8451,,,,,,,
Sol-8452,,,,,,,
Sol-8453,,,,,,,
Sol-8454,,,,,,,
Sol-8455,,,,,,,
Sol-8456,,,,,,,
Sol-8457,,,,,,,
Sol-8458,,,,,,,
Sol-8459,,,,,,,
Sol-8460,,,,,,,
Sol-8461,,,,,,,
Sol-8462,,,,,,,
Sol-8463,,,,,,,
Sol-8464,,,,,,,
Sol-8465,,,,,,,
Sol-8466,,,,,,,
Sol-8467,,,,,,,
Sol-8468,,,,,,,
Sol-8469,,,,,,,
Sol-8470,,,,,,,
Sol-8471,,,,,,,
Sol-8472,,,,,,,
Sol-8473,,,,,,,
Sol-8474,,,,,,,
Sol-8475,,,,,,,
Sol-8476,,,,,,,
Sol-8477,,,,,,,
Sol-8478,,,,,,,
Sol-8479,,,,,,,
Sol-8480,,,,,,,
Sol-8481,,,,,,,
Sol-8482,,,,,,,
Sol-8483,,,,,,,
Sol-8484,,,,,,,
Sol-8485,,,,,,,
Sol-8486,,,,,,,
Sol-8487,,,,,,,
Sol-8488,,,,,,,
Sol-8489,,,,,,,
Sol-8490,,,,,,,
Sol-8491,,,,,,,
Sol-8492,,,,,,,
Sol-8493,,,,,,,
Sol-8494,,,,,,,
Sol-8495,,,,,,,
Sol-8496,,,,,,,
Sol-8497,,,,,,,
Sol-8498,,,,,,,
Sol-8499,,,,,,,
Sol-8500,,,,,,,
Sol-8501,,,,,,,
Sol-8502,,,,,,,
Sol-8503,,,,,,,
Sol-8504,,,,,,,
Sol-8505,,,,,,,
Sol-8506,,,,,,,
Sol-8507,,,,,,,
Sol-8508,,,,,,,
Sol-8509,,,,,,,
Sol-8510,,,,,,,
Sol-8511,,,,,,,
Sol-8512,,,,,,,
Sol-8513,,,,,,,
Sol-8514,,,,,,,
Sol-8515,,,,,,,
Sol-8516,,,,,,,
Sol-8517,,,,,,,
Sol-8518,,,,,,,
Sol-8519,,,,,,,
Sol-8520,,,,,,,
Sol-8521,,,,,,,
Sol-8522,,,,,,,
Sol-8523,,,,,,,
Sol-8524,,,,,,,
Sol-8525,,,,,,,
Sol-8526,,,,,,,
Sol-8527,,,,,,,
Sol-8528,,,,,,,
Sol-8529,,,,,,,
Sol-8530,,,,,,,
Sol-8531,,,,,,,
Sol-8532,,,,,,,
Sol-8533,,,,,,,
Sol-8534,,,,,,,
Sol-8535,,,,,,,
Sol-8536,,,,,,,
Sol-8537,,,,,,,
Sol-8538,,,,,,,
Sol-8539,,,,,,,
Sol-8540,,,,,,,
Sol-8541,,,,,,,
Sol-8542,,,,,,,
Sol-8543,,,,,,,
Sol-8544,,,,,,,
Sol-8545,,,,,,,
Sol-8546,,,,,,,
Sol-8547,,,,,,,
Sol-8548,,,,,,,
Sol-8549,,,,,,,
Sol-8550,,,,,,,
Sol-8551,,,,,,,
Sol-8552,,,,,,,
Sol-8553,,,,,,,
Sol-8554,,,,,,,
Sol-8555,,,,,,,
Sol-8556,,,,,,,
Sol-8557,,,,,,,
Sol-8558,,,,,,,
Sol-8559,,,,,,,
Sol-8560,,,,,,,
Sol-8561,,,,,,,
Sol-8562,,,,,,,
Sol-8563,,,,,,,
Sol-8564,,,,,,,
Sol-8565,,,,,,,
Sol-8566,,,,,,,
Sol-8567,,,,,,,
Sol-8568,,,,,,,
Sol-8569,,,,,,,
Sol-8570,,,,,,,
Sol-8571,,,,,,,
Sol-8572,,,,,,,
Sol-8573,,,,,,,
Sol-8574,,,,,,,
Sol-8575,,,,,,,
Sol-8576,,,,,,,
Sol-8577,,,,,,,
Sol-8578,,,,,,,
Sol-8579,,,,,,,
Sol-8580,,,,,,,
Sol-8581,,,,,,,
Sol-8582,,,,,,,
Sol-8583,,,,,,,
Sol-8584,,,,,,,
Sol-8585,,,,,,,
Sol-8586,,,,,,,
Sol-8587,,,,,,,
Sol-8588,,,,,,,
Sol-8589,,,,,,,
Sol-8590,,,,,,,
Sol-8591,,,,,,,
Sol-8592,,,,,,,
Sol-8593,,,,,,,
Sol-8594,,,,,,,
Sol-8595,,,,,,,
Sol-8596,,,,,,,
Sol-8597,,,,,,,
Sol-8598,,,,,,,
Sol-8599,,,,,,,
Sol-8600,,,,,,,
Sol-8601,,,,,,,
Sol-8602,,,,,,,
Sol-8603,,,,,,,
Sol-8604,,,,,,,
Sol-8605,,,,,,,
Sol-8606,,,,,,,
Sol-8607,,,,,,,
Sol-8608,,,,,,,
Sol-8609,,,,,,,
Sol-8610,,,,,,,
Sol-8611,,,,,,,
Sol-8612,,,,,,,
Sol-8613,,,,,,,
Sol-8614,,,,,,,
Sol-8615,,,,,,,
Sol-8616,,,,,,,
Sol-8617,,,,,,,
Sol-8618,,,,,,,
Sol-8619,,,,,,,
Sol-8620,,,,,,,
Sol-8621,,,,,,,
Sol-8622,,,,,,,
Sol-8623,,,,,,,
Sol-8624,,,,,,,
Sol-8625,,,,,,,
Sol-8626,,,,,,,
Sol-8627,,,,,,,
Sol-8628,,,,,,,
Sol-8629,,,,,,,
Sol-8630,,,,,,,
Sol-8631,,,,,,,
Sol-8632,,,,,,,
Sol-8633,,,,,,,
Sol-8634,,,,,,,
Sol-8635,,,,,,,
Sol-8636,,,,,,,
Sol-8637,,,,,,,
Sol-8638,,,,,,,
Sol-8639,,,,,,,
Sol-8640,,,,,,,
Sol-8641,,,,,,,
Sol-8642,,,,,,,
Sol-8643,,,,,,,
Sol-8644,,,,,,,
Sol-8645,,,,,,,
Sol-8646,,,,,,,
Sol-8647,,,,,,,
Sol-8648,,,,,,,
Sol-8649,,,,,,,
Sol-8650,,,,,,,
Sol-8651,,,,,,,
Sol-8652,,,,,,,
Sol-8653,,,,,,,
Sol-8654,,,,,,,
Sol-8655,,,,,,,
Sol-8656,,,,,,,
Sol-8657,,,,,,,
Sol-8658,,,,,,,
Sol-8659,,,,,,,
Sol-8660,,,,,,,
Sol-8661,,,,,,,
Sol-8662,,,,,,,
Sol-8663,,,,,,,
Sol-8664,,,,,,,
Sol-8665,,,,,,,
Sol-8666,,,,,,,
Sol-8667,,,,,,,
Sol-8668,,,,,,,
Sol-8669,,,,,,,
Sol-8670,,,,,,,
Sol-8671,,,,,,,
Sol-8672,,,,,,,
Sol-8673,,,,,,,
Sol-8674,,,,,,,
Sol-8675,,,,,,,
Sol-8676,,,,,,,
Sol-8677,,,,,,,
Sol-8678,,,,,,,
Sol-8679,,,,,,,
Sol-8680,,,,,,,
Sol-8681,,,,,,,
Sol-8682,,,,,,,
Sol-8683,,,,,,,
Sol-8684,,,,,,,
Sol-8685,,,,,,,
Sol-8686,,,,,,,
Sol-8687,,,,,,,
Sol-8688,,,,,,,
Sol-8689,,,,,,,
Sol-8690,,,,,,,
Sol-8691,,,,,,,
Sol-8692,,,,,,,
Sol-8693,,,,,,,
Sol-8694,,,,,,,
Sol-8695,,,,,,,
Sol-8696,,,,,,,
Sol-8697,,,,,,,
Sol-8698,,,,,,,
Sol-8699,,,,,,,
Sol-8700,,,,,,,
Sol-8701,,,,,,,
Sol-8702,,,,,,,
Sol-8703,,,,,,,
Sol-8704,,,,,,,
Sol-8705,,,,,,,
Sol-8706,,,,,,,
Sol-8707,,,,,,,
Sol-8708,,,,,,,
Sol-8709,,,,,,,
Sol-8710,,,,,,,
Sol-8711,,,,,,,
Sol-8712,,,,,,,
Sol-8713,,,,,,,
Sol-8714,,,,,,,
Sol-8715,,,,,,,
Sol-8716,,,,,,,
Sol-8717,,,,,,,
Sol-8718,,,,,,,
Sol-8719,,,,,,,
Sol-8720,,,,,,,
Sol-8721,,,,,,,
Sol-8722,,,,,,,
Sol-8723,,,,,,,
Sol-8724,,,,,,,
Sol-8725,,,,,,,
Sol-8726,,,,,,,
Sol-8727,,,,,,,
Sol-8728,,,,,,,
Sol-8729,,,,,,,
Sol-8730,,,,,,,
Sol-8731,,,,,,,
Sol-8732,,,,,,,
Sol-8733,,,,,,,
Sol-8734,,,,,,,
Sol-8735,,,,,,,
Sol-8736,,,,,,,
Sol-8737,,,,,,,
Sol-8738,,,,,,,
Sol-8739,,,,,,,
Sol-8740,,,,,,,
Sol-8741,,,,,,,
Sol-8742,,,,,,,
Sol-8743,,,,,,,
Sol-8744,,,,,,,
Sol-8745,,,,,,,
Sol-8746,,,,,,,
Sol-8747,,,,,,,
Sol-8748,,,,,,,
Sol-8749,,,,,,,
Sol-8750,,,,,,,
Sol-8751,,,,,,,
Sol-8752,,,,,,,
Sol-8753,,,,,,,
Sol-8754,,,,,,,
Sol-8755,,,,,,,
Sol-8756,,,,,,,
Sol-8757,,,,,,,
Sol-8758,,,,,,,
Sol-8759,,,,,,,
Sol-8760,,,,,,,
Sol-8761,,,,,,,
Sol-8762,,,,,,,
Sol-8763,,,,,,,
Sol-8764,,,,,,,
Sol-8765,,,,,,,
Sol-8766,,,,,,,
Sol-8767,,,,,,,
Sol-8768,,,,,,,
Sol-8769,,,,,,,
Sol-8770,,,,,,,
Sol-8771,,,,,,,
Sol-8772,,,,,,,
Sol-8773,,,,,,,
Sol-8774,,,,,,,
Sol-8775,,,,,,,
Sol-8776,,,,,,,
Sol-8777,,,,,,,
Sol-8778,,,,,,,
Sol-8779,,,,,,,
Sol-8780,,,,,,,
Sol-8781,,,,,,,
Sol-8782,,,,,,,
Sol-8783,,,,,,,
Sol-8784,,,,,,,
Sol-8785,,,,,,,
Sol-8786,,,,,,,
Sol-8787,,,,,,,
Sol-8788,,,,,,,
Sol-8789,,,,,,,
Sol-8790,,,,,,,
Sol-8791,,,,,,,
Sol-8792,,,,,,,
Sol-8793,,,,,,,
Sol-8794,,,,,,,
Sol-8795,,,,,,,
Sol-8796,,,,,,,
Sol-8797,,,,,,,
Sol-8798,,,,,,,
Sol-8799,,,,,,,
Sol-8800,,,,,,,
Sol-8801,,,,,,,
Sol-8802,,,,,,,
Sol-8803,,,,,,,
Sol-8804,,,,,,,
Sol-8805,,,,,,,
Sol-8806,,,,,,,
Sol-8807,,,,,,,
Sol-8808,,,,,,,
Sol-8809,,,,,,,
Sol-8810,,,,,,,
Sol-8811,,,,,,,
Sol-8812,,,,,,,
Sol-8813,,,,,,,
Sol-8814,,,,,,,
Sol-8815,,,,,,,
Sol-8816,,,,,,,
Sol-8817,,,,,,,
Sol-8818,,,,,,,
Sol-8819,,,,,,,
Sol-8820,,,,,,,
Sol-8821,,,,,,,
Sol-8822,,,,,,,
Sol-8823,,,,,,,
Sol-8824,,,,,,,
Sol-8825,,,,,,,
Sol-8826,,,,,,,
Sol-8827,,,,,,,
Sol-8828,,,,,,,
Sol-8829,,,,,,,
Sol-8830,,,,,,,
Sol-8831,,,,,,,
Sol-8832,,,,,,,
Sol-8833,,,,,,,
Sol-8834,,,,,,,
Sol-8835,,,,,,,
Sol-8836,,,,,,,
Sol-8837,,,,,,,
Sol-8838,,,,,,,
Sol-8839,,,,,,,
Sol-8840,,,,,,,
Sol-8841,,,,,,,
Sol-8842,,,,,,,
Sol-8843,,,,,,,
Sol-8844,,,,,,,
Sol-8845,,,,,,,
Sol-8846,,,,,,,
Sol-8847,,,,,,,
Sol-8848,,,,,,,
Sol-8849,,,,,,,
Sol-8850,,,,,,,
Sol-8851,,,,,,,
Sol-8852,,,,,,,
Sol-8853,,,,,,,
Sol-8854,,,,,,,
Sol-8855,,,,,,,
Sol-8856,,,,,,,
Sol-8857,,,,,,,
Sol-8858,,,,,,,
Sol-8859,,,,,,,
Sol-8860,,,,,,,
Sol-8861,,,,,,,
Sol-8862,,,,,,,
Sol-8863,,,,,,,
Sol-8864,,,,,,,
Sol-8865,,,,,,,
Sol-8866,,,,,,,
Sol-8867,,,,,,,
Sol-8868,,,,,,,
Sol-8869,,,,,,,
Sol-8870,,,,,,,
Sol-8871,,,,,,,
Sol-8872,,,,,,,
Sol-8873,,,,,,,
Sol-8874,,,,,,,
Sol-8875,,,,,,,
Sol-8876,,,,,,,
Sol-8877,,,,,,,
Sol-8878,,,,,,,
Sol-8879,,,,,,,
Sol-8880,,,,,,,
Sol-8881,,,,,,,
Sol-8882,,,,,,,
Sol-8883,,,,,,,
Sol-8884,,,,,,,
Sol-8885,,,,,,,
Sol-8886,,,,,,,
Sol-8887,,,,,,,
Sol-8888,,,,,,,
Sol-8889,,,,,,,
Sol-8890,,,,,,,
Sol-8891,,,,,,,
Sol-8892,,,,,,,
Sol-8893,,,,,,,
Sol-8894,,,,,,,
Sol-8895,,,,,,,
Sol-8896,,,,,,,
Sol-8897,,,,,,,
Sol-8898,,,,,,,
Sol-8899,,,,,,,
Sol-8900,,,,,,,
Sol-8901,,,,,,,
Sol-8902,,,,,,,
Sol-8903,,,,,,,
Sol-8904,,,,,,,
Sol-8905,,,,,,,
Sol-8906,,,,,,,
Sol-8907,,,,,,,
Sol-8908,,,,,,,
Sol-8909,,,,,,,
Sol-8910,,,,,,,
Sol-8911,,,,,,,
Sol-8912,,,,,,,
Sol-8913,,,,,,,
Sol-8914,,,,,,,
Sol-8915,,,,,,,
Sol-8916,,,,,,,
Sol-8917,,,,,,,
Sol-8918,,,,,,,
Sol-8919,,,,,,,
Sol-8920,,,,,,,
Sol-8921,,,,,,,
Sol-8922,,,,,,,
Sol-8923,,,,,,,
Sol-8924,,,,,,,
Sol-8925,,,,,,,
Sol-8926,,,,,,,
Sol-8927,,,,,,,
Sol-8928,,,,,,,
Sol-8929,,,,,,,
Sol-8930,,,,,,,
Sol-8931,,,,,,,
Sol-8932,,,,,,,
Sol-8933,,,,,,,
Sol-8934,,,,,,,
Sol-8935,,,,,,,
Sol-8936,,,,,,,
Sol-8937,,,,,,,
Sol-8938,,,,,,,
Sol-8939,,,,,,,
Sol-8940,,,,,,,
Sol-8941,,,,,,,
Sol-8942,,,,,,,
Sol-8943,,,,,,,
Sol-8944,,,,,,,
Sol-8945,,,,,,,
Sol-8946,,,,,,,
Sol-8947,,,,,,,
Sol-8948,,,,,,,
Sol-8949,,,,,,,
Sol-8950,,,,,,,
Sol-8951,,,,,,,
Sol-8952,,,,,,,
Sol-8953,,,,,,,
Sol-8954,,,,,,,
Sol-8955,,,,,,,
Sol-8956,,,,,,,
Sol-8957,,,,,,,
Sol-8958,,,,,,,
Sol-8959,,,,,,,
Sol-8960,,,,,,,
Sol-8961,,,,,,,
Sol-8962,,,,,,,
Sol-8963,,,,,,,
Sol-8964,,,,,,,
Sol-8965,,,,,,,
Sol-8966,,,,,,,
Sol-8967,,,,,,,
Sol-8968,,,,,,,
Sol-8969,,,,,,,
Sol-8970,,,,,,,
Sol-8971,,,,,,,
Sol-8972,,,,,,,
Sol-8973,,,,,,,
Sol-8974,,,,,,,
Sol-8975,,,,,,,
Sol-8976,,,,,,,
Sol-8977,,,,,,,
Sol-8978,,,,,,,
Sol-8979,,,,,,,
Sol-8980,,,,,,,
Sol-8981,,,,,,,
Sol-8982,,,,,,,
Sol-8983,,,,,,,
Sol-8984,,,,,,,
Sol-8985,,,,,,,
Sol-8986,,,,,,,
Sol-8987,,,,,,,
Sol-8988,,,,,,,
Sol-8989,,,,,,,
Sol-8990,,,,,,,
Sol-8991,,,,,,,
Sol-8992,,,,,,,
Sol-8993,,,,,,,
Sol-8994,,,,,,,
Sol-8995,,,,,,,
Sol-8996,,,,,,,
Sol-8997,,,,,,,
Sol-8998,,,,,,,
Sol-8999,,,,,,,
Sol-9000,,,,,,,
Sol-9001,,,,,,,
Sol-9002,,,,,,,
Sol-9003,,,,,,,
Sol-9004,,,,,,,
Sol-9005,,,,,,,
Sol-9006,,,,,,,
Sol-9007,,,,,,,
Sol-9008,,,,,,,
Sol-9009,,,,,,,
Sol-9010,,,,,,,
Sol-9011,,,,,,,
Sol-9012,,,,,,,
Sol-9013,,,,,,,
Sol-9014,,,,,,,
Sol-9015,,,,,,,
Sol-9016,,,,,,,
Sol-9017,,,,,,,
Sol-9018,,,,,,,
Sol-9019,,,,,,,
Sol-9020,,,,,,,
Sol-9021,,,,,,,
Sol-9022,,,,,,,
Sol-9023,,,,,,,
Sol-9024,,,,,,,
Sol-9025,,,,,,,
Sol-9026,,,,,,,
Sol-9027,,,,,,,
Sol-9028,,,,,,,
Sol-9029,,,,,,,
Sol-9030,,,,,,,
Sol-9031,,,,,,,
Sol-9032,,,,,,,
Sol-9033,,,,,,,
Sol-9034,,,,,,,
Sol-9035,,,,,,,
Sol-9036,,,,,,,
Sol-9037,,,,,,,
Sol-9038,,,,,,,
Sol-9039,,,,,,,
Sol-9040,,,,,,,
Sol-9041,,,,,,,
Sol-9042,,,,,,,
Sol-9043,,,,,,,
Sol-9044,,,,,,,
Sol-9045,,,,,,,
Sol-9046,,,,,,,
Sol-9047,,,,,,,
Sol-9048,,,,,,,
Sol-9049,,,,,,,
Sol-9050,,,,,,,
Sol-9051,,,,,,,
Sol-9052,,,,,,,
Sol-9053,,,,,,,
Sol-9054,,,,,,,
Sol-9055,,,,,,,
Sol-9056,,,,,,,
Sol-9057,,,,,,,
Sol-9058,,,,,,,
Sol-9059,,,,,,,
Sol-9060,,,,,,,
Sol-9061,,,,,,,
Sol-9062,,,,,,,
Sol-9063,,,,,,,
Sol-9064,,,,,,,
Sol-9065,,,,,,,
Sol-9066,,,,,,,
Sol-9067,,,,,,,
Sol-9068,,,,,,,
Sol-9069,,,,,,,
Sol-9070,,,,,,,
Sol-9071,,,,,,,
Sol-9072,,,,,,,
Sol-9073,,,,,,,
Sol-9074,,,,,,,
Sol-9075,,,,,,,
Sol-9076,,,,,,,
Sol-9077,,,,,,,
Sol-9078,,,,,,,
Sol-9079,,,,,,,
Sol-9080,,,,,,,
Sol-9081,,,,,,,
Sol-9082,,,,,,,
Sol-9083,,,,,,,
Sol-9084,,,,,,,
Sol-9085,,,,,,,
Sol-9086,,,,,,,
Sol-9087,,,,,,,
Sol-9088,,,,,,,
Sol-9089,,,,,,,
Sol-9090,,,,,,,
Sol-9091,,,,,,,
Sol-9092,,,,,,,
Sol-9093,,,,,,,
Sol-9094,,,,,,,
Sol-9095,,,,,,,
Sol-9096,,,,,,,
Sol-9097,,,,,,,
Sol-9098,,,,,,,
Sol-9099,,,,,,,
Sol-9100,,,,,,,
Sol-9101,,,,,,,
Sol-9102,,,,,,,
Sol-9103,,,,,,,
Sol-9104,,,,,,,
Sol-9105,,,,,,,
Sol-9106,,,,,,,
Sol-9107,,,,,,,
Sol-9108,,,,,,,
Sol-9109,,,,,,,
Sol-9110,,,,,,,
Sol-9111,,,,,,,
Sol-9112,,,,,,,
Sol-9113,,,,,,,
Sol-9114,,,,,,,
Sol-9115,,,,,,,
Sol-9116,,,,,,,
Sol-9117,,,,,,,
Sol-9118,,,,,,,
Sol-9119,,,,,,,
Sol-9120,,,,,,,
Sol-9121,,,,,,,
Sol-9122,,,,,,,
Sol-9123,,,,,,,
Sol-9124,,,,,,,
Sol-9125,,,,,,,
Sol-9126,,,,,,,
Sol-9127,,,,,,,
Sol-9128,,,,,,,
Sol-9129,,,,,,,
Sol-9130,,,,,,,
Sol-9131,,,,,,,
Sol-9132,,,,,,,
Sol-9133,,,,,,,
Sol-9134,,,,,,,
Sol-9135,,,,,,,
Sol-9136,,,,,,,
Sol-9137,,,,,,,
Sol-9138,,,,,,,
Sol-9139,,,,,,,
Sol-9140,,,,,,,
Sol-9141,,,,,,,
Sol-9142,,,,,,,
Sol-9143,,,,,,,
Sol-9144,,,,,,,
Sol-9145,,,,,,,
Sol-9146,,,,,,,
Sol-9147,,,,,,,
Sol-9148,,,,,,,
Sol-9149,,,,,,,
Sol-9150,,,,,,,
Sol-9151,,,,,,,
Sol-9152,,,,,,,
Sol-9153,,,,,,,
Sol-9154,,,,,,,
Sol-9155,,,,,,,
Sol-9156,,,,,,,
Sol-9157,,,,,,,
Sol-9158,,,,,,,
Sol-9159,,,,,,,
Sol-9160,,,,,,,
Sol-9161,,,,,,,
Sol-9162,,,,,,,
Sol-9163,,,,,,,
Sol-9164,,,,,,,
Sol-9165,,,,,,,
Sol-9166,,,,,,,
Sol-9167,,,,,,,
Sol-9168,,,,,,,
Sol-9169,,,,,,,
Sol-9170,,,,,,,
Sol-9171,,,,,,,
Sol-9172,,,,,,,
Sol-9173,,,,,,,
Sol-9174,,,,,,,
Sol-9175,,,,,,,
Sol-9176,,,,,,,
Sol-9177,,,,,,,
Sol-9178,,,,,,,
Sol-9179,,,,,,,
Sol-9180,,,,,,,
Sol-9181,,,,,,,
Sol-9182,,,,,,,
Sol-9183,,,,,,,
Sol-9184,,,,,,,
Sol-9185,,,,,,,
Sol-9186,,,,,,,
Sol-9187,,,,,,,
Sol-9188,,,,,,,
Sol-9189,,,,,,,
Sol-9190,,,,,,,
Sol-9191,,,,,,,
Sol-9192,,,,,,,
Sol-9193,,,,,,,
Sol-9194,,,,,,,
Sol-9195,,,,,,,
Sol-9196,,,,,,,
Sol-9197,,,,,,,
Sol-9198,,,,,,,
Sol-9199,,,,,,,
Sol-9200,,,,,,,
Sol-9201,,,,,,,
Sol-9202,,,,,,,
Sol-9203,,,,,,,
Sol-9204,,,,,,,
Sol-9205,,,,,,,
Sol-9206,,,,,,,
Sol-9207,,,,,,,
Sol-9208,,,,,,,
Sol-9209,,,,,,,
Sol-9210,,,,,,,
Sol-9211,,,,,,,
Sol-9212,,,,,,,
Sol-9213,,,,,,,
Sol-9214,,,,,,,
Sol-9215,,,,,,,
Sol-9216,,,,,,,
Sol-9217,,,,,,,
Sol-9218,,,,,,,
Sol-9219,,,,,,,
Sol-9220,,,,,,,
Sol-9221,,,,,,,
Sol-9222,,,,,,,
Sol-9223,,,,,,,
Sol-9224,,,,,,,
Sol-9225,,,,,,,
Sol-9226,,,,,,,
Sol-9227,,,,,,,
Sol-9228,,,,,,,
Sol-9229,,,,,,,
Sol-9230,,,,,,,
Sol-9231,,,,,,,
Sol-9232,,,,,,,
Sol-9233,,,,,,,
Sol-9234,,,,,,,
Sol-9235,,,,,,,
Sol-9236,,,,,,,
Sol-9237,,,,,,,
Sol-9238,,,,,,,
Sol-9239,,,,,,,
Sol-9240,,,,,,,
Sol-9241,,,,,,,
Sol-9242,,,,,,,
Sol-9243,,,,,,,
Sol-9244,,,,,,,
Sol-9245,,,,,,,
Sol-9246,,,,,,,
Sol-9247,,,,,,,
Sol-9248,,,,,,,
Sol-9249,,,,,,,
Sol-9250,,,,,,,
Sol-9251,,,,,,,
Sol-9252,,,,,,,
Sol-9253,,,,,,,
Sol-9254,,,,,,,
Sol-9255,,,,,,,
Sol-9256,,,,,,,
Sol-9257,,,,,,,
Sol-9258,,,,,,,
Sol-9259,,,,,,,
Sol-9260,,,,,,,
Sol-9261,,,,,,,
Sol-9262,,,,,,,
Sol-9263,,,,,,,
Sol-9264,,,,,,,
Sol-9265,,,,,,,
Sol-9266,,,,,,,
Sol-9267,,,,,,,
Sol-9268,,,,,,,
Sol-9269,,,,,,,
Sol-9270,,,,,,,
Sol-9271,,,,,,,
Sol-9272,,,,,,,
Sol-9273,,,,,,,
Sol-9274,,,,,,,
Sol-9275,,,,,,,
Sol-9276,,,,,,,
Sol-9277,,,,,,,
Sol-9278,,,,,,,
Sol-9279,,,,,,,
Sol-9280,,,,,,,
Sol-9281,,,,,,,
Sol-9282,,,,,,,
Sol-9283,,,,,,,
Sol-9284,,,,,,,
Sol-9285,,,,,,,
Sol-9286,,,,,,,
Sol-9287,,,,,,,
Sol-9288,,,,,,,
Sol-9289,,,,,,,
Sol-9290,,,,,,,
Sol-9291,,,,,,,
Sol-9292,,,,,,,
Sol-9293,,,,,,,
Sol-9294,,,,,,,
Sol-9295,,,,,,,
Sol-9296,,,,,,,
Sol-9297,,,,,,,
Sol-9298,,,,,,,
Sol-9299,,,,,,,
Sol-9300,,,,,,,
Sol-9301,,,,,,,
Sol-9302,,,,,,,
Sol-9303,,,,,,,
Sol-9304,,,,,,,
Sol-9305,,,,,,,
Sol-9306,,,,,,,
Sol-9307,,,,,,,
Sol-9308,,,,,,,
Sol-9309,,,,,,,
Sol-9310,,,,,,,
Sol-9311,,,,,,,
Sol-9312,,,,,,,
Sol-9313,,,,,,,
Sol-9314,,,,,,,
Sol-9315,,,,,,,
Sol-9316,,,,,,,
Sol-9317,,,,,,,
Sol-9318,,,,,,,
Sol-9319,,,,,,,
Sol-9320,,,,,,,
Sol-9321,,,,,,,
Sol-9322,,,,,,,
Sol-9323,,,,,,,
Sol-9324,,,,,,,
Sol-9325,,,,,,,
Sol-9326,,,,,,,
Sol-9327,,,,,,,
Sol-9328,,,,,,,
Sol-9329,,,,,,,
Sol-9330,,,,,,,
Sol-9331,,,,,,,
Sol-9332,,,,,,,
Sol-9333,,,,,,,
Sol-9334,,,,,,,
Sol-9335,,,,,,,
Sol-9336,,,,,,,
Sol-9337,,,,,,,
Sol-9338,,,,,,,
Sol-9339,,,,,,,
Sol-9340,,,,,,,
Sol-9341,,,,,,,
Sol-9342,,,,,,,
Sol-9343,,,,,,,
Sol-9344,,,,,,,
Sol-9345,,,,,,,
Sol-9346,,,,,,,
Sol-9347,,,,,,,
Sol-9348,,,,,,,
Sol-9349,,,,,,,
Sol-9350,,,,,,,
Sol-9351,,,,,,,
Sol-9352,,,,,,,
Sol-9353,,,,,,,
Sol-9354,,,,,,,
Sol-9355,,,,,,,
Sol-9356,,,,,,,
Sol-9357,,,,,,,
Sol-9358,,,,,,,
Sol-9359,,,,,,,
Sol-9360,,,,,,,
Sol-9361,,,,,,,
Sol-9362,,,,,,,
Sol-9363,,,,,,,
Sol-9364,,,,,,,
Sol-9365,,,,,,,
Sol-9366,,,,,,,
Sol-9367,,,,,,,
Sol-9368,,,,,,,
Sol-9369,,,,,,,
Sol-9370,,,,,,,
Sol-9371,,,,,,,
Sol-9372,,,,,,,
Sol-9373,,,,,,,
Sol-9374,,,,,,,
Sol-9375,,,,,,,
Sol-9376,,,,,,,
Sol-9377,,,,,,,
Sol-9378,,,,,,,
Sol-9379,,,,,,,
Sol-9380,,,,,,,
Sol-9381,,,,,,,
Sol-9382,,,,,,,
Sol-9383,,,,,,,
Sol-9384,,,,,,,
Sol-9385,,,,,,,
Sol-9386,,,,,,,
Sol-9387,,,,,,,
Sol-9388,,,,,,,
Sol-9389,,,,,,,
Sol-9390,,,,,,,
Sol-9391,,,,,,,
Sol-9392,,,,,,,
Sol-9393,,,,,,,
Sol-9394,,,,,,,
Sol-9395,,,,,,,
Sol-9396,,,,,,,
Sol-9397,,,,,,,
Sol-9398,,,,,,,
Sol-9399,,,,,,,
Sol-9400,,,,,,,
Sol-9401,,,,,,,
Sol-9402,,,,,,,
Sol-9403,,,,,,,
Sol-9404,,,,,,,
Sol-9405,,,,,,,
Sol-9406,,,,,,,
Sol-9407,,,,,,,
Sol-9408,,,,,,,
Sol-9409,,,,,,,
Sol-9410,,,,,,,
Sol-9411,,,,,,,
Sol-9412,,,,,,,
Sol-9413,,,,,,,
Sol-9414,,,,,,,
Sol-9415,,,,,,,
Sol-9416,,,,,,,
Sol-9417,,,,,,,
Sol-9418,,,,,,,
Sol-9419,,,,,,,
Sol-9420,,,,,,,
Sol-9421,,,,,,,
Sol-9422,,,,,,,
Sol-9423,,,,,,,
Sol-9424,,,,,,,
Sol-9425,,,,,,,
Sol-9426,,,,,,,
Sol-9427,,,,,,,
Sol-9428,,,,,,,
Sol-9429,,,,,,,
Sol-9430,,,,,,,
Sol-9431,,,,,,,
Sol-9432,,,,,,,
Sol-9433,,,,,,,
Sol-9434,,,,,,,
Sol-9435,,,,,,,
Sol-9436,,,,,,,
Sol-9437,,,,,,,
Sol-9438,,,,,,,
Sol-9439,,,,,,,
Sol-9440,,,,,,,
Sol-9441,,,,,,,
Sol-9442,,,,,,,
Sol-9443,,,,,,,
Sol-9444,,,,,,,
Sol-9445,,,,,,,
Sol-9446,,,,,,,
Sol-9447,,,,,,,
Sol-9448,,,,,,,
Sol-9449,,,,,,,
Sol-9450,,,,,,,
Sol-9451,,,,,,,
Sol-9452,,,,,,,
Sol-9453,,,,,,,
Sol-9454,,,,,,,
Sol-9455,,,,,,,
Sol-9456,,,,,,,
Sol-9457,,,,,,,
Sol-9458,,,,,,,
Sol-9459,,,,,,,
Sol-9460,,,,,,,
Sol-9461,,,,,,,
Sol-9462,,,,,,,
Sol-9463,,,,,,,
Sol-9464,,,,,,,
Sol-9465,,,,,,,
Sol-9466,,,,,,,
Sol-9467,,,,,,,
Sol-9468,,,,,,,
Sol-9469,,,,,,,
Sol-9470,,,,,,,
Sol-9471,,,,,,,
Sol-9472,,,,,,,
Sol-9473,,,,,,,
Sol-9474,,,,,,,
Sol-9475,,,,,,,
Sol-9476,,,,,,,
Sol-9477,,,,,,,
Sol-9478,,,,,,,
Sol-9479,,,,,,,
Sol-9480,,,,,,,
Sol-9481,,,,,,,
Sol-9482,,,,,,,
Sol-9483,,,,,,,
Sol-9484,,,,,,,
Sol-9485,,,,,,,
Sol-9486,,,,,,,
Sol-9487,,,,,,,
Sol-9488,,,,,,,
Sol-9489,,,,,,,
Sol-9490,,,,,,,
Sol-9491,,,,,,,
Sol-9492,,,,,,,
Sol-9493,,,,,,,
Sol-9494,,,,,,,
Sol-9495,,,,,,,
Sol-9496,,,,,,,
Sol-9497,,,,,,,
Sol-9498,,,,,,,
Sol-9499,,,,,,,
Sol-9500,,,,,,,
Sol-9501,,,,,,,
Sol-9502,,,,,,,
Sol-9503,,,,,,,
Sol-9504,,,,,,,
Sol-9505,,,,,,,
Sol-9506,,,,,,,
Sol-9507,,,,,,,
Sol-9508,,,,,,,
Sol-9509,,,,,,,
Sol-9510,,,,,,,
Sol-9511,,,,,,,
Sol-9512,,,,,,,
Sol-9513,,,,,,,
Sol-9514,,,,,,,
Sol-9515,,,,,,,
Sol-9516,,,,,,,
Sol-9517,,,,,,,
Sol-9518,,,,,,,
Sol-9519,,,,,,,
Sol-9520,,,,,,,
Sol-9521,,,,,,,
Sol-9522,,,,,,,
Sol-9523,,,,,,,
Sol-9524,,,,,,,
Sol-9525,,,,,,,
Sol-9526,,,,,,,
Sol-9527,,,,,,,
Sol-9528,,,,,,,
Sol-9529,,,,,,,
Sol-9530,,,,,,,
Sol-9531,,,,,,,
Sol-9532,,,,,,,
Sol-9533,,,,,,,
Sol-9534,,,,,,,
Sol-9535,,,,,,,
Sol-9536,,,,,,,
Sol-9537,,,,,,,
Sol-9538,,,,,,,
Sol-9539,,,,,,,
Sol-9540,,,,,,,
Sol-9541,,,,,,,
Sol-9542,,,,,,,
Sol-9543,,,,,,,
Sol-9544,,,,,,,
Sol-9545,,,,,,,
Sol-9546,,,,,,,
Sol-9547,,,,,,,
Sol-9548,,,,,,,
Sol-9549,,,,,,,
Sol-9550,,,,,,,
Sol-9551,,,,,,,
Sol-9552,,,,,,,
Sol-9553,,,,,,,
Sol-9554,,,,,,,
Sol-9555,,,,,,,
Sol-9556,,,,,,,
Sol-9557,,,,,,,
Sol-9558,,,,,,,
Sol-9559,,,,,,,
Sol-9560,,,,,,,
Sol-9561,,,,,,,
Sol-9562,,,,,,,
Sol-9563,,,,,,,
Sol-9564,,,,,,,
Sol-9565,,,,,,,
Sol-9566,,,,,,,
Sol-9567,,,,,,,
Sol-9568,,,,,,,
Sol-9569,,,,,,,
Sol-9570,,,,,,,
Sol-9571,,,,,,,
Sol-9572,,,,,,,
Sol-9573,,,,,,,
Sol-9574,,,,,,,
Sol-9575,,,,,,,
Sol-9576,,,,,,,
Sol-9577,,,,,,,
Sol-9578,,,,,,,
Sol-9579,,,,,,,
Sol-9580,,,,,,,
Sol-9581,,,,,,,
Sol-9582,,,,,,,
Sol-9583,,,,,,,
Sol-9584,,,,,,,
Sol-9585,,,,,,,
Sol-9586,,,,,,,
Sol-9587,,,,,,,
Sol-9588,,,,,,,
Sol-9589,,,,,,,
Sol-9590,,,,,,,
Sol-9591,,,,,,,
Sol-9592,,,,,,,
Sol-9593,,,,,,,
Sol-9594,,,,,,,
Sol-9595,,,,,,,
Sol-9596,,,,,,,
Sol-9597,,,,,,,
Sol-9598,,,,,,,
Sol-9599,,,,,,,
Sol-9600,,,,,,,
Sol-9601,,,,,,,
Sol-9602,,,,,,,
Sol-9603,,,,,,,
Sol-9604,,,,,,,
Sol-9605,,,,,,,
Sol-9606,,,,,,,
Sol-9607,,,,,,,
Sol-9608,,,,,,,
Sol-9609,,,,,,,
Sol-9610,,,,,,,
Sol-9611,,,,,,,
Sol-9612,,,,,,,
Sol-9613,,,,,,,
Sol-9614,,,,,,,
Sol-9615,,,,,,,
Sol-9616,,,,,,,
Sol-9617,,,,,,,
Sol-9618,,,,,,,
Sol-9619,,,,,,,
Sol-9620,,,,,,,
Sol-9621,,,,,,,
Sol-9622,,,,,,,
Sol-9623,,,,,,,
Sol-9624,,,,,,,
Sol-9625,,,,,,,
Sol-9626,,,,,,,
Sol-9627,,,,,,,
Sol-9628,,,,,,,
Sol-9629,,,,,,,
Sol-9630,,,,,,,
Sol-9631,,,,,,,
Sol-9632,,,,,,,
Sol-9633,,,,,,,
Sol-9634,,,,,,,
Sol-9635,,,,,,,
Sol-9636,,,,,,,
Sol-9637,,,,,,,
Sol-9638,,,,,,,
Sol-9639,,,,,,,
Sol-9640,,,,,,,
Sol-9641,,,,,,,
Sol-9642,,,,,,,
Sol-9643,,,,,,,
Sol-9644,,,,,,,
Sol-9645,,,,,,,
Sol-9646,,,,,,,
Sol-9647,,,,,,,
Sol-9648,,,,,,,
Sol-9649,,,,,,,
Sol-9650,,,,,,,
Sol-9651,,,,,,,
Sol-9652,,,,,,,
Sol-9653,,,,,,,
Sol-9654,,,,,,,
Sol-9655,,,,,,,
Sol-9656,,,,,,,
Sol-9657,,,,,,,
Sol-9658,,,,,,,
Sol-9659,,,,,,,
Sol-9660,,,,,,,
Sol-9661,,,,,,,
Sol-9662,,,,,,,
Sol-9663,,,,,,,
Sol-9664,,,,,,,
Sol-9665,,,,,,,
Sol-9666,,,,,,,
Sol-9667,,,,,,,
Sol-9668,,,,,,,
Sol-9669,,,,,,,
Sol-9670,,,,,,,
Sol-9671,,,,,,,
Sol-9672,,,,,,,
Sol-9673,,,,,,,
Sol-9674,,,,,,,
Sol-9675,,,,,,,
Sol-9676,,,,,,,
Sol-9677,,,,,,,
Sol-9678,,,,,,,
Sol-9679,,,,,,,
Sol-9680,,,,,,,
Sol-9681,,,,,,,
Sol-9682,,,,,,,
Sol-9683,,,,,,,
Sol-9684,,,,,,,
Sol-9685,,,,,,,
Sol-9686,,,,,,,
Sol-9687,,,,,,,
Sol-9688,,,,,,,
Sol-9689,,,,,,,
Sol-9690,,,,,,,
Sol-9691,,,,,,,
Sol-9692,,,,,,,
Sol-9693,,,,,,,
Sol-9694,,,,,,,
Sol-9695,,,,,,,
Sol-9696,,,,,,,
Sol-9697,,,,,,,
Sol-9698,,,,,,,
Sol-9699,,,,,,,
Sol-9700,,,,,,,
Sol-9701,,,,,,,
Sol-9702,,,,,,,
Sol-9703,,,,,,,
Sol-9704,,,,,,,
Sol-9705,,,,,,,
Sol-9706,,,,,,,
Sol-9707,,,,,,,
Sol-9708,,,,,,,
Sol-9709,,,,,,,
Sol-9710,,,,,,,
Sol-9711,,,,,,,
Sol-9712,,,,,,,
Sol-9713,,,,,,,
Sol-9714,,,,,,,
Sol-9715,,,,,,,
Sol-9716,,,,,,,
Sol-9717,,,,,,,
Sol-9718,,,,,,,
Sol-9719,,,,,,,
Sol-9720,,,,,,,
Sol-9721,,,,,,,
Sol-9722,,,,,,,
Sol-9723,,,,,,,
Sol-9724,,,,,,,
Sol-9725,,,,,,,
Sol-9726,,,,,,,
Sol-9727,,,,,,,
Sol-9728,,,,,,,
Sol-9729,,,,,,,
Sol-9730,,,,,,,
Sol-9731,,,,,,,
Sol-9732,,,,,,,
Sol-9733,,,,,,,
Sol-9734,,,,,,,
Sol-9735,,,,,,,
Sol-9736,,,,,,,
Sol-9737,,,,,,,
Sol-9738,,,,,,,
Sol-9739,,,,,,,
Sol-9740,,,,,,,
Sol-9741,,,,,,,
Sol-9742,,,,,,,
Sol-9743,,,,,,,
Sol-9744,,,,,,,
Sol-9745,,,,,,,
Sol-9746,,,,,,,
Sol-9747,,,,,,,
Sol-9748,,,,,,,
Sol-9749,,,,,,,
Sol-9750,,,,,,,
Sol-9751,,,,,,,
Sol-9752,,,,,,,
Sol-9753,,,,,,,
Sol-9754,,,,,,,
Sol-9755,,,,,,,
Sol-9756,,,,,,,
Sol-9757,,,,,,,
Sol-9758,,,,,,,
Sol-9759,,,,,,,
Sol-9760,,,,,,,
Sol-9761,,,,,,,
Sol-9762,,,,,,,
Sol-9763,,,,,,,
Sol-9764,,,,,,,
Sol-9765,,,,,,,
Sol-9766,,,,,,,
Sol-9767,,,,,,,
Sol-9768,,,,,,,
Sol-9769,,,,,,,
Sol-9770,,,,,,,
Sol-9771,,,,,,,
Sol-9772,,,,,,,
Sol-9773,,,,,,,
Sol-9774,,,,,,,
Sol-9775,,,,,,,
Sol-9776,,,,,,,
Sol-9777,,,,,,,
Sol-9778,,,,,,,
Sol-9779,,,,,,,
Sol-9780,,,,,,,
Sol-9781,,,,,,,
Sol-9782,,,,,,,
Sol-9783,,,,,,,
Sol-9784,,,,,,,
Sol-9785,,,,,,,
Sol-9786,,,,,,,
Sol-9787,,,,,,,
Sol-9788,,,,,,,
Sol-9789,,,,,,,
Sol-9790,,,,,,,
Sol-9791,,,,,,,
Sol-9792,,,,,,,
Sol-9793,,,,,,,
Sol-9794,,,,,,,
Sol-9795,,,,,,,
Sol-9796,,,,,,,
Sol-9797,,,,,,,
Sol-9798,,,,,,,
Sol-9799,,,,,,,
Sol-9800,,,,,,,
Sol-9801,,,,,,,
Sol-9802,,,,,,,
Sol-9803,,,,,,,
Sol-9804,,,,,,,
Sol-9805,,,,,,,
Sol-9806,,,,,,,
Sol-9807,,,,,,,
Sol-9808,,,,,,,
Sol-9809,,,,,,,
Sol-9810,,,,,,,
Sol-9811,,,,,,,
Sol-9812,,,,,,,
Sol-9813,,,,,,,
Sol-9814,,,,,,,
Sol-9815,,,,,,,
Sol-9816,,,,,,,
Sol-9817,,,,,,,
Sol-9818,,,,,,,
Sol-9819,,,,,,,
Sol-9820,,,,,,,
Sol-9821,,,,,,,
Sol-9822,,,,,,,
Sol-9823,,,,,,,
Sol-9824,,,,,,,
Sol-9825,,,,,,,
Sol-9826,,,,,,,
Sol-9827,,,,,,,
Sol-9828,,,,,,,
Sol-9829,,,,,,,
Sol-9830,,,,,,,
Sol-9831,,,,,,,
Sol-9832,,,,,,,
Sol-9833,,,,,,,
Sol-9834,,,,,,,
Sol-9835,,,,,,,
Sol-9836,,,,,,,
Sol-9837,,,,,,,
Sol-9838,,,,,,,
Sol-9839,,,,,,,
Sol-9840,,,,,,,
Sol-9841,,,,,,,
Sol-9842,,,,,,,
Sol-9843,,,,,,,
Sol-9844,,,,,,,
Sol-9845,,,,,,,
Sol-9846,,,,,,,
Sol-9847,,,,,,,
Sol-9848,,,,,,,
Sol-9849,,,,,,,
Sol-9850,,,,,,,
Sol-9851,,,,,,,
Sol-9852,,,,,,,
Sol-9853,,,,,,,
Sol-9854,,,,,,,
Sol-9855,,,,,,,
Sol-9856,,,,,,,
Sol-9857,,,,,,,
Sol-9858,,,,,,,
Sol-9859,,,,,,,
Sol-9860,,,,,,,
Sol-9861,,,,,,,
Sol-9862,,,,,,,
Sol-9863,,,,,,,
Sol-9864,,,,,,,
Sol-9865,,,,,,,
Sol-9866,,,,,,,
Sol-9867,,,,,,,
Sol-9868,,,,,,,
Sol-9869,,,,,,,
Sol-9870,,,,,,,
Sol-9871,,,,,,,
Sol-9872,,,,,,,
Sol-9873,,,,,,,
Sol-9874,,,,,,,
Sol-9875,,,,,,,
Sol-9876,,,,,,,
Sol-9877,,,,,,,
Sol-9878,,,,,,,
Sol-9879,,,,,,,
Sol-9880,,,,,,,
Sol-9881,,,,,,,
Sol-9882,,,,,,,
Sol-9883,,,,,,,
Sol-9884,,,,,,,
Sol-9885,,,,,,,
Sol-9886,,,,,,,
Sol-9887,,,,,,,
Sol-9888,,,,,,,
Sol-9889,,,,,,,
Sol-9890,,,,,,,
Sol-9891,,,,,,,
Sol-9892,,,,,,,
Sol-9893,,,,,,,
Sol-9894,,,,,,,
Sol-9895,,,,,,,
Sol-9896,,,,,,,
Sol-9897,,,,,,,
Sol-9898,,,,,,,
Sol-9899,,,,,,,
Sol-9900,,,,,,,
Sol-9901,,,,,,,
Sol-9902,,,,,,,
Sol-9903,,,,,,,
Sol-9904,,,,,,,
Sol-9905,,,,,,,
Sol-9906,,,,,,,
Sol-9907,,,,,,,
Sol-9908,,,,,,,
Sol-9909,,,,,,,
Sol-9910,,,,,,,
Sol-9911,,,,,,,
Sol-9912,,,,,,,
Sol-9913,,,,,,,
Sol-9914,,,,,,,
Sol-9915,,,,,,,
Sol-9916,,,,,,,
Sol-9917,,,,,,,
Sol-9918,,,,,,,
Sol-9919,,,,,,,
Sol-9920,,,,,,,
Sol-9921,,,,,,,
Sol-9922,,,,,,,
Sol-9923,,,,,,,
Sol-9924,,,,,,,
Sol-9925,,,,,,,
Sol-9926,,,,,,,
Sol-9927,,,,,,,
Sol-9928,,,,,,,
Sol-9929,,,,,,,
Sol-9930,,,,,,,
Sol-9931,,,,,,,
Sol-9932,,,,,,,
Sol-9933,,,,,,,
Sol-9934,,,,,,,
Sol-9935,,,,,,,
Sol-9936,,,,,,,
Sol-9937,,,,,,,
Sol-9938,,,,,,,
Sol-9939,,,,,,,
Sol-9940,,,,,,,
Sol-9941,,,,,,,
Sol-9942,,,,,,,
Sol-9943,,,,,,,
Sol-9944,,,,,,,
Sol-9945,,,,,,,
Sol-9946,,,,,,,
Sol-9947,,,,,,,
Sol-9948,,,,,,,
Sol-9949,,,,,,,
Sol-9950,,,,,,,
Sol-9951,,,,,,,
Sol-9952,,,,,,,
Sol-9953,,,,,,,
Sol-9954,,,,,,,
Sol-9955,,,,,,,
Sol-9956,,,,,,,
Sol-9957,,,,,,,
Sol-9958,,,,,,,
Sol-9959,,,,,,,
Sol-9960,,,,,,,
Sol-9961,,,,,,,
Sol-9962,,,,,,,
Sol-9963,,,,,,,
Sol-9964,,,,,,,
Sol-9965,,,,,,,
Sol-9966,,,,,,,
Sol-9967,,,,,,,
Sol-9968,,,,,,,
Sol-9969,,,,,,,
Sol-9970,,,,,,,
Sol-9971,,,,,,,
Sol-9972,,,,,,,
Sol-9973,,,,,,,
Sol-9974,,,,,,,
Sol-9975,,,,,,,
Sol-9976,,,,,,,
Sol-9977,,,,,,,
Sol-9978,,,,,,,
Sol-9979,,,,,,,
Sol-9980,,,,,,,
Sol-9981,,,,,,,
Sol-9982,,,,,,,
Sol-9983,,,,,,,
Sol-9984,,,,,,,
Sol-9985,,,,,,,
Sol-9986,,,,,,,
Sol-9987,,,,,,,
Sol-9988,,,,,,,
Sol-9989,,,,,,,
Sol-9990,,,,,,,
Sol-9991,,,,,,,
Sol-9992,,,,,,,
Sol-9993,,,,,,,
Sol-9994,,,,,,,
Sol-9995,,,,,,,
Sol-9996,,,,,,,
Sol-9997,,,,,,,
Sol-9998,,,,,,,
Sol-9999,,,,,,,
Sol-10000,,,,,,,
Sol-10001,,,,,,,
Sol-10002,,,,,,,
Sol-10003,,,,,,,
Sol-10004,,,,,,,
Sol-10005,,,,,,,
Sol-10006,,,,,,,
Sol-10007,,,,,,,
Sol-10008,,,,,,,
Sol-10009,,,,,,,
Sol-10010,,,,,,,
Sol-10011,,,,,,,
Sol-10012,,,,,,,
Sol-10013,,,,,,,
Sol-10014,,,,,,,
Sol-10015,,,,,,,
Sol-10016,,,,,,,
Sol-10017,,,,,,,
Sol-10018,,,,,,,
Sol-10019,,,,,,,
Sol-10020,,,,,,,
Sol-10021,,,,,,,
Sol-10022,,,,,,,
Sol-10023,,,,,,,
Sol-10024,,,,,,,
Sol-10025,,,,,,,
Sol-10026,,,,,,,
Sol-10027,,,,,,,
Sol-10028,,,,,,,
Sol-10029,,,,,,,
Sol-10030,,,,,,,
Sol-10031,,,,,,,
Sol-10032,,,,,,,
Sol-10033,,,,,,,
Sol-10034,,,,,,,
Sol-10035,,,,,,,
Sol-10036,,,,,,,
Sol-10037,,,,,,,
Sol-10038,,,,,,,
Sol-10039,,,,,,,
Sol-10040,,,,,,,
Sol-10041,,,,,,,
Sol-10042,,,,,,,
Sol-10043,,,,,,,
Sol-10044,,,,,,,
Sol-10045,,,,,,,
Sol-10046,,,,,,,
Sol-10047,,,,,,,
Sol-10048,,,,,,,
Sol-10049,,,,,,,
Sol-10050,,,,,,,
Sol-10051,,,,,,,
Sol-10052,,,,,,,
Sol-10053,,,,,,,
Sol-10054,,,,,,,
Sol-10055,,,,,,,
Sol-10056,,,,,,,
Sol-10057,,,,,,,
Sol-10058,,,,,,,
Sol-10059,,,,,,,
Sol-10060,,,,,,,
Sol-10061,,,,,,,
Sol-10062,,,,,,,
Sol-10063,,,,,,,
Sol-10064,,,,,,,
Sol-10065,,,,,,,
Sol-10066,,,,,,,
Sol-10067,,,,,,,
Sol-10068,,,,,,,
Sol-10069,,,,,,,
Sol-10070,,,,,,,
Sol-10071,,,,,,,
Sol-10072,,,,,,,
Sol-10073,,,,,,,
Sol-10074,,,,,,,
Sol-10075,,,,,,,
Sol-10076,,,,,,,
Sol-10077,,,,,,,
Sol-10078,,,,,,,
Sol-10079,,,,,,,
Sol-10080,,,,,,,
Sol-10081,,,,,,,
Sol-10082,,,,,,,
Sol-10083,,,,,,,
Sol-10084,,,,,,,
Sol-10085,,,,,,,
Sol-10086,,,,,,,
Sol-10087,,,,,,,
Sol-10088,,,,,,,
Sol-10089,,,,,,,
Sol-10090,,,,,,,
Sol-10091,,,,,,,
Sol-10092,,,,,,,
Sol-10093,,,,,,,
Sol-10094,,,,,,,
Sol-10095,,,,,,,
Sol-10096,,,,,,,
Sol-10097,,,,,,,
Sol-10098,,,,,,,
Sol-10099,,,,,,,
Sol-10100,,,,,,,
Sol-10101,,,,,,,
Sol-10102,,,,,,,
Sol-10103,,,,,,,
Sol-10104,,,,,,,
Sol-10105,,,,,,,
Sol-10106,,,,,,,
Sol-10107,,,,,,,
Sol-10108,,,,,,,
Sol-10109,,,,,,,
Sol-10110,,,,,,,
Sol-10111,,,,,,,
Sol-10112,,,,,,,
Sol-10113,,,,,,,
Sol-10114,,,,,,,
Sol-10115,,,,,,,
Sol-10116,,,,,,,
Sol-10117,,,,,,,
Sol-10118,,,,,,,
Sol-10119,,,,,,,
Sol-10120,,,,,,,
Sol-10121,,,,,,,
Sol-10122,,,,,,,
Sol-10123,,,,,,,
Sol-10124,,,,,,,
Sol-10125,,,,,,,
Sol-10126,,,,,,,
Sol-10127,,,,,,,
Sol-10128,,,,,,,
Sol-10129,,,,,,,
Sol-10130,,,,,,,
Sol-10131,,,,,,,
Sol-10132,,,,,,,
Sol-10133,,,,,,,
Sol-10134,,,,,,,
Sol-10135,,,,,,,
Sol-10136,,,,,,,
Sol-10137,,,,,,,
Sol-10138,,,,,,,
Sol-10139,,,,,,,
Sol-10140,,,,,,,
Sol-10141,,,,,,,
Sol-10142,,,,,,,
Sol-10143,,,,,,,
Sol-10144,,,,,,,
Sol-10145,,,,,,,
Sol-10146,,,,,,,
Sol-10147,,,,,,,
Sol-10148,,,,,,,
Sol-10149,,,,,,,
Sol-10150,,,,,,,
Sol-10151,,,,,,,
Sol-10152,,,,,,,
Sol-10153,,,,,,,
Sol-10154,,,,,,,
Sol-10155,,,,,,,
Sol-10156,,,,,,,
Sol-10157,,,,,,,
Sol-10158,,,,,,,
Sol-10159,,,,,,,
Sol-10160,,,,,,,
Sol-10161,,,,,,,
Sol-10162,,,,,,,
Sol-10163,,,,,,,
Sol-10164,,,,,,,
Sol-10165,,,,,,,
Sol-10166,,,,,,,
Sol-10167,,,,,,,
Sol-10168,,,,,,,
Sol-10169,,,,,,,
Sol-10170,,,,,,,
Sol-10171,,,,,,,
Sol-10172,,,,,,,
Sol-10173,,,,,,,
Sol-10174,,,,,,,
Sol-10175,,,,,,,
Sol-10176,,,,,,,
Sol-10177,,,,,,,
Sol-10178,,,,,,,
Sol-10179,,,,,,,
Sol-10180,,,,,,,
Sol-10181,,,,,,,
Sol-10182,,,,,,,
Sol-10183,,,,,,,
Sol-10184,,,,,,,
Sol-10185,,,,,,,
Sol-10186,,,,,,,
Sol-10187,,,,,,,
Sol-10188,,,,,,,
Sol-10189,,,,,,,
Sol-10190,,,,,,,
Sol-10191,,,,,,,
Sol-10192,,,,,,,
Sol-10193,,,,,,,
Sol-10194,,,,,,,
Sol-10195,,,,,,,
Sol-10196,,,,,,,
Sol-10197,,,,,,,
Sol-10198,,,,,,,
Sol-10199,,,,,,,
Sol-10200,,,,,,,
Sol-10201,,,,,,,
Sol-10202,,,,,,,
Sol-10203,,,,,,,
Sol-10204,,,,,,,
Sol-10205,,,,,,,
Sol-10206,,,,,,,
Sol-10207,,,,,,,
Sol-10208,,,,,,,
Sol-10209,,,,,,,
Sol-10210,,,,,,,
Sol-10211,,,,,,,
Sol-10212,,,,,,,
Sol-10213,,,,,,,
Sol-10214,,,,,,,
Sol-10215,,,,,,,
Sol-10216,,,,,,,
Sol-10217,,,,,,,
Sol-10218,,,,,,,
Sol-10219,,,,,,,
Sol-10220,,,,,,,
Sol-10221,,,,,,,
Sol-10222,,,,,,,
Sol-10223,,,,,,,
Sol-10224,,,,,,,
Sol-10225,,,,,,,
Sol-10226,,,,,,,
Sol-10227,,,,,,,
Sol-10228,,,,,,,
Sol-10229,,,,,,,
Sol-10230,,,,,,,
Sol-10231,,,,,,,
Sol-10232,,,,,,,
Sol-10233,,,,,,,
Sol-10234,,,,,,,
Sol-10235,,,,,,,
Sol-10236,,,,,,,
Sol-10237,,,,,,,
Sol-10238,,,,,,,
Sol-10239,,,,,,,
Sol-10240,,,,,,,
Sol-10241,,,,,,,
Sol-10242,,,,,,,
Sol-10243,,,,,,,
Sol-10244,,,,,,,
Sol-10245,,,,,,,
Sol-10246,,,,,,,
Sol-10247,,,,,,,
Sol-10248,,,,,,,
Sol-10249,,,,,,,
Sol-10250,,,,,,,
Sol-10251,,,,,,,
Sol-10252,,,,,,,
Sol-10253,,,,,,,
Sol-10254,,,,,,,
Sol-10255,,,,,,,
Sol-10256,,,,,,,
Sol-10257,,,,,,,
Sol-10258,,,,,,,
Sol-10259,,,,,,,
Sol-10260,,,,,,,
Sol-10261,,,,,,,
Sol-10262,,,,,,,
Sol-10263,,,,,,,
Sol-10264,,,,,,,
Sol-10265,,,,,,,
Sol-10266,,,,,,,
Sol-10267,,,,,,,
Sol-10268,,,,,,,
Sol-10269,,,,,,,
Sol-10270,,,,,,,
Sol-10271,,,,,,,
Sol-10272,,,,,,,
Sol-10273,,,,,,,
Sol-10274,,,,,,,
Sol-10275,,,,,,,
Sol-10276,,,,,,,
Sol-10277,,,,,,,
Sol-10278,,,,,,,
Sol-10279,,,,,,,
Sol-10280,,,,,,,
Sol-10281,,,,,,,
Sol-10282,,,,,,,
Sol-10283,,,,,,,
Sol-10284,,,,,,,
Sol-10285,,,,,,,
Sol-10286,,,,,,,
Sol-10287,,,,,,,
Sol-10288,,,,,,,
Sol-10289,,,,,,,
Sol-10290,,,,,,,
Sol-10291,,,,,,,
Sol-10292,,,,,,,
Sol-10293,,,,,,,
Sol-10294,,,,,,,
Sol-10295,,,,,,,
Sol-10296,,,,,,,
Sol-10297,,,,,,,
Sol-10298,,,,,,,
Sol-10299,,,,,,,
Sol-10300,,,,,,,
Sol-10301,,,,,,,
Sol-10302,,,,,,,
Sol-10303,,,,,,,
Sol-10304,,,,,,,
Sol-10305,,,,,,,
Sol-10306,,,,,,,
Sol-10307,,,,,,,
Sol-10308,,,,,,,
Sol-10309,,,,,,,
Sol-10310,,,,,,,
Sol-10311,,,,,,,
Sol-10312,,,,,,,
Sol-10313,,,,,,,
Sol-10314,,,,,,,
Sol-10315,,,,,,,
Sol-10316,,,,,,,
Sol-10317,,,,,,,
Sol-10318,,,,,,,
Sol-10319,,,,,,,
Sol-10320,,,,,,,
Sol-10321,,,,,,,
Sol-10322,,,,,,,
Sol-10323,,,,,,,
Sol-10324,,,,,,,
Sol-10325,,,,,,,
Sol-10326,,,,,,,
Sol-10327,,,,,,,
Sol-10328,,,,,,,
Sol-10329,,,,,,,
Sol-10330,,,,,,,
Sol-10331,,,,,,,
Sol-10332,,,,,,,
Sol-10333,,,,,,,
Sol-10334,,,,,,,
Sol-10335,,,,,,,
Sol-10336,,,,,,,
Sol-10337,,,,,,,
Sol-10338,,,,,,,
Sol-10339,,,,,,,
Sol-10340,,,,,,,
Sol-10341,,,,,,,
Sol-10342,,,,,,,
Sol-10343,,,,,,,
Sol-10344,,,,,,,
Sol-10345,,,,,,,
Sol-10346,,,,,,,
Sol-10347,,,,,,,
Sol-10348,,,,,,,
Sol-10349,,,,,,,
Sol-10350,,,,,,,
Sol-10351,,,,,,,
Sol-10352,,,,,,,
Sol-10353,,,,,,,
Sol-10354,,,,,,,
Sol-10355,,,,,,,
Sol-10356,,,,,,,
Sol-10357,,,,,,,
Sol-10358,,,,,,,
Sol-10359,,,,,,,
Sol-10360,,,,,,,
Sol-10361,,,,,,,
Sol-10362,,,,,,,
Sol-10363,,,,,,,
Sol-10364,,,,,,,
Sol-10365,,,,,,,
Sol-10366,,,,,,,
Sol-10367,,,,,,,
Sol-10368,,,,,,,
Sol-10369,,,,,,,
Sol-10370,,,,,,,
Sol-10371,,,,,,,
Sol-10372,,,,,,,
Sol-10373,,,,,,,
Sol-10374,,,,,,,
Sol-10375,,,,,,,
Sol-10376,,,,,,,
Sol-10377,,,,,,,
Sol-10378,,,,,,,
Sol-10379,,,,,,,
Sol-10380,,,,,,,
Sol-10381,,,,,,,
Sol-10382,,,,,,,
Sol-10383,,,,,,,
Sol-10384,,,,,,,
Sol-10385,,,,,,,
Sol-10386,,,,,,,
Sol-10387,,,,,,,
Sol-10388,,,,,,,
Sol-10389,,,,,,,
Sol-10390,,,,,,,
Sol-10391,,,,,,,
Sol-10392,,,,,,,
Sol-10393,,,,,,,
Sol-10394,,,,,,,
Sol-10395,,,,,,,
Sol-10396,,,,,,,
Sol-10397,,,,,,,
Sol-10398,,,,,,,
Sol-10399,,,,,,,
Sol-10400,,,,,,,
Sol-10401,,,,,,,
Sol-10402,,,,,,,
Sol-10403,,,,,,,
Sol-10404,,,,,,,
Sol-10405,,,,,,,
Sol-10406,,,,,,,
Sol-10407,,,,,,,
Sol-10408,,,,,,,
Sol-10409,,,,,,,
Sol-10410,,,,,,,
Sol-10411,,,,,,,
Sol-10412,,,,,,,
Sol-10413,,,,,,,
Sol-10414,,,,,,,
Sol-10415,,,,,,,
Sol-10416,,,,,,,
Sol-10417,,,,,,,
Sol-10418,,,,,,,
Sol-10419,,,,,,,
Sol-10420,,,,,,,
Sol-10421,,,,,,,
Sol-10422,,,,,,,
Sol-10423,,,,,,,
Sol-10424,,,,,,,
Sol-10425,,,,,,,
Sol-10426,,,,,,,
Sol-10427,,,,,,,
Sol-10428,,,,,,,
Sol-10429,,,,,,,
Sol-10430,,,,,,,
Sol-10431,,,,,,,
Sol-10432,,,,,,,
Sol-10433,,,,,,,
Sol-10434,,,,,,,
Sol-10435,,,,,,,
Sol-10436,,,,,,,
Sol-10437,,,,,,,
Sol-10438,,,,,,,
Sol-10439,,,,,,,
Sol-10440,,,,,,,
Sol-10441,,,,,,,
Sol-10442,,,,,,,
Sol-10443,,,,,,,
Sol-10444,,,,,,,
Sol-10445,,,,,,,
Sol-10446,,,,,,,
Sol-10447,,,,,,,
Sol-10448,,,,,,,
Sol-10449,,,,,,,
Sol-10450,,,,,,,
Sol-10451,,,,,,,
Sol-10452,,,,,,,
Sol-10453,,,,,,,
Sol-10454,,,,,,,
Sol-10455,,,,,,,
Sol-10456,,,,,,,
Sol-10457,,,,,,,
Sol-10458,,,,,,,
Sol-10459,,,,,,,
Sol-10460,,,,,,,
Sol-10461,,,,,,,
Sol-10462,,,,,,,
Sol-10463,,,,,,,
Sol-10464,,,,,,,
Sol-10465,,,,,,,
Sol-10466,,,,,,,
Sol-10467,,,,,,,
Sol-10468,,,,,,,
Sol-10469,,,,,,,
Sol-10470,,,,,,,
Sol-10471,,,,,,,
Sol-10472,,,,,,,
Sol-10473,,,,,,,
Sol-10474,,,,,,,
Sol-10475,,,,,,,
Sol-10476,,,,,,,
Sol-10477,,,,,,,
Sol-10478,,,,,,,
Sol-10479,,,,,,,
Sol-10480,,,,,,,
Sol-10481,,,,,,,
Sol-10482,,,,,,,
Sol-10483,,,,,,,
Sol-10484,,,,,,,
Sol-10485,,,,,,,
Sol-10486,,,,,,,
Sol-10487,,,,,,,
Sol-10488,,,,,,,
Sol-10489,,,,,,,
Sol-10490,,,,,,,
Sol-10491,,,,,,,
Sol-10492,,,,,,,
Sol-10493,,,,,,,
Sol-10494,,,,,,,
Sol-10495,,,,,,,
Sol-10496,,,,,,,
Sol-10497,,,,,,,
Sol-10498,,,,,,,
Sol-10499,,,,,,,
Sol-10500,,,,,,,
Sol-10501,,,,,,,
Sol-10502,,,,,,,
Sol-10503,,,,,,,
Sol-10504,,,,,,,
Sol-10505,,,,,,,
Sol-10506,,,,,,,
Sol-10507,,,,,,,
Sol-10508,,,,,,,
Sol-10509,,,,,,,
Sol-10510,,,,,,,
Sol-10511,,,,,,,
Sol-10512,,,,,,,
Sol-10513,,,,,,,
Sol-10514,,,,,,,
Sol-10515,,,,,,,
Sol-10516,,,,,,,
Sol-10517,,,,,,,
Sol-10518,,,,,,,
Sol-10519,,,,,,,
Sol-10520,,,,,,,
Sol-10521,,,,,,,
Sol-10522,,,,,,,
Sol-10523,,,,,,,
Sol-10524,,,,,,,
Sol-10525,,,,,,,
Sol-10526,,,,,,,
Sol-10527,,,,,,,
Sol-10528,,,,,,,
Sol-10529,,,,,,,
Sol-10530,,,,,,,
Sol-10531,,,,,,,
Sol-10532,,,,,,,
Sol-10533,,,,,,,
Sol-10534,,,,,,,
Sol-10535,,,,,,,
Sol-10536,,,,,,,
Sol-10537,,,,,,,
Sol-10538,,,,,,,
Sol-10539,,,,,,,
Sol-10540,,,,,,,
Sol-10541,,,,,,,
Sol-10542,,,,,,,
Sol-10543,,,,,,,
Sol-10544,,,,,,,
Sol-10545,,,,,,,
Sol-10546,,,,,,,
Sol-10547,,,,,,,
Sol-10548,,,,,,,
Sol-10549,,,,,,,
Sol-10550,,,,,,,
Sol-10551,,,,,,,
Sol-10552,,,,,,,
Sol-10553,,,,,,,
Sol-10554,,,,,,,
Sol-10555,,,,,,,
Sol-10556,,,,,,,
Sol-10557,,,,,,,
Sol-10558,,,,,,,
Sol-10559,,,,,,,
Sol-10560,,,,,,,
Sol-10561,,,,,,,
Sol-10562,,,,,,,
Sol-10563,,,,,,,
Sol-10564,,,,,,,
Sol-10565,,,,,,,
Sol-10566,,,,,,,
Sol-10567,,,,,,,
Sol-10568,,,,,,,
Sol-10569,,,,,,,
Sol-10570,,,,,,,
Sol-10571,,,,,,,
Sol-10572,,,,,,,
Sol-10573,,,,,,,
Sol-10574,,,,,,,
Sol-10575,,,,,,,
Sol-10576,,,,,,,
Sol-10577,,,,,,,
Sol-10578,,,,,,,
Sol-10579,,,,,,,
Sol-10580,,,,,,,
Sol-10581,,,,,,,
Sol-10582,,,,,,,
Sol-10583,,,,,,,
Sol-10584,,,,,,,
Sol-10585,,,,,,,
Sol-10586,,,,,,,
Sol-10587,,,,,,,
Sol-10588,,,,,,,
Sol-10589,,,,,,,
Sol-10590,,,,,,,
Sol-10591,,,,,,,
Sol-10592,,,,,,,
Sol-10593,,,,,,,
Sol-10594,,,,,,,
Sol-10595,,,,,,,
Sol-10596,,,,,,,
Sol-10597,,,,,,,
Sol-10598,,,,,,,
Sol-10599,,,,,,,
Sol-10600,,,,,,,
Sol-10601,,,,,,,
Sol-10602,,,,,,,
Sol-10603,,,,,,,
Sol-10604,,,,,,,
Sol-10605,,,,,,,
Sol-10606,,,,,,,
Sol-10607,,,,,,,
Sol-10608,,,,,,,
Sol-10609,,,,,,,
Sol-10610,,,,,,,
Sol-10611,,,,,,,
Sol-10612,,,,,,,
Sol-10613,,,,,,,
Sol-10614,,,,,,,
Sol-10615,,,,,,,
Sol-10616,,,,,,,
Sol-10617,,,,,,,
Sol-10618,,,,,,,
Sol-10619,,,,,,,
Sol-10620,,,,,,,
Sol-10621,,,,,,,
Sol-10622,,,,,,,
Sol-10623,,,,,,,
Sol-10624,,,,,,,
Sol-10625,,,,,,,
Sol-10626,,,,,,,
Sol-10627,,,,,,,
Sol-10628,,,,,,,
Sol-10629,,,,,,,
Sol-10630,,,,,,,
Sol-10631,,,,,,,
Sol-10632,,,,,,,
Sol-10633,,,,,,,
Sol-10634,,,,,,,
Sol-10635,,,,,,,
Sol-10636,,,,,,,
Sol-10637,,,,,,,
Sol-10638,,,,,,,
Sol-10639,,,,,,,
Sol-10640,,,,,,,
Sol-10641,,,,,,,
Sol-10642,,,,,,,
Sol-10643,,,,,,,
Sol-10644,,,,,,,
Sol-10645,,,,,,,
Sol-10646,,,,,,,
Sol-10647,,,,,,,
Sol-10648,,,,,,,
Sol-10649,,,,,,,
Sol-10650,,,,,,,
Sol-10651,,,,,,,
Sol-10652,,,,,,,
Sol-10653,,,,,,,
Sol-10654,,,,,,,
Sol-10655,,,,,,,
Sol-10656,,,,,,,
Sol-10657,,,,,,,
Sol-10658,,,,,,,
Sol-10659,,,,,,,
Sol-10660,,,,,,,
Sol-10661,,,,,,,
Sol-10662,,,,,,,
Sol-10663,,,,,,,
Sol-10664,,,,,,,
Sol-10665,,,,,,,
Sol-10666,,,,,,,
Sol-10667,,,,,,,
Sol-10668,,,,,,,
Sol-10669,,,,,,,
Sol-10670,,,,,,,
Sol-10671,,,,,,,
Sol-10672,,,,,,,
Sol-10673,,,,,,,
Sol-10674,,,,,,,
Sol-10675,,,,,,,
Sol-10676,,,,,,,
Sol-10677,,,,,,,
Sol-10678,,,,,,,
Sol-10679,,,,,,,
Sol-10680,,,,,,,
Sol-10681,,,,,,,
Sol-10682,,,,,,,
Sol-10683,,,,,,,
Sol-10684,,,,,,,
Sol-10685,,,,,,,
Sol-10686,,,,,,,
Sol-10687,,,,,,,
Sol-10688,,,,,,,
Sol-10689,,,,,,,
Sol-10690,,,,,,,
Sol-10691,,,,,,,
Sol-10692,,,,,,,
Sol-10693,,,,,,,
Sol-10694,,,,,,,
Sol-10695,,,,,,,
Sol-10696,,,,,,,
Sol-10697,,,,,,,
Sol-10698,,,,,,,
Sol-10699,,,,,,,
Sol-10700,,,,,,,
Sol-10701,,,,,,,
Sol-10702,,,,,,,
Sol-10703,,,,,,,
Sol-10704,,,,,,,
Sol-10705,,,,,,,
Sol-10706,,,,,,,
Sol-10707,,,,,,,
Sol-10708,,,,,,,
Sol-10709,,,,,,,
Sol-10710,,,,,,,
Sol-10711,,,,,,,
Sol-10712,,,,,,,
Sol-10713,,,,,,,
Sol-10714,,,,,,,
Sol-10715,,,,,,,
Sol-10716,,,,,,,
Sol-10717,,,,,,,
Sol-10718,,,,,,,
Sol-10719,,,,,,,
Sol-10720,,,,,,,
Sol-10721,,,,,,,
Sol-10722,,,,,,,
Sol-10723,,,,,,,
Sol-10724,,,,,,,
Sol-10725,,,,,,,
Sol-10726,,,,,,,
Sol-10727,,,,,,,
Sol-10728,,,,,,,
Sol-10729,,,,,,,
Sol-10730,,,,,,,
Sol-10731,,,,,,,
Sol-10732,,,,,,,
Sol-10733,,,,,,,
Sol-10734,,,,,,,
Sol-10735,,,,,,,
Sol-10736,,,,,,,
Sol-10737,,,,,,,
Sol-10738,,,,,,,
Sol-10739,,,,,,,
Sol-10740,,,,,,,
Sol-10741,,,,,,,
Sol-10742,,,,,,,
Sol-10743,,,,,,,
Sol-10744,,,,,,,
Sol-10745,,,,,,,
Sol-10746,,,,,,,
Sol-10747,,,,,,,
Sol-10748,,,,,,,
Sol-10749,,,,,,,
Sol-10750,,,,,,,
Sol-10751,,,,,,,
Sol-10752,,,,,,,
Sol-10753,,,,,,,
Sol-10754,,,,,,,
Sol-10755,,,,,,,
Sol-10756,,,,,,,
Sol-10757,,,,,,,
Sol-10758,,,,,,,
Sol-10759,,,,,,,
Sol-10760,,,,,,,
Sol-10761,,,,,,,
Sol-10762,,,,,,,
Sol-10763,,,,,,,
Sol-10764,,,,,,,
Sol-10765,,,,,,,
Sol-10766,,,,,,,
Sol-10767,,,,,,,
Sol-10768,,,,,,,
Sol-10769,,,,,,,
Sol-10770,,,,,,,
Sol-10771,,,,,,,
Sol-10772,,,,,,,
Sol-10773,,,,,,,
Sol-10774,,,,,,,
Sol-10775,,,,,,,
Sol-10776,,,,,,,
Sol-10777,,,,,,,
Sol-10778,,,,,,,
Sol-10779,,,,,,,
Sol-10780,,,,,,,
Sol-10781,,,,,,,
Sol-10782,,,,,,,
Sol-10783,,,,,,,
Sol-10784,,,,,,,
Sol-10785,,,,,,,
Sol-10786,,,,,,,
Sol-10787,,,,,,,
Sol-10788,,,,,,,
Sol-10789,,,,,,,
Sol-10790,,,,,,,
Sol-10791,,,,,,,
Sol-10792,,,,,,,
Sol-10793,,,,,,,
Sol-10794,,,,,,,
Sol-10795,,,,,,,
Sol-10796,,,,,,,
Sol-10797,,,,,,,
Sol-10798,,,,,,,
Sol-10799,,,,,,,
Sol-10800,,,,,,,
Sol-10801,,,,,,,
Sol-10802,,,,,,,
Sol-10803,,,,,,,
Sol-10804,,,,,,,
Sol-10805,,,,,,,
Sol-10806,,,,,,,
Sol-10807,,,,,,,
Sol-10808,,,,,,,
Sol-10809,,,,,,,
Sol-10810,,,,,,,
Sol-10811,,,,,,,
Sol-10812,,,,,,,
Sol-10813,,,,,,,
Sol-10814,,,,,,,
Sol-10815,,,,,,,
Sol-10816,,,,,,,
Sol-10817,,,,,,,
Sol-10818,,,,,,,
Sol-10819,,,,,,,
Sol-10820,,,,,,,
Sol-10821,,,,,,,
Sol-10822,,,,,,,
Sol-10823,,,,,,,
Sol-10824,,,,,,,
Sol-10825,,,,,,,
Sol-10826,,,,,,,
Sol-10827,,,,,,,
Sol-10828,,,,,,,
Sol-10829,,,,,,,
Sol-10830,,,,,,,
Sol-10831,,,,,,,
Sol-10832,,,,,,,
Sol-10833,,,,,,,
Sol-10834,,,,,,,
Sol-10835,,,,,,,
Sol-10836,,,,,,,
Sol-10837,,,,,,,
Sol-10838,,,,,,,
Sol-10839,,,,,,,
Sol-10840,,,,,,,
Sol-10841,,,,,,,
Sol-10842,,,,,,,
Sol-10843,,,,,,,
Sol-10844,,,,,,,
Sol-10845,,,,,,,
Sol-10846,,,,,,,
Sol-10847,,,,,,,
Sol-10848,,,,,,,
Sol-10849,,,,,,,
Sol-10850,,,,,,,
Sol-10851,,,,,,,
Sol-10852,,,,,,,
Sol-10853,,,,,,,
Sol-10854,,,,,,,
Sol-10855,,,,,,,
Sol-10856,,,,,,,
Sol-10857,,,,,,,
Sol-10858,,,,,,,
Sol-10859,,,,,,,
Sol-10860,,,,,,,
Sol-10861,,,,,,,
Sol-10862,,,,,,,
Sol-10863,,,,,,,
Sol-10864,,,,,,,
Sol-10865,,,,,,,
Sol-10866,,,,,,,
Sol-10867,,,,,,,
Sol-10868,,,,,,,
Sol-10869,,,,,,,
Sol-10870,,,,,,,
Sol-10871,,,,,,,
Sol-10872,,,,,,,
Sol-10873,,,,,,,
Sol-10874,,,,,,,
Sol-10875,,,,,,,
Sol-10876,,,,,,,
Sol-10877,,,,,,,
Sol-10878,,,,,,,
Sol-10879,,,,,,,
Sol-10880,,,,,,,
Sol-10881,,,,,,,
Sol-10882,,,,,,,
Sol-10883,,,,,,,
Sol-10884,,,,,,,
Sol-10885,,,,,,,
Sol-10886,,,,,,,
Sol-10887,,,,,,,
Sol-10888,,,,,,,
Sol-10889,,,,,,,
Sol-10890,,,,,,,
Sol-10891,,,,,,,
Sol-10892,,,,,,,
Sol-10893,,,,,,,
Sol-10894,,,,,,,
Sol-10895,,,,,,,
Sol-10896,,,,,,,
Sol-10897,,,,,,,
Sol-10898,,,,,,,
Sol-10899,,,,,,,
Sol-10900,,,,,,,
Sol-10901,,,,,,,
Sol-10902,,,,,,,
Sol-10903,,,,,,,
Sol-10904,,,,,,,
Sol-10905,,,,,,,
Sol-10906,,,,,,,
Sol-10907,,,,,,,
Sol-10908,,,,,,,
Sol-10909,,,,,,,
Sol-10910,,,,,,,
Sol-10911,,,,,,,
Sol-10912,,,,,,,
Sol-10913,,,,,,,
Sol-10914,,,,,,,
Sol-10915,,,,,,,
Sol-10916,,,,,,,
Sol-10917,,,,,,,
Sol-10918,,,,,,,
Sol-10919,,,,,,,
Sol-10920,,,,,,,
Sol-10921,,,,,,,
Sol-10922,,,,,,,
Sol-10923,,,,,,,
Sol-10924,,,,,,,
Sol-10925,,,,,,,
Sol-10926,,,,,,,
Sol-10927,,,,,,,
Sol-10928,,,,,,,
Sol-10929,,,,,,,
Sol-10930,,,,,,,
Sol-10931,,,,,,,
Sol-10932,,,,,,,
Sol-10933,,,,,,,
Sol-10934,,,,,,,
Sol-10935,,,,,,,
Sol-10936,,,,,,,
Sol-10937,,,,,,,
Sol-10938,,,,,,,
Sol-10939,,,,,,,
Sol-10940,,,,,,,
Sol-10941,,,,,,,
Sol-10942,,,,,,,
Sol-10943,,,,,,,
Sol-10944,,,,,,,
Sol-10945,,,,,,,
Sol-10946,,,,,,,
Sol-10947,,,,,,,
Sol-10948,,,,,,,
Sol-10949,,,,,,,
Sol-10950,,,,,,,
Sol-10951,,,,,,,
Sol-10952,,,,,,,
Sol-10953,,,,,,,
Sol-10954,,,,,,,
Sol-10955,,,,,,,
Sol-10956,,,,,,,
Sol-10957,,,,,,,
Sol-10958,,,,,,,
Sol-10959,,,,,,,
Sol-10960,,,,,,,
Sol-10961,,,,,,,
Sol-10962,,,,,,,
Sol-10963,,,,,,,
Sol-10964,,,,,,,
Sol-10965,,,,,,,
Sol-10966,,,,,,,
Sol-10967,,,,,,,
Sol-10968,,,,,,,
Sol-10969,,,,,,,
Sol-10970,,,,,,,
Sol-10971,,,,,,,
Sol-10972,,,,,,,
Sol-10973,,,,,,,
Sol-10974,,,,,,,
Sol-10975,,,,,,,
Sol-10976,,,,,,,
Sol-10977,,,,,,,
Sol-10978,,,,,,,
Sol-10979,,,,,,,
Sol-10980,,,,,,,
Sol-10981,,,,,,,
Sol-10982,,,,,,,
Sol-10983,,,,,,,
Sol-10984,,,,,,,
Sol-10985,,,,,,,
Sol-10986,,,,,,,
Sol-10987,,,,,,,
Sol-10988,,,,,,,
Sol-10989,,,,,,,
Sol-10990,,,,,,,
Sol-10991,,,,,,,
Sol-10992,,,,,,,
Sol-10993,,,,,,,
Sol-10994,,,,,,,
Sol-10995,,,,,,,
Sol-10996,,,,,,,
Sol-10997,,,,,,,
Sol-10998,,,,,,,
Sol-10999,,,,,,,
Sol-11000,,,,,,,
Sol-11001,,,,,,,
Sol-11002,,,,,,,
Sol-11003,,,,,,,
Sol-11004,,,,,,,
Sol-11005,,,,,,,
Sol-11006,,,,,,,
Sol-11007,,,,,,,
Sol-11008,,,,,,,
Sol-11009,,,,,,,
Sol-11010,,,,,,,
Sol-11011,,,,,,,
Sol-11012,,,,,,,
Sol-11013,,,,,,,
Sol-11014,,,,,,,
Sol-11015,,,,,,,
Sol-11016,,,,,,,
Sol-11017,,,,,,,
Sol-11018,,,,,,,
Sol-11019,,,,,,,
Sol-11020,,,,,,,
Sol-11021,,,,,,,
Sol-11022,,,,,,,
Sol-11023,,,,,,,
Sol-11024,,,,,,,
Sol-11025,,,,,,,
Sol-11026,,,,,,,
Sol-11027,,,,,,,
Sol-11028,,,,,,,
Sol-11029,,,,,,,
Sol-11030,,,,,,,
Sol-11031,,,,,,,
Sol-11032,,,,,,,
Sol-11033,,,,,,,
Sol-11034,,,,,,,
Sol-11035,,,,,,,
Sol-11036,,,,,,,
Sol-11037,,,,,,,
Sol-11038,,,,,,,
Sol-11039,,,,,,,
Sol-11040,,,,,,,
Sol-11041,,,,,,,
Sol-11042,,,,,,,
Sol-11043,,,,,,,
Sol-11044,,,,,,,
Sol-11045,,,,,,,
Sol-11046,,,,,,,
Sol-11047,,,,,,,
Sol-11048,,,,,,,
Sol-11049,,,,,,,
Sol-11050,,,,,,,
Sol-11051,,,,,,,
Sol-11052,,,,,,,
Sol-11053,,,,,,,
Sol-11054,,,,,,,
Sol-11055,,,,,,,
Sol-11056,,,,,,,
Sol-11057,,,,,,,
Sol-11058,,,,,,,
Sol-11059,,,,,,,
Sol-11060,,,,,,,
Sol-11061,,,,,,,
Sol-11062,,,,,,,
Sol-11063,,,,,,,
Sol-11064,,,,,,,
Sol-11065,,,,,,,
Sol-11066,,,,,,,
Sol-11067,,,,,,,
Sol-11068,,,,,,,
Sol-11069,,,,,,,
Sol-11070,,,,,,,
Sol-11071,,,,,,,
Sol-11072,,,,,,,
Sol-11073,,,,,,,
Sol-11074,,,,,,,
Sol-11075,,,,,,,
Sol-11076,,,,,,,
Sol-11077,,,,,,,
Sol-11078,,,,,,,
Sol-11079,,,,,,,
Sol-11080,,,,,,,
Sol-11081,,,,,,,
Sol-11082,,,,,,,
Sol-11083,,,,,,,
Sol-11084,,,,,,,
Sol-11085,,,,,,,
Sol-11086,,,,,,,
Sol-11087,,,,,,,
Sol-11088,,,,,,,
Sol-11089,,,,,,,
Sol-11090,,,,,,,
Sol-11091,,,,,,,
Sol-11092,,,,,,,
Sol-11093,,,,,,,
Sol-11094,,,,,,,
Sol-11095,,,,,,,
Sol-11096,,,,,,,
Sol-11097,,,,,,,
Sol-11098,,,,,,,
Sol-11099,,,,,,,
Sol-11100,,,,,,,
Sol-11101,,,,,,,
Sol-11102,,,,,,,
Sol-11103,,,,,,,
Sol-11104,,,,,,,
Sol-11105,,,,,,,
Sol-11106,,,,,,,
Sol-11107,,,,,,,
Sol-11108,,,,,,,
Sol-11109,,,,,,,
Sol-11110,,,,,,,
Sol-11111,,,,,,,
Sol-11112,,,,,,,
Sol-11113,,,,,,,
Sol-11114,,,,,,,
Sol-11115,,,,,,,
Sol-11116,,,,,,,
Sol-11117,,,,,,,
Sol-11118,,,,,,,
Sol-11119,,,,,,,
Sol-11120,,,,,,,
Sol-11121,,,,,,,
Sol-11122,,,,,,,
Sol-11123,,,,,,,
Sol-11124,,,,,,,
Sol-11125,,,,,,,
Sol-11126,,,,,,,
Sol-11127,,,,,,,
Sol-11128,,,,,,,
Sol-11129,,,,,,,
Sol-11130,,,,,,,
Sol-11131,,,,,,,
Sol-11132,,,,,,,
Sol-11133,,,,,,,
Sol-11134,,,,,,,
Sol-11135,,,,,,,
Sol-11136,,,,,,,
Sol-11137,,,,,,,
Sol-11138,,,,,,,
Sol-11139,,,,,,,
Sol-11140,,,,,,,
Sol-11141,,,,,,,
Sol-11142,,,,,,,
Sol-11143,,,,,,,
Sol-11144,,,,,,,
Sol-11145,,,,,,,
Sol-11146,,,,,,,
Sol-11147,,,,,,,
Sol-11148,,,,,,,
Sol-11149,,,,,,,
Sol-11150,,,,,,,
Sol-11151,,,,,,,
Sol-11152,,,,,,,
Sol-11153,,,,,,,
Sol-11154,,,,,,,
Sol-11155,,,,,,,
Sol-11156,,,,,,,
Sol-11157,,,,,,,
Sol-11158,,,,,,,
Sol-11159,,,,,,,
Sol-11160,,,,,,,
Sol-11161,,,,,,,
Sol-11162,,,,,,,
Sol-11163,,,,,,,
Sol-11164,,,,,,,
Sol-11165,,,,,,,
Sol-11166,,,,,,,
Sol-11167,,,,,,,
Sol-11168,,,,,,,
Sol-11169,,,,,,,
Sol-11170,,,,,,,
Sol-11171,,,,,,,
Sol-11172,,,,,,,
Sol-11173,,,,,,,
Sol-11174,,,,,,,
Sol-11175,,,,,,,
Sol-11176,,,,,,,
Sol-11177,,,,,,,
Sol-11178,,,,,,,
Sol-11179,,,,,,,
Sol-11180,,,,,,,
Sol-11181,,,,,,,
Sol-11182,,,,,,,
Sol-11183,,,,,,,
Sol-11184,,,,,,,
Sol-11185,,,,,,,
Sol-11186,,,,,,,
Sol-11187,,,,,,,
Sol-11188,,,,,,,
Sol-11189,,,,,,,
Sol-11190,,,,,,,
Sol-11191,,,,,,,
Sol-11192,,,,,,,
Sol-11193,,,,,,,
Sol-11194,,,,,,,
Sol-11195,,,,,,,
Sol-11196,,,,,,,
Sol-11197,,,,,,,
Sol-11198,,,,,,,
Sol-11199,,,,,,,
Sol-11200,,,,,,,
Sol-11201,,,,,,,
Sol-11202,,,,,,,
Sol-11203,,,,,,,
Sol-11204,,,,,,,
Sol-11205,,,,,,,
Sol-11206,,,,,,,
Sol-11207,,,,,,,
Sol-11208,,,,,,,
Sol-11209,,,,,,,
Sol-11210,,,,,,,
Sol-11211,,,,,,,
Sol-11212,,,,,,,
Sol-11213,,,,,,,
Sol-11214,,,,,,,
Sol-11215,,,,,,,
Sol-11216,,,,,,,
Sol-11217,,,,,,,
Sol-11218,,,,,,,
Sol-11219,,,,,,,
Sol-11220,,,,,,,
Sol-11221,,,,,,,
Sol-11222,,,,,,,
Sol-11223,,,,,,,
Sol-11224,,,,,,,
Sol-11225,,,,,,,
Sol-11226,,,,,,,
Sol-11227,,,,,,,
Sol-11228,,,,,,,
Sol-11229,,,,,,,
Sol-11230,,,,,,,
Sol-11231,,,,,,,
Sol-11232,,,,,,,
Sol-11233,,,,,,,
Sol-11234,,,,,,,
Sol-11235,,,,,,,
Sol-11236,,,,,,,
Sol-11237,,,,,,,
Sol-11238,,,,,,,
Sol-11239,,,,,,,
Sol-11240,,,,,,,
Sol-11241,,,,,,,
Sol-11242,,,,,,,
Sol-11243,,,,,,,
Sol-11244,,,,,,,
Sol-11245,,,,,,,
Sol-11246,,,,,,,
Sol-11247,,,,,,,
Sol-11248,,,,,,,
Sol-11249,,,,,,,
Sol-11250,,,,,,,
Sol-11251,,,,,,,
Sol-11252,,,,,,,
Sol-11253,,,,,,,
Sol-11254,,,,,,,
Sol-11255,,,,,,,
Sol-11256,,,,,,,
Sol-11257,,,,,,,
Sol-11258,,,,,,,
Sol-11259,,,,,,,
Sol-11260,,,,,,,
Sol-11261,,,,,,,
Sol-11262,,,,,,,
Sol-11263,,,,,,,
Sol-11264,,,,,,,
Sol-11265,,,,,,,
Sol-11266,,,,,,,
Sol-11267,,,,,,,
Sol-11268,,,,,,,
Sol-11269,,,,,,,
Sol-11270,,,,,,,
Sol-11271,,,,,,,
Sol-11272,,,,,,,
Sol-11273,,,,,,,
Sol-11274,,,,,,,
Sol-11275,,,,,,,
Sol-11276,,,,,,,
Sol-11277,,,,,,,
Sol-11278,,,,,,,
Sol-11279,,,,,,,
Sol-11280,,,,,,,
Sol-11281,,,,,,,
Sol-11282,,,,,,,
Sol-11283,,,,,,,
Sol-11284,,,,,,,
Sol-11285,,,,,,,
Sol-11286,,,,,,,
Sol-11287,,,,,,,
Sol-11288,,,,,,,
Sol-11289,,,,,,,
Sol-11290,,,,,,,
Sol-11291,,,,,,,
Sol-11292,,,,,,,
Sol-11293,,,,,,,
Sol-11294,,,,,,,
Sol-11295,,,,,,,
Sol-11296,,,,,,,
Sol-11297,,,,,,,
Sol-11298,,,,,,,
Sol-11299,,,,,,,
Sol-11300,,,,,,,
Sol-11301,,,,,,,
Sol-11302,,,,,,,
Sol-11303,,,,,,,
Sol-11304,,,,,,,
Sol-11305,,,,,,,
Sol-11306,,,,,,,
Sol-11307,,,,,,,
Sol-11308,,,,,,,
Sol-11309,,,,,,,
Sol-11310,,,,,,,
Sol-11311,,,,,,,
Sol-11312,,,,,,,
Sol-11313,,,,,,,
Sol-11314,,,,,,,
Sol-11315,,,,,,,
Sol-11316,,,,,,,
Sol-11317,,,,,,,
Sol-11318,,,,,,,
Sol-11319,,,,,,,
Sol-11320,,,,,,,
Sol-11321,,,,,,,
Sol-11322,,,,,,,
Sol-11323,,,,,,,
Sol-11324,,,,,,,
Sol-11325,,,,,,,
Sol-11326,,,,,,,
Sol-11327,,,,,,,
Sol-11328,,,,,,,
Sol-11329,,,,,,,
Sol-11330,,,,,,,
Sol-11331,,,,,,,
Sol-11332,,,,,,,
Sol-11333,,,,,,,
Sol-11334,,,,,,,
Sol-11335,,,,,,,
Sol-11336,,,,,,,
Sol-11337,,,,,,,
Sol-11338,,,,,,,
Sol-11339,,,,,,,
Sol-11340,,,,,,,
Sol-11341,,,,,,,
Sol-11342,,,,,,,
Sol-11343,,,,,,,
Sol-11344,,,,,,,
Sol-11345,,,,,,,
Sol-11346,,,,,,,
Sol-11347,,,,,,,
Sol-11348,,,,,,,
Sol-11349,,,,,,,
Sol-11350,,,,,,,
Sol-11351,,,,,,,
Sol-11352,,,,,,,
Sol-11353,,,,,,,
Sol-11354,,,,,,,
Sol-11355,,,,,,,
Sol-11356,,,,,,,
Sol-11357,,,,,,,
Sol-11358,,,,,,,
Sol-11359,,,,,,,
Sol-11360,,,,,,,
Sol-11361,,,,,,,
Sol-11362,,,,,,,
Sol-11363,,,,,,,
Sol-11364,,,,,,,
Sol-11365,,,,,,,
Sol-11366,,,,,,,
Sol-11367,,,,,,,
Sol-11368,,,,,,,
Sol-11369,,,,,,,
Sol-11370,,,,,,,
Sol-11371,,,,,,,
Sol-11372,,,,,,,
Sol-11373,,,,,,,
Sol-11374,,,,,,,
Sol-11375,,,,,,,
Sol-11376,,,,,,,
Sol-11377,,,,,,,
Sol-11378,,,,,,,
Sol-11379,,,,,,,
Sol-11380,,,,,,,
Sol-11381,,,,,,,
Sol-11382,,,,,,,
Sol-11383,,,,,,,
Sol-11384,,,,,,,
Sol-11385,,,,,,,
Sol-11386,,,,,,,
Sol-11387,,,,,,,
Sol-11388,,,,,,,
Sol-11389,,,,,,,
Sol-11390,,,,,,,
Sol-11391,,,,,,,
Sol-11392,,,,,,,
Sol-11393,,,,,,,
Sol-11394,,,,,,,
Sol-11395,,,,,,,
Sol-11396,,,,,,,
Sol-11397,,,,,,,
Sol-11398,,,,,,,
Sol-11399,,,,,,,
Sol-11400,,,,,,,
Sol-11401,,,,,,,
Sol-11402,,,,,,,
Sol-11403,,,,,,,
Sol-11404,,,,,,,
Sol-11405,,,,,,,
Sol-11406,,,,,,,
Sol-11407,,,,,,,
Sol-11408,,,,,,,
Sol-11409,,,,,,,
Sol-11410,,,,,,,
Sol-11411,,,,,,,
Sol-11412,,,,,,,
Sol-11413,,,,,,,
Sol-11414,,,,,,,
Sol-11415,,,,,,,
Sol-11416,,,,,,,
Sol-11417,,,,,,,
Sol-11418,,,,,,,
Sol-11419,,,,,,,
Sol-11420,,,,,,,
Sol-11421,,,,,,,
Sol-11422,,,,,,,
Sol-11423,,,,,,,
Sol-11424,,,,,,,
Sol-11425,,,,,,,
Sol-11426,,,,,,,
Sol-11427,,,,,,,
Sol-11428,,,,,,,
Sol-11429,,,,,,,
Sol-11430,,,,,,,
Sol-11431,,,,,,,
Sol-11432,,,,,,,
Sol-11433,,,,,,,
Sol-11434,,,,,,,
Sol-11435,,,,,,,
Sol-11436,,,,,,,
Sol-11437,,,,,,,
Sol-11438,,,,,,,
Sol-11439,,,,,,,
Sol-11440,,,,,,,
Sol-11441,,,,,,,
Sol-11442,,,,,,,
Sol-11443,,,,,,,
Sol-11444,,,,,,,
Sol-11445,,,,,,,
Sol-11446,,,,,,,
Sol-11447,,,,,,,
Sol-11448,,,,,,,
Sol-11449,,,,,,,
Sol-11450,,,,,,,
Sol-11451,,,,,,,
Sol-11452,,,,,,,
Sol-11453,,,,,,,
Sol-11454,,,,,,,
Sol-11455,,,,,,,
Sol-11456,,,,,,,
Sol-11457,,,,,,,
Sol-11458,,,,,,,
Sol-11459,,,,,,,
Sol-11460,,,,,,,
Sol-11461,,,,,,,
Sol-11462,,,,,,,
Sol-11463,,,,,,,
Sol-11464,,,,,,,
Sol-11465,,,,,,,
Sol-11466,,,,,,,
Sol-11467,,,,,,,
Sol-11468,,,,,,,
Sol-11469,,,,,,,
Sol-11470,,,,,,,
Sol-11471,,,,,,,
Sol-11472,,,,,,,
Sol-11473,,,,,,,
Sol-11474,,,,,,,
Sol-11475,,,,,,,
Sol-11476,,,,,,,
Sol-11477,,,,,,,
Sol-11478,,,,,,,
Sol-11479,,,,,,,
Sol-11480,,,,,,,
Sol-11481,,,,,,,
Sol-11482,,,,,,,
Sol-11483,,,,,,,
Sol-11484,,,,,,,
Sol-11485,,,,,,,
Sol-11486,,,,,,,
Sol-11487,,,,,,,
Sol-11488,,,,,,,
Sol-11489,,,,,,,
Sol-11490,,,,,,,
Sol-11491,,,,,,,
Sol-11492,,,,,,,
Sol-11493,,,,,,,
Sol-11494,,,,,,,
Sol-11495,,,,,,,
Sol-11496,,,,,,,
Sol-11497,,,,,,,
Sol-11498,,,,,,,
Sol-11499,,,,,,,
Sol-11500,,,,,,,
Sol-11501,,,,,,,
Sol-11502,,,,,,,
Sol-11503,,,,,,,
Sol-11504,,,,,,,
Sol-11505,,,,,,,
Sol-11506,,,,,,,
Sol-11507,,,,,,,
Sol-11508,,,,,,,
Sol-11509,,,,,,,
Sol-11510,,,,,,,
Sol-11511,,,,,,,
Sol-11512,,,,,,,
Sol-11513,,,,,,,
Sol-11514,,,,,,,
Sol-11515,,,,,,,
Sol-11516,,,,,,,
Sol-11517,,,,,,,
Sol-11518,,,,,,,
Sol-11519,,,,,,,
Sol-11520,,,,,,,
Sol-11521,,,,,,,
Sol-11522,,,,,,,
Sol-11523,,,,,,,
Sol-11524,,,,,,,
Sol-11525,,,,,,,
Sol-11526,,,,,,,
Sol-11527,,,,,,,
Sol-11528,,,,,,,
Sol-11529,,,,,,,
Sol-11530,,,,,,,
Sol-11531,,,,,,,
Sol-11532,,,,,,,
Sol-11533,,,,,,,
Sol-11534,,,,,,,
Sol-11535,,,,,,,
Sol-11536,,,,,,,
Sol-11537,,,,,,,
Sol-11538,,,,,,,
Sol-11539,,,,,,,
Sol-11540,,,,,,,
Sol-11541,,,,,,,
Sol-11542,,,,,,,
Sol-11543,,,,,,,
Sol-11544,,,,,,,
Sol-11545,,,,,,,
Sol-11546,,,,,,,
Sol-11547,,,,,,,
Sol-11548,,,,,,,
Sol-11549,,,,,,,
Sol-11550,,,,,,,
Sol-11551,,,,,,,
Sol-11552,,,,,,,
Sol-11553,,,,,,,
Sol-11554,,,,,,,
Sol-11555,,,,,,,
Sol-11556,,,,,,,
Sol-11557,,,,,,,
Sol-11558,,,,,,,
Sol-11559,,,,,,,
Sol-11560,,,,,,,
Sol-11561,,,,,,,
Sol-11562,,,,,,,
Sol-11563,,,,,,,
Sol-11564,,,,,,,
Sol-11565,,,,,,,
Sol-11566,,,,,,,
Sol-11567,,,,,,,
Sol-11568,,,,,,,
Sol-11569,,,,,,,
Sol-11570,,,,,,,
Sol-11571,,,,,,,
Sol-11572,,,,,,,
Sol-11573,,,,,,,
Sol-11574,,,,,,,
Sol-11575,,,,,,,
Sol-11576,,,,,,,
Sol-11577,,,,,,,
Sol-11578,,,,,,,
Sol-11579,,,,,,,
Sol-11580,,,,,,,
Sol-11581,,,,,,,
Sol-11582,,,,,,,
Sol-11583,,,,,,,
Sol-11584,,,,,,,
Sol-11585,,,,,,,
Sol-11586,,,,,,,
Sol-11587,,,,,,,
Sol-11588,,,,,,,
Sol-11589,,,,,,,
Sol-11590,,,,,,,
Sol-11591,,,,,,,
Sol-11592,,,,,,,
Sol-11593,,,,,,,
Sol-11594,,,,,,,
Sol-11595,,,,,,,
Sol-11596,,,,,,,
Sol-11597,,,,,,,
Sol-11598,,,,,,,
Sol-11599,,,,,,,
Sol-11600,,,,,,,
Sol-11601,,,,,,,
Sol-11602,,,,,,,
Sol-11603,,,,,,,
Sol-11604,,,,,,,
Sol-11605,,,,,,,
Sol-11606,,,,,,,
Sol-11607,,,,,,,
Sol-11608,,,,,,,
Sol-11609,,,,,,,
Sol-11610,,,,,,,
Sol-11611,,,,,,,
Sol-11612,,,,,,,
Sol-11613,,,,,,,
Sol-11614,,,,,,,
Sol-11615,,,,,,,
Sol-11616,,,,,,,
Sol-11617,,,,,,,
Sol-11618,,,,,,,
Sol-11619,,,,,,,
Sol-11620,,,,,,,
Sol-11621,,,,,,,
Sol-11622,,,,,,,
Sol-11623,,,,,,,
Sol-11624,,,,,,,
Sol-11625,,,,,,,
Sol-11626,,,,,,,
Sol-11627,,,,,,,
Sol-11628,,,,,,,
Sol-11629,,,,,,,
Sol-11630,,,,,,,
Sol-11631,,,,,,,
Sol-11632,,,,,,,
Sol-11633,,,,,,,
Sol-11634,,,,,,,
Sol-11635,,,,,,,
Sol-11636,,,,,,,
Sol-11637,,,,,,,
Sol-11638,,,,,,,
Sol-11639,,,,,,,
Sol-11640,,,,,,,
Sol-11641,,,,,,,
Sol-11642,,,,,,,
Sol-11643,,,,,,,
Sol-11644,,,,,,,
Sol-11645,,,,,,,
Sol-11646,,,,,,,
Sol-11647,,,,,,,
Sol-11648,,,,,,,
Sol-11649,,,,,,,
Sol-11650,,,,,,,
Sol-11651,,,,,,,
Sol-11652,,,,,,,
Sol-11653,,,,,,,
Sol-11654,,,,,,,
Sol-11655,,,,,,,
Sol-11656,,,,,,,
Sol-11657,,,,,,,
Sol-11658,,,,,,,
Sol-11659,,,,,,,
Sol-11660,,,,,,,
Sol-11661,,,,,,,
Sol-11662,,,,,,,
Sol-11663,,,,,,,
Sol-11664,,,,,,,
Sol-11665,,,,,,,
Sol-11666,,,,,,,
Sol-11667,,,,,,,
Sol-11668,,,,,,,
Sol-11669,,,,,,,
Sol-11670,,,,,,,
Sol-11671,,,,,,,
Sol-11672,,,,,,,
Sol-11673,,,,,,,
Sol-11674,,,,,,,
Sol-11675,,,,,,,
Sol-11676,,,,,,,
Sol-11677,,,,,,,
Sol-11678,,,,,,,
Sol-11679,,,,,,,
Sol-11680,,,,,,,
Sol-11681,,,,,,,
Sol-11682,,,,,,,
Sol-11683,,,,,,,
Sol-11684,,,,,,,
Sol-11685,,,,,,,
Sol-11686,,,,,,,
Sol-11687,,,,,,,
Sol-11688,,,,,,,
Sol-11689,,,,,,,
Sol-11690,,,,,,,
Sol-11691,,,,,,,
Sol-11692,,,,,,,
Sol-11693,,,,,,,
Sol-11694,,,,,,,
Sol-11695,,,,,,,
Sol-11696,,,,,,,
Sol-11697,,,,,,,
Sol-11698,,,,,,,
Sol-11699,,,,,,,
Sol-11700,,,,,,,
Sol-11701,,,,,,,
Sol-11702,,,,,,,
Sol-11703,,,,,,,
Sol-11704,,,,,,,
Sol-11705,,,,,,,
Sol-11706,,,,,,,
Sol-11707,,,,,,,
Sol-11708,,,,,,,
Sol-11709,,,,,,,
Sol-11710,,,,,,,
Sol-11711,,,,,,,
Sol-11712,,,,,,,
Sol-11713,,,,,,,
Sol-11714,,,,,,,
Sol-11715,,,,,,,
Sol-11716,,,,,,,
Sol-11717,,,,,,,
Sol-11718,,,,,,,
Sol-11719,,,,,,,
Sol-11720,,,,,,,
Sol-11721,,,,,,,
Sol-11722,,,,,,,
Sol-11723,,,,,,,
Sol-11724,,,,,,,
Sol-11725,,,,,,,
Sol-11726,,,,,,,
Sol-11727,,,,,,,
Sol-11728,,,,,,,
Sol-11729,,,,,,,
Sol-11730,,,,,,,
Sol-11731,,,,,,,
Sol-11732,,,,,,,
Sol-11733,,,,,,,
Sol-11734,,,,,,,
Sol-11735,,,,,,,
Sol-11736,,,,,,,
Sol-11737,,,,,,,
Sol-11738,,,,,,,
Sol-11739,,,,,,,
Sol-11740,,,,,,,
Sol-11741,,,,,,,
Sol-11742,,,,,,,
Sol-11743,,,,,,,
Sol-11744,,,,,,,
Sol-11745,,,,,,,
Sol-11746,,,,,,,
Sol-11747,,,,,,,
Sol-11748,,,,,,,
Sol-11749,,,,,,,
Sol-11750,,,,,,,
Sol-11751,,,,,,,
Sol-11752,,,,,,,
Sol-11753,,,,,,,
Sol-11754,,,,,,,
Sol-11755,,,,,,,
Sol-11756,,,,,,,
Sol-11757,,,,,,,
Sol-11758,,,,,,,
Sol-11759,,,,,,,
Sol-11760,,,,,,,
Sol-11761,,,,,,,
Sol-11762,,,,,,,
Sol-11763,,,,,,,
Sol-11764,,,,,,,
Sol-11765,,,,,,,
Sol-11766,,,,,,,
Sol-11767,,,,,,,
Sol-11768,,,,,,,
Sol-11769,,,,,,,
Sol-11770,,,,,,,
Sol-11771,,,,,,,
Sol-11772,,,,,,,
Sol-11773,,,,,,,
Sol-11774,,,,,,,
Sol-11775,,,,,,,
Sol-11776,,,,,,,
Sol-11777,,,,,,,
Sol-11778,,,,,,,
Sol-11779,,,,,,,
Sol-11780,,,,,,,
Sol-11781,,,,,,,
Sol-11782,,,,,,,
Sol-11783,,,,,,,
Sol-11784,,,,,,,
Sol-11785,,,,,,,
Sol-11786,,,,,,,
Sol-11787,,,,,,,
Sol-11788,,,,,,,
Sol-11789,,,,,,,
Sol-11790,,,,,,,
Sol-11791,,,,,,,
Sol-11792,,,,,,,
Sol-11793,,,,,,,
Sol-11794,,,,,,,
Sol-11795,,,,,,,
Sol-11796,,,,,,,
Sol-11797,,,,,,,
Sol-11798,,,,,,,
Sol-11799,,,,,,,
Sol-11800,,,,,,,
Sol-11801,,,,,,,
Sol-11802,,,,,,,
Sol-11803,,,,,,,
Sol-11804,,,,,,,
Sol-11805,,,,,,,
Sol-11806,,,,,,,
Sol-11807,,,,,,,
Sol-11808,,,,,,,
Sol-11809,,,,,,,
Sol-11810,,,,,,,
Sol-11811,,,,,,,
Sol-11812,,,,,,,
Sol-11813,,,,,,,
Sol-11814,,,,,,,
Sol-11815,,,,,,,
Sol-11816,,,,,,,
Sol-11817,,,,,,,
Sol-11818,,,,,,,
Sol-11819,,,,,,,
Sol-11820,,,,,,,
Sol-11821,,,,,,,
Sol-11822,,,,,,,
Sol-11823,,,,,,,
Sol-11824,,,,,,,
Sol-11825,,,,,,,
Sol-11826,,,,,,,
Sol-11827,,,,,,,
Sol-11828,,,,,,,
Sol-11829,,,,,,,
Sol-11830,,,,,,,
Sol-11831,,,,,,,
Sol-11832,,,,,,,
Sol-11833,,,,,,,
Sol-11834,,,,,,,
Sol-11835,,,,,,,
Sol-11836,,,,,,,
Sol-11837,,,,,,,
Sol-11838,,,,,,,
Sol-11839,,,,,,,
Sol-11840,,,,,,,
Sol-11841,,,,,,,
Sol-11842,,,,,,,
Sol-11843,,,,,,,
Sol-11844,,,,,,,
Sol-11845,,,,,,,
Sol-11846,,,,,,,
Sol-11847,,,,,,,
Sol-11848,,,,,,,
Sol-11849,,,,,,,
Sol-11850,,,,,,,
Sol-11851,,,,,,,
Sol-11852,,,,,,,
Sol-11853,,,,,,,
Sol-11854,,,,,,,
Sol-11855,,,,,,,
Sol-11856,,,,,,,
Sol-11857,,,,,,,
Sol-11858,,,,,,,
Sol-11859,,,,,,,
Sol-11860,,,,,,,
Sol-11861,,,,,,,
Sol-11862,,,,,,,
Sol-11863,,,,,,,
Sol-11864,,,,,,,
Sol-11865,,,,,,,
Sol-11866,,,,,,,
Sol-11867,,,,,,,
Sol-11868,,,,,,,
Sol-11869,,,,,,,
Sol-11870,,,,,,,
Sol-11871,,,,,,,
Sol-11872,,,,,,,
Sol-11873,,,,,,,
Sol-11874,,,,,,,
Sol-11875,,,,,,,
Sol-11876,,,,,,,
Sol-11877,,,,,,,
Sol-11878,,,,,,,
Sol-11879,,,,,,,
Sol-11880,,,,,,,
Sol-11881,,,,,,,
Sol-11882,,,,,,,
Sol-11883,,,,,,,
Sol-11884,,,,,,,
Sol-11885,,,,,,,
Sol-11886,,,,,,,
Sol-11887,,,,,,,
Sol-11888,,,,,,,
Sol-11889,,,,,,,
Sol-11890,,,,,,,
Sol-11891,,,,,,,
Sol-11892,,,,,,,
Sol-11893,,,,,,,
Sol-11894,,,,,,,
Sol-11895,,,,,,,
Sol-11896,,,,,,,
Sol-11897,,,,,,,
Sol-11898,,,,,,,
Sol-11899,,,,,,,
Sol-11900,,,,,,,
Sol-11901,,,,,,,
Sol-11902,,,,,,,
Sol-11903,,,,,,,
Sol-11904,,,,,,,
Sol-11905,,,,,,,
Sol-11906,,,,,,,
Sol-11907,,,,,,,
Sol-11908,,,,,,,
Sol-11909,,,,,,,
Sol-11910,,,,,,,
Sol-11911,,,,,,,
Sol-11912,,,,,,,
Sol-11913,,,,,,,
Sol-11914,,,,,,,
Sol-11915,,,,,,,
Sol-11916,,,,,,,
Sol-11917,,,,,,,
Sol-11918,,,,,,,
Sol-11919,,,,,,,
Sol-11920,,,,,,,
Sol-11921,,,,,,,
Sol-11922,,,,,,,
Sol-11923,,,,,,,
Sol-11924,,,,,,,
Sol-11925,,,,,,,
Sol-11926,,,,,,,
Sol-11927,,,,,,,
Sol-11928,,,,,,,
Sol-11929,,,,,,,
Sol-11930,,,,,,,
Sol-11931,,,,,,,
Sol-11932,,,,,,,
Sol-11933,,,,,,,
Sol-11934,,,,,,,
Sol-11935,,,,,,,
Sol-11936,,,,,,,
Sol-11937,,,,,,,
Sol-11938,,,,,,,
Sol-11939,,,,,,,
Sol-11940,,,,,,,
Sol-11941,,,,,,,
Sol-11942,,,,,,,
Sol-11943,,,,,,,
Sol-11944,,,,,,,
Sol-11945,,,,,,,
Sol-11946,,,,,,,
Sol-11947,,,,,,,
Sol-11948,,,,,,,
Sol-11949,,,,,,,
Sol-11950,,,,,,,
Sol-11951,,,,,,,
Sol-11952,,,,,,,
Sol-11953,,,,,,,
Sol-11954,,,,,,,
Sol-11955,,,,,,,
Sol-11956,,,,,,,
Sol-11957,,,,,,,
Sol-11958,,,,,,,
Sol-11959,,,,,,,
Sol-11960,,,,,,,
Sol-11961,,,,,,,
Sol-11962,,,,,,,
Sol-11963,,,,,,,
Sol-11964,,,,,,,
Sol-11965,,,,,,,
Sol-11966,,,,,,,
Sol-11967,,,,,,,
Sol-11968,,,,,,,
Sol-11969,,,,,,,
Sol-11970,,,,,,,
Sol-11971,,,,,,,
Sol-11972,,,,,,,
Sol-11973,,,,,,,
Sol-11974,,,,,,,
Sol-11975,,,,,,,
Sol-11976,,,,,,,
Sol-11977,,,,,,,
Sol-11978,,,,,,,
Sol-11979,,,,,,,
Sol-11980,,,,,,,
Sol-11981,,,,,,,
Sol-11982,,,,,,,
Sol-11983,,,,,,,
Sol-11984,,,,,,,
Sol-11985,,,,,,,
Sol-11986,,,,,,,
Sol-11987,,,,,,,
Sol-11988,,,,,,,
Sol-11989,,,,,,,
Sol-11990,,,,,,,
Sol-11991,,,,,,,
Sol-11992,,,,,,,
Sol-11993,,,,,,,
Sol-11994,,,,,,,
Sol-11995,,,,,,,
Sol-11996,,,,,,,
Sol-11997,,,,,,,
Sol-11998,,,,,,,
Sol-11999,,,,,,,
Sol-12000,,,,,,,
Sol-12001,,,,,,,
Sol-12002,,,,,,,
Sol-12003,,,,,,,
Sol-12004,,,,,,,
Sol-12005,,,,,,,
Sol-12006,,,,,,,
Sol-12007,,,,,,,
Sol-12008,,,,,,,
Sol-12009,,,,,,,
Sol-12010,,,,,,,
Sol-12011,,,,,,,
Sol-12012,,,,,,,
Sol-12013,,,,,,,
Sol-12014,,,,,,,
Sol-12015,,,,,,,
Sol-12016,,,,,,,
Sol-12017,,,,,,,
Sol-12018,,,,,,,
Sol-12019,,,,,,,
Sol-12020,,,,,,,
Sol-12021,,,,,,,
Sol-12022,,,,,,,
Sol-12023,,,,,,,
Sol-12024,,,,,,,
Sol-12025,,,,,,,
Sol-12026,,,,,,,
Sol-12027,,,,,,,
Sol-12028,,,,,,,
Sol-12029,,,,,,,
Sol-12030,,,,,,,
Sol-12031,,,,,,,
Sol-12032,,,,,,,
Sol-12033,,,,,,,
Sol-12034,,,,,,,
Sol-12035,,,,,,,
Sol-12036,,,,,,,
Sol-12037,,,,,,,
Sol-12038,,,,,,,
Sol-12039,,,,,,,
Sol-12040,,,,,,,
Sol-12041,,,,,,,
Sol-12042,,,,,,,
Sol-12043,,,,,,,
Sol-12044,,,,,,,
Sol-12045,,,,,,,
Sol-12046,,,,,,,
Sol-12047,,,,,,,
Sol-12048,,,,,,,
Sol-12049,,,,,,,
Sol-12050,,,,,,,
Sol-12051,,,,,,,
Sol-12052,,,,,,,
Sol-12053,,,,,,,
Sol-12054,,,,,,,
Sol-12055,,,,,,,
Sol-12056,,,,,,,
Sol-12057,,,,,,,
Sol-12058,,,,,,,
Sol-12059,,,,,,,
Sol-12060,,,,,,,
Sol-12061,,,,,,,
Sol-12062,,,,,,,
Sol-12063,,,,,,,
Sol-12064,,,,,,,
Sol-12065,,,,,,,
Sol-12066,,,,,,,
Sol-12067,,,,,,,
Sol-12068,,,,,,,
Sol-12069,,,,,,,
Sol-12070,,,,,,,
Sol-12071,,,,,,,
Sol-12072,,,,,,,
Sol-12073,,,,,,,
Sol-12074,,,,,,,
Sol-12075,,,,,,,
Sol-12076,,,,,,,
Sol-12077,,,,,,,
Sol-12078,,,,,,,
Sol-12079,,,,,,,
Sol-12080,,,,,,,
Sol-12081,,,,,,,
Sol-12082,,,,,,,
Sol-12083,,,,,,,
Sol-12084,,,,,,,
Sol-12085,,,,,,,
Sol-12086,,,,,,,
Sol-12087,,,,,,,
Sol-12088,,,,,,,
Sol-12089,,,,,,,
Sol-12090,,,,,,,
Sol-12091,,,,,,,
Sol-12092,,,,,,,
Sol-12093,,,,,,,
Sol-12094,,,,,,,
Sol-12095,,,,,,,
Sol-12096,,,,,,,
Sol-12097,,,,,,,
Sol-12098,,,,,,,
Sol-12099,,,,,,,
Sol-12100,,,,,,,
Sol-12101,,,,,,,
Sol-12102,,,,,,,
Sol-12103,,,,,,,
Sol-12104,,,,,,,
Sol-12105,,,,,,,
Sol-12106,,,,,,,
Sol-12107,,,,,,,
Sol-12108,,,,,,,
Sol-12109,,,,,,,
Sol-12110,,,,,,,
Sol-12111,,,,,,,
Sol-12112,,,,,,,
Sol-12113,,,,,,,
Sol-12114,,,,,,,
Sol-12115,,,,,,,
Sol-12116,,,,,,,
Sol-12117,,,,,,,
Sol-12118,,,,,,,
Sol-12119,,,,,,,
Sol-12120,,,,,,,
Sol-12121,,,,,,,
Sol-12122,,,,,,,
Sol-12123,,,,,,,
Sol-12124,,,,,,,
Sol-12125,,,,,,,
Sol-12126,,,,,,,
Sol-12127,,,,,,,
Sol-12128,,,,,,,
Sol-12129,,,,,,,
Sol-12130,,,,,,,
Sol-12131,,,,,,,
Sol-12132,,,,,,,
Sol-12133,,,,,,,
Sol-12134,,,,,,,
Sol-12135,,,,,,,
Sol-12136,,,,,,,
Sol-12137,,,,,,,
Sol-12138,,,,,,,
Sol-12139,,,,,,,
Sol-12140,,,,,,,
Sol-12141,,,,,,,
Sol-12142,,,,,,,
Sol-12143,,,,,,,
Sol-12144,,,,,,,
Sol-12145,,,,,,,
Sol-12146,,,,,,,
Sol-12147,,,,,,,
Sol-12148,,,,,,,
Sol-12149,,,,,,,
Sol-12150,,,,,,,
Sol-12151,,,,,,,
Sol-12152,,,,,,,
Sol-12153,,,,,,,
Sol-12154,,,,,,,
Sol-12155,,,,,,,
Sol-12156,,,,,,,
Sol-12157,,,,,,,
Sol-12158,,,,,,,
Sol-12159,,,,,,,
Sol-12160,,,,,,,
Sol-12161,,,,,,,
Sol-12162,,,,,,,
Sol-12163,,,,,,,
Sol-12164,,,,,,,
Sol-12165,,,,,,,
Sol-12166,,,,,,,
Sol-12167,,,,,,,
Sol-12168,,,,,,,
Sol-12169,,,,,,,
Sol-12170,,,,,,,
Sol-12171,,,,,,,
Sol-12172,,,,,,,
Sol-12173,,,,,,,
Sol-12174,,,,,,,
Sol-12175,,,,,,,
Sol-12176,,,,,,,
Sol-12177,,,,,,,
Sol-12178,,,,,,,
Sol-12179,,,,,,,
Sol-12180,,,,,,,
Sol-12181,,,,,,,
Sol-12182,,,,,,,
Sol-12183,,,,,,,
Sol-12184,,,,,,,
Sol-12185,,,,,,,
Sol-12186,,,,,,,
Sol-12187,,,,,,,
Sol-12188,,,,,,,
Sol-12189,,,,,,,
Sol-12190,,,,,,,
Sol-12191,,,,,,,
Sol-12192,,,,,,,
Sol-12193,,,,,,,
Sol-12194,,,,,,,
Sol-12195,,,,,,,
Sol-12196,,,,,,,
Sol-12197,,,,,,,
Sol-12198,,,,,,,
Sol-12199,,,,,,,
Sol-12200,,,,,,,
Sol-12201,,,,,,,
Sol-12202,,,,,,,
Sol-12203,,,,,,,
Sol-12204,,,,,,,
Sol-12205,,,,,,,
Sol-12206,,,,,,,
Sol-12207,,,,,,,
Sol-12208,,,,,,,
Sol-12209,,,,,,,
Sol-12210,,,,,,,
Sol-12211,,,,,,,
Sol-12212,,,,,,,
Sol-12213,,,,,,,
Sol-12214,,,,,,,
Sol-12215,,,,,,,
Sol-12216,,,,,,,
Sol-12217,,,,,,,
Sol-12218,,,,,,,
Sol-12219,,,,,,,
Sol-12220,,,,,,,
Sol-12221,,,,,,,
Sol-12222,,,,,,,
Sol-12223,,,,,,,
Sol-12224,,,,,,,
Sol-12225,,,,,,,
Sol-12226,,,,,,,
Sol-12227,,,,,,,
Sol-12228,,,,,,,
Sol-12229,,,,,,,
Sol-12230,,,,,,,
Sol-12231,,,,,,,
Sol-12232,,,,,,,
Sol-12233,,,,,,,
Sol-12234,,,,,,,
Sol-12235,,,,,,,
Sol-12236,,,,,,,
Sol-12237,,,,,,,
Sol-12238,,,,,,,
Sol-12239,,,,,,,
Sol-12240,,,,,,,
Sol-12241,,,,,,,
Sol-12242,,,,,,,
Sol-12243,,,,,,,
Sol-12244,,,,,,,
Sol-12245,,,,,,,
Sol-12246,,,,,,,
Sol-12247,,,,,,,
Sol-12248,,,,,,,
Sol-12249,,,,,,,
Sol-12250,,,,,,,
Sol-12251,,,,,,,
Sol-12252,,,,,,,
Sol-12253,,,,,,,
Sol-12254,,,,,,,
Sol-12255,,,,,,,
Sol-12256,,,,,,,
Sol-12257,,,,,,,
Sol-12258,,,,,,,
Sol-12259,,,,,,,
Sol-12260,,,,,,,
Sol-12261,,,,,,,
Sol-12262,,,,,,,
Sol-12263,,,,,,,
Sol-12264,,,,,,,
Sol-12265,,,,,,,
Sol-12266,,,,,,,
Sol-12267,,,,,,,
Sol-12268,,,,,,,
Sol-12269,,,,,,,
Sol-12270,,,,,,,
Sol-12271,,,,,,,
Sol-12272,,,,,,,
Sol-12273,,,,,,,
Sol-12274,,,,,,,
Sol-12275,,,,,,,
Sol-12276,,,,,,,
Sol-12277,,,,,,,
Sol-12278,,,,,,,
Sol-12279,,,,,,,
Sol-12280,,,,,,,
Sol-12281,,,,,,,
Sol-12282,,,,,,,
Sol-12283,,,,,,,
Sol-12284,,,,,,,
Sol-12285,,,,,,,
Sol-12286,,,,,,,
Sol-12287,,,,,,,
Sol-12288,,,,,,,
Sol-12289,,,,,,,
Sol-12290,,,,,,,
Sol-12291,,,,,,,
Sol-12292,,,,,,,
Sol-12293,,,,,,,
Sol-12294,,,,,,,
Sol-12295,,,,,,,
Sol-12296,,,,,,,
Sol-12297,,,,,,,
Sol-12298,,,,,,,
Sol-12299,,,,,,,
Sol-12300,,,,,,,
Sol-12301,,,,,,,
Sol-12302,,,,,,,
Sol-12303,,,,,,,
Sol-12304,,,,,,,
Sol-12305,,,,,,,
Sol-12306,,,,,,,
Sol-12307,,,,,,,
Sol-12308,,,,,,,
Sol-12309,,,,,,,
Sol-12310,,,,,,,
Sol-12311,,,,,,,
Sol-12312,,,,,,,
Sol-12313,,,,,,,
Sol-12314,,,,,,,
Sol-12315,,,,,,,
Sol-12316,,,,,,,
Sol-12317,,,,,,,
Sol-12318,,,,,,,
Sol-12319,,,,,,,
Sol-12320,,,,,,,
Sol-12321,,,,,,,
Sol-12322,,,,,,,
Sol-12323,,,,,,,
Sol-12324,,,,,,,
Sol-12325,,,,,,,
Sol-12326,,,,,,,
Sol-12327,,,,,,,
Sol-12328,,,,,,,
Sol-12329,,,,,,,
Sol-12330,,,,,,,
Sol-12331,,,,,,,
Sol-12332,,,,,,,
Sol-12333,,,,,,,
Sol-12334,,,,,,,
Sol-12335,,,,,,,
Sol-12336,,,,,,,
Sol-12337,,,,,,,
Sol-12338,,,,,,,
Sol-12339,,,,,,,
Sol-12340,,,,,,,
Sol-12341,,,,,,,
Sol-12342,,,,,,,
Sol-12343,,,,,,,
Sol-12344,,,,,,,
Sol-12345,,,,,,,
Sol-12346,,,,,,,
Sol-12347,,,,,,,
Sol-12348,,,,,,,
Sol-12349,,,,,,,
Sol-12350,,,,,,,
Sol-12351,,,,,,,
Sol-12352,,,,,,,
Sol-12353,,,,,,,
Sol-12354,,,,,,,
Sol-12355,,,,,,,
Sol-12356,,,,,,,
Sol-12357,,,,,,,
Sol-12358,,,,,,,
Sol-12359,,,,,,,
Sol-12360,,,,,,,
Sol-12361,,,,,,,
Sol-12362,,,,,,,
Sol-12363,,,,,,,
Sol-12364,,,,,,,
Sol-12365,,,,,,,
Sol-12366,,,,,,,
Sol-12367,,,,,,,
Sol-12368,,,,,,,
Sol-12369,,,,,,,
Sol-12370,,,,,,,
Sol-12371,,,,,,,
Sol-12372,,,,,,,
Sol-12373,,,,,,,
Sol-12374,,,,,,,
Sol-12375,,,,,,,
Sol-12376,,,,,,,
Sol-12377,,,,,,,
Sol-12378,,,,,,,
Sol-12379,,,,,,,
Sol-12380,,,,,,,
Sol-12381,,,,,,,
Sol-12382,,,,,,,
Sol-12383,,,,,,,
Sol-12384,,,,,,,
Sol-12385,,,,,,,
Sol-12386,,,,,,,
Sol-12387,,,,,,,
Sol-12388,,,,,,,
Sol-12389,,,,,,,
Sol-12390,,,,,,,
Sol-12391,,,,,,,
Sol-12392,,,,,,,
Sol-12393,,,,,,,
Sol-12394,,,,,,,
Sol-12395,,,,,,,
Sol-12396,,,,,,,
Sol-12397,,,,,,,
Sol-12398,,,,,,,
Sol-12399,,,,,,,
Sol-12400,,,,,,,
Sol-12401,,,,,,,
Sol-12402,,,,,,,
Sol-12403,,,,,,,
Sol-12404,,,,,,,
Sol-12405,,,,,,,
Sol-12406,,,,,,,
Sol-12407,,,,,,,
Sol-12408,,,,,,,
Sol-12409,,,,,,,
Sol-12410,,,,,,,
Sol-12411,,,,,,,
Sol-12412,,,,,,,
Sol-12413,,,,,,,
Sol-12414,,,,,,,
Sol-12415,,,,,,,
Sol-12416,,,,,,,
Sol-12417,,,,,,,
Sol-12418,,,,,,,
Sol-12419,,,,,,,
Sol-12420,,,,,,,
Sol-12421,,,,,,,
Sol-12422,,,,,,,
Sol-12423,,,,,,,
Sol-12424,,,,,,,
Sol-12425,,,,,,,
Sol-12426,,,,,,,
Sol-12427,,,,,,,
Sol-12428,,,,,,,
Sol-12429,,,,,,,
Sol-12430,,,,,,,
Sol-12431,,,,,,,
Sol-12432,,,,,,,
Sol-12433,,,,,,,
Sol-12434,,,,,,,
Sol-12435,,,,,,,
Sol-12436,,,,,,,
Sol-12437,,,,,,,
Sol-12438,,,,,,,
Sol-12439,,,,,,,
Sol-12440,,,,,,,
Sol-12441,,,,,,,
Sol-12442,,,,,,,
Sol-12443,,,,,,,
Sol-12444,,,,,,,
Sol-12445,,,,,,,
Sol-12446,,,,,,,
Sol-12447,,,,,,,
Sol-12448,,,,,,,
Sol-12449,,,,,,,
Sol-12450,,,,,,,
Sol-12451,,,,,,,
Sol-12452,,,,,,,
Sol-12453,,,,,,,
Sol-12454,,,,,,,
Sol-12455,,,,,,,
Sol-12456,,,,,,,
Sol-12457,,,,,,,
Sol-12458,,,,,,,
Sol-12459,,,,,,,
Sol-12460,,,,,,,
Sol-12461,,,,,,,
Sol-12462,,,,,,,
Sol-12463,,,,,,,
Sol-12464,,,,,,,
Sol-12465,,,,,,,
Sol-12466,,,,,,,
Sol-12467,,,,,,,
Sol-12468,,,,,,,
Sol-12469,,,,,,,
Sol-12470,,,,,,,
Sol-12471,,,,,,,
Sol-12472,,,,,,,
Sol-12473,,,,,,,
Sol-12474,,,,,,,
Sol-12475,,,,,,,
Sol-12476,,,,,,,
Sol-12477,,,,,,,
Sol-12478,,,,,,,
Sol-12479,,,,,,,
Sol-12480,,,,,,,
Sol-12481,,,,,,,
Sol-12482,,,,,,,
Sol-12483,,,,,,,
Sol-12484,,,,,,,
Sol-12485,,,,,,,
Sol-12486,,,,,,,
Sol-12487,,,,,,,
Sol-12488,,,,,,,
Sol-12489,,,,,,,
Sol-12490,,,,,,,
Sol-12491,,,,,,,
Sol-12492,,,,,,,
Sol-12493,,,,,,,
Sol-12494,,,,,,,
Sol-12495,,,,,,,
Sol-12496,,,,,,,
Sol-12497,,,,,,,
Sol-12498,,,,,,,
Sol-12499,,,,,,,
Sol-12500,,,,,,,
Sol-12501,,,,,,,
Sol-12502,,,,,,,
Sol-12503,,,,,,,
Sol-12504,,,,,,,
Sol-12505,,,,,,,
Sol-12506,,,,,,,
Sol-12507,,,,,,,
Sol-12508,,,,,,,
Sol-12509,,,,,,,
Sol-12510,,,,,,,
Sol-12511,,,,,,,
Sol-12512,,,,,,,
Sol-12513,,,,,,,
Sol-12514,,,,,,,
Sol-12515,,,,,,,
Sol-12516,,,,,,,
Sol-12517,,,,,,,
Sol-12518,,,,,,,
Sol-12519,,,,,,,
Sol-12520,,,,,,,
Sol-12521,,,,,,,
Sol-12522,,,,,,,
Sol-12523,,,,,,,
Sol-12524,,,,,,,
Sol-12525,,,,,,,
Sol-12526,,,,,,,
Sol-12527,,,,,,,
Sol-12528,,,,,,,
Sol-12529,,,,,,,
Sol-12530,,,,,,,
Sol-12531,,,,,,,
Sol-12532,,,,,,,
Sol-12533,,,,,,,
Sol-12534,,,,,,,
Sol-12535,,,,,,,
Sol-12536,,,,,,,
Sol-12537,,,,,,,
Sol-12538,,,,,,,
Sol-12539,,,,,,,
Sol-12540,,,,,,,
Sol-12541,,,,,,,
Sol-12542,,,,,,,
Sol-12543,,,,,,,
Sol-12544,,,,,,,
Sol-12545,,,,,,,
Sol-12546,,,,,,,
Sol-12547,,,,,,,
Sol-12548,,,,,,,
Sol-12549,,,,,,,
Sol-12550,,,,,,,
Sol-12551,,,,,,,
Sol-12552,,,,,,,
Sol-12553,,,,,,,
Sol-12554,,,,,,,
Sol-12555,,,,,,,
Sol-12556,,,,,,,
Sol-12557,,,,,,,
Sol-12558,,,,,,,
Sol-12559,,,,,,,
Sol-12560,,,,,,,
Sol-12561,,,,,,,
Sol-12562,,,,,,,
Sol-12563,,,,,,,
Sol-12564,,,,,,,
Sol-12565,,,,,,,
Sol-12566,,,,,,,
Sol-12567,,,,,,,
Sol-12568,,,,,,,
Sol-12569,,,,,,,
Sol-12570,,,,,,,
Sol-12571,,,,,,,
Sol-12572,,,,,,,
Sol-12573,,,,,,,
Sol-12574,,,,,,,
Sol-12575,,,,,,,
Sol-12576,,,,,,,
Sol-12577,,,,,,,
Sol-12578,,,,,,,
Sol-12579,,,,,,,
Sol-12580,,,,,,,
Sol-12581,,,,,,,
Sol-12582,,,,,,,
Sol-12583,,,,,,,
Sol-12584,,,,,,,
Sol-12585,,,,,,,
Sol-12586,,,,,,,
Sol-12587,,,,,,,
Sol-12588,,,,,,,
Sol-12589,,,,,,,
Sol-12590,,,,,,,
Sol-12591,,,,,,,
Sol-12592,,,,,,,
Sol-12593,,,,,,,
Sol-12594,,,,,,,
Sol-12595,,,,,,,
Sol-12596,,,,,,,
Sol-12597,,,,,,,
Sol-12598,,,,,,,
Sol-12599,,,,,,,
Sol-12600,,,,,,,
Sol-12601,,,,,,,
Sol-12602,,,,,,,
Sol-12603,,,,,,,
Sol-12604,,,,,,,
Sol-12605,,,,,,,
Sol-12606,,,,,,,
Sol-12607,,,,,,,
Sol-12608,,,,,,,
Sol-12609,,,,,,,
Sol-12610,,,,,,,
Sol-12611,,,,,,,
Sol-12612,,,,,,,
Sol-12613,,,,,,,
Sol-12614,,,,,,,
Sol-12615,,,,,,,
Sol-12616,,,,,,,
Sol-12617,,,,,,,
Sol-12618,,,,,,,
Sol-12619,,,,,,,
Sol-12620,,,,,,,
Sol-12621,,,,,,,
Sol-12622,,,,,,,
Sol-12623,,,,,,,
Sol-12624,,,,,,,
Sol-12625,,,,,,,
Sol-12626,,,,,,,
Sol-12627,,,,,,,
Sol-12628,,,,,,,
Sol-12629,,,,,,,
Sol-12630,,,,,,,
Sol-12631,,,,,,,
Sol-12632,,,,,,,
Sol-12633,,,,,,,
Sol-12634,,,,,,,
Sol-12635,,,,,,,
Sol-12636,,,,,,,
Sol-12637,,,,,,,
Sol-12638,,,,,,,
Sol-12639,,,,,,,
Sol-12640,,,,,,,
Sol-12641,,,,,,,
Sol-12642,,,,,,,
Sol-12643,,,,,,,
Sol-12644,,,,,,,
Sol-12645,,,,,,,
Sol-12646,,,,,,,
Sol-12647,,,,,,,
Sol-12648,,,,,,,
Sol-12649,,,,,,,
Sol-12650,,,,,,,
Sol-12651,,,,,,,
Sol-12652,,,,,,,
Sol-12653,,,,,,,
Sol-12654,,,,,,,
Sol-12655,,,,,,,
Sol-12656,,,,,,,
Sol-12657,,,,,,,
Sol-12658,,,,,,,
Sol-12659,,,,,,,
Sol-12660,,,,,,,
Sol-12661,,,,,,,
Sol-12662,,,,,,,
Sol-12663,,,,,,,
Sol-12664,,,,,,,
Sol-12665,,,,,,,
Sol-12666,,,,,,,
Sol-12667,,,,,,,
Sol-12668,,,,,,,
Sol-12669,,,,,,,
Sol-12670,,,,,,,
Sol-12671,,,,,,,
Sol-12672,,,,,,,
Sol-12673,,,,,,,
Sol-12674,,,,,,,
Sol-12675,,,,,,,
Sol-12676,,,,,,,
Sol-12677,,,,,,,
Sol-12678,,,,,,,
Sol-12679,,,,,,,
Sol-12680,,,,,,,
Sol-12681,,,,,,,
Sol-12682,,,,,,,
Sol-12683,,,,,,,
Sol-12684,,,,,,,
Sol-12685,,,,,,,
Sol-12686,,,,,,,
Sol-12687,,,,,,,
Sol-12688,,,,,,,
Sol-12689,,,,,,,
Sol-12690,,,,,,,
Sol-12691,,,,,,,
Sol-12692,,,,,,,
Sol-12693,,,,,,,
Sol-12694,,,,,,,
Sol-12695,,,,,,,
Sol-12696,,,,,,,
Sol-12697,,,,,,,
Sol-12698,,,,,,,
Sol-12699,,,,,,,
Sol-12700,,,,,,,
Sol-12701,,,,,,,
Sol-12702,,,,,,,
Sol-12703,,,,,,,
Sol-12704,,,,,,,
Sol-12705,,,,,,,
Sol-12706,,,,,,,
Sol-12707,,,,,,,
Sol-12708,,,,,,,
Sol-12709,,,,,,,
Sol-12710,,,,,,,
Sol-12711,,,,,,,
Sol-12712,,,,,,,
Sol-12713,,,,,,,
Sol-12714,,,,,,,
Sol-12715,,,,,,,
Sol-12716,,,,,,,
Sol-12717,,,,,,,
Sol-12718,,,,,,,
Sol-12719,,,,,,,
Sol-12720,,,,,,,
Sol-12721,,,,,,,
Sol-12722,,,,,,,
Sol-12723,,,,,,,
Sol-12724,,,,,,,
Sol-12725,,,,,,,
Sol-12726,,,,,,,
Sol-12727,,,,,,,
Sol-12728,,,,,,,
Sol-12729,,,,,,,
Sol-12730,,,,,,,
Sol-12731,,,,,,,
Sol-12732,,,,,,,
Sol-12733,,,,,,,
Sol-12734,,,,,,,
Sol-12735,,,,,,,
Sol-12736,,,,,,,
Sol-12737,,,,,,,
Sol-12738,,,,,,,
Sol-12739,,,,,,,
Sol-12740,,,,,,,
Sol-12741,,,,,,,
Sol-12742,,,,,,,
Sol-12743,,,,,,,
Sol-12744,,,,,,,
Sol-12745,,,,,,,
Sol-12746,,,,,,,
Sol-12747,,,,,,,
Sol-12748,,,,,,,
Sol-12749,,,,,,,
Sol-12750,,,,,,,
Sol-12751,,,,,,,
Sol-12752,,,,,,,
Sol-12753,,,,,,,
Sol-12754,,,,,,,
Sol-12755,,,,,,,
Sol-12756,,,,,,,
Sol-12757,,,,,,,
Sol-12758,,,,,,,
Sol-12759,,,,,,,
Sol-12760,,,,,,,
Sol-12761,,,,,,,
Sol-12762,,,,,,,
Sol-12763,,,,,,,
Sol-12764,,,,,,,
Sol-12765,,,,,,,
Sol-12766,,,,,,,
Sol-12767,,,,,,,
Sol-12768,,,,,,,
Sol-12769,,,,,,,
Sol-12770,,,,,,,
Sol-12771,,,,,,,
Sol-12772,,,,,,,
Sol-12773,,,,,,,
Sol-12774,,,,,,,
Sol-12775,,,,,,,
Sol-12776,,,,,,,
Sol-12777,,,,,,,
Sol-12778,,,,,,,
Sol-12779,,,,,,,
Sol-12780,,,,,,,
Sol-12781,,,,,,,
Sol-12782,,,,,,,
Sol-12783,,,,,,,
Sol-12784,,,,,,,
Sol-12785,,,,,,,
Sol-12786,,,,,,,
Sol-12787,,,,,,,
Sol-12788,,,,,,,
Sol-12789,,,,,,,
Sol-12790,,,,,,,
Sol-12791,,,,,,,
Sol-12792,,,,,,,
Sol-12793,,,,,,,
Sol-12794,,,,,,,
Sol-12795,,,,,,,
Sol-12796,,,,,,,
Sol-12797,,,,,,,
Sol-12798,,,,,,,
Sol-12799,,,,,,,
Sol-12800,,,,,,,
Sol-12801,,,,,,,
Sol-12802,,,,,,,
Sol-12803,,,,,,,
Sol-12804,,,,,,,
Sol-12805,,,,,,,
Sol-12806,,,,,,,
Sol-12807,,,,,,,
Sol-12808,,,,,,,
Sol-12809,,,,,,,
Sol-12810,,,,,,,
Sol-12811,,,,,,,
Sol-12812,,,,,,,
Sol-12813,,,,,,,
Sol-12814,,,,,,,
Sol-12815,,,,,,,
Sol-12816,,,,,,,
Sol-12817,,,,,,,
Sol-12818,,,,,,,
Sol-12819,,,,,,,
Sol-12820,,,,,,,
Sol-12821,,,,,,,
Sol-12822,,,,,,,
Sol-12823,,,,,,,
Sol-12824,,,,,,,
Sol-12825,,,,,,,
Sol-12826,,,,,,,
Sol-12827,,,,,,,
Sol-12828,,,,,,,
Sol-12829,,,,,,,
Sol-12830,,,,,,,
Sol-12831,,,,,,,
Sol-12832,,,,,,,
Sol-12833,,,,,,,
Sol-12834,,,,,,,
Sol-12835,,,,,,,
Sol-12836,,,,,,,
Sol-12837,,,,,,,
Sol-12838,,,,,,,
Sol-12839,,,,,,,
Sol-12840,,,,,,,
Sol-12841,,,,,,,
Sol-12842,,,,,,,
Sol-12843,,,,,,,
Sol-12844,,,,,,,
Sol-12845,,,,,,,
Sol-12846,,,,,,,
Sol-12847,,,,,,,
Sol-12848,,,,,,,
Sol-12849,,,,,,,
Sol-12850,,,,,,,
Sol-12851,,,,,,,
Sol-12852,,,,,,,
Sol-12853,,,,,,,
Sol-12854,,,,,,,
Sol-12855,,,,,,,
Sol-12856,,,,,,,
Sol-12857,,,,,,,
Sol-12858,,,,,,,
Sol-12859,,,,,,,
Sol-12860,,,,,,,
Sol-12861,,,,,,,
Sol-12862,,,,,,,
Sol-12863,,,,,,,
Sol-12864,,,,,,,
Sol-12865,,,,,,,
Sol-12866,,,,,,,
Sol-12867,,,,,,,
Sol-12868,,,,,,,
Sol-12869,,,,,,,
Sol-12870,,,,,,,
Sol-12871,,,,,,,
Sol-12872,,,,,,,
Sol-12873,,,,,,,
Sol-12874,,,,,,,
Sol-12875,,,,,,,
Sol-12876,,,,,,,
Sol-12877,,,,,,,
Sol-12878,,,,,,,
Sol-12879,,,,,,,
Sol-12880,,,,,,,
Sol-12881,,,,,,,
Sol-12882,,,,,,,
Sol-12883,,,,,,,
Sol-12884,,,,,,,
Sol-12885,,,,,,,
Sol-12886,,,,,,,
Sol-12887,,,,,,,
Sol-12888,,,,,,,
Sol-12889,,,,,,,
Sol-12890,,,,,,,
Sol-12891,,,,,,,
Sol-12892,,,,,,,
Sol-12893,,,,,,,
Sol-12894,,,,,,,
Sol-12895,,,,,,,
Sol-12896,,,,,,,
Sol-12897,,,,,,,
Sol-12898,,,,,,,
Sol-12899,,,,,,,
Sol-12900,,,,,,,
Sol-12901,,,,,,,
Sol-12902,,,,,,,
Sol-12903,,,,,,,
Sol-12904,,,,,,,
Sol-12905,,,,,,,
Sol-12906,,,,,,,
Sol-12907,,,,,,,
Sol-12908,,,,,,,
Sol-12909,,,,,,,
Sol-12910,,,,,,,
Sol-12911,,,,,,,
Sol-12912,,,,,,,
Sol-12913,,,,,,,
Sol-12914,,,,,,,
Sol-12915,,,,,,,
Sol-12916,,,,,,,
Sol-12917,,,,,,,
Sol-12918,,,,,,,
Sol-12919,,,,,,,
Sol-12920,,,,,,,
Sol-12921,,,,,,,
Sol-12922,,,,,,,
Sol-12923,,,,,,,
Sol-12924,,,,,,,
Sol-12925,,,,,,,
Sol-12926,,,,,,,
Sol-12927,,,,,,,
Sol-12928,,,,,,,
Sol-12929,,,,,,,
Sol-12930,,,,,,,
Sol-12931,,,,,,,
Sol-12932,,,,,,,
Sol-12933,,,,,,,
Sol-12934,,,,,,,
Sol-12935,,,,,,,
Sol-12936,,,,,,,
Sol-12937,,,,,,,
Sol-12938,,,,,,,
Sol-12939,,,,,,,
Sol-12940,,,,,,,
Sol-12941,,,,,,,
Sol-12942,,,,,,,
Sol-12943,,,,,,,
Sol-12944,,,,,,,
Sol-12945,,,,,,,
Sol-12946,,,,,,,
Sol-12947,,,,,,,
Sol-12948,,,,,,,
Sol-12949,,,,,,,
Sol-12950,,,,,,,
Sol-12951,,,,,,,
Sol-12952,,,,,,,
Sol-12953,,,,,,,
Sol-12954,,,,,,,
Sol-12955,,,,,,,
Sol-12956,,,,,,,
Sol-12957,,,,,,,
Sol-12958,,,,,,,
Sol-12959,,,,,,,
Sol-12960,,,,,,,
Sol-12961,,,,,,,
Sol-12962,,,,,,,
Sol-12963,,,,,,,
Sol-12964,,,,,,,
Sol-12965,,,,,,,
Sol-12966,,,,,,,
Sol-12967,,,,,,,
Sol-12968,,,,,,,
Sol-12969,,,,,,,
Sol-12970,,,,,,,
Sol-12971,,,,,,,
Sol-12972,,,,,,,
Sol-12973,,,,,,,
Sol-12974,,,,,,,
Sol-12975,,,,,,,
Sol-12976,,,,,,,
Sol-12977,,,,,,,
Sol-12978,,,,,,,
Sol-12979,,,,,,,
Sol-12980,,,,,,,
Sol-12981,,,,,,,
Sol-12982,,,,,,,
Sol-12983,,,,,,,
Sol-12984,,,,,,,
Sol-12985,,,,,,,
Sol-12986,,,,,,,
Sol-12987,,,,,,,
Sol-12988,,,,,,,
Sol-12989,,,,,,,
Sol-12990,,,,,,,
Sol-12991,,,,,,,
Sol-12992,,,,,,,
Sol-12993,,,,,,,
Sol-12994,,,,,,,
Sol-12995,,,,,,,
Sol-12996,,,,,,,
Sol-12997,,,,,,,
Sol-12998,,,,,,,
Sol-12999,,,,,,,
Sol-13000,,,,,,,
Sol-13001,,,,,,,
Sol-13002,,,,,,,
Sol-13003,,,,,,,
Sol-13004,,,,,,,
Sol-13005,,,,,,,
Sol-13006,,,,,,,
Sol-13007,,,,,,,
Sol-13008,,,,,,,
Sol-13009,,,,,,,
Sol-13010,,,,,,,
Sol-13011,,,,,,,
Sol-13012,,,,,,,
Sol-13013,,,,,,,
Sol-13014,,,,,,,
Sol-13015,,,,,,,
Sol-13016,,,,,,,
Sol-13017,,,,,,,
Sol-13018,,,,,,,
Sol-13019,,,,,,,
Sol-13020,,,,,,,
Sol-13021,,,,,,,
Sol-13022,,,,,,,
Sol-13023,,,,,,,
Sol-13024,,,,,,,
Sol-13025,,,,,,,
Sol-13026,,,,,,,
Sol-13027,,,,,,,
Sol-13028,,,,,,,
Sol-13029,,,,,,,
Sol-13030,,,,,,,
Sol-13031,,,,,,,
Sol-13032,,,,,,,
Sol-13033,,,,,,,
Sol-13034,,,,,,,
Sol-13035,,,,,,,
Sol-13036,,,,,,,
Sol-13037,,,,,,,
Sol-13038,,,,,,,
Sol-13039,,,,,,,
Sol-13040,,,,,,,
Sol-13041,,,,,,,
Sol-13042,,,,,,,
Sol-13043,,,,,,,
Sol-13044,,,,,,,
Sol-13045,,,,,,,
Sol-13046,,,,,,,
Sol-13047,,,,,,,
Sol-13048,,,,,,,
Sol-13049,,,,,,,
Sol-13050,,,,,,,
Sol-13051,,,,,,,
Sol-13052,,,,,,,
Sol-13053,,,,,,,
Sol-13054,,,,,,,
Sol-13055,,,,,,,
Sol-13056,,,,,,,
Sol-13057,,,,,,,
Sol-13058,,,,,,,
Sol-13059,,,,,,,
Sol-13060,,,,,,,
Sol-13061,,,,,,,
Sol-13062,,,,,,,
Sol-13063,,,,,,,
Sol-13064,,,,,,,
Sol-13065,,,,,,,
Sol-13066,,,,,,,
Sol-13067,,,,,,,
Sol-13068,,,,,,,
Sol-13069,,,,,,,
Sol-13070,,,,,,,
Sol-13071,,,,,,,
Sol-13072,,,,,,,
Sol-13073,,,,,,,
Sol-13074,,,,,,,
Sol-13075,,,,,,,
Sol-13076,,,,,,,
Sol-13077,,,,,,,
Sol-13078,,,,,,,
Sol-13079,,,,,,,
Sol-13080,,,,,,,
Sol-13081,,,,,,,
Sol-13082,,,,,,,
Sol-13083,,,,,,,
Sol-13084,,,,,,,
Sol-13085,,,,,,,
Sol-13086,,,,,,,
Sol-13087,,,,,,,
Sol-13088,,,,,,,
Sol-13089,,,,,,,
Sol-13090,,,,,,,
Sol-13091,,,,,,,
Sol-13092,,,,,,,
Sol-13093,,,,,,,
Sol-13094,,,,,,,
Sol-13095,,,,,,,
Sol-13096,,,,,,,
Sol-13097,,,,,,,
Sol-13098,,,,,,,
Sol-13099,,,,,,,
Sol-13100,,,,,,,
Sol-13101,,,,,,,
Sol-13102,,,,,,,
Sol-13103,,,,,,,
Sol-13104,,,,,,,
Sol-13105,,,,,,,
Sol-13106,,,,,,,
Sol-13107,,,,,,,
Sol-13108,,,,,,,
Sol-13109,,,,,,,
Sol-13110,,,,,,,
Sol-13111,,,,,,,
Sol-13112,,,,,,,
Sol-13113,,,,,,,
Sol-13114,,,,,,,
Sol-13115,,,,,,,
Sol-13116,,,,,,,
Sol-13117,,,,,,,
Sol-13118,,,,,,,
Sol-13119,,,,,,,
Sol-13120,,,,,,,
Sol-13121,,,,,,,
Sol-13122,,,,,,,
Sol-13123,,,,,,,
Sol-13124,,,,,,,
Sol-13125,,,,,,,
Sol-13126,,,,,,,
Sol-13127,,,,,,,
Sol-13128,,,,,,,
Sol-13129,,,,,,,
Sol-13130,,,,,,,
Sol-13131,,,,,,,
Sol-13132,,,,,,,
Sol-13133,,,,,,,
Sol-13134,,,,,,,
Sol-13135,,,,,,,
Sol-13136,,,,,,,
Sol-13137,,,,,,,
Sol-13138,,,,,,,
Sol-13139,,,,,,,
Sol-13140,,,,,,,
Sol-13141,,,,,,,
Sol-13142,,,,,,,
Sol-13143,,,,,,,
Sol-13144,,,,,,,
Sol-13145,,,,,,,
Sol-13146,,,,,,,
Sol-13147,,,,,,,
Sol-13148,,,,,,,
Sol-13149,,,,,,,
Sol-13150,,,,,,,
Sol-13151,,,,,,,
Sol-13152,,,,,,,
Sol-13153,,,,,,,
Sol-13154,,,,,,,
Sol-13155,,,,,,,
Sol-13156,,,,,,,
Sol-13157,,,,,,,
Sol-13158,,,,,,,
Sol-13159,,,,,,,
Sol-13160,,,,,,,
Sol-13161,,,,,,,
Sol-13162,,,,,,,
Sol-13163,,,,,,,
Sol-13164,,,,,,,
Sol-13165,,,,,,,
Sol-13166,,,,,,,
Sol-13167,,,,,,,
Sol-13168,,,,,,,
Sol-13169,,,,,,,
Sol-13170,,,,,,,
Sol-13171,,,,,,,
Sol-13172,,,,,,,
Sol-13173,,,,,,,
Sol-13174,,,,,,,
Sol-13175,,,,,,,
Sol-13176,,,,,,,
Sol-13177,,,,,,,
Sol-13178,,,,,,,
Sol-13179,,,,,,,
Sol-13180,,,,,,,
Sol-13181,,,,,,,
Sol-13182,,,,,,,
Sol-13183,,,,,,,
Sol-13184,,,,,,,
Sol-13185,,,,,,,
Sol-13186,,,,,,,
Sol-13187,,,,,,,
Sol-13188,,,,,,,
Sol-13189,,,,,,,
Sol-13190,,,,,,,
Sol-13191,,,,,,,
Sol-13192,,,,,,,
Sol-13193,,,,,,,
Sol-13194,,,,,,,
Sol-13195,,,,,,,
Sol-13196,,,,,,,
Sol-13197,,,,,,,
Sol-13198,,,,,,,
Sol-13199,,,,,,,
Sol-13200,,,,,,,
Sol-13201,,,,,,,
Sol-13202,,,,,,,
Sol-13203,,,,,,,
Sol-13204,,,,,,,
Sol-13205,,,,,,,
Sol-13206,,,,,,,
Sol-13207,,,,,,,
Sol-13208,,,,,,,
Sol-13209,,,,,,,
Sol-13210,,,,,,,
Sol-13211,,,,,,,
Sol-13212,,,,,,,
Sol-13213,,,,,,,
Sol-13214,,,,,,,
Sol-13215,,,,,,,
Sol-13216,,,,,,,
Sol-13217,,,,,,,
Sol-13218,,,,,,,
Sol-13219,,,,,,,
Sol-13220,,,,,,,
Sol-13221,,,,,,,
Sol-13222,,,,,,,
Sol-13223,,,,,,,
Sol-13224,,,,,,,
Sol-13225,,,,,,,
Sol-13226,,,,,,,
Sol-13227,,,,,,,
Sol-13228,,,,,,,
Sol-13229,,,,,,,
Sol-13230,,,,,,,
Sol-13231,,,,,,,
Sol-13232,,,,,,,
Sol-13233,,,,,,,
Sol-13234,,,,,,,
Sol-13235,,,,,,,
Sol-13236,,,,,,,
Sol-13237,,,,,,,
Sol-13238,,,,,,,
Sol-13239,,,,,,,
Sol-13240,,,,,,,
Sol-13241,,,,,,,
Sol-13242,,,,,,,
Sol-13243,,,,,,,
Sol-13244,,,,,,,
Sol-13245,,,,,,,
Sol-13246,,,,,,,
Sol-13247,,,,,,,
Sol-13248,,,,,,,
Sol-13249,,,,,,,
Sol-13250,,,,,,,
Sol-13251,,,,,,,
Sol-13252,,,,,,,
Sol-13253,,,,,,,
Sol-13254,,,,,,,
Sol-13255,,,,,,,
Sol-13256,,,,,,,
Sol-13257,,,,,,,
Sol-13258,,,,,,,
Sol-13259,,,,,,,
Sol-13260,,,,,,,
Sol-13261,,,,,,,
Sol-13262,,,,,,,
Sol-13263,,,,,,,
Sol-13264,,,,,,,
Sol-13265,,,,,,,
Sol-13266,,,,,,,
Sol-13267,,,,,,,
Sol-13268,,,,,,,
Sol-13269,,,,,,,
Sol-13270,,,,,,,
Sol-13271,,,,,,,
Sol-13272,,,,,,,
Sol-13273,,,,,,,
Sol-13274,,,,,,,
Sol-13275,,,,,,,
Sol-13276,,,,,,,
Sol-13277,,,,,,,
Sol-13278,,,,,,,
Sol-13279,,,,,,,
Sol-13280,,,,,,,
Sol-13281,,,,,,,
Sol-13282,,,,,,,
Sol-13283,,,,,,,
Sol-13284,,,,,,,
Sol-13285,,,,,,,
Sol-13286,,,,,,,
Sol-13287,,,,,,,
Sol-13288,,,,,,,
Sol-13289,,,,,,,
Sol-13290,,,,,,,
Sol-13291,,,,,,,
Sol-13292,,,,,,,
Sol-13293,,,,,,,
Sol-13294,,,,,,,
Sol-13295,,,,,,,
Sol-13296,,,,,,,
Sol-13297,,,,,,,
Sol-13298,,,,,,,
Sol-13299,,,,,,,
Sol-13300,,,,,,,
Sol-13301,,,,,,,
Sol-13302,,,,,,,
Sol-13303,,,,,,,
Sol-13304,,,,,,,
Sol-13305,,,,,,,
Sol-13306,,,,,,,
Sol-13307,,,,,,,
Sol-13308,,,,,,,
Sol-13309,,,,,,,
Sol-13310,,,,,,,
Sol-13311,,,,,,,
Sol-13312,,,,,,,
Sol-13313,,,,,,,
Sol-13314,,,,,,,
Sol-13315,,,,,,,
Sol-13316,,,,,,,
Sol-13317,,,,,,,
Sol-13318,,,,,,,
Sol-13319,,,,,,,
Sol-13320,,,,,,,
Sol-13321,,,,,,,
Sol-13322,,,,,,,
Sol-13323,,,,,,,
Sol-13324,,,,,,,
Sol-13325,,,,,,,
Sol-13326,,,,,,,
Sol-13327,,,,,,,
Sol-13328,,,,,,,
Sol-13329,,,,,,,
Sol-13330,,,,,,,
Sol-13331,,,,,,,
Sol-13332,,,,,,,
Sol-13333,,,,,,,
Sol-13334,,,,,,,
Sol-13335,,,,,,,
Sol-13336,,,,,,,
Sol-13337,,,,,,,
Sol-13338,,,,,,,
Sol-13339,,,,,,,
Sol-13340,,,,,,,
Sol-13341,,,,,,,
Sol-13342,,,,,,,
Sol-13343,,,,,,,
Sol-13344,,,,,,,
Sol-13345,,,,,,,
Sol-13346,,,,,,,
Sol-13347,,,,,,,
Sol-13348,,,,,,,
Sol-13349,,,,,,,
Sol-13350,,,,,,,
Sol-13351,,,,,,,
Sol-13352,,,,,,,
Sol-13353,,,,,,,
Sol-13354,,,,,,,
Sol-13355,,,,,,,
Sol-13356,,,,,,,
Sol-13357,,,,,,,
Sol-13358,,,,,,,
Sol-13359,,,,,,,
Sol-13360,,,,,,,
Sol-13361,,,,,,,
Sol-13362,,,,,,,
Sol-13363,,,,,,,
Sol-13364,,,,,,,
Sol-13365,,,,,,,
Sol-13366,,,,,,,
Sol-13367,,,,,,,
Sol-13368,,,,,,,
Sol-13369,,,,,,,
Sol-13370,,,,,,,
Sol-13371,,,,,,,
Sol-13372,,,,,,,
Sol-13373,,,,,,,
Sol-13374,,,,,,,
Sol-13375,,,,,,,
Sol-13376,,,,,,,
Sol-13377,,,,,,,
Sol-13378,,,,,,,
Sol-13379,,,,,,,
Sol-13380,,,,,,,
Sol-13381,,,,,,,
Sol-13382,,,,,,,
Sol-13383,,,,,,,
Sol-13384,,,,,,,
Sol-13385,,,,,,,
Sol-13386,,,,,,,
Sol-13387,,,,,,,
Sol-13388,,,,,,,
Sol-13389,,,,,,,
Sol-13390,,,,,,,
Sol-13391,,,,,,,
Sol-13392,,,,,,,
Sol-13393,,,,,,,
Sol-13394,,,,,,,
Sol-13395,,,,,,,
Sol-13396,,,,,,,
Sol-13397,,,,,,,
Sol-13398,,,,,,,
Sol-13399,,,,,,,
Sol-13400,,,,,,,
Sol-13401,,,,,,,
Sol-13402,,,,,,,
Sol-13403,,,,,,,
Sol-13404,,,,,,,
Sol-13405,,,,,,,
Sol-13406,,,,,,,
Sol-13407,,,,,,,
Sol-13408,,,,,,,
Sol-13409,,,,,,,
Sol-13410,,,,,,,
Sol-13411,,,,,,,
Sol-13412,,,,,,,
Sol-13413,,,,,,,
Sol-13414,,,,,,,
Sol-13415,,,,,,,
Sol-13416,,,,,,,
Sol-13417,,,,,,,
Sol-13418,,,,,,,
Sol-13419,,,,,,,
Sol-13420,,,,,,,
Sol-13421,,,,,,,
Sol-13422,,,,,,,
Sol-13423,,,,,,,
Sol-13424,,,,,,,
Sol-13425,,,,,,,
Sol-13426,,,,,,,
Sol-13427,,,,,,,
Sol-13428,,,,,,,
Sol-13429,,,,,,,
Sol-13430,,,,,,,
Sol-13431,,,,,,,
Sol-13432,,,,,,,
Sol-13433,,,,,,,
Sol-13434,,,,,,,
Sol-13435,,,,,,,
Sol-13436,,,,,,,
Sol-13437,,,,,,,
Sol-13438,,,,,,,
Sol-13439,,,,,,,
Sol-13440,,,,,,,
Sol-13441,,,,,,,
Sol-13442,,,,,,,
Sol-13443,,,,,,,
Sol-13444,,,,,,,
Sol-13445,,,,,,,
Sol-13446,,,,,,,
Sol-13447,,,,,,,
Sol-13448,,,,,,,
Sol-13449,,,,,,,
Sol-13450,,,,,,,
Sol-13451,,,,,,,
Sol-13452,,,,,,,
Sol-13453,,,,,,,
Sol-13454,,,,,,,
Sol-13455,,,,,,,
Sol-13456,,,,,,,
Sol-13457,,,,,,,
Sol-13458,,,,,,,
Sol-13459,,,,,,,
Sol-13460,,,,,,,
Sol-13461,,,,,,,
Sol-13462,,,,,,,
Sol-13463,,,,,,,
Sol-13464,,,,,,,
Sol-13465,,,,,,,
Sol-13466,,,,,,,
Sol-13467,,,,,,,
Sol-13468,,,,,,,
Sol-13469,,,,,,,
Sol-13470,,,,,,,
Sol-13471,,,,,,,
Sol-13472,,,,,,,
Sol-13473,,,,,,,
Sol-13474,,,,,,,
Sol-13475,,,,,,,
Sol-13476,,,,,,,
Sol-13477,,,,,,,
Sol-13478,,,,,,,
Sol-13479,,,,,,,
Sol-13480,,,,,,,
Sol-13481,,,,,,,
Sol-13482,,,,,,,
Sol-13483,,,,,,,
Sol-13484,,,,,,,
Sol-13485,,,,,,,
Sol-13486,,,,,,,
Sol-13487,,,,,,,
Sol-13488,,,,,,,
Sol-13489,,,,,,,
Sol-13490,,,,,,,
Sol-13491,,,,,,,
Sol-13492,,,,,,,
Sol-13493,,,,,,,
Sol-13494,,,,,,,
Sol-13495,,,,,,,
Sol-13496,,,,,,,
Sol-13497,,,,,,,
Sol-13498,,,,,,,
Sol-13499,,,,,,,
Sol-13500,,,,,,,
Sol-13501,,,,,,,
Sol-13502,,,,,,,
Sol-13503,,,,,,,
Sol-13504,,,,,,,
Sol-13505,,,,,,,
Sol-13506,,,,,,,
Sol-13507,,,,,,,
Sol-13508,,,,,,,
Sol-13509,,,,,,,
Sol-13510,,,,,,,
Sol-13511,,,,,,,
Sol-13512,,,,,,,
Sol-13513,,,,,,,
Sol-13514,,,,,,,
Sol-13515,,,,,,,
Sol-13516,,,,,,,
Sol-13517,,,,,,,
Sol-13518,,,,,,,
Sol-13519,,,,,,,
Sol-13520,,,,,,,
Sol-13521,,,,,,,
Sol-13522,,,,,,,
Sol-13523,,,,,,,
Sol-13524,,,,,,,
Sol-13525,,,,,,,
Sol-13526,,,,,,,
Sol-13527,,,,,,,
Sol-13528,,,,,,,
Sol-13529,,,,,,,
Sol-13530,,,,,,,
Sol-13531,,,,,,,
Sol-13532,,,,,,,
Sol-13533,,,,,,,
Sol-13534,,,,,,,
Sol-13535,,,,,,,
Sol-13536,,,,,,,
Sol-13537,,,,,,,
Sol-13538,,,,,,,
Sol-13539,,,,,,,
Sol-13540,,,,,,,
Sol-13541,,,,,,,
Sol-13542,,,,,,,
Sol-13543,,,,,,,
Sol-13544,,,,,,,
Sol-13545,,,,,,,
Sol-13546,,,,,,,
Sol-13547,,,,,,,
Sol-13548,,,,,,,
Sol-13549,,,,,,,
Sol-13550,,,,,,,
Sol-13551,,,,,,,
Sol-13552,,,,,,,
Sol-13553,,,,,,,
Sol-13554,,,,,,,
Sol-13555,,,,,,,
Sol-13556,,,,,,,
Sol-13557,,,,,,,
Sol-13558,,,,,,,
Sol-13559,,,,,,,
Sol-13560,,,,,,,
Sol-13561,,,,,,,
Sol-13562,,,,,,,
Sol-13563,,,,,,,
Sol-13564,,,,,,,
Sol-13565,,,,,,,
Sol-13566,,,,,,,
Sol-13567,,,,,,,
Sol-13568,,,,,,,
Sol-13569,,,,,,,
Sol-13570,,,,,,,
Sol-13571,,,,,,,
Sol-13572,,,,,,,
Sol-13573,,,,,,,
Sol-13574,,,,,,,
Sol-13575,,,,,,,
Sol-13576,,,,,,,
Sol-13577,,,,,,,
Sol-13578,,,,,,,
Sol-13579,,,,,,,
Sol-13580,,,,,,,
Sol-13581,,,,,,,
Sol-13582,,,,,,,
Sol-13583,,,,,,,
Sol-13584,,,,,,,
Sol-13585,,,,,,,
Sol-13586,,,,,,,
Sol-13587,,,,,,,
Sol-13588,,,,,,,
Sol-13589,,,,,,,
Sol-13590,,,,,,,
Sol-13591,,,,,,,
Sol-13592,,,,,,,
Sol-13593,,,,,,,
Sol-13594,,,,,,,
Sol-13595,,,,,,,
Sol-13596,,,,,,,
Sol-13597,,,,,,,
Sol-13598,,,,,,,
Sol-13599,,,,,,,
Sol-13600,,,,,,,
Sol-13601,,,,,,,
Sol-13602,,,,,,,
Sol-13603,,,,,,,
Sol-13604,,,,,,,
Sol-13605,,,,,,,
Sol-13606,,,,,,,
Sol-13607,,,,,,,
Sol-13608,,,,,,,
Sol-13609,,,,,,,
Sol-13610,,,,,,,
Sol-13611,,,,,,,
Sol-13612,,,,,,,
Sol-13613,,,,,,,
Sol-13614,,,,,,,
Sol-13615,,,,,,,
Sol-13616,,,,,,,
Sol-13617,,,,,,,
Sol-13618,,,,,,,
Sol-13619,,,,,,,
Sol-13620,,,,,,,
Sol-13621,,,,,,,
Sol-13622,,,,,,,
Sol-13623,,,,,,,
Sol-13624,,,,,,,
Sol-13625,,,,,,,
Sol-13626,,,,,,,
Sol-13627,,,,,,,
Sol-13628,,,,,,,
Sol-13629,,,,,,,
Sol-13630,,,,,,,
Sol-13631,,,,,,,
Sol-13632,,,,,,,
Sol-13633,,,,,,,
Sol-13634,,,,,,,
Sol-13635,,,,,,,
Sol-13636,,,,,,,
Sol-13637,,,,,,,
Sol-13638,,,,,,,
Sol-13639,,,,,,,
Sol-13640,,,,,,,
Sol-13641,,,,,,,
Sol-13642,,,,,,,
Sol-13643,,,,,,,
Sol-13644,,,,,,,
Sol-13645,,,,,,,
Sol-13646,,,,,,,
Sol-13647,,,,,,,
Sol-13648,,,,,,,
Sol-13649,,,,,,,
Sol-13650,,,,,,,
Sol-13651,,,,,,,
Sol-13652,,,,,,,
Sol-13653,,,,,,,
Sol-13654,,,,,,,
Sol-13655,,,,,,,
Sol-13656,,,,,,,
Sol-13657,,,,,,,
Sol-13658,,,,,,,
Sol-13659,,,,,,,
Sol-13660,,,,,,,
Sol-13661,,,,,,,
Sol-13662,,,,,,,
Sol-13663,,,,,,,
Sol-13664,,,,,,,
Sol-13665,,,,,,,
Sol-13666,,,,,,,
Sol-13667,,,,,,,
Sol-13668,,,,,,,
Sol-13669,,,,,,,
Sol-13670,,,,,,,
Sol-13671,,,,,,,
Sol-13672,,,,,,,
Sol-13673,,,,,,,
Sol-13674,,,,,,,
Sol-13675,,,,,,,
Sol-13676,,,,,,,
Sol-13677,,,,,,,
Sol-13678,,,,,,,
Sol-13679,,,,,,,
Sol-13680,,,,,,,
Sol-13681,,,,,,,
Sol-13682,,,,,,,
Sol-13683,,,,,,,
Sol-13684,,,,,,,
Sol-13685,,,,,,,
Sol-13686,,,,,,,
Sol-13687,,,,,,,
Sol-13688,,,,,,,
Sol-13689,,,,,,,
Sol-13690,,,,,,,
Sol-13691,,,,,,,
Sol-13692,,,,,,,
Sol-13693,,,,,,,
Sol-13694,,,,,,,
Sol-13695,,,,,,,
Sol-13696,,,,,,,
Sol-13697,,,,,,,
Sol-13698,,,,,,,
Sol-13699,,,,,,,
Sol-13700,,,,,,,
Sol-13701,,,,,,,
Sol-13702,,,,,,,
Sol-13703,,,,,,,
Sol-13704,,,,,,,
Sol-13705,,,,,,,
Sol-13706,,,,,,,
Sol-13707,,,,,,,
Sol-13708,,,,,,,
Sol-13709,,,,,,,
Sol-13710,,,,,,,
Sol-13711,,,,,,,
Sol-13712,,,,,,,
Sol-13713,,,,,,,
Sol-13714,,,,,,,
Sol-13715,,,,,,,
Sol-13716,,,,,,,
Sol-13717,,,,,,,
Sol-13718,,,,,,,
Sol-13719,,,,,,,
Sol-13720,,,,,,,
Sol-13721,,,,,,,
Sol-13722,,,,,,,
Sol-13723,,,,,,,
Sol-13724,,,,,,,
Sol-13725,,,,,,,
Sol-13726,,,,,,,
Sol-13727,,,,,,,
Sol-13728,,,,,,,
Sol-13729,,,,,,,
Sol-13730,,,,,,,
Sol-13731,,,,,,,
Sol-13732,,,,,,,
Sol-13733,,,,,,,
Sol-13734,,,,,,,
Sol-13735,,,,,,,
Sol-13736,,,,,,,
Sol-13737,,,,,,,
Sol-13738,,,,,,,
Sol-13739,,,,,,,
Sol-13740,,,,,,,
Sol-13741,,,,,,,
Sol-13742,,,,,,,
Sol-13743,,,,,,,
Sol-13744,,,,,,,
Sol-13745,,,,,,,
Sol-13746,,,,,,,
Sol-13747,,,,,,,
Sol-13748,,,,,,,
Sol-13749,,,,,,,
Sol-13750,,,,,,,
Sol-13751,,,,,,,
Sol-13752,,,,,,,
Sol-13753,,,,,,,
Sol-13754,,,,,,,
Sol-13755,,,,,,,
Sol-13756,,,,,,,
Sol-13757,,,,,,,
Sol-13758,,,,,,,
Sol-13759,,,,,,,
Sol-13760,,,,,,,
Sol-13761,,,,,,,
Sol-13762,,,,,,,
Sol-13763,,,,,,,
Sol-13764,,,,,,,
Sol-13765,,,,,,,
Sol-13766,,,,,,,
Sol-13767,,,,,,,
Sol-13768,,,,,,,
Sol-13769,,,,,,,
Sol-13770,,,,,,,
Sol-13771,,,,,,,
Sol-13772,,,,,,,
Sol-13773,,,,,,,
Sol-13774,,,,,,,
Sol-13775,,,,,,,
Sol-13776,,,,,,,
Sol-13777,,,,,,,
Sol-13778,,,,,,,
Sol-13779,,,,,,,
Sol-13780,,,,,,,
Sol-13781,,,,,,,
Sol-13782,,,,,,,
Sol-13783,,,,,,,
Sol-13784,,,,,,,
Sol-13785,,,,,,,
Sol-13786,,,,,,,
Sol-13787,,,,,,,
Sol-13788,,,,,,,
Sol-13789,,,,,,,
Sol-13790,,,,,,,
Sol-13791,,,,,,,
Sol-13792,,,,,,,
Sol-13793,,,,,,,
Sol-13794,,,,,,,
Sol-13795,,,,,,,
Sol-13796,,,,,,,
Sol-13797,,,,,,,
Sol-13798,,,,,,,
Sol-13799,,,,,,,
Sol-13800,,,,,,,
Sol-13801,,,,,,,
Sol-13802,,,,,,,
Sol-13803,,,,,,,
Sol-13804,,,,,,,
Sol-13805,,,,,,,
Sol-13806,,,,,,,
Sol-13807,,,,,,,
Sol-13808,,,,,,,
Sol-13809,,,,,,,
Sol-13810,,,,,,,
Sol-13811,,,,,,,
Sol-13812,,,,,,,
Sol-13813,,,,,,,
Sol-13814,,,,,,,
Sol-13815,,,,,,,
Sol-13816,,,,,,,
Sol-13817,,,,,,,
Sol-13818,,,,,,,
Sol-13819,,,,,,,
Sol-13820,,,,,,,
Sol-13821,,,,,,,
Sol-13822,,,,,,,
Sol-13823,,,,,,,
Sol-13824,,,,,,,
Sol-13825,,,,,,,
Sol-13826,,,,,,,
Sol-13827,,,,,,,
Sol-13828,,,,,,,
Sol-13829,,,,,,,
Sol-13830,,,,,,,
Sol-13831,,,,,,,
Sol-13832,,,,,,,
Sol-13833,,,,,,,
Sol-13834,,,,,,,
Sol-13835,,,,,,,
Sol-13836,,,,,,,
Sol-13837,,,,,,,
Sol-13838,,,,,,,
Sol-13839,,,,,,,
Sol-13840,,,,,,,
Sol-13841,,,,,,,
Sol-13842,,,,,,,
Sol-13843,,,,,,,
Sol-13844,,,,,,,
Sol-13845,,,,,,,
Sol-13846,,,,,,,
Sol-13847,,,,,,,
Sol-13848,,,,,,,
Sol-13849,,,,,,,
Sol-13850,,,,,,,
Sol-13851,,,,,,,
Sol-13852,,,,,,,
Sol-13853,,,,,,,
Sol-13854,,,,,,,
Sol-13855,,,,,,,
Sol-13856,,,,,,,
Sol-13857,,,,,,,
Sol-13858,,,,,,,
Sol-13859,,,,,,,
Sol-13860,,,,,,,
Sol-13861,,,,,,,
Sol-13862,,,,,,,
Sol-13863,,,,,,,
Sol-13864,,,,,,,
Sol-13865,,,,,,,
Sol-13866,,,,,,,
Sol-13867,,,,,,,
Sol-13868,,,,,,,
Sol-13869,,,,,,,
Sol-13870,,,,,,,
Sol-13871,,,,,,,
Sol-13872,,,,,,,
Sol-13873,,,,,,,
Sol-13874,,,,,,,
Sol-13875,,,,,,,
Sol-13876,,,,,,,
Sol-13877,,,,,,,
Sol-13878,,,,,,,
Sol-13879,,,,,,,
Sol-13880,,,,,,,
Sol-13881,,,,,,,
Sol-13882,,,,,,,
Sol-13883,,,,,,,
Sol-13884,,,,,,,
Sol-13885,,,,,,,
Sol-13886,,,,,,,
Sol-13887,,,,,,,
Sol-13888,,,,,,,
Sol-13889,,,,,,,
Sol-13890,,,,,,,
Sol-13891,,,,,,,
Sol-13892,,,,,,,
Sol-13893,,,,,,,
Sol-13894,,,,,,,
Sol-13895,,,,,,,
Sol-13896,,,,,,,
Sol-13897,,,,,,,
Sol-13898,,,,,,,
Sol-13899,,,,,,,
Sol-13900,,,,,,,
Sol-13901,,,,,,,
Sol-13902,,,,,,,
Sol-13903,,,,,,,
Sol-13904,,,,,,,
Sol-13905,,,,,,,
Sol-13906,,,,,,,
Sol-13907,,,,,,,
Sol-13908,,,,,,,
Sol-13909,,,,,,,
Sol-13910,,,,,,,
Sol-13911,,,,,,,
Sol-13912,,,,,,,
Sol-13913,,,,,,,
Sol-13914,,,,,,,
Sol-13915,,,,,,,
Sol-13916,,,,,,,
Sol-13917,,,,,,,
Sol-13918,,,,,,,
Sol-13919,,,,,,,
Sol-13920,,,,,,,
Sol-13921,,,,,,,
Sol-13922,,,,,,,
Sol-13923,,,,,,,
Sol-13924,,,,,,,
Sol-13925,,,,,,,
Sol-13926,,,,,,,
Sol-13927,,,,,,,
Sol-13928,,,,,,,
Sol-13929,,,,,,,
Sol-13930,,,,,,,
Sol-13931,,,,,,,
Sol-13932,,,,,,,
Sol-13933,,,,,,,
Sol-13934,,,,,,,
Sol-13935,,,,,,,
Sol-13936,,,,,,,
Sol-13937,,,,,,,
Sol-13938,,,,,,,
Sol-13939,,,,,,,
Sol-13940,,,,,,,
Sol-13941,,,,,,,
Sol-13942,,,,,,,
Sol-13943,,,,,,,
Sol-13944,,,,,,,
Sol-13945,,,,,,,
Sol-13946,,,,,,,
Sol-13947,,,,,,,
Sol-13948,,,,,,,
Sol-13949,,,,,,,
Sol-13950,,,,,,,
Sol-13951,,,,,,,
Sol-13952,,,,,,,
Sol-13953,,,,,,,
Sol-13954,,,,,,,
Sol-13955,,,,,,,
Sol-13956,,,,,,,
Sol-13957,,,,,,,
Sol-13958,,,,,,,
Sol-13959,,,,,,,
Sol-13960,,,,,,,
Sol-13961,,,,,,,
Sol-13962,,,,,,,
Sol-13963,,,,,,,
Sol-13964,,,,,,,
Sol-13965,,,,,,,
Sol-13966,,,,,,,
Sol-13967,,,,,,,
Sol-13968,,,,,,,
Sol-13969,,,,,,,
Sol-13970,,,,,,,
Sol-13971,,,,,,,
Sol-13972,,,,,,,
Sol-13973,,,,,,,
Sol-13974,,,,,,,
Sol-13975,,,,,,,
Sol-13976,,,,,,,
Sol-13977,,,,,,,
Sol-13978,,,,,,,
Sol-13979,,,,,,,
Sol-13980,,,,,,,
Sol-13981,,,,,,,
Sol-13982,,,,,,,
Sol-13983,,,,,,,
Sol-13984,,,,,,,
Sol-13985,,,,,,,
Sol-13986,,,,,,,
Sol-13987,,,,,,,
Sol-13988,,,,,,,
Sol-13989,,,,,,,
Sol-13990,,,,,,,
Sol-13991,,,,,,,
Sol-13992,,,,,,,
Sol-13993,,,,,,,
Sol-13994,,,,,,,
Sol-13995,,,,,,,
Sol-13996,,,,,,,
Sol-13997,,,,,,,
Sol-13998,,,,,,,
Sol-13999,,,,,,,
Sol-14000,,,,,,,
Sol-14001,,,,,,,
Sol-14002,,,,,,,
Sol-14003,,,,,,,
Sol-14004,,,,,,,
Sol-14005,,,,,,,
Sol-14006,,,,,,,
Sol-14007,,,,,,,
Sol-14008,,,,,,,
Sol-14009,,,,,,,
Sol-14010,,,,,,,
Sol-14011,,,,,,,
Sol-14012,,,,,,,
Sol-14013,,,,,,,
Sol-14014,,,,,,,
Sol-14015,,,,,,,
Sol-14016,,,,,,,
Sol-14017,,,,,,,
Sol-14018,,,,,,,
Sol-14019,,,,,,,
Sol-14020,,,,,,,
Sol-14021,,,,,,,
Sol-14022,,,,,,,
Sol-14023,,,,,,,
Sol-14024,,,,,,,
Sol-14025,,,,,,,
Sol-14026,,,,,,,
Sol-14027,,,,,,,
Sol-14028,,,,,,,
Sol-14029,,,,,,,
Sol-14030,,,,,,,
Sol-14031,,,,,,,
Sol-14032,,,,,,,
Sol-14033,,,,,,,
Sol-14034,,,,,,,
Sol-14035,,,,,,,
Sol-14036,,,,,,,
Sol-14037,,,,,,,
Sol-14038,,,,,,,
Sol-14039,,,,,,,
Sol-14040,,,,,,,
Sol-14041,,,,,,,
Sol-14042,,,,,,,
Sol-14043,,,,,,,
Sol-14044,,,,,,,
Sol-14045,,,,,,,
Sol-14046,,,,,,,
Sol-14047,,,,,,,
Sol-14048,,,,,,,
Sol-14049,,,,,,,
Sol-14050,,,,,,,
Sol-14051,,,,,,,
Sol-14052,,,,,,,
Sol-14053,,,,,,,
Sol-14054,,,,,,,
Sol-14055,,,,,,,
Sol-14056,,,,,,,
Sol-14057,,,,,,,
Sol-14058,,,,,,,
Sol-14059,,,,,,,
Sol-14060,,,,,,,
Sol-14061,,,,,,,
Sol-14062,,,,,,,
Sol-14063,,,,,,,
Sol-14064,,,,,,,
Sol-14065,,,,,,,
Sol-14066,,,,,,,
Sol-14067,,,,,,,
Sol-14068,,,,,,,
Sol-14069,,,,,,,
Sol-14070,,,,,,,
Sol-14071,,,,,,,
Sol-14072,,,,,,,
Sol-14073,,,,,,,
Sol-14074,,,,,,,
Sol-14075,,,,,,,
Sol-14076,,,,,,,
Sol-14077,,,,,,,
Sol-14078,,,,,,,
Sol-14079,,,,,,,
Sol-14080,,,,,,,
Sol-14081,,,,,,,
Sol-14082,,,,,,,
Sol-14083,,,,,,,
Sol-14084,,,,,,,
Sol-14085,,,,,,,
Sol-14086,,,,,,,
Sol-14087,,,,,,,
Sol-14088,,,,,,,
Sol-14089,,,,,,,
Sol-14090,,,,,,,
Sol-14091,,,,,,,
Sol-14092,,,,,,,
Sol-14093,,,,,,,
Sol-14094,,,,,,,
Sol-14095,,,,,,,
Sol-14096,,,,,,,
Sol-14097,,,,,,,
Sol-14098,,,,,,,
Sol-14099,,,,,,,
Sol-14100,,,,,,,
Sol-14101,,,,,,,
Sol-14102,,,,,,,
Sol-14103,,,,,,,
Sol-14104,,,,,,,
Sol-14105,,,,,,,
Sol-14106,,,,,,,
Sol-14107,,,,,,,
Sol-14108,,,,,,,
Sol-14109,,,,,,,
Sol-14110,,,,,,,
Sol-14111,,,,,,,
Sol-14112,,,,,,,
Sol-14113,,,,,,,
Sol-14114,,,,,,,
Sol-14115,,,,,,,
Sol-14116,,,,,,,
Sol-14117,,,,,,,
Sol-14118,,,,,,,
Sol-14119,,,,,,,
Sol-14120,,,,,,,
Sol-14121,,,,,,,
Sol-14122,,,,,,,
Sol-14123,,,,,,,
Sol-14124,,,,,,,
Sol-14125,,,,,,,
Sol-14126,,,,,,,
Sol-14127,,,,,,,
Sol-14128,,,,,,,
Sol-14129,,,,,,,
Sol-14130,,,,,,,
Sol-14131,,,,,,,
Sol-14132,,,,,,,
Sol-14133,,,,,,,
Sol-14134,,,,,,,
Sol-14135,,,,,,,
Sol-14136,,,,,,,
Sol-14137,,,,,,,
Sol-14138,,,,,,,
Sol-14139,,,,,,,
Sol-14140,,,,,,,
Sol-14141,,,,,,,
Sol-14142,,,,,,,
Sol-14143,,,,,,,
Sol-14144,,,,,,,
Sol-14145,,,,,,,
Sol-14146,,,,,,,
Sol-14147,,,,,,,
Sol-14148,,,,,,,
Sol-14149,,,,,,,
Sol-14150,,,,,,,
Sol-14151,,,,,,,
Sol-14152,,,,,,,
Sol-14153,,,,,,,
Sol-14154,,,,,,,
Sol-14155,,,,,,,
Sol-14156,,,,,,,
Sol-14157,,,,,,,
Sol-14158,,,,,,,
Sol-14159,,,,,,,
Sol-14160,,,,,,,
Sol-14161,,,,,,,
Sol-14162,,,,,,,
Sol-14163,,,,,,,
Sol-14164,,,,,,,
Sol-14165,,,,,,,
Sol-14166,,,,,,,
Sol-14167,,,,,,,
Sol-14168,,,,,,,
Sol-14169,,,,,,,
Sol-14170,,,,,,,
Sol-14171,,,,,,,
Sol-14172,,,,,,,
Sol-14173,,,,,,,
Sol-14174,,,,,,,
Sol-14175,,,,,,,
Sol-14176,,,,,,,
Sol-14177,,,,,,,
Sol-14178,,,,,,,
Sol-14179,,,,,,,
Sol-14180,,,,,,,
Sol-14181,,,,,,,
Sol-14182,,,,,,,
Sol-14183,,,,,,,
Sol-14184,,,,,,,
Sol-14185,,,,,,,
Sol-14186,,,,,,,
Sol-14187,,,,,,,
Sol-14188,,,,,,,
Sol-14189,,,,,,,
Sol-14190,,,,,,,
Sol-14191,,,,,,,
Sol-14192,,,,,,,
Sol-14193,,,,,,,
Sol-14194,,,,,,,
Sol-14195,,,,,,,
Sol-14196,,,,,,,
Sol-14197,,,,,,,
Sol-14198,,,,,,,
Sol-14199,,,,,,,
Sol-14200,,,,,,,
Sol-14201,,,,,,,
Sol-14202,,,,,,,
Sol-14203,,,,,,,
Sol-14204,,,,,,,
Sol-14205,,,,,,,
Sol-14206,,,,,,,
Sol-14207,,,,,,,
Sol-14208,,,,,,,
Sol-14209,,,,,,,
Sol-14210,,,,,,,
Sol-14211,,,,,,,
Sol-14212,,,,,,,
Sol-14213,,,,,,,
Sol-14214,,,,,,,
Sol-14215,,,,,,,
Sol-14216,,,,,,,
Sol-14217,,,,,,,
Sol-14218,,,,,,,
Sol-14219,,,,,,,
Sol-14220,,,,,,,
Sol-14221,,,,,,,
Sol-14222,,,,,,,
Sol-14223,,,,,,,
Sol-14224,,,,,,,
Sol-14225,,,,,,,
Sol-14226,,,,,,,
Sol-14227,,,,,,,
Sol-14228,,,,,,,
Sol-14229,,,,,,,
Sol-14230,,,,,,,
Sol-14231,,,,,,,
Sol-14232,,,,,,,
Sol-14233,,,,,,,
Sol-14234,,,,,,,
Sol-14235,,,,,,,
Sol-14236,,,,,,,
Sol-14237,,,,,,,
Sol-14238,,,,,,,
Sol-14239,,,,,,,
Sol-14240,,,,,,,
Sol-14241,,,,,,,
Sol-14242,,,,,,,
Sol-14243,,,,,,,
Sol-14244,,,,,,,
Sol-14245,,,,,,,
Sol-14246,,,,,,,
Sol-14247,,,,,,,
Sol-14248,,,,,,,
Sol-14249,,,,,,,
Sol-14250,,,,,,,
Sol-14251,,,,,,,
Sol-14252,,,,,,,
Sol-14253,,,,,,,
Sol-14254,,,,,,,
Sol-14255,,,,,,,
Sol-14256,,,,,,,
Sol-14257,,,,,,,
Sol-14258,,,,,,,
Sol-14259,,,,,,,
Sol-14260,,,,,,,
Sol-14261,,,,,,,
Sol-14262,,,,,,,
Sol-14263,,,,,,,
Sol-14264,,,,,,,
Sol-14265,,,,,,,
Sol-14266,,,,,,,
Sol-14267,,,,,,,
Sol-14268,,,,,,,
Sol-14269,,,,,,,
Sol-14270,,,,,,,
Sol-14271,,,,,,,
Sol-14272,,,,,,,
Sol-14273,,,,,,,
Sol-14274,,,,,,,
Sol-14275,,,,,,,
Sol-14276,,,,,,,
Sol-14277,,,,,,,
Sol-14278,,,,,,,
Sol-14279,,,,,,,
Sol-14280,,,,,,,
Sol-14281,,,,,,,
Sol-14282,,,,,,,
Sol-14283,,,,,,,
Sol-14284,,,,,,,
Sol-14285,,,,,,,
Sol-14286,,,,,,,
Sol-14287,,,,,,,
Sol-14288,,,,,,,
Sol-14289,,,,,,,
Sol-14290,,,,,,,
Sol-14291,,,,,,,
Sol-14292,,,,,,,
Sol-14293,,,,,,,
Sol-14294,,,,,,,
Sol-14295,,,,,,,
Sol-14296,,,,,,,
Sol-14297,,,,,,,
Sol-14298,,,,,,,
Sol-14299,,,,,,,
Sol-14300,,,,,,,
Sol-14301,,,,,,,
Sol-14302,,,,,,,
Sol-14303,,,,,,,
Sol-14304,,,,,,,
Sol-14305,,,,,,,
Sol-14306,,,,,,,
Sol-14307,,,,,,,
Sol-14308,,,,,,,
Sol-14309,,,,,,,
Sol-14310,,,,,,,
Sol-14311,,,,,,,
Sol-14312,,,,,,,
Sol-14313,,,,,,,
Sol-14314,,,,,,,
Sol-14315,,,,,,,
Sol-14316,,,,,,,
Sol-14317,,,,,,,
Sol-14318,,,,,,,
Sol-14319,,,,,,,
Sol-14320,,,,,,,
Sol-14321,,,,,,,
Sol-14322,,,,,,,
Sol-14323,,,,,,,
Sol-14324,,,,,,,
Sol-14325,,,,,,,
Sol-14326,,,,,,,
Sol-14327,,,,,,,
Sol-14328,,,,,,,
Sol-14329,,,,,,,
Sol-14330,,,,,,,
Sol-14331,,,,,,,
Sol-14332,,,,,,,
Sol-14333,,,,,,,
Sol-14334,,,,,,,
Sol-14335,,,,,,,
Sol-14336,,,,,,,
Sol-14337,,,,,,,
Sol-14338,,,,,,,
Sol-14339,,,,,,,
Sol-14340,,,,,,,
Sol-14341,,,,,,,
Sol-14342,,,,,,,
Sol-14343,,,,,,,
Sol-14344,,,,,,,
Sol-14345,,,,,,,
Sol-14346,,,,,,,
Sol-14347,,,,,,,
Sol-14348,,,,,,,
Sol-14349,,,,,,,
Sol-14350,,,,,,,
Sol-14351,,,,,,,
Sol-14352,,,,,,,
Sol-14353,,,,,,,
Sol-14354,,,,,,,
Sol-14355,,,,,,,
Sol-14356,,,,,,,
Sol-14357,,,,,,,
Sol-14358,,,,,,,
Sol-14359,,,,,,,
Sol-14360,,,,,,,
Sol-14361,,,,,,,
Sol-14362,,,,,,,
Sol-14363,,,,,,,
Sol-14364,,,,,,,
Sol-14365,,,,,,,
Sol-14366,,,,,,,
Sol-14367,,,,,,,
Sol-14368,,,,,,,
Sol-14369,,,,,,,
Sol-14370,,,,,,,
Sol-14371,,,,,,,
Sol-14372,,,,,,,
Sol-14373,,,,,,,
Sol-14374,,,,,,,
Sol-14375,,,,,,,
Sol-14376,,,,,,,
Sol-14377,,,,,,,
Sol-14378,,,,,,,
Sol-14379,,,,,,,
Sol-14380,,,,,,,
Sol-14381,,,,,,,
Sol-14382,,,,,,,
Sol-14383,,,,,,,
Sol-14384,,,,,,,
Sol-14385,,,,,,,
Sol-14386,,,,,,,
Sol-14387,,,,,,,
Sol-14388,,,,,,,
Sol-14389,,,,,,,
Sol-14390,,,,,,,
Sol-14391,,,,,,,
Sol-14392,,,,,,,
Sol-14393,,,,,,,
Sol-14394,,,,,,,
Sol-14395,,,,,,,
Sol-14396,,,,,,,
Sol-14397,,,,,,,
Sol-14398,,,,,,,
Sol-14399,,,,,,,
Sol-14400,,,,,,,
Sol-14401,,,,,,,
Sol-14402,,,,,,,
Sol-14403,,,,,,,
Sol-14404,,,,,,,
Sol-14405,,,,,,,
Sol-14406,,,,,,,
Sol-14407,,,,,,,
Sol-14408,,,,,,,
Sol-14409,,,,,,,
Sol-14410,,,,,,,
Sol-14411,,,,,,,
Sol-14412,,,,,,,
Sol-14413,,,,,,,
Sol-14414,,,,,,,
Sol-14415,,,,,,,
Sol-14416,,,,,,,
Sol-14417,,,,,,,
Sol-14418,,,,,,,
Sol-14419,,,,,,,
Sol-14420,,,,,,,
Sol-14421,,,,,,,
Sol-14422,,,,,,,
Sol-14423,,,,,,,
Sol-14424,,,,,,,
Sol-14425,,,,,,,
Sol-14426,,,,,,,
Sol-14427,,,,,,,
Sol-14428,,,,,,,
Sol-14429,,,,,,,
Sol-14430,,,,,,,
Sol-14431,,,,,,,
Sol-14432,,,,,,,
Sol-14433,,,,,,,
Sol-14434,,,,,,,
Sol-14435,,,,,,,
Sol-14436,,,,,,,
Sol-14437,,,,,,,
Sol-14438,,,,,,,
Sol-14439,,,,,,,
Sol-14440,,,,,,,
Sol-14441,,,,,,,
Sol-14442,,,,,,,
Sol-14443,,,,,,,
Sol-14444,,,,,,,
Sol-14445,,,,,,,
Sol-14446,,,,,,,
Sol-14447,,,,,,,
Sol-14448,,,,,,,
Sol-14449,,,,,,,
Sol-14450,,,,,,,
Sol-14451,,,,,,,
Sol-14452,,,,,,,
Sol-14453,,,,,,,
Sol-14454,,,,,,,
Sol-14455,,,,,,,
Sol-14456,,,,,,,
Sol-14457,,,,,,,
Sol-14458,,,,,,,
Sol-14459,,,,,,,
Sol-14460,,,,,,,
Sol-14461,,,,,,,
Sol-14462,,,,,,,
Sol-14463,,,,,,,
Sol-14464,,,,,,,
Sol-14465,,,,,,,
Sol-14466,,,,,,,
Sol-14467,,,,,,,
Sol-14468,,,,,,,
Sol-14469,,,,,,,
Sol-14470,,,,,,,
Sol-14471,,,,,,,
Sol-14472,,,,,,,
Sol-14473,,,,,,,
Sol-14474,,,,,,,
Sol-14475,,,,,,,
Sol-14476,,,,,,,
Sol-14477,,,,,,,
Sol-14478,,,,,,,
Sol-14479,,,,,,,
Sol-14480,,,,,,,
Sol-14481,,,,,,,
Sol-14482,,,,,,,
Sol-14483,,,,,,,
Sol-14484,,,,,,,
Sol-14485,,,,,,,
Sol-14486,,,,,,,
Sol-14487,,,,,,,
Sol-14488,,,,,,,
Sol-14489,,,,,,,
Sol-14490,,,,,,,
Sol-14491,,,,,,,
Sol-14492,,,,,,,
Sol-14493,,,,,,,
Sol-14494,,,,,,,
Sol-14495,,,,,,,
Sol-14496,,,,,,,
Sol-14497,,,,,,,
Sol-14498,,,,,,,
Sol-14499,,,,,,,
Sol-14500,,,,,,,
Sol-14501,,,,,,,
Sol-14502,,,,,,,
Sol-14503,,,,,,,
Sol-14504,,,,,,,
Sol-14505,,,,,,,
Sol-14506,,,,,,,
Sol-14507,,,,,,,
Sol-14508,,,,,,,
Sol-14509,,,,,,,
Sol-14510,,,,,,,
Sol-14511,,,,,,,
Sol-14512,,,,,,,
Sol-14513,,,,,,,
Sol-14514,,,,,,,
Sol-14515,,,,,,,
Sol-14516,,,,,,,
Sol-14517,,,,,,,
Sol-14518,,,,,,,
Sol-14519,,,,,,,
Sol-14520,,,,,,,
Sol-14521,,,,,,,
Sol-14522,,,,,,,
Sol-14523,,,,,,,
Sol-14524,,,,,,,
Sol-14525,,,,,,,
Sol-14526,,,,,,,
Sol-14527,,,,,,,
Sol-14528,,,,,,,
Sol-14529,,,,,,,
Sol-14530,,,,,,,
Sol-14531,,,,,,,
Sol-14532,,,,,,,
Sol-14533,,,,,,,
Sol-14534,,,,,,,
Sol-14535,,,,,,,
Sol-14536,,,,,,,
Sol-14537,,,,,,,
Sol-14538,,,,,,,
Sol-14539,,,,,,,
Sol-14540,,,,,,,
Sol-14541,,,,,,,
Sol-14542,,,,,,,
Sol-14543,,,,,,,
Sol-14544,,,,,,,
Sol-14545,,,,,,,
Sol-14546,,,,,,,
Sol-14547,,,,,,,
Sol-14548,,,,,,,
Sol-14549,,,,,,,
Sol-14550,,,,,,,
Sol-14551,,,,,,,
Sol-14552,,,,,,,
Sol-14553,,,,,,,
Sol-14554,,,,,,,
Sol-14555,,,,,,,
Sol-14556,,,,,,,
Sol-14557,,,,,,,
Sol-14558,,,,,,,
Sol-14559,,,,,,,
Sol-14560,,,,,,,
Sol-14561,,,,,,,
Sol-14562,,,,,,,
Sol-14563,,,,,,,
Sol-14564,,,,,,,
Sol-14565,,,,,,,
Sol-14566,,,,,,,
Sol-14567,,,,,,,
Sol-14568,,,,,,,
Sol-14569,,,,,,,
Sol-14570,,,,,,,
Sol-14571,,,,,,,
Sol-14572,,,,,,,
Sol-14573,,,,,,,
Sol-14574,,,,,,,
Sol-14575,,,,,,,
Sol-14576,,,,,,,
Sol-14577,,,,,,,
Sol-14578,,,,,,,
Sol-14579,,,,,,,
Sol-14580,,,,,,,
Sol-14581,,,,,,,
Sol-14582,,,,,,,
Sol-14583,,,,,,,
Sol-14584,,,,,,,
Sol-14585,,,,,,,
Sol-14586,,,,,,,
Sol-14587,,,,,,,
Sol-14588,,,,,,,
Sol-14589,,,,,,,
Sol-14590,,,,,,,
Sol-14591,,,,,,,
Sol-14592,,,,,,,
Sol-14593,,,,,,,
Sol-14594,,,,,,,
Sol-14595,,,,,,,
Sol-14596,,,,,,,
Sol-14597,,,,,,,
Sol-14598,,,,,,,
Sol-14599,,,,,,,
Sol-14600,,,,,,,
Sol-14601,,,,,,,
Sol-14602,,,,,,,
Sol-14603,,,,,,,
Sol-14604,,,,,,,
Sol-14605,,,,,,,
Sol-14606,,,,,,,
Sol-14607,,,,,,,
Sol-14608,,,,,,,
Sol-14609,,,,,,,
Sol-14610,,,,,,,
Sol-14611,,,,,,,
Sol-14612,,,,,,,
Sol-14613,,,,,,,
Sol-14614,,,,,,,
Sol-14615,,,,,,,
Sol-14616,,,,,,,
Sol-14617,,,,,,,
Sol-14618,,,,,,,
Sol-14619,,,,,,,
Sol-14620,,,,,,,
Sol-14621,,,,,,,
Sol-14622,,,,,,,
Sol-14623,,,,,,,
Sol-14624,,,,,,,
Sol-14625,,,,,,,
Sol-14626,,,,,,,
Sol-14627,,,,,,,
Sol-14628,,,,,,,
Sol-14629,,,,,,,
Sol-14630,,,,,,,
Sol-14631,,,,,,,
Sol-14632,,,,,,,
Sol-14633,,,,,,,
Sol-14634,,,,,,,
Sol-14635,,,,,,,
Sol-14636,,,,,,,
Sol-14637,,,,,,,
Sol-14638,,,,,,,
Sol-14639,,,,,,,
Sol-14640,,,,,,,
Sol-14641,,,,,,,
Sol-14642,,,,,,,
Sol-14643,,,,,,,
Sol-14644,,,,,,,
Sol-14645,,,,,,,
Sol-14646,,,,,,,
Sol-14647,,,,,,,
Sol-14648,,,,,,,
Sol-14649,,,,,,,
Sol-14650,,,,,,,
Sol-14651,,,,,,,
Sol-14652,,,,,,,
Sol-14653,,,,,,,
Sol-14654,,,,,,,
Sol-14655,,,,,,,
Sol-14656,,,,,,,
Sol-14657,,,,,,,
Sol-14658,,,,,,,
Sol-14659,,,,,,,
Sol-14660,,,,,,,
Sol-14661,,,,,,,
Sol-14662,,,,,,,
Sol-14663,,,,,,,
Sol-14664,,,,,,,
Sol-14665,,,,,,,
Sol-14666,,,,,,,
Sol-14667,,,,,,,
Sol-14668,,,,,,,
Sol-14669,,,,,,,
Sol-14670,,,,,,,
Sol-14671,,,,,,,
Sol-14672,,,,,,,
Sol-14673,,,,,,,
Sol-14674,,,,,,,
Sol-14675,,,,,,,
Sol-14676,,,,,,,
Sol-14677,,,,,,,
Sol-14678,,,,,,,
Sol-14679,,,,,,,
Sol-14680,,,,,,,
Sol-14681,,,,,,,
Sol-14682,,,,,,,
Sol-14683,,,,,,,
Sol-14684,,,,,,,
Sol-14685,,,,,,,
Sol-14686,,,,,,,
Sol-14687,,,,,,,
Sol-14688,,,,,,,
Sol-14689,,,,,,,
Sol-14690,,,,,,,
Sol-14691,,,,,,,
Sol-14692,,,,,,,
Sol-14693,,,,,,,
Sol-14694,,,,,,,
Sol-14695,,,,,,,
Sol-14696,,,,,,,
Sol-14697,,,,,,,
Sol-14698,,,,,,,
Sol-14699,,,,,,,
Sol-14700,,,,,,,
Sol-14701,,,,,,,
Sol-14702,,,,,,,
Sol-14703,,,,,,,
Sol-14704,,,,,,,
Sol-14705,,,,,,,
Sol-14706,,,,,,,
Sol-14707,,,,,,,
Sol-14708,,,,,,,
Sol-14709,,,,,,,
Sol-14710,,,,,,,
Sol-14711,,,,,,,
Sol-14712,,,,,,,
Sol-14713,,,,,,,
Sol-14714,,,,,,,
Sol-14715,,,,,,,
Sol-14716,,,,,,,
Sol-14717,,,,,,,
Sol-14718,,,,,,,
Sol-14719,,,,,,,
Sol-14720,,,,,,,
Sol-14721,,,,,,,
Sol-14722,,,,,,,
Sol-14723,,,,,,,
Sol-14724,,,,,,,
Sol-14725,,,,,,,
Sol-14726,,,,,,,
Sol-14727,,,,,,,
Sol-14728,,,,,,,
Sol-14729,,,,,,,
Sol-14730,,,,,,,
Sol-14731,,,,,,,
Sol-14732,,,,,,,
Sol-14733,,,,,,,
Sol-14734,,,,,,,
Sol-14735,,,,,,,
Sol-14736,,,,,,,
Sol-14737,,,,,,,
Sol-14738,,,,,,,
Sol-14739,,,,,,,
Sol-14740,,,,,,,
Sol-14741,,,,,,,
Sol-14742,,,,,,,
Sol-14743,,,,,,,
Sol-14744,,,,,,,
Sol-14745,,,,,,,
Sol-14746,,,,,,,
Sol-14747,,,,,,,
Sol-14748,,,,,,,
Sol-14749,,,,,,,
Sol-14750,,,,,,,
Sol-14751,,,,,,,
Sol-14752,,,,,,,
Sol-14753,,,,,,,
Sol-14754,,,,,,,
Sol-14755,,,,,,,
Sol-14756,,,,,,,
Sol-14757,,,,,,,
Sol-14758,,,,,,,
Sol-14759,,,,,,,
Sol-14760,,,,,,,
Sol-14761,,,,,,,
Sol-14762,,,,,,,
Sol-14763,,,,,,,
Sol-14764,,,,,,,
Sol-14765,,,,,,,
Sol-14766,,,,,,,
Sol-14767,,,,,,,
Sol-14768,,,,,,,
Sol-14769,,,,,,,
Sol-14770,,,,,,,
Sol-14771,,,,,,,
Sol-14772,,,,,,,
Sol-14773,,,,,,,
Sol-14774,,,,,,,
Sol-14775,,,,,,,
Sol-14776,,,,,,,
Sol-14777,,,,,,,
Sol-14778,,,,,,,
Sol-14779,,,,,,,
Sol-14780,,,,,,,
Sol-14781,,,,,,,
Sol-14782,,,,,,,
Sol-14783,,,,,,,
Sol-14784,,,,,,,
Sol-14785,,,,,,,
Sol-14786,,,,,,,
Sol-14787,,,,,,,
Sol-14788,,,,,,,
Sol-14789,,,,,,,
Sol-14790,,,,,,,
Sol-14791,,,,,,,
Sol-14792,,,,,,,
Sol-14793,,,,,,,
Sol-14794,,,,,,,
Sol-14795,,,,,,,
Sol-14796,,,,,,,
Sol-14797,,,,,,,
Sol-14798,,,,,,,
Sol-14799,,,,,,,
Sol-14800,,,,,,,
Sol-14801,,,,,,,
Sol-14802,,,,,,,
Sol-14803,,,,,,,
Sol-14804,,,,,,,
Sol-14805,,,,,,,
Sol-14806,,,,,,,
Sol-14807,,,,,,,
Sol-14808,,,,,,,
Sol-14809,,,,,,,
Sol-14810,,,,,,,
Sol-14811,,,,,,,
Sol-14812,,,,,,,
Sol-14813,,,,,,,
Sol-14814,,,,,,,
Sol-14815,,,,,,,
Sol-14816,,,,,,,
Sol-14817,,,,,,,
Sol-14818,,,,,,,
Sol-14819,,,,,,,
Sol-14820,,,,,,,
Sol-14821,,,,,,,
Sol-14822,,,,,,,
Sol-14823,,,,,,,
Sol-14824,,,,,,,
Sol-14825,,,,,,,
Sol-14826,,,,,,,
Sol-14827,,,,,,,
Sol-14828,,,,,,,
Sol-14829,,,,,,,
Sol-14830,,,,,,,
Sol-14831,,,,,,,
Sol-14832,,,,,,,
Sol-14833,,,,,,,
Sol-14834,,,,,,,
Sol-14835,,,,,,,
Sol-14836,,,,,,,
Sol-14837,,,,,,,
Sol-14838,,,,,,,
Sol-14839,,,,,,,
Sol-14840,,,,,,,
Sol-14841,,,,,,,
Sol-14842,,,,,,,
Sol-14843,,,,,,,
Sol-14844,,,,,,,
Sol-14845,,,,,,,
Sol-14846,,,,,,,
Sol-14847,,,,,,,
Sol-14848,,,,,,,
Sol-14849,,,,,,,
Sol-14850,,,,,,,
Sol-14851,,,,,,,
Sol-14852,,,,,,,
Sol-14853,,,,,,,
Sol-14854,,,,,,,
Sol-14855,,,,,,,
Sol-14856,,,,,,,
Sol-14857,,,,,,,
Sol-14858,,,,,,,
Sol-14859,,,,,,,
Sol-14860,,,,,,,
Sol-14861,,,,,,,
Sol-14862,,,,,,,
Sol-14863,,,,,,,
Sol-14864,,,,,,,
Sol-14865,,,,,,,
Sol-14866,,,,,,,
Sol-14867,,,,,,,
Sol-14868,,,,,,,
Sol-14869,,,,,,,
Sol-14870,,,,,,,
Sol-14871,,,,,,,
Sol-14872,,,,,,,
Sol-14873,,,,,,,
Sol-14874,,,,,,,
Sol-14875,,,,,,,
Sol-14876,,,,,,,
Sol-14877,,,,,,,
Sol-14878,,,,,,,
Sol-14879,,,,,,,
Sol-14880,,,,,,,
Sol-14881,,,,,,,
Sol-14882,,,,,,,
Sol-14883,,,,,,,
Sol-14884,,,,,,,
Sol-14885,,,,,,,
Sol-14886,,,,,,,
Sol-14887,,,,,,,
Sol-14888,,,,,,,
Sol-14889,,,,,,,
Sol-14890,,,,,,,
Sol-14891,,,,,,,
Sol-14892,,,,,,,
Sol-14893,,,,,,,
Sol-14894,,,,,,,
Sol-14895,,,,,,,
Sol-14896,,,,,,,
Sol-14897,,,,,,,
Sol-14898,,,,,,,
Sol-14899,,,,,,,
Sol-14900,,,,,,,
Sol-14901,,,,,,,
Sol-14902,,,,,,,
Sol-14903,,,,,,,
Sol-14904,,,,,,,
Sol-14905,,,,,,,
Sol-14906,,,,,,,
Sol-14907,,,,,,,
Sol-14908,,,,,,,
Sol-14909,,,,,,,
Sol-14910,,,,,,,
Sol-14911,,,,,,,
Sol-14912,,,,,,,
Sol-14913,,,,,,,
Sol-14914,,,,,,,
Sol-14915,,,,,,,
Sol-14916,,,,,,,
Sol-14917,,,,,,,
Sol-14918,,,,,,,
Sol-14919,,,,,,,
Sol-14920,,,,,,,
Sol-14921,,,,,,,
Sol-14922,,,,,,,
Sol-14923,,,,,,,
Sol-14924,,,,,,,
Sol-14925,,,,,,,
Sol-14926,,,,,,,
Sol-14927,,,,,,,
Sol-14928,,,,,,,
Sol-14929,,,,,,,
Sol-14930,,,,,,,
Sol-14931,,,,,,,
Sol-14932,,,,,,,
Sol-14933,,,,,,,
Sol-14934,,,,,,,
Sol-14935,,,,,,,
Sol-14936,,,,,,,
Sol-14937,,,,,,,
Sol-14938,,,,,,,
Sol-14939,,,,,,,
Sol-14940,,,,,,,
Sol-14941,,,,,,,
Sol-14942,,,,,,,
Sol-14943,,,,,,,
Sol-14944,,,,,,,
Sol-14945,,,,,,,
Sol-14946,,,,,,,
Sol-14947,,,,,,,
Sol-14948,,,,,,,
Sol-14949,,,,,,,
Sol-14950,,,,,,,
Sol-14951,,,,,,,
Sol-14952,,,,,,,
Sol-14953,,,,,,,
Sol-14954,,,,,,,
Sol-14955,,,,,,,
Sol-14956,,,,,,,
Sol-14957,,,,,,,
Sol-14958,,,,,,,
Sol-14959,,,,,,,
Sol-14960,,,,,,,
Sol-14961,,,,,,,
Sol-14962,,,,,,,
Sol-14963,,,,,,,
Sol-14964,,,,,,,
Sol-14965,,,,,,,
Sol-14966,,,,,,,
Sol-14967,,,,,,,
Sol-14968,,,,,,,
Sol-14969,,,,,,,
Sol-14970,,,,,,,
Sol-14971,,,,,,,
Sol-14972,,,,,,,
Sol-14973,,,,,,,
Sol-14974,,,,,,,
Sol-14975,,,,,,,
Sol-14976,,,,,,,
Sol-14977,,,,,,,
Sol-14978,,,,,,,
Sol-14979,,,,,,,
Sol-14980,,,,,,,
Sol-14981,,,,,,,
Sol-14982,,,,,,,
Sol-14983,,,,,,,
Sol-14984,,,,,,,
Sol-14985,,,,,,,
Sol-14986,,,,,,,
Sol-14987,,,,,,,
Sol-14988,,,,,,,
Sol-14989,,,,,,,
Sol-14990,,,,,,,
Sol-14991,,,,,,,
Sol-14992,,,,,,,
Sol-14993,,,,,,,
Sol-14994,,,,,,,
Sol-14995,,,,,,,
Sol-14996,,,,,,,
Sol-14997,,,,,,,
Sol-14998,,,,,,,
Sol-14999,,,,,,,
Sol-15000,,,,,,,
Sol-15001,,,,,,,
Sol-15002,,,,,,,
Sol-15003,,,,,,,
Sol-15004,,,,,,,
Sol-15005,,,,,,,
Sol-15006,,,,,,,
Sol-15007,,,,,,,
Sol-15008,,,,,,,
Sol-15009,,,,,,,
Sol-15010,,,,,,,
Sol-15011,,,,,,,
Sol-15012,,,,,,,
Sol-15013,,,,,,,
Sol-15014,,,,,,,
Sol-15015,,,,,,,
Sol-15016,,,,,,,
Sol-15017,,,,,,,
Sol-15018,,,,,,,
Sol-15019,,,,,,,
Sol-15020,,,,,,,
Sol-15021,,,,,,,
Sol-15022,,,,,,,
Sol-15023,,,,,,,
Sol-15024,,,,,,,
Sol-15025,,,,,,,
Sol-15026,,,,,,,
Sol-15027,,,,,,,
Sol-15028,,,,,,,
Sol-15029,,,,,,,
Sol-15030,,,,,,,
Sol-15031,,,,,,,
Sol-15032,,,,,,,
Sol-15033,,,,,,,
Sol-15034,,,,,,,
Sol-15035,,,,,,,
Sol-15036,,,,,,,
Sol-15037,,,,,,,
Sol-15038,,,,,,,
Sol-15039,,,,,,,
Sol-15040,,,,,,,
Sol-15041,,,,,,,
Sol-15042,,,,,,,
Sol-15043,,,,,,,
Sol-15044,,,,,,,
Sol-15045,,,,,,,
Sol-15046,,,,,,,
Sol-15047,,,,,,,
Sol-15048,,,,,,,
Sol-15049,,,,,,,
Sol-15050,,,,,,,
Sol-15051,,,,,,,
Sol-15052,,,,,,,
Sol-15053,,,,,,,
Sol-15054,,,,,,,
Sol-15055,,,,,,,
Sol-15056,,,,,,,
Sol-15057,,,,,,,
Sol-15058,,,,,,,
Sol-15059,,,,,,,
Sol-15060,,,,,,,
Sol-15061,,,,,,,
Sol-15062,,,,,,,
Sol-15063,,,,,,,
Sol-15064,,,,,,,
Sol-15065,,,,,,,
Sol-15066,,,,,,,
Sol-15067,,,,,,,
Sol-15068,,,,,,,
Sol-15069,,,,,,,
Sol-15070,,,,,,,
Sol-15071,,,,,,,
Sol-15072,,,,,,,
Sol-15073,,,,,,,
Sol-15074,,,,,,,
Sol-15075,,,,,,,
Sol-15076,,,,,,,
Sol-15077,,,,,,,
Sol-15078,,,,,,,
Sol-15079,,,,,,,
Sol-15080,,,,,,,
Sol-15081,,,,,,,
Sol-15082,,,,,,,
Sol-15083,,,,,,,
Sol-15084,,,,,,,
Sol-15085,,,,,,,
Sol-15086,,,,,,,
Sol-15087,,,,,,,
Sol-15088,,,,,,,
Sol-15089,,,,,,,
Sol-15090,,,,,,,
Sol-15091,,,,,,,
Sol-15092,,,,,,,
Sol-15093,,,,,,,
Sol-15094,,,,,,,
Sol-15095,,,,,,,
Sol-15096,,,,,,,
Sol-15097,,,,,,,
Sol-15098,,,,,,,
Sol-15099,,,,,,,
Sol-15100,,,,,,,
Sol-15101,,,,,,,
Sol-15102,,,,,,,
Sol-15103,,,,,,,
Sol-15104,,,,,,,
Sol-15105,,,,,,,
Sol-15106,,,,,,,
Sol-15107,,,,,,,
Sol-15108,,,,,,,
Sol-15109,,,,,,,
Sol-15110,,,,,,,
Sol-15111,,,,,,,
Sol-15112,,,,,,,
Sol-15113,,,,,,,
Sol-15114,,,,,,,
Sol-15115,,,,,,,
Sol-15116,,,,,,,
Sol-15117,,,,,,,
Sol-15118,,,,,,,
Sol-15119,,,,,,,
Sol-15120,,,,,,,
Sol-15121,,,,,,,
Sol-15122,,,,,,,
Sol-15123,,,,,,,
Sol-15124,,,,,,,
Sol-15125,,,,,,,
Sol-15126,,,,,,,
Sol-15127,,,,,,,
Sol-15128,,,,,,,
Sol-15129,,,,,,,
Sol-15130,,,,,,,
Sol-15131,,,,,,,
Sol-15132,,,,,,,
Sol-15133,,,,,,,
Sol-15134,,,,,,,
Sol-15135,,,,,,,
Sol-15136,,,,,,,
Sol-15137,,,,,,,
Sol-15138,,,,,,,
Sol-15139,,,,,,,
Sol-15140,,,,,,,
Sol-15141,,,,,,,
Sol-15142,,,,,,,
Sol-15143,,,,,,,
Sol-15144,,,,,,,
Sol-15145,,,,,,,
Sol-15146,,,,,,,
Sol-15147,,,,,,,
Sol-15148,,,,,,,
Sol-15149,,,,,,,
Sol-15150,,,,,,,
Sol-15151,,,,,,,
Sol-15152,,,,,,,
Sol-15153,,,,,,,
Sol-15154,,,,,,,
Sol-15155,,,,,,,
Sol-15156,,,,,,,
Sol-15157,,,,,,,
Sol-15158,,,,,,,
Sol-15159,,,,,,,
Sol-15160,,,,,,,
Sol-15161,,,,,,,
Sol-15162,,,,,,,
Sol-15163,,,,,,,
Sol-15164,,,,,,,
Sol-15165,,,,,,,
Sol-15166,,,,,,,
Sol-15167,,,,,,,
Sol-15168,,,,,,,
Sol-15169,,,,,,,
Sol-15170,,,,,,,
Sol-15171,,,,,,,
Sol-15172,,,,,,,
Sol-15173,,,,,,,
Sol-15174,,,,,,,
Sol-15175,,,,,,,
Sol-15176,,,,,,,
Sol-15177,,,,,,,
Sol-15178,,,,,,,
Sol-15179,,,,,,,
Sol-15180,,,,,,,
Sol-15181,,,,,,,
Sol-15182,,,,,,,
Sol-15183,,,,,,,
Sol-15184,,,,,,,
Sol-15185,,,,,,,
Sol-15186,,,,,,,
Sol-15187,,,,,,,
Sol-15188,,,,,,,
Sol-15189,,,,,,,
Sol-15190,,,,,,,
Sol-15191,,,,,,,
Sol-15192,,,,,,,
Sol-15193,,,,,,,
Sol-15194,,,,,,,
Sol-15195,,,,,,,
Sol-15196,,,,,,,
Sol-15197,,,,,,,
Sol-15198,,,,,,,
Sol-15199,,,,,,,
Sol-15200,,,,,,,
Sol-15201,,,,,,,
Sol-15202,,,,,,,
Sol-15203,,,,,,,
Sol-15204,,,,,,,
Sol-15205,,,,,,,
Sol-15206,,,,,,,
Sol-15207,,,,,,,
Sol-15208,,,,,,,
Sol-15209,,,,,,,
Sol-15210,,,,,,,
Sol-15211,,,,,,,
Sol-15212,,,,,,,
Sol-15213,,,,,,,
Sol-15214,,,,,,,
Sol-15215,,,,,,,
Sol-15216,,,,,,,
Sol-15217,,,,,,,
Sol-15218,,,,,,,
Sol-15219,,,,,,,
Sol-15220,,,,,,,
Sol-15221,,,,,,,
Sol-15222,,,,,,,
Sol-15223,,,,,,,
Sol-15224,,,,,,,
Sol-15225,,,,,,,
Sol-15226,,,,,,,
Sol-15227,,,,,,,
Sol-15228,,,,,,,
Sol-15229,,,,,,,
Sol-15230,,,,,,,
Sol-15231,,,,,,,
Sol-15232,,,,,,,
Sol-15233,,,,,,,
Sol-15234,,,,,,,
Sol-15235,,,,,,,
Sol-15236,,,,,,,
Sol-15237,,,,,,,
Sol-15238,,,,,,,
Sol-15239,,,,,,,
Sol-15240,,,,,,,
Sol-15241,,,,,,,
Sol-15242,,,,,,,
Sol-15243,,,,,,,
Sol-15244,,,,,,,
Sol-15245,,,,,,,
Sol-15246,,,,,,,
Sol-15247,,,,,,,
Sol-15248,,,,,,,
Sol-15249,,,,,,,
Sol-15250,,,,,,,
Sol-15251,,,,,,,
Sol-15252,,,,,,,
Sol-15253,,,,,,,
Sol-15254,,,,,,,
Sol-15255,,,,,,,
Sol-15256,,,,,,,
Sol-15257,,,,,,,
Sol-15258,,,,,,,
Sol-15259,,,,,,,
Sol-15260,,,,,,,
Sol-15261,,,,,,,
Sol-15262,,,,,,,
Sol-15263,,,,,,,
Sol-15264,,,,,,,
Sol-15265,,,,,,,
Sol-15266,,,,,,,
Sol-15267,,,,,,,
Sol-15268,,,,,,,
Sol-15269,,,,,,,
Sol-15270,,,,,,,
Sol-15271,,,,,,,
Sol-15272,,,,,,,
Sol-15273,,,,,,,
Sol-15274,,,,,,,
Sol-15275,,,,,,,
Sol-15276,,,,,,,
Sol-15277,,,,,,,
Sol-15278,,,,,,,
Sol-15279,,,,,,,
Sol-15280,,,,,,,
Sol-15281,,,,,,,
Sol-15282,,,,,,,
Sol-15283,,,,,,,
Sol-15284,,,,,,,
Sol-15285,,,,,,,
Sol-15286,,,,,,,
Sol-15287,,,,,,,
Sol-15288,,,,,,,
Sol-15289,,,,,,,
Sol-15290,,,,,,,
Sol-15291,,,,,,,
Sol-15292,,,,,,,
Sol-15293,,,,,,,
Sol-15294,,,,,,,
Sol-15295,,,,,,,
Sol-15296,,,,,,,
Sol-15297,,,,,,,
Sol-15298,,,,,,,
Sol-15299,,,,,,,
Sol-15300,,,,,,,
Sol-15301,,,,,,,
Sol-15302,,,,,,,
Sol-15303,,,,,,,
Sol-15304,,,,,,,
Sol-15305,,,,,,,
Sol-15306,,,,,,,
Sol-15307,,,,,,,
Sol-15308,,,,,,,
Sol-15309,,,,,,,
Sol-15310,,,,,,,
Sol-15311,,,,,,,
Sol-15312,,,,,,,
Sol-15313,,,,,,,
Sol-15314,,,,,,,
Sol-15315,,,,,,,
Sol-15316,,,,,,,
Sol-15317,,,,,,,
Sol-15318,,,,,,,
Sol-15319,,,,,,,
Sol-15320,,,,,,,
Sol-15321,,,,,,,
Sol-15322,,,,,,,
Sol-15323,,,,,,,
Sol-15324,,,,,,,
Sol-15325,,,,,,,
Sol-15326,,,,,,,
Sol-15327,,,,,,,
Sol-15328,,,,,,,
Sol-15329,,,,,,,
Sol-15330,,,,,,,
Sol-15331,,,,,,,
Sol-15332,,,,,,,
Sol-15333,,,,,,,
Sol-15334,,,,,,,
Sol-15335,,,,,,,
Sol-15336,,,,,,,
Sol-15337,,,,,,,
Sol-15338,,,,,,,
Sol-15339,,,,,,,
Sol-15340,,,,,,,
Sol-15341,,,,,,,
Sol-15342,,,,,,,
Sol-15343,,,,,,,
Sol-15344,,,,,,,
Sol-15345,,,,,,,
Sol-15346,,,,,,,
Sol-15347,,,,,,,
Sol-15348,,,,,,,
Sol-15349,,,,,,,
Sol-15350,,,,,,,
Sol-15351,,,,,,,
Sol-15352,,,,,,,
Sol-15353,,,,,,,
Sol-15354,,,,,,,
Sol-15355,,,,,,,
Sol-15356,,,,,,,
Sol-15357,,,,,,,
Sol-15358,,,,,,,
Sol-15359,,,,,,,
Sol-15360,,,,,,,
Sol-15361,,,,,,,
Sol-15362,,,,,,,
Sol-15363,,,,,,,
Sol-15364,,,,,,,
Sol-15365,,,,,,,
Sol-15366,,,,,,,
Sol-15367,,,,,,,
Sol-15368,,,,,,,
Sol-15369,,,,,,,
Sol-15370,,,,,,,
Sol-15371,,,,,,,
Sol-15372,,,,,,,
Sol-15373,,,,,,,
Sol-15374,,,,,,,
Sol-15375,,,,,,,
Sol-15376,,,,,,,
Sol-15377,,,,,,,
Sol-15378,,,,,,,
Sol-15379,,,,,,,
Sol-15380,,,,,,,
Sol-15381,,,,,,,
Sol-15382,,,,,,,
Sol-15383,,,,,,,
Sol-15384,,,,,,,
Sol-15385,,,,,,,
Sol-15386,,,,,,,
Sol-15387,,,,,,,
Sol-15388,,,,,,,
Sol-15389,,,,,,,
Sol-15390,,,,,,,
Sol-15391,,,,,,,
Sol-15392,,,,,,,
Sol-15393,,,,,,,
Sol-15394,,,,,,,
Sol-15395,,,,,,,
Sol-15396,,,,,,,
Sol-15397,,,,,,,
Sol-15398,,,,,,,
Sol-15399,,,,,,,
Sol-15400,,,,,,,
Sol-15401,,,,,,,
Sol-15402,,,,,,,
Sol-15403,,,,,,,
Sol-15404,,,,,,,
Sol-15405,,,,,,,
Sol-15406,,,,,,,
Sol-15407,,,,,,,
Sol-15408,,,,,,,
Sol-15409,,,,,,,
Sol-15410,,,,,,,
Sol-15411,,,,,,,
Sol-15412,,,,,,,
Sol-15413,,,,,,,
Sol-15414,,,,,,,
Sol-15415,,,,,,,
Sol-15416,,,,,,,
Sol-15417,,,,,,,
Sol-15418,,,,,,,
Sol-15419,,,,,,,
Sol-15420,,,,,,,
Sol-15421,,,,,,,
Sol-15422,,,,,,,
Sol-15423,,,,,,,
Sol-15424,,,,,,,
Sol-15425,,,,,,,
Sol-15426,,,,,,,
Sol-15427,,,,,,,
Sol-15428,,,,,,,
Sol-15429,,,,,,,
Sol-15430,,,,,,,
Sol-15431,,,,,,,
Sol-15432,,,,,,,
Sol-15433,,,,,,,
Sol-15434,,,,,,,
Sol-15435,,,,,,,
Sol-15436,,,,,,,
Sol-15437,,,,,,,
Sol-15438,,,,,,,
Sol-15439,,,,,,,
Sol-15440,,,,,,,
Sol-15441,,,,,,,
Sol-15442,,,,,,,
Sol-15443,,,,,,,
Sol-15444,,,,,,,
Sol-15445,,,,,,,
Sol-15446,,,,,,,
Sol-15447,,,,,,,
Sol-15448,,,,,,,
Sol-15449,,,,,,,
Sol-15450,,,,,,,
Sol-15451,,,,,,,
Sol-15452,,,,,,,
Sol-15453,,,,,,,
Sol-15454,,,,,,,
Sol-15455,,,,,,,
Sol-15456,,,,,,,
Sol-15457,,,,,,,
Sol-15458,,,,,,,
Sol-15459,,,,,,,
Sol-15460,,,,,,,
Sol-15461,,,,,,,
Sol-15462,,,,,,,
Sol-15463,,,,,,,
Sol-15464,,,,,,,
Sol-15465,,,,,,,
Sol-15466,,,,,,,
Sol-15467,,,,,,,
Sol-15468,,,,,,,
Sol-15469,,,,,,,
Sol-15470,,,,,,,
Sol-15471,,,,,,,
Sol-15472,,,,,,,
Sol-15473,,,,,,,
Sol-15474,,,,,,,
Sol-15475,,,,,,,
Sol-15476,,,,,,,
Sol-15477,,,,,,,
Sol-15478,,,,,,,
Sol-15479,,,,,,,
Sol-15480,,,,,,,
Sol-15481,,,,,,,
Sol-15482,,,,,,,
Sol-15483,,,,,,,
Sol-15484,,,,,,,
Sol-15485,,,,,,,
Sol-15486,,,,,,,
Sol-15487,,,,,,,
Sol-15488,,,,,,,
Sol-15489,,,,,,,
Sol-15490,,,,,,,
Sol-15491,,,,,,,
Sol-15492,,,,,,,
Sol-15493,,,,,,,
Sol-15494,,,,,,,
Sol-15495,,,,,,,
Sol-15496,,,,,,,
Sol-15497,,,,,,,
Sol-15498,,,,,,,
Sol-15499,,,,,,,
Sol-15500,,,,,,,
Sol-15501,,,,,,,
Sol-15502,,,,,,,
Sol-15503,,,,,,,
Sol-15504,,,,,,,
Sol-15505,,,,,,,
Sol-15506,,,,,,,
Sol-15507,,,,,,,
Sol-15508,,,,,,,
Sol-15509,,,,,,,
Sol-15510,,,,,,,
Sol-15511,,,,,,,
Sol-15512,,,,,,,
Sol-15513,,,,,,,
Sol-15514,,,,,,,
Sol-15515,,,,,,,
Sol-15516,,,,,,,
Sol-15517,,,,,,,
Sol-15518,,,,,,,
Sol-15519,,,,,,,
Sol-15520,,,,,,,
Sol-15521,,,,,,,
Sol-15522,,,,,,,
Sol-15523,,,,,,,
Sol-15524,,,,,,,
Sol-15525,,,,,,,
Sol-15526,,,,,,,
Sol-15527,,,,,,,
Sol-15528,,,,,,,
Sol-15529,,,,,,,
Sol-15530,,,,,,,
Sol-15531,,,,,,,
Sol-15532,,,,,,,
Sol-15533,,,,,,,
Sol-15534,,,,,,,
Sol-15535,,,,,,,
Sol-15536,,,,,,,
Sol-15537,,,,,,,
Sol-15538,,,,,,,
Sol-15539,,,,,,,
Sol-15540,,,,,,,
Sol-15541,,,,,,,
Sol-15542,,,,,,,
Sol-15543,,,,,,,
Sol-15544,,,,,,,
Sol-15545,,,,,,,
Sol-15546,,,,,,,
Sol-15547,,,,,,,
Sol-15548,,,,,,,
Sol-15549,,,,,,,
Sol-15550,,,,,,,
Sol-15551,,,,,,,
Sol-15552,,,,,,,
Sol-15553,,,,,,,
Sol-15554,,,,,,,
Sol-15555,,,,,,,
Sol-15556,,,,,,,
Sol-15557,,,,,,,
Sol-15558,,,,,,,
Sol-15559,,,,,,,
Sol-15560,,,,,,,
Sol-15561,,,,,,,
Sol-15562,,,,,,,
Sol-15563,,,,,,,
Sol-15564,,,,,,,
Sol-15565,,,,,,,
Sol-15566,,,,,,,
Sol-15567,,,,,,,
Sol-15568,,,,,,,
Sol-15569,,,,,,,
Sol-15570,,,,,,,
Sol-15571,,,,,,,
Sol-15572,,,,,,,
Sol-15573,,,,,,,
Sol-15574,,,,,,,
Sol-15575,,,,,,,
Sol-15576,,,,,,,
Sol-15577,,,,,,,
Sol-15578,,,,,,,
Sol-15579,,,,,,,
Sol-15580,,,,,,,
Sol-15581,,,,,,,
Sol-15582,,,,,,,
Sol-15583,,,,,,,
Sol-15584,,,,,,,
Sol-15585,,,,,,,
Sol-15586,,,,,,,
Sol-15587,,,,,,,
Sol-15588,,,,,,,
Sol-15589,,,,,,,
Sol-15590,,,,,,,
Sol-15591,,,,,,,
Sol-15592,,,,,,,
Sol-15593,,,,,,,
Sol-15594,,,,,,,
Sol-15595,,,,,,,
Sol-15596,,,,,,,
Sol-15597,,,,,,,
Sol-15598,,,,,,,
Sol-15599,,,,,,,
Sol-15600,,,,,,,
Sol-15601,,,,,,,
Sol-15602,,,,,,,
Sol-15603,,,,,,,
Sol-15604,,,,,,,
Sol-15605,,,,,,,
Sol-15606,,,,,,,
Sol-15607,,,,,,,
Sol-15608,,,,,,,
Sol-15609,,,,,,,
Sol-15610,,,,,,,
Sol-15611,,,,,,,
Sol-15612,,,,,,,
Sol-15613,,,,,,,
Sol-15614,,,,,,,
Sol-15615,,,,,,,
Sol-15616,,,,,,,
Sol-15617,,,,,,,
Sol-15618,,,,,,,
Sol-15619,,,,,,,
Sol-15620,,,,,,,
Sol-15621,,,,,,,
Sol-15622,,,,,,,
Sol-15623,,,,,,,
Sol-15624,,,,,,,
Sol-15625,,,,,,,
Sol-15626,,,,,,,
Sol-15627,,,,,,,
Sol-15628,,,,,,,
Sol-15629,,,,,,,
Sol-15630,,,,,,,
Sol-15631,,,,,,,
Sol-15632,,,,,,,
Sol-15633,,,,,,,
Sol-15634,,,,,,,
Sol-15635,,,,,,,
Sol-15636,,,,,,,
Sol-15637,,,,,,,
Sol-15638,,,,,,,
Sol-15639,,,,,,,
Sol-15640,,,,,,,
Sol-15641,,,,,,,
Sol-15642,,,,,,,
Sol-15643,,,,,,,
Sol-15644,,,,,,,
Sol-15645,,,,,,,
Sol-15646,,,,,,,
Sol-15647,,,,,,,
Sol-15648,,,,,,,
Sol-15649,,,,,,,
Sol-15650,,,,,,,
Sol-15651,,,,,,,
Sol-15652,,,,,,,
Sol-15653,,,,,,,
Sol-15654,,,,,,,
Sol-15655,,,,,,,
Sol-15656,,,,,,,
Sol-15657,,,,,,,
Sol-15658,,,,,,,
Sol-15659,,,,,,,
Sol-15660,,,,,,,
Sol-15661,,,,,,,
Sol-15662,,,,,,,
Sol-15663,,,,,,,
Sol-15664,,,,,,,
Sol-15665,,,,,,,
Sol-15666,,,,,,,
Sol-15667,,,,,,,
Sol-15668,,,,,,,
Sol-15669,,,,,,,
Sol-15670,,,,,,,
Sol-15671,,,,,,,
Sol-15672,,,,,,,
Sol-15673,,,,,,,
Sol-15674,,,,,,,
Sol-15675,,,,,,,
Sol-15676,,,,,,,
Sol-15677,,,,,,,
Sol-15678,,,,,,,
Sol-15679,,,,,,,
Sol-15680,,,,,,,
Sol-15681,,,,,,,
Sol-15682,,,,,,,
Sol-15683,,,,,,,
Sol-15684,,,,,,,
Sol-15685,,,,,,,
Sol-15686,,,,,,,
Sol-15687,,,,,,,
Sol-15688,,,,,,,
Sol-15689,,,,,,,
Sol-15690,,,,,,,
Sol-15691,,,,,,,
Sol-15692,,,,,,,
Sol-15693,,,,,,,
Sol-15694,,,,,,,
Sol-15695,,,,,,,
Sol-15696,,,,,,,
Sol-15697,,,,,,,
Sol-15698,,,,,,,
Sol-15699,,,,,,,
Sol-15700,,,,,,,
Sol-15701,,,,,,,
Sol-15702,,,,,,,
Sol-15703,,,,,,,
Sol-15704,,,,,,,
Sol-15705,,,,,,,
Sol-15706,,,,,,,
Sol-15707,,,,,,,
Sol-15708,,,,,,,
Sol-15709,,,,,,,
Sol-15710,,,,,,,
Sol-15711,,,,,,,
Sol-15712,,,,,,,
Sol-15713,,,,,,,
Sol-15714,,,,,,,
Sol-15715,,,,,,,
Sol-15716,,,,,,,
Sol-15717,,,,,,,
Sol-15718,,,,,,,
Sol-15719,,,,,,,
Sol-15720,,,,,,,
Sol-15721,,,,,,,
Sol-15722,,,,,,,
Sol-15723,,,,,,,
Sol-15724,,,,,,,
Sol-15725,,,,,,,
Sol-15726,,,,,,,
Sol-15727,,,,,,,
Sol-15728,,,,,,,
Sol-15729,,,,,,,
Sol-15730,,,,,,,
Sol-15731,,,,,,,
Sol-15732,,,,,,,
Sol-15733,,,,,,,
Sol-15734,,,,,,,
Sol-15735,,,,,,,
Sol-15736,,,,,,,
Sol-15737,,,,,,,
Sol-15738,,,,,,,
Sol-15739,,,,,,,
Sol-15740,,,,,,,
Sol-15741,,,,,,,
Sol-15742,,,,,,,
Sol-15743,,,,,,,
Sol-15744,,,,,,,
Sol-15745,,,,,,,
Sol-15746,,,,,,,
Sol-15747,,,,,,,
Sol-15748,,,,,,,
Sol-15749,,,,,,,
Sol-15750,,,,,,,
Sol-15751,,,,,,,
Sol-15752,,,,,,,
Sol-15753,,,,,,,
Sol-15754,,,,,,,
Sol-15755,,,,,,,
Sol-15756,,,,,,,
Sol-15757,,,,,,,
Sol-15758,,,,,,,
Sol-15759,,,,,,,
Sol-15760,,,,,,,
Sol-15761,,,,,,,
Sol-15762,,,,,,,
Sol-15763,,,,,,,
Sol-15764,,,,,,,
Sol-15765,,,,,,,
Sol-15766,,,,,,,
Sol-15767,,,,,,,
Sol-15768,,,,,,,
Sol-15769,,,,,,,
Sol-15770,,,,,,,
Sol-15771,,,,,,,
Sol-15772,,,,,,,
Sol-15773,,,,,,,
Sol-15774,,,,,,,
Sol-15775,,,,,,,
Sol-15776,,,,,,,
Sol-15777,,,,,,,
Sol-15778,,,,,,,
Sol-15779,,,,,,,
Sol-15780,,,,,,,
Sol-15781,,,,,,,
Sol-15782,,,,,,,
Sol-15783,,,,,,,
Sol-15784,,,,,,,
Sol-15785,,,,,,,
Sol-15786,,,,,,,
Sol-15787,,,,,,,
Sol-15788,,,,,,,
Sol-15789,,,,,,,
Sol-15790,,,,,,,
Sol-15791,,,,,,,
Sol-15792,,,,,,,
Sol-15793,,,,,,,
Sol-15794,,,,,,,
Sol-15795,,,,,,,
Sol-15796,,,,,,,
Sol-15797,,,,,,,
Sol-15798,,,,,,,
Sol-15799,,,,,,,
Sol-15800,,,,,,,
Sol-15801,,,,,,,
Sol-15802,,,,,,,
Sol-15803,,,,,,,
Sol-15804,,,,,,,
Sol-15805,,,,,,,
Sol-15806,,,,,,,
Sol-15807,,,,,,,
Sol-15808,,,,,,,
Sol-15809,,,,,,,
Sol-15810,,,,,,,
Sol-15811,,,,,,,
Sol-15812,,,,,,,
Sol-15813,,,,,,,
Sol-15814,,,,,,,
Sol-15815,,,,,,,
Sol-15816,,,,,,,
Sol-15817,,,,,,,
Sol-15818,,,,,,,
Sol-15819,,,,,,,
Sol-15820,,,,,,,
Sol-15821,,,,,,,
Sol-15822,,,,,,,
Sol-15823,,,,,,,
Sol-15824,,,,,,,
Sol-15825,,,,,,,
Sol-15826,,,,,,,
Sol-15827,,,,,,,
Sol-15828,,,,,,,
Sol-15829,,,,,,,
Sol-15830,,,,,,,
Sol-15831,,,,,,,
Sol-15832,,,,,,,
Sol-15833,,,,,,,
Sol-15834,,,,,,,
Sol-15835,,,,,,,
Sol-15836,,,,,,,
Sol-15837,,,,,,,
Sol-15838,,,,,,,
Sol-15839,,,,,,,
Sol-15840,,,,,,,
Sol-15841,,,,,,,
Sol-15842,,,,,,,
Sol-15843,,,,,,,
Sol-15844,,,,,,,
Sol-15845,,,,,,,
Sol-15846,,,,,,,
Sol-15847,,,,,,,
Sol-15848,,,,,,,
Sol-15849,,,,,,,
Sol-15850,,,,,,,
Sol-15851,,,,,,,
Sol-15852,,,,,,,
Sol-15853,,,,,,,
Sol-15854,,,,,,,
Sol-15855,,,,,,,
Sol-15856,,,,,,,
Sol-15857,,,,,,,
Sol-15858,,,,,,,
Sol-15859,,,,,,,
Sol-15860,,,,,,,
Sol-15861,,,,,,,
Sol-15862,,,,,,,
Sol-15863,,,,,,,
Sol-15864,,,,,,,
Sol-15865,,,,,,,
Sol-15866,,,,,,,
Sol-15867,,,,,,,
Sol-15868,,,,,,,
Sol-15869,,,,,,,
Sol-15870,,,,,,,
Sol-15871,,,,,,,
Sol-15872,,,,,,,
Sol-15873,,,,,,,
Sol-15874,,,,,,,
Sol-15875,,,,,,,
Sol-15876,,,,,,,
Sol-15877,,,,,,,
Sol-15878,,,,,,,
Sol-15879,,,,,,,
Sol-15880,,,,,,,
Sol-15881,,,,,,,
Sol-15882,,,,,,,
Sol-15883,,,,,,,
Sol-15884,,,,,,,
Sol-15885,,,,,,,
Sol-15886,,,,,,,
Sol-15887,,,,,,,
Sol-15888,,,,,,,
Sol-15889,,,,,,,
Sol-15890,,,,,,,
Sol-15891,,,,,,,
Sol-15892,,,,,,,
Sol-15893,,,,,,,
Sol-15894,,,,,,,
Sol-15895,,,,,,,
Sol-15896,,,,,,,
Sol-15897,,,,,,,
Sol-15898,,,,,,,
Sol-15899,,,,,,,
Sol-15900,,,,,,,
Sol-15901,,,,,,,
Sol-15902,,,,,,,
Sol-15903,,,,,,,
Sol-15904,,,,,,,
Sol-15905,,,,,,,
Sol-15906,,,,,,,
Sol-15907,,,,,,,
Sol-15908,,,,,,,
Sol-15909,,,,,,,
Sol-15910,,,,,,,
Sol-15911,,,,,,,
Sol-15912,,,,,,,
Sol-15913,,,,,,,
Sol-15914,,,,,,,
Sol-15915,,,,,,,
Sol-15916,,,,,,,
Sol-15917,,,,,,,
Sol-15918,,,,,,,
Sol-15919,,,,,,,
Sol-15920,,,,,,,
Sol-15921,,,,,,,
Sol-15922,,,,,,,
Sol-15923,,,,,,,
Sol-15924,,,,,,,
Sol-15925,,,,,,,
Sol-15926,,,,,,,
Sol-15927,,,,,,,
Sol-15928,,,,,,,
Sol-15929,,,,,,,
Sol-15930,,,,,,,
Sol-15931,,,,,,,
Sol-15932,,,,,,,
Sol-15933,,,,,,,
Sol-15934,,,,,,,
Sol-15935,,,,,,,
Sol-15936,,,,,,,
Sol-15937,,,,,,,
Sol-15938,,,,,,,
Sol-15939,,,,,,,
Sol-15940,,,,,,,
Sol-15941,,,,,,,
Sol-15942,,,,,,,
Sol-15943,,,,,,,
Sol-15944,,,,,,,
Sol-15945,,,,,,,
Sol-15946,,,,,,,
Sol-15947,,,,,,,
Sol-15948,,,,,,,
Sol-15949,,,,,,,
Sol-15950,,,,,,,
Sol-15951,,,,,,,
Sol-15952,,,,,,,
Sol-15953,,,,,,,
Sol-15954,,,,,,,
Sol-15955,,,,,,,
Sol-15956,,,,,,,
Sol-15957,,,,,,,
Sol-15958,,,,,,,
Sol-15959,,,,,,,
Sol-15960,,,,,,,
Sol-15961,,,,,,,
Sol-15962,,,,,,,
Sol-15963,,,,,,,
Sol-15964,,,,,,,
Sol-15965,,,,,,,
Sol-15966,,,,,,,
Sol-15967,,,,,,,
Sol-15968,,,,,,,
Sol-15969,,,,,,,
Sol-15970,,,,,,,
Sol-15971,,,,,,,
Sol-15972,,,,,,,
Sol-15973,,,,,,,
Sol-15974,,,,,,,
Sol-15975,,,,,,,
Sol-15976,,,,,,,
Sol-15977,,,,,,,
Sol-15978,,,,,,,
Sol-15979,,,,,,,
Sol-15980,,,,,,,
Sol-15981,,,,,,,
Sol-15982,,,,,,,
Sol-15983,,,,,,,
Sol-15984,,,,,,,
Sol-15985,,,,,,,
Sol-15986,,,,,,,
Sol-15987,,,,,,,
Sol-15988,,,,,,,
Sol-15989,,,,,,,
Sol-15990,,,,,,,
Sol-15991,,,,,,,
Sol-15992,,,,,,,
Sol-15993,,,,,,,
Sol-15994,,,,,,,
Sol-15995,,,,,,,
Sol-15996,,,,,,,
Sol-15997,,,,,,,
Sol-15998,,,,,,,
Sol-15999,,,,,,,
Sol-16000,,,,,,,
Sol-16001,,,,,,,
Sol-16002,,,,,,,
Sol-16003,,,,,,,
Sol-16004,,,,,,,
Sol-16005,,,,,,,
Sol-16006,,,,,,,
Sol-16007,,,,,,,
Sol-16008,,,,,,,
Sol-16009,,,,,,,
Sol-16010,,,,,,,
Sol-16011,,,,,,,
Sol-16012,,,,,,,
Sol-16013,,,,,,,
Sol-16014,,,,,,,
Sol-16015,,,,,,,
Sol-16016,,,,,,,
Sol-16017,,,,,,,
Sol-16018,,,,,,,
Sol-16019,,,,,,,
Sol-16020,,,,,,,
Sol-16021,,,,,,,
Sol-16022,,,,,,,
Sol-16023,,,,,,,
Sol-16024,,,,,,,
Sol-16025,,,,,,,
Sol-16026,,,,,,,
Sol-16027,,,,,,,
Sol-16028,,,,,,,
Sol-16029,,,,,,,
Sol-16030,,,,,,,
Sol-16031,,,,,,,
Sol-16032,,,,,,,
Sol-16033,,,,,,,
Sol-16034,,,,,,,
Sol-16035,,,,,,,
Sol-16036,,,,,,,
Sol-16037,,,,,,,
Sol-16038,,,,,,,
Sol-16039,,,,,,,
Sol-16040,,,,,,,
Sol-16041,,,,,,,
Sol-16042,,,,,,,
Sol-16043,,,,,,,
Sol-16044,,,,,,,
Sol-16045,,,,,,,
Sol-16046,,,,,,,
Sol-16047,,,,,,,
Sol-16048,,,,,,,
Sol-16049,,,,,,,
Sol-16050,,,,,,,
Sol-16051,,,,,,,
Sol-16052,,,,,,,
Sol-16053,,,,,,,
Sol-16054,,,,,,,
Sol-16055,,,,,,,
Sol-16056,,,,,,,
Sol-16057,,,,,,,
Sol-16058,,,,,,,
Sol-16059,,,,,,,
Sol-16060,,,,,,,
Sol-16061,,,,,,,
Sol-16062,,,,,,,
Sol-16063,,,,,,,
Sol-16064,,,,,,,
Sol-16065,,,,,,,
Sol-16066,,,,,,,
Sol-16067,,,,,,,
Sol-16068,,,,,,,
Sol-16069,,,,,,,
Sol-16070,,,,,,,
Sol-16071,,,,,,,
Sol-16072,,,,,,,
Sol-16073,,,,,,,
Sol-16074,,,,,,,
Sol-16075,,,,,,,
Sol-16076,,,,,,,
Sol-16077,,,,,,,
Sol-16078,,,,,,,
Sol-16079,,,,,,,
Sol-16080,,,,,,,
Sol-16081,,,,,,,
Sol-16082,,,,,,,
Sol-16083,,,,,,,
Sol-16084,,,,,,,
Sol-16085,,,,,,,
Sol-16086,,,,,,,
Sol-16087,,,,,,,
Sol-16088,,,,,,,
Sol-16089,,,,,,,
Sol-16090,,,,,,,
Sol-16091,,,,,,,
Sol-16092,,,,,,,
Sol-16093,,,,,,,
Sol-16094,,,,,,,
Sol-16095,,,,,,,
Sol-16096,,,,,,,
Sol-16097,,,,,,,
Sol-16098,,,,,,,
Sol-16099,,,,,,,
Sol-16100,,,,,,,
Sol-16101,,,,,,,
Sol-16102,,,,,,,
Sol-16103,,,,,,,
Sol-16104,,,,,,,
Sol-16105,,,,,,,
Sol-16106,,,,,,,
Sol-16107,,,,,,,
Sol-16108,,,,,,,
Sol-16109,,,,,,,
Sol-16110,,,,,,,
Sol-16111,,,,,,,
Sol-16112,,,,,,,
Sol-16113,,,,,,,
Sol-16114,,,,,,,
Sol-16115,,,,,,,
Sol-16116,,,,,,,
Sol-16117,,,,,,,
Sol-16118,,,,,,,
Sol-16119,,,,,,,
Sol-16120,,,,,,,
Sol-16121,,,,,,,
Sol-16122,,,,,,,
Sol-16123,,,,,,,
Sol-16124,,,,,,,
Sol-16125,,,,,,,
Sol-16126,,,,,,,
Sol-16127,,,,,,,
Sol-16128,,,,,,,
Sol-16129,,,,,,,
Sol-16130,,,,,,,
Sol-16131,,,,,,,
Sol-16132,,,,,,,
Sol-16133,,,,,,,
Sol-16134,,,,,,,
Sol-16135,,,,,,,
Sol-16136,,,,,,,
Sol-16137,,,,,,,
Sol-16138,,,,,,,
Sol-16139,,,,,,,
Sol-16140,,,,,,,
Sol-16141,,,,,,,
Sol-16142,,,,,,,
Sol-16143,,,,,,,
Sol-16144,,,,,,,
Sol-16145,,,,,,,
Sol-16146,,,,,,,
Sol-16147,,,,,,,
Sol-16148,,,,,,,
Sol-16149,,,,,,,
Sol-16150,,,,,,,
Sol-16151,,,,,,,
Sol-16152,,,,,,,
Sol-16153,,,,,,,
Sol-16154,,,,,,,
Sol-16155,,,,,,,
Sol-16156,,,,,,,
Sol-16157,,,,,,,
Sol-16158,,,,,,,
Sol-16159,,,,,,,
Sol-16160,,,,,,,
Sol-16161,,,,,,,
Sol-16162,,,,,,,
Sol-16163,,,,,,,
Sol-16164,,,,,,,
Sol-16165,,,,,,,
Sol-16166,,,,,,,
Sol-16167,,,,,,,
Sol-16168,,,,,,,
Sol-16169,,,,,,,
Sol-16170,,,,,,,
Sol-16171,,,,,,,
Sol-16172,,,,,,,
Sol-16173,,,,,,,
Sol-16174,,,,,,,
Sol-16175,,,,,,,
Sol-16176,,,,,,,
Sol-16177,,,,,,,
Sol-16178,,,,,,,
Sol-16179,,,,,,,
Sol-16180,,,,,,,
Sol-16181,,,,,,,
Sol-16182,,,,,,,
Sol-16183,,,,,,,
Sol-16184,,,,,,,
Sol-16185,,,,,,,
Sol-16186,,,,,,,
Sol-16187,,,,,,,
Sol-16188,,,,,,,
Sol-16189,,,,,,,
Sol-16190,,,,,,,
Sol-16191,,,,,,,
Sol-16192,,,,,,,
Sol-16193,,,,,,,
Sol-16194,,,,,,,
Sol-16195,,,,,,,
Sol-16196,,,,,,,
Sol-16197,,,,,,,
Sol-16198,,,,,,,
Sol-16199,,,,,,,
Sol-16200,,,,,,,
Sol-16201,,,,,,,
Sol-16202,,,,,,,
Sol-16203,,,,,,,
Sol-16204,,,,,,,
Sol-16205,,,,,,,
Sol-16206,,,,,,,
Sol-16207,,,,,,,
Sol-16208,,,,,,,
Sol-16209,,,,,,,
Sol-16210,,,,,,,
Sol-16211,,,,,,,
Sol-16212,,,,,,,
Sol-16213,,,,,,,
Sol-16214,,,,,,,
Sol-16215,,,,,,,
Sol-16216,,,,,,,
Sol-16217,,,,,,,
Sol-16218,,,,,,,
Sol-16219,,,,,,,
Sol-16220,,,,,,,
Sol-16221,,,,,,,
Sol-16222,,,,,,,
Sol-16223,,,,,,,
Sol-16224,,,,,,,
Sol-16225,,,,,,,
Sol-16226,,,,,,,
Sol-16227,,,,,,,
Sol-16228,,,,,,,
Sol-16229,,,,,,,
Sol-16230,,,,,,,
Sol-16231,,,,,,,
Sol-16232,,,,,,,
Sol-16233,,,,,,,
Sol-16234,,,,,,,
Sol-16235,,,,,,,
Sol-16236,,,,,,,
Sol-16237,,,,,,,
Sol-16238,,,,,,,
Sol-16239,,,,,,,
Sol-16240,,,,,,,
Sol-16241,,,,,,,
Sol-16242,,,,,,,
Sol-16243,,,,,,,
Sol-16244,,,,,,,
Sol-16245,,,,,,,
Sol-16246,,,,,,,
Sol-16247,,,,,,,
Sol-16248,,,,,,,
Sol-16249,,,,,,,
Sol-16250,,,,,,,
Sol-16251,,,,,,,
Sol-16252,,,,,,,
Sol-16253,,,,,,,
Sol-16254,,,,,,,
Sol-16255,,,,,,,
Sol-16256,,,,,,,
Sol-16257,,,,,,,
Sol-16258,,,,,,,
Sol-16259,,,,,,,
Sol-16260,,,,,,,
Sol-16261,,,,,,,
Sol-16262,,,,,,,
Sol-16263,,,,,,,
Sol-16264,,,,,,,
Sol-16265,,,,,,,
Sol-16266,,,,,,,
Sol-16267,,,,,,,
Sol-16268,,,,,,,
Sol-16269,,,,,,,
Sol-16270,,,,,,,
Sol-16271,,,,,,,
Sol-16272,,,,,,,
Sol-16273,,,,,,,
Sol-16274,,,,,,,
Sol-16275,,,,,,,
Sol-16276,,,,,,,
Sol-16277,,,,,,,
Sol-16278,,,,,,,
Sol-16279,,,,,,,
Sol-16280,,,,,,,
Sol-16281,,,,,,,
Sol-16282,,,,,,,
Sol-16283,,,,,,,
Sol-16284,,,,,,,
Sol-16285,,,,,,,
Sol-16286,,,,,,,
Sol-16287,,,,,,,
Sol-16288,,,,,,,
Sol-16289,,,,,,,
Sol-16290,,,,,,,
Sol-16291,,,,,,,
Sol-16292,,,,,,,
Sol-16293,,,,,,,
Sol-16294,,,,,,,
Sol-16295,,,,,,,
Sol-16296,,,,,,,
Sol-16297,,,,,,,
Sol-16298,,,,,,,
Sol-16299,,,,,,,
Sol-16300,,,,,,,
Sol-16301,,,,,,,
Sol-16302,,,,,,,
Sol-16303,,,,,,,
Sol-16304,,,,,,,
Sol-16305,,,,,,,
Sol-16306,,,,,,,
Sol-16307,,,,,,,
Sol-16308,,,,,,,
Sol-16309,,,,,,,
Sol-16310,,,,,,,
Sol-16311,,,,,,,
Sol-16312,,,,,,,
Sol-16313,,,,,,,
Sol-16314,,,,,,,
Sol-16315,,,,,,,
Sol-16316,,,,,,,
Sol-16317,,,,,,,
Sol-16318,,,,,,,
Sol-16319,,,,,,,
Sol-16320,,,,,,,
Sol-16321,,,,,,,
Sol-16322,,,,,,,
Sol-16323,,,,,,,
Sol-16324,,,,,,,
Sol-16325,,,,,,,
Sol-16326,,,,,,,
Sol-16327,,,,,,,
Sol-16328,,,,,,,
Sol-16329,,,,,,,
Sol-16330,,,,,,,
Sol-16331,,,,,,,
Sol-16332,,,,,,,
Sol-16333,,,,,,,
Sol-16334,,,,,,,
Sol-16335,,,,,,,
Sol-16336,,,,,,,
Sol-16337,,,,,,,
Sol-16338,,,,,,,
Sol-16339,,,,,,,
Sol-16340,,,,,,,
Sol-16341,,,,,,,
Sol-16342,,,,,,,
Sol-16343,,,,,,,
Sol-16344,,,,,,,
Sol-16345,,,,,,,
Sol-16346,,,,,,,
Sol-16347,,,,,,,
Sol-16348,,,,,,,
Sol-16349,,,,,,,
Sol-16350,,,,,,,
Sol-16351,,,,,,,
Sol-16352,,,,,,,
Sol-16353,,,,,,,
Sol-16354,,,,,,,
Sol-16355,,,,,,,
Sol-16356,,,,,,,
Sol-16357,,,,,,,
Sol-16358,,,,,,,
Sol-16359,,,,,,,
Sol-16360,,,,,,,
Sol-16361,,,,,,,
Sol-16362,,,,,,,
Sol-16363,,,,,,,
Sol-16364,,,,,,,
Sol-16365,,,,,,,
Sol-16366,,,,,,,
Sol-16367,,,,,,,
Sol-16368,,,,,,,
Sol-16369,,,,,,,
Sol-16370,,,,,,,
Sol-16371,,,,,,,
Sol-16372,,,,,,,
Sol-16373,,,,,,,
Sol-16374,,,,,,,
Sol-16375,,,,,,,
Sol-16376,,,,,,,
Sol-16377,,,,,,,
Sol-16378,,,,,,,
Sol-16379,,,,,,,
Sol-16380,,,,,,,
Sol-16381,,,,,,,
Sol-16382,,,,,,,
Sol-16383,,,,,,,
Sol-16384,,,,,,,
Sol-16385,,,,,,,
Sol-16386,,,,,,,
Sol-16387,,,,,,,
Sol-16388,,,,,,,
Sol-16389,,,,,,,
Sol-16390,,,,,,,
Sol-16391,,,,,,,
Sol-16392,,,,,,,
Sol-16393,,,,,,,
Sol-16394,,,,,,,
Sol-16395,,,,,,,
Sol-16396,,,,,,,
Sol-16397,,,,,,,
Sol-16398,,,,,,,
Sol-16399,,,,,,,
Sol-16400,,,,,,,
Sol-16401,,,,,,,
Sol-16402,,,,,,,
Sol-16403,,,,,,,
Sol-16404,,,,,,,
Sol-16405,,,,,,,
Sol-16406,,,,,,,
Sol-16407,,,,,,,
Sol-16408,,,,,,,
Sol-16409,,,,,,,
Sol-16410,,,,,,,
Sol-16411,,,,,,,
Sol-16412,,,,,,,
Sol-16413,,,,,,,
Sol-16414,,,,,,,
Sol-16415,,,,,,,
Sol-16416,,,,,,,
Sol-16417,,,,,,,
Sol-16418,,,,,,,
Sol-16419,,,,,,,
Sol-16420,,,,,,,
Sol-16421,,,,,,,
Sol-16422,,,,,,,
Sol-16423,,,,,,,
Sol-16424,,,,,,,
Sol-16425,,,,,,,
Sol-16426,,,,,,,
Sol-16427,,,,,,,
Sol-16428,,,,,,,
Sol-16429,,,,,,,
Sol-16430,,,,,,,
Sol-16431,,,,,,,
Sol-16432,,,,,,,
Sol-16433,,,,,,,
Sol-16434,,,,,,,
Sol-16435,,,,,,,
Sol-16436,,,,,,,
Sol-16437,,,,,,,
Sol-16438,,,,,,,
Sol-16439,,,,,,,
Sol-16440,,,,,,,
Sol-16441,,,,,,,
Sol-16442,,,,,,,
Sol-16443,,,,,,,
Sol-16444,,,,,,,
Sol-16445,,,,,,,
Sol-16446,,,,,,,
Sol-16447,,,,,,,
Sol-16448,,,,,,,
Sol-16449,,,,,,,
Sol-16450,,,,,,,
Sol-16451,,,,,,,
Sol-16452,,,,,,,
Sol-16453,,,,,,,
Sol-16454,,,,,,,
Sol-16455,,,,,,,
Sol-16456,,,,,,,
Sol-16457,,,,,,,
Sol-16458,,,,,,,
Sol-16459,,,,,,,
Sol-16460,,,,,,,
Sol-16461,,,,,,,
Sol-16462,,,,,,,
Sol-16463,,,,,,,
Sol-16464,,,,,,,
Sol-16465,,,,,,,
Sol-16466,,,,,,,
Sol-16467,,,,,,,
Sol-16468,,,,,,,
Sol-16469,,,,,,,
Sol-16470,,,,,,,
Sol-16471,,,,,,,
Sol-16472,,,,,,,
Sol-16473,,,,,,,
Sol-16474,,,,,,,
Sol-16475,,,,,,,
Sol-16476,,,,,,,
Sol-16477,,,,,,,
Sol-16478,,,,,,,
Sol-16479,,,,,,,
Sol-16480,,,,,,,
Sol-16481,,,,,,,
Sol-16482,,,,,,,
Sol-16483,,,,,,,
Sol-16484,,,,,,,
Sol-16485,,,,,,,
Sol-16486,,,,,,,
Sol-16487,,,,,,,
Sol-16488,,,,,,,
Sol-16489,,,,,,,
Sol-16490,,,,,,,
Sol-16491,,,,,,,
Sol-16492,,,,,,,
Sol-16493,,,,,,,
Sol-16494,,,,,,,
Sol-16495,,,,,,,
Sol-16496,,,,,,,
Sol-16497,,,,,,,
Sol-16498,,,,,,,
Sol-16499,,,,,,,
Sol-16500,,,,,,,
Sol-16501,,,,,,,
Sol-16502,,,,,,,
Sol-16503,,,,,,,
Sol-16504,,,,,,,
Sol-16505,,,,,,,
Sol-16506,,,,,,,
Sol-16507,,,,,,,
Sol-16508,,,,,,,
Sol-16509,,,,,,,
Sol-16510,,,,,,,
Sol-16511,,,,,,,
Sol-16512,,,,,,,
Sol-16513,,,,,,,
Sol-16514,,,,,,,
Sol-16515,,,,,,,
Sol-16516,,,,,,,
Sol-16517,,,,,,,
Sol-16518,,,,,,,
Sol-16519,,,,,,,
Sol-16520,,,,,,,
Sol-16521,,,,,,,
Sol-16522,,,,,,,
Sol-16523,,,,,,,
Sol-16524,,,,,,,
Sol-16525,,,,,,,
Sol-16526,,,,,,,
Sol-16527,,,,,,,
Sol-16528,,,,,,,
Sol-16529,,,,,,,
Sol-16530,,,,,,,
Sol-16531,,,,,,,
Sol-16532,,,,,,,
Sol-16533,,,,,,,
Sol-16534,,,,,,,
Sol-16535,,,,,,,
Sol-16536,,,,,,,
Sol-16537,,,,,,,
Sol-16538,,,,,,,
Sol-16539,,,,,,,
Sol-16540,,,,,,,
Sol-16541,,,,,,,
Sol-16542,,,,,,,
Sol-16543,,,,,,,
Sol-16544,,,,,,,
Sol-16545,,,,,,,
Sol-16546,,,,,,,
Sol-16547,,,,,,,
Sol-16548,,,,,,,
Sol-16549,,,,,,,
Sol-16550,,,,,,,
Sol-16551,,,,,,,
Sol-16552,,,,,,,
Sol-16553,,,,,,,
Sol-16554,,,,,,,
Sol-16555,,,,,,,
Sol-16556,,,,,,,
Sol-16557,,,,,,,
Sol-16558,,,,,,,
Sol-16559,,,,,,,
Sol-16560,,,,,,,
Sol-16561,,,,,,,
Sol-16562,,,,,,,
Sol-16563,,,,,,,
Sol-16564,,,,,,,
Sol-16565,,,,,,,
Sol-16566,,,,,,,
Sol-16567,,,,,,,
Sol-16568,,,,,,,
Sol-16569,,,,,,,
Sol-16570,,,,,,,
Sol-16571,,,,,,,
Sol-16572,,,,,,,
Sol-16573,,,,,,,
Sol-16574,,,,,,,
Sol-16575,,,,,,,
Sol-16576,,,,,,,
Sol-16577,,,,,,,
Sol-16578,,,,,,,
Sol-16579,,,,,,,
Sol-16580,,,,,,,
Sol-16581,,,,,,,
Sol-16582,,,,,,,
Sol-16583,,,,,,,
Sol-16584,,,,,,,
Sol-16585,,,,,,,
Sol-16586,,,,,,,
Sol-16587,,,,,,,
Sol-16588,,,,,,,
Sol-16589,,,,,,,
Sol-16590,,,,,,,
Sol-16591,,,,,,,
Sol-16592,,,,,,,
Sol-16593,,,,,,,
Sol-16594,,,,,,,
Sol-16595,,,,,,,
Sol-16596,,,,,,,
Sol-16597,,,,,,,
Sol-16598,,,,,,,
Sol-16599,,,,,,,
Sol-16600,,,,,,,
Sol-16601,,,,,,,
Sol-16602,,,,,,,
Sol-16603,,,,,,,
Sol-16604,,,,,,,
Sol-16605,,,,,,,
Sol-16606,,,,,,,
Sol-16607,,,,,,,
Sol-16608,,,,,,,
Sol-16609,,,,,,,
Sol-16610,,,,,,,
Sol-16611,,,,,,,
Sol-16612,,,,,,,
Sol-16613,,,,,,,
Sol-16614,,,,,,,
Sol-16615,,,,,,,
Sol-16616,,,,,,,
Sol-16617,,,,,,,
Sol-16618,,,,,,,
Sol-16619,,,,,,,
Sol-16620,,,,,,,
Sol-16621,,,,,,,
Sol-16622,,,,,,,
Sol-16623,,,,,,,
Sol-16624,,,,,,,
Sol-16625,,,,,,,
Sol-16626,,,,,,,
Sol-16627,,,,,,,
Sol-16628,,,,,,,
Sol-16629,,,,,,,
Sol-16630,,,,,,,
Sol-16631,,,,,,,
Sol-16632,,,,,,,
Sol-16633,,,,,,,
Sol-16634,,,,,,,
Sol-16635,,,,,,,
Sol-16636,,,,,,,
Sol-16637,,,,,,,
Sol-16638,,,,,,,
Sol-16639,,,,,,,
Sol-16640,,,,,,,
Sol-16641,,,,,,,
Sol-16642,,,,,,,
Sol-16643,,,,,,,
Sol-16644,,,,,,,
Sol-16645,,,,,,,
Sol-16646,,,,,,,
Sol-16647,,,,,,,
Sol-16648,,,,,,,
Sol-16649,,,,,,,
Sol-16650,,,,,,,
Sol-16651,,,,,,,
Sol-16652,,,,,,,
Sol-16653,,,,,,,
Sol-16654,,,,,,,
Sol-16655,,,,,,,
Sol-16656,,,,,,,
Sol-16657,,,,,,,
Sol-16658,,,,,,,
Sol-16659,,,,,,,
Sol-16660,,,,,,,
Sol-16661,,,,,,,
Sol-16662,,,,,,,
Sol-16663,,,,,,,
Sol-16664,,,,,,,
Sol-16665,,,,,,,
Sol-16666,,,,,,,
Sol-16667,,,,,,,
Sol-16668,,,,,,,
Sol-16669,,,,,,,
Sol-16670,,,,,,,
Sol-16671,,,,,,,
Sol-16672,,,,,,,
Sol-16673,,,,,,,
Sol-16674,,,,,,,
Sol-16675,,,,,,,
Sol-16676,,,,,,,
Sol-16677,,,,,,,
Sol-16678,,,,,,,
Sol-16679,,,,,,,
Sol-16680,,,,,,,
Sol-16681,,,,,,,
Sol-16682,,,,,,,
Sol-16683,,,,,,,
Sol-16684,,,,,,,
Sol-16685,,,,,,,
Sol-16686,,,,,,,
Sol-16687,,,,,,,
Sol-16688,,,,,,,
Sol-16689,,,,,,,
Sol-16690,,,,,,,
Sol-16691,,,,,,,
Sol-16692,,,,,,,
Sol-16693,,,,,,,
Sol-16694,,,,,,,
Sol-16695,,,,,,,
Sol-16696,,,,,,,
Sol-16697,,,,,,,
Sol-16698,,,,,,,
Sol-16699,,,,,,,
Sol-16700,,,,,,,
Sol-16701,,,,,,,
Sol-16702,,,,,,,
Sol-16703,,,,,,,
Sol-16704,,,,,,,
Sol-16705,,,,,,,
Sol-16706,,,,,,,
Sol-16707,,,,,,,
Sol-16708,,,,,,,
Sol-16709,,,,,,,
Sol-16710,,,,,,,
Sol-16711,,,,,,,
Sol-16712,,,,,,,
Sol-16713,,,,,,,
Sol-16714,,,,,,,
Sol-16715,,,,,,,
Sol-16716,,,,,,,
Sol-16717,,,,,,,
Sol-16718,,,,,,,
Sol-16719,,,,,,,
Sol-16720,,,,,,,
Sol-16721,,,,,,,
Sol-16722,,,,,,,
Sol-16723,,,,,,,
Sol-16724,,,,,,,
Sol-16725,,,,,,,
Sol-16726,,,,,,,
Sol-16727,,,,,,,
Sol-16728,,,,,,,
Sol-16729,,,,,,,
Sol-16730,,,,,,,
Sol-16731,,,,,,,
Sol-16732,,,,,,,
Sol-16733,,,,,,,
Sol-16734,,,,,,,
Sol-16735,,,,,,,
Sol-16736,,,,,,,
Sol-16737,,,,,,,
Sol-16738,,,,,,,
Sol-16739,,,,,,,
Sol-16740,,,,,,,
Sol-16741,,,,,,,
Sol-16742,,,,,,,
Sol-16743,,,,,,,
Sol-16744,,,,,,,
Sol-16745,,,,,,,
Sol-16746,,,,,,,
Sol-16747,,,,,,,
Sol-16748,,,,,,,
Sol-16749,,,,,,,
Sol-16750,,,,,,,
Sol-16751,,,,,,,
Sol-16752,,,,,,,
Sol-16753,,,,,,,
Sol-16754,,,,,,,
Sol-16755,,,,,,,
Sol-16756,,,,,,,
Sol-16757,,,,,,,
Sol-16758,,,,,,,
Sol-16759,,,,,,,
Sol-16760,,,,,,,
Sol-16761,,,,,,,
Sol-16762,,,,,,,
Sol-16763,,,,,,,
Sol-16764,,,,,,,
Sol-16765,,,,,,,
Sol-16766,,,,,,,
Sol-16767,,,,,,,
Sol-16768,,,,,,,
Sol-16769,,,,,,,
Sol-16770,,,,,,,
Sol-16771,,,,,,,
Sol-16772,,,,,,,
Sol-16773,,,,,,,
Sol-16774,,,,,,,
Sol-16775,,,,,,,
Sol-16776,,,,,,,
Sol-16777,,,,,,,
Sol-16778,,,,,,,
Sol-16779,,,,,,,
Sol-16780,,,,,,,
Sol-16781,,,,,,,
Sol-16782,,,,,,,
Sol-16783,,,,,,,
Sol-16784,,,,,,,
Sol-16785,,,,,,,
Sol-16786,,,,,,,
Sol-16787,,,,,,,
Sol-16788,,,,,,,
Sol-16789,,,,,,,
Sol-16790,,,,,,,
Sol-16791,,,,,,,
Sol-16792,,,,,,,
Sol-16793,,,,,,,
Sol-16794,,,,,,,
Sol-16795,,,,,,,
Sol-16796,,,,,,,
Sol-16797,,,,,,,
Sol-16798,,,,,,,
Sol-16799,,,,,,,
Sol-16800,,,,,,,
Sol-16801,,,,,,,
Sol-16802,,,,,,,
Sol-16803,,,,,,,
Sol-16804,,,,,,,
Sol-16805,,,,,,,
Sol-16806,,,,,,,
Sol-16807,,,,,,,
Sol-16808,,,,,,,
Sol-16809,,,,,,,
Sol-16810,,,,,,,
Sol-16811,,,,,,,
Sol-16812,,,,,,,
Sol-16813,,,,,,,
Sol-16814,,,,,,,
Sol-16815,,,,,,,
Sol-16816,,,,,,,
Sol-16817,,,,,,,
Sol-16818,,,,,,,
Sol-16819,,,,,,,
Sol-16820,,,,,,,
Sol-16821,,,,,,,
Sol-16822,,,,,,,
Sol-16823,,,,,,,
Sol-16824,,,,,,,
Sol-16825,,,,,,,
Sol-16826,,,,,,,
Sol-16827,,,,,,,
Sol-16828,,,,,,,
Sol-16829,,,,,,,
Sol-16830,,,,,,,
Sol-16831,,,,,,,
Sol-16832,,,,,,,
Sol-16833,,,,,,,
Sol-16834,,,,,,,
Sol-16835,,,,,,,
Sol-16836,,,,,,,
Sol-16837,,,,,,,
Sol-16838,,,,,,,
Sol-16839,,,,,,,
Sol-16840,,,,,,,
Sol-16841,,,,,,,
Sol-16842,,,,,,,
Sol-16843,,,,,,,
Sol-16844,,,,,,,
Sol-16845,,,,,,,
Sol-16846,,,,,,,
Sol-16847,,,,,,,
Sol-16848,,,,,,,
Sol-16849,,,,,,,
Sol-16850,,,,,,,
Sol-16851,,,,,,,
Sol-16852,,,,,,,
Sol-16853,,,,,,,
Sol-16854,,,,,,,
Sol-16855,,,,,,,
Sol-16856,,,,,,,
Sol-16857,,,,,,,
Sol-16858,,,,,,,
Sol-16859,,,,,,,
Sol-16860,,,,,,,
Sol-16861,,,,,,,
Sol-16862,,,,,,,
Sol-16863,,,,,,,
Sol-16864,,,,,,,
Sol-16865,,,,,,,
Sol-16866,,,,,,,
Sol-16867,,,,,,,
Sol-16868,,,,,,,
Sol-16869,,,,,,,
Sol-16870,,,,,,,
Sol-16871,,,,,,,
Sol-16872,,,,,,,
Sol-16873,,,,,,,
Sol-16874,,,,,,,
Sol-16875,,,,,,,
Sol-16876,,,,,,,
Sol-16877,,,,,,,
Sol-16878,,,,,,,
Sol-16879,,,,,,,
Sol-16880,,,,,,,
Sol-16881,,,,,,,
Sol-16882,,,,,,,
Sol-16883,,,,,,,
Sol-16884,,,,,,,
Sol-16885,,,,,,,
Sol-16886,,,,,,,
Sol-16887,,,,,,,
Sol-16888,,,,,,,
Sol-16889,,,,,,,
Sol-16890,,,,,,,
Sol-16891,,,,,,,
Sol-16892,,,,,,,
Sol-16893,,,,,,,
Sol-16894,,,,,,,
Sol-16895,,,,,,,
Sol-16896,,,,,,,
Sol-16897,,,,,,,
Sol-16898,,,,,,,
Sol-16899,,,,,,,
Sol-16900,,,,,,,
Sol-16901,,,,,,,
Sol-16902,,,,,,,
Sol-16903,,,,,,,
Sol-16904,,,,,,,
Sol-16905,,,,,,,
Sol-16906,,,,,,,
Sol-16907,,,,,,,
Sol-16908,,,,,,,
Sol-16909,,,,,,,
Sol-16910,,,,,,,
Sol-16911,,,,,,,
Sol-16912,,,,,,,
Sol-16913,,,,,,,
Sol-16914,,,,,,,
Sol-16915,,,,,,,
Sol-16916,,,,,,,
Sol-16917,,,,,,,
Sol-16918,,,,,,,
Sol-16919,,,,,,,
Sol-16920,,,,,,,
Sol-16921,,,,,,,
Sol-16922,,,,,,,
Sol-16923,,,,,,,
Sol-16924,,,,,,,
Sol-16925,,,,,,,
Sol-16926,,,,,,,
Sol-16927,,,,,,,
Sol-16928,,,,,,,
Sol-16929,,,,,,,
Sol-16930,,,,,,,
Sol-16931,,,,,,,
Sol-16932,,,,,,,
Sol-16933,,,,,,,
Sol-16934,,,,,,,
Sol-16935,,,,,,,
Sol-16936,,,,,,,
Sol-16937,,,,,,,
Sol-16938,,,,,,,
Sol-16939,,,,,,,
Sol-16940,,,,,,,
Sol-16941,,,,,,,
Sol-16942,,,,,,,
Sol-16943,,,,,,,
Sol-16944,,,,,,,
Sol-16945,,,,,,,
Sol-16946,,,,,,,
Sol-16947,,,,,,,
Sol-16948,,,,,,,
Sol-16949,,,,,,,
Sol-16950,,,,,,,
Sol-16951,,,,,,,
Sol-16952,,,,,,,
Sol-16953,,,,,,,
Sol-16954,,,,,,,
Sol-16955,,,,,,,
Sol-16956,,,,,,,
Sol-16957,,,,,,,
Sol-16958,,,,,,,
Sol-16959,,,,,,,
Sol-16960,,,,,,,
Sol-16961,,,,,,,
Sol-16962,,,,,,,
Sol-16963,,,,,,,
Sol-16964,,,,,,,
Sol-16965,,,,,,,
Sol-16966,,,,,,,
Sol-16967,,,,,,,
Sol-16968,,,,,,,
Sol-16969,,,,,,,
Sol-16970,,,,,,,
Sol-16971,,,,,,,
Sol-16972,,,,,,,
Sol-16973,,,,,,,
Sol-16974,,,,,,,
Sol-16975,,,,,,,
Sol-16976,,,,,,,
Sol-16977,,,,,,,
Sol-16978,,,,,,,
Sol-16979,,,,,,,
Sol-16980,,,,,,,
Sol-16981,,,,,,,
Sol-16982,,,,,,,
Sol-16983,,,,,,,
Sol-16984,,,,,,,
Sol-16985,,,,,,,
Sol-16986,,,,,,,
Sol-16987,,,,,,,
Sol-16988,,,,,,,
Sol-16989,,,,,,,
Sol-16990,,,,,,,
Sol-16991,,,,,,,
Sol-16992,,,,,,,
Sol-16993,,,,,,,
Sol-16994,,,,,,,
Sol-16995,,,,,,,
Sol-16996,,,,,,,
Sol-16997,,,,,,,
Sol-16998,,,,,,,
Sol-16999,,,,,,,
Sol-17000,,,,,,,
Sol-17001,,,,,,,
Sol-17002,,,,,,,
Sol-17003,,,,,,,
Sol-17004,,,,,,,
Sol-17005,,,,,,,
Sol-17006,,,,,,,
Sol-17007,,,,,,,
Sol-17008,,,,,,,
Sol-17009,,,,,,,
Sol-17010,,,,,,,
Sol-17011,,,,,,,
Sol-17012,,,,,,,
Sol-17013,,,,,,,
Sol-17014,,,,,,,
Sol-17015,,,,,,,
Sol-17016,,,,,,,
Sol-17017,,,,,,,
Sol-17018,,,,,,,
Sol-17019,,,,,,,
Sol-17020,,,,,,,
Sol-17021,,,,,,,
Sol-17022,,,,,,,
Sol-17023,,,,,,,
Sol-17024,,,,,,,
Sol-17025,,,,,,,
Sol-17026,,,,,,,
Sol-17027,,,,,,,
Sol-17028,,,,,,,
Sol-17029,,,,,,,
Sol-17030,,,,,,,
Sol-17031,,,,,,,
Sol-17032,,,,,,,
Sol-17033,,,,,,,
Sol-17034,,,,,,,
Sol-17035,,,,,,,
Sol-17036,,,,,,,
Sol-17037,,,,,,,
Sol-17038,,,,,,,
Sol-17039,,,,,,,
Sol-17040,,,,,,,
Sol-17041,,,,,,,
Sol-17042,,,,,,,
Sol-17043,,,,,,,
Sol-17044,,,,,,,
Sol-17045,,,,,,,
Sol-17046,,,,,,,
Sol-17047,,,,,,,
Sol-17048,,,,,,,
Sol-17049,,,,,,,
Sol-17050,,,,,,,
Sol-17051,,,,,,,
Sol-17052,,,,,,,
Sol-17053,,,,,,,
Sol-17054,,,,,,,
Sol-17055,,,,,,,
Sol-17056,,,,,,,
Sol-17057,,,,,,,
Sol-17058,,,,,,,
Sol-17059,,,,,,,
Sol-17060,,,,,,,
Sol-17061,,,,,,,
Sol-17062,,,,,,,
Sol-17063,,,,,,,
Sol-17064,,,,,,,
Sol-17065,,,,,,,
Sol-17066,,,,,,,
Sol-17067,,,,,,,
Sol-17068,,,,,,,
Sol-17069,,,,,,,
Sol-17070,,,,,,,
Sol-17071,,,,,,,
Sol-17072,,,,,,,
Sol-17073,,,,,,,
Sol-17074,,,,,,,
Sol-17075,,,,,,,
Sol-17076,,,,,,,
Sol-17077,,,,,,,
Sol-17078,,,,,,,
Sol-17079,,,,,,,
Sol-17080,,,,,,,
Sol-17081,,,,,,,
Sol-17082,,,,,,,
Sol-17083,,,,,,,
Sol-17084,,,,,,,
Sol-17085,,,,,,,
Sol-17086,,,,,,,
Sol-17087,,,,,,,
Sol-17088,,,,,,,
Sol-17089,,,,,,,
Sol-17090,,,,,,,
Sol-17091,,,,,,,
Sol-17092,,,,,,,
Sol-17093,,,,,,,
Sol-17094,,,,,,,
Sol-17095,,,,,,,
Sol-17096,,,,,,,
Sol-17097,,,,,,,
Sol-17098,,,,,,,
Sol-17099,,,,,,,
Sol-17100,,,,,,,
Sol-17101,,,,,,,
Sol-17102,,,,,,,
Sol-17103,,,,,,,
Sol-17104,,,,,,,
Sol-17105,,,,,,,
Sol-17106,,,,,,,
Sol-17107,,,,,,,
Sol-17108,,,,,,,
Sol-17109,,,,,,,
Sol-17110,,,,,,,
Sol-17111,,,,,,,
Sol-17112,,,,,,,
Sol-17113,,,,,,,
Sol-17114,,,,,,,
Sol-17115,,,,,,,
Sol-17116,,,,,,,
Sol-17117,,,,,,,
Sol-17118,,,,,,,
Sol-17119,,,,,,,
Sol-17120,,,,,,,
Sol-17121,,,,,,,
Sol-17122,,,,,,,
Sol-17123,,,,,,,
Sol-17124,,,,,,,
Sol-17125,,,,,,,
Sol-17126,,,,,,,
Sol-17127,,,,,,,
Sol-17128,,,,,,,
Sol-17129,,,,,,,
Sol-17130,,,,,,,
Sol-17131,,,,,,,
Sol-17132,,,,,,,
Sol-17133,,,,,,,
Sol-17134,,,,,,,
Sol-17135,,,,,,,
Sol-17136,,,,,,,
Sol-17137,,,,,,,
Sol-17138,,,,,,,
Sol-17139,,,,,,,
Sol-17140,,,,,,,
Sol-17141,,,,,,,
Sol-17142,,,,,,,
Sol-17143,,,,,,,
Sol-17144,,,,,,,
Sol-17145,,,,,,,
Sol-17146,,,,,,,
Sol-17147,,,,,,,
Sol-17148,,,,,,,
Sol-17149,,,,,,,
Sol-17150,,,,,,,
Sol-17151,,,,,,,
Sol-17152,,,,,,,
Sol-17153,,,,,,,
Sol-17154,,,,,,,
Sol-17155,,,,,,,
Sol-17156,,,,,,,
Sol-17157,,,,,,,
Sol-17158,,,,,,,
Sol-17159,,,,,,,
Sol-17160,,,,,,,
Sol-17161,,,,,,,
Sol-17162,,,,,,,
Sol-17163,,,,,,,
Sol-17164,,,,,,,
Sol-17165,,,,,,,
Sol-17166,,,,,,,
Sol-17167,,,,,,,
Sol-17168,,,,,,,
Sol-17169,,,,,,,
Sol-17170,,,,,,,
Sol-17171,,,,,,,
Sol-17172,,,,,,,
Sol-17173,,,,,,,
Sol-17174,,,,,,,
Sol-17175,,,,,,,
Sol-17176,,,,,,,
Sol-17177,,,,,,,
Sol-17178,,,,,,,
Sol-17179,,,,,,,
Sol-17180,,,,,,,
Sol-17181,,,,,,,
Sol-17182,,,,,,,
Sol-17183,,,,,,,
Sol-17184,,,,,,,
Sol-17185,,,,,,,
Sol-17186,,,,,,,
Sol-17187,,,,,,,
Sol-17188,,,,,,,
Sol-17189,,,,,,,
Sol-17190,,,,,,,
Sol-17191,,,,,,,
Sol-17192,,,,,,,
Sol-17193,,,,,,,
Sol-17194,,,,,,,
Sol-17195,,,,,,,
Sol-17196,,,,,,,
Sol-17197,,,,,,,
Sol-17198,,,,,,,
Sol-17199,,,,,,,
Sol-17200,,,,,,,
Sol-17201,,,,,,,
Sol-17202,,,,,,,
Sol-17203,,,,,,,
Sol-17204,,,,,,,
Sol-17205,,,,,,,
Sol-17206,,,,,,,
Sol-17207,,,,,,,
Sol-17208,,,,,,,
Sol-17209,,,,,,,
Sol-17210,,,,,,,
Sol-17211,,,,,,,
Sol-17212,,,,,,,
Sol-17213,,,,,,,
Sol-17214,,,,,,,
Sol-17215,,,,,,,
Sol-17216,,,,,,,
Sol-17217,,,,,,,
Sol-17218,,,,,,,
Sol-17219,,,,,,,
Sol-17220,,,,,,,
Sol-17221,,,,,,,
Sol-17222,,,,,,,
Sol-17223,,,,,,,
Sol-17224,,,,,,,
Sol-17225,,,,,,,
Sol-17226,,,,,,,
Sol-17227,,,,,,,
Sol-17228,,,,,,,
Sol-17229,,,,,,,
Sol-17230,,,,,,,
Sol-17231,,,,,,,
Sol-17232,,,,,,,
Sol-17233,,,,,,,
Sol-17234,,,,,,,
Sol-17235,,,,,,,
Sol-17236,,,,,,,
Sol-17237,,,,,,,
Sol-17238,,,,,,,
Sol-17239,,,,,,,
Sol-17240,,,,,,,
Sol-17241,,,,,,,
Sol-17242,,,,,,,
Sol-17243,,,,,,,
Sol-17244,,,,,,,
Sol-17245,,,,,,,
Sol-17246,,,,,,,
Sol-17247,,,,,,,
Sol-17248,,,,,,,
Sol-17249,,,,,,,
Sol-17250,,,,,,,
Sol-17251,,,,,,,
Sol-17252,,,,,,,
Sol-17253,,,,,,,
Sol-17254,,,,,,,
Sol-17255,,,,,,,
Sol-17256,,,,,,,
Sol-17257,,,,,,,
Sol-17258,,,,,,,
Sol-17259,,,,,,,
Sol-17260,,,,,,,
Sol-17261,,,,,,,
Sol-17262,,,,,,,
Sol-17263,,,,,,,
Sol-17264,,,,,,,
Sol-17265,,,,,,,
Sol-17266,,,,,,,
Sol-17267,,,,,,,
Sol-17268,,,,,,,
Sol-17269,,,,,,,
Sol-17270,,,,,,,
Sol-17271,,,,,,,
Sol-17272,,,,,,,
Sol-17273,,,,,,,
Sol-17274,,,,,,,
Sol-17275,,,,,,,
Sol-17276,,,,,,,
Sol-17277,,,,,,,
Sol-17278,,,,,,,
Sol-17279,,,,,,,
Sol-17280,,,,,,,
Sol-17281,,,,,,,
Sol-17282,,,,,,,
Sol-17283,,,,,,,
Sol-17284,,,,,,,
Sol-17285,,,,,,,
Sol-17286,,,,,,,
Sol-17287,,,,,,,
Sol-17288,,,,,,,
Sol-17289,,,,,,,
Sol-17290,,,,,,,
Sol-17291,,,,,,,
Sol-17292,,,,,,,
Sol-17293,,,,,,,
Sol-17294,,,,,,,
Sol-17295,,,,,,,
Sol-17296,,,,,,,
Sol-17297,,,,,,,
Sol-17298,,,,,,,
Sol-17299,,,,,,,
Sol-17300,,,,,,,
Sol-17301,,,,,,,
Sol-17302,,,,,,,
Sol-17303,,,,,,,
Sol-17304,,,,,,,
Sol-17305,,,,,,,
Sol-17306,,,,,,,
Sol-17307,,,,,,,
Sol-17308,,,,,,,
Sol-17309,,,,,,,
Sol-17310,,,,,,,
Sol-17311,,,,,,,
Sol-17312,,,,,,,
Sol-17313,,,,,,,
Sol-17314,,,,,,,
Sol-17315,,,,,,,
Sol-17316,,,,,,,
Sol-17317,,,,,,,
Sol-17318,,,,,,,
Sol-17319,,,,,,,
Sol-17320,,,,,,,
Sol-17321,,,,,,,
Sol-17322,,,,,,,
Sol-17323,,,,,,,
Sol-17324,,,,,,,
Sol-17325,,,,,,,
Sol-17326,,,,,,,
Sol-17327,,,,,,,
Sol-17328,,,,,,,
Sol-17329,,,,,,,
Sol-17330,,,,,,,
Sol-17331,,,,,,,
Sol-17332,,,,,,,
Sol-17333,,,,,,,
Sol-17334,,,,,,,
Sol-17335,,,,,,,
Sol-17336,,,,,,,
Sol-17337,,,,,,,
Sol-17338,,,,,,,
Sol-17339,,,,,,,
Sol-17340,,,,,,,
Sol-17341,,,,,,,
Sol-17342,,,,,,,
Sol-17343,,,,,,,
Sol-17344,,,,,,,
Sol-17345,,,,,,,
Sol-17346,,,,,,,
Sol-17347,,,,,,,
Sol-17348,,,,,,,
Sol-17349,,,,,,,
Sol-17350,,,,,,,
Sol-17351,,,,,,,
Sol-17352,,,,,,,
Sol-17353,,,,,,,
Sol-17354,,,,,,,
Sol-17355,,,,,,,
Sol-17356,,,,,,,
Sol-17357,,,,,,,
Sol-17358,,,,,,,
Sol-17359,,,,,,,
Sol-17360,,,,,,,
Sol-17361,,,,,,,
Sol-17362,,,,,,,
Sol-17363,,,,,,,
Sol-17364,,,,,,,
Sol-17365,,,,,,,
Sol-17366,,,,,,,
Sol-17367,,,,,,,
Sol-17368,,,,,,,
Sol-17369,,,,,,,
Sol-17370,,,,,,,
Sol-17371,,,,,,,
Sol-17372,,,,,,,
Sol-17373,,,,,,,
Sol-17374,,,,,,,
Sol-17375,,,,,,,
Sol-17376,,,,,,,
Sol-17377,,,,,,,
Sol-17378,,,,,,,
Sol-17379,,,,,,,
Sol-17380,,,,,,,
Sol-17381,,,,,,,
Sol-17382,,,,,,,
Sol-17383,,,,,,,
Sol-17384,,,,,,,
Sol-17385,,,,,,,
Sol-17386,,,,,,,
Sol-17387,,,,,,,
Sol-17388,,,,,,,
Sol-17389,,,,,,,
Sol-17390,,,,,,,
Sol-17391,,,,,,,
Sol-17392,,,,,,,
Sol-17393,,,,,,,
Sol-17394,,,,,,,
Sol-17395,,,,,,,
Sol-17396,,,,,,,
Sol-17397,,,,,,,
Sol-17398,,,,,,,
Sol-17399,,,,,,,
Sol-17400,,,,,,,
Sol-17401,,,,,,,
Sol-17402,,,,,,,
Sol-17403,,,,,,,
Sol-17404,,,,,,,
Sol-17405,,,,,,,
Sol-17406,,,,,,,
Sol-17407,,,,,,,
Sol-17408,,,,,,,
Sol-17409,,,,,,,
Sol-17410,,,,,,,
Sol-17411,,,,,,,
Sol-17412,,,,,,,
Sol-17413,,,,,,,
Sol-17414,,,,,,,
Sol-17415,,,,,,,
Sol-17416,,,,,,,
Sol-17417,,,,,,,
Sol-17418,,,,,,,
Sol-17419,,,,,,,
Sol-17420,,,,,,,
Sol-17421,,,,,,,
Sol-17422,,,,,,,
Sol-17423,,,,,,,
Sol-17424,,,,,,,
Sol-17425,,,,,,,
Sol-17426,,,,,,,
Sol-17427,,,,,,,
Sol-17428,,,,,,,
Sol-17429,,,,,,,
Sol-17430,,,,,,,
Sol-17431,,,,,,,
Sol-17432,,,,,,,
Sol-17433,,,,,,,
Sol-17434,,,,,,,
Sol-17435,,,,,,,
Sol-17436,,,,,,,
Sol-17437,,,,,,,
Sol-17438,,,,,,,
Sol-17439,,,,,,,
Sol-17440,,,,,,,
Sol-17441,,,,,,,
Sol-17442,,,,,,,
Sol-17443,,,,,,,
Sol-17444,,,,,,,
Sol-17445,,,,,,,
Sol-17446,,,,,,,
Sol-17447,,,,,,,
Sol-17448,,,,,,,
Sol-17449,,,,,,,
Sol-17450,,,,,,,
Sol-17451,,,,,,,
Sol-17452,,,,,,,
Sol-17453,,,,,,,
Sol-17454,,,,,,,
Sol-17455,,,,,,,
Sol-17456,,,,,,,
Sol-17457,,,,,,,
Sol-17458,,,,,,,
Sol-17459,,,,,,,
Sol-17460,,,,,,,
Sol-17461,,,,,,,
Sol-17462,,,,,,,
Sol-17463,,,,,,,
Sol-17464,,,,,,,
Sol-17465,,,,,,,
Sol-17466,,,,,,,
Sol-17467,,,,,,,
Sol-17468,,,,,,,
Sol-17469,,,,,,,
Sol-17470,,,,,,,
Sol-17471,,,,,,,
Sol-17472,,,,,,,
Sol-17473,,,,,,,
Sol-17474,,,,,,,
Sol-17475,,,,,,,
Sol-17476,,,,,,,
Sol-17477,,,,,,,
Sol-17478,,,,,,,
Sol-17479,,,,,,,
Sol-17480,,,,,,,
Sol-17481,,,,,,,
Sol-17482,,,,,,,
Sol-17483,,,,,,,
Sol-17484,,,,,,,
Sol-17485,,,,,,,
Sol-17486,,,,,,,
Sol-17487,,,,,,,
Sol-17488,,,,,,,
Sol-17489,,,,,,,
Sol-17490,,,,,,,
Sol-17491,,,,,,,
Sol-17492,,,,,,,
Sol-17493,,,,,,,
Sol-17494,,,,,,,
Sol-17495,,,,,,,
Sol-17496,,,,,,,
Sol-17497,,,,,,,
Sol-17498,,,,,,,
Sol-17499,,,,,,,
Sol-17500,,,,,,,
Sol-17501,,,,,,,
Sol-17502,,,,,,,
Sol-17503,,,,,,,
Sol-17504,,,,,,,
Sol-17505,,,,,,,
Sol-17506,,,,,,,
Sol-17507,,,,,,,
Sol-17508,,,,,,,
Sol-17509,,,,,,,
Sol-17510,,,,,,,
Sol-17511,,,,,,,
Sol-17512,,,,,,,
Sol-17513,,,,,,,
Sol-17514,,,,,,,
Sol-17515,,,,,,,
Sol-17516,,,,,,,
Sol-17517,,,,,,,
Sol-17518,,,,,,,
Sol-17519,,,,,,,
Sol-17520,,,,,,,
Sol-17521,,,,,,,
Sol-17522,,,,,,,
Sol-17523,,,,,,,
Sol-17524,,,,,,,
Sol-17525,,,,,,,
Sol-17526,,,,,,,
Sol-17527,,,,,,,
Sol-17528,,,,,,,
Sol-17529,,,,,,,
Sol-17530,,,,,,,
Sol-17531,,,,,,,
Sol-17532,,,,,,,
Sol-17533,,,,,,,
Sol-17534,,,,,,,
Sol-17535,,,,,,,
Sol-17536,,,,,,,
Sol-17537,,,,,,,
Sol-17538,,,,,,,
Sol-17539,,,,,,,
Sol-17540,,,,,,,
Sol-17541,,,,,,,
Sol-17542,,,,,,,
Sol-17543,,,,,,,
Sol-17544,,,,,,,
Sol-17545,,,,,,,
Sol-17546,,,,,,,
Sol-17547,,,,,,,
Sol-17548,,,,,,,
Sol-17549,,,,,,,
Sol-17550,,,,,,,
Sol-17551,,,,,,,
Sol-17552,,,,,,,
Sol-17553,,,,,,,
Sol-17554,,,,,,,
Sol-17555,,,,,,,
Sol-17556,,,,,,,
Sol-17557,,,,,,,
Sol-17558,,,,,,,
Sol-17559,,,,,,,
Sol-17560,,,,,,,
Sol-17561,,,,,,,
Sol-17562,,,,,,,
Sol-17563,,,,,,,
Sol-17564,,,,,,,
Sol-17565,,,,,,,
Sol-17566,,,,,,,
Sol-17567,,,,,,,
Sol-17568,,,,,,,
Sol-17569,,,,,,,
Sol-17570,,,,,,,
Sol-17571,,,,,,,
Sol-17572,,,,,,,
Sol-17573,,,,,,,
Sol-17574,,,,,,,
Sol-17575,,,,,,,
Sol-17576,,,,,,,
Sol-17577,,,,,,,
Sol-17578,,,,,,,
Sol-17579,,,,,,,
Sol-17580,,,,,,,
Sol-17581,,,,,,,
Sol-17582,,,,,,,
Sol-17583,,,,,,,
Sol-17584,,,,,,,
Sol-17585,,,,,,,
Sol-17586,,,,,,,
Sol-17587,,,,,,,
Sol-17588,,,,,,,
Sol-17589,,,,,,,
Sol-17590,,,,,,,
Sol-17591,,,,,,,
Sol-17592,,,,,,,
Sol-17593,,,,,,,
Sol-17594,,,,,,,
Sol-17595,,,,,,,
Sol-17596,,,,,,,
Sol-17597,,,,,,,
Sol-17598,,,,,,,
Sol-17599,,,,,,,
Sol-17600,,,,,,,
Sol-17601,,,,,,,
Sol-17602,,,,,,,
Sol-17603,,,,,,,
Sol-17604,,,,,,,
Sol-17605,,,,,,,
Sol-17606,,,,,,,
Sol-17607,,,,,,,
Sol-17608,,,,,,,
Sol-17609,,,,,,,
Sol-17610,,,,,,,
Sol-17611,,,,,,,
Sol-17612,,,,,,,
Sol-17613,,,,,,,
Sol-17614,,,,,,,
Sol-17615,,,,,,,
Sol-17616,,,,,,,
Sol-17617,,,,,,,
Sol-17618,,,,,,,
Sol-17619,,,,,,,
Sol-17620,,,,,,,
Sol-17621,,,,,,,
Sol-17622,,,,,,,
Sol-17623,,,,,,,
Sol-17624,,,,,,,
Sol-17625,,,,,,,
Sol-17626,,,,,,,
Sol-17627,,,,,,,
Sol-17628,,,,,,,
Sol-17629,,,,,,,
Sol-17630,,,,,,,
Sol-17631,,,,,,,
Sol-17632,,,,,,,
Sol-17633,,,,,,,
Sol-17634,,,,,,,
Sol-17635,,,,,,,
Sol-17636,,,,,,,
Sol-17637,,,,,,,
Sol-17638,,,,,,,
Sol-17639,,,,,,,
Sol-17640,,,,,,,
Sol-17641,,,,,,,
Sol-17642,,,,,,,
Sol-17643,,,,,,,
Sol-17644,,,,,,,
Sol-17645,,,,,,,
Sol-17646,,,,,,,
Sol-17647,,,,,,,
Sol-17648,,,,,,,
Sol-17649,,,,,,,
Sol-17650,,,,,,,
Sol-17651,,,,,,,
Sol-17652,,,,,,,
Sol-17653,,,,,,,
Sol-17654,,,,,,,
Sol-17655,,,,,,,
Sol-17656,,,,,,,
Sol-17657,,,,,,,
Sol-17658,,,,,,,
Sol-17659,,,,,,,
Sol-17660,,,,,,,
Sol-17661,,,,,,,
Sol-17662,,,,,,,
Sol-17663,,,,,,,
Sol-17664,,,,,,,
Sol-17665,,,,,,,
Sol-17666,,,,,,,
Sol-17667,,,,,,,
Sol-17668,,,,,,,
Sol-17669,,,,,,,
Sol-17670,,,,,,,
Sol-17671,,,,,,,
Sol-17672,,,,,,,
Sol-17673,,,,,,,
Sol-17674,,,,,,,
Sol-17675,,,,,,,
Sol-17676,,,,,,,
Sol-17677,,,,,,,
Sol-17678,,,,,,,
Sol-17679,,,,,,,
Sol-17680,,,,,,,
Sol-17681,,,,,,,
Sol-17682,,,,,,,
Sol-17683,,,,,,,
Sol-17684,,,,,,,
Sol-17685,,,,,,,
Sol-17686,,,,,,,
Sol-17687,,,,,,,
Sol-17688,,,,,,,
Sol-17689,,,,,,,
Sol-17690,,,,,,,
Sol-17691,,,,,,,
Sol-17692,,,,,,,
Sol-17693,,,,,,,
Sol-17694,,,,,,,
Sol-17695,,,,,,,
Sol-17696,,,,,,,
Sol-17697,,,,,,,
Sol-17698,,,,,,,
Sol-17699,,,,,,,
Sol-17700,,,,,,,
Sol-17701,,,,,,,
Sol-17702,,,,,,,
Sol-17703,,,,,,,
Sol-17704,,,,,,,
Sol-17705,,,,,,,
Sol-17706,,,,,,,
Sol-17707,,,,,,,
Sol-17708,,,,,,,
Sol-17709,,,,,,,
Sol-17710,,,,,,,
Sol-17711,,,,,,,
Sol-17712,,,,,,,
Sol-17713,,,,,,,
Sol-17714,,,,,,,
Sol-17715,,,,,,,
Sol-17716,,,,,,,
Sol-17717,,,,,,,
Sol-17718,,,,,,,
Sol-17719,,,,,,,
Sol-17720,,,,,,,
Sol-17721,,,,,,,
Sol-17722,,,,,,,
Sol-17723,,,,,,,
Sol-17724,,,,,,,
Sol-17725,,,,,,,
Sol-17726,,,,,,,
Sol-17727,,,,,,,
Sol-17728,,,,,,,
Sol-17729,,,,,,,
Sol-17730,,,,,,,
Sol-17731,,,,,,,
Sol-17732,,,,,,,
Sol-17733,,,,,,,
Sol-17734,,,,,,,
Sol-17735,,,,,,,
Sol-17736,,,,,,,
Sol-17737,,,,,,,
Sol-17738,,,,,,,
Sol-17739,,,,,,,
Sol-17740,,,,,,,
Sol-17741,,,,,,,
Sol-17742,,,,,,,
Sol-17743,,,,,,,
Sol-17744,,,,,,,
Sol-17745,,,,,,,
Sol-17746,,,,,,,
Sol-17747,,,,,,,
Sol-17748,,,,,,,
Sol-17749,,,,,,,
Sol-17750,,,,,,,
Sol-17751,,,,,,,
Sol-17752,,,,,,,
Sol-17753,,,,,,,
Sol-17754,,,,,,,
Sol-17755,,,,,,,
Sol-17756,,,,,,,
Sol-17757,,,,,,,
Sol-17758,,,,,,,
Sol-17759,,,,,,,
Sol-17760,,,,,,,
Sol-17761,,,,,,,
Sol-17762,,,,,,,
Sol-17763,,,,,,,
Sol-17764,,,,,,,
Sol-17765,,,,,,,
Sol-17766,,,,,,,
Sol-17767,,,,,,,
Sol-17768,,,,,,,
Sol-17769,,,,,,,
Sol-17770,,,,,,,
Sol-17771,,,,,,,
Sol-17772,,,,,,,
Sol-17773,,,,,,,
Sol-17774,,,,,,,
Sol-17775,,,,,,,
Sol-17776,,,,,,,
Sol-17777,,,,,,,
Sol-17778,,,,,,,
Sol-17779,,,,,,,
Sol-17780,,,,,,,
Sol-17781,,,,,,,
Sol-17782,,,,,,,
Sol-17783,,,,,,,
Sol-17784,,,,,,,
Sol-17785,,,,,,,
Sol-17786,,,,,,,
Sol-17787,,,,,,,
Sol-17788,,,,,,,
Sol-17789,,,,,,,
Sol-17790,,,,,,,
Sol-17791,,,,,,,
Sol-17792,,,,,,,
Sol-17793,,,,,,,
Sol-17794,,,,,,,
Sol-17795,,,,,,,
Sol-17796,,,,,,,
Sol-17797,,,,,,,
Sol-17798,,,,,,,
Sol-17799,,,,,,,
Sol-17800,,,,,,,
Sol-17801,,,,,,,
Sol-17802,,,,,,,
Sol-17803,,,,,,,
Sol-17804,,,,,,,
Sol-17805,,,,,,,
Sol-17806,,,,,,,
Sol-17807,,,,,,,
Sol-17808,,,,,,,
Sol-17809,,,,,,,
Sol-17810,,,,,,,
Sol-17811,,,,,,,
Sol-17812,,,,,,,
Sol-17813,,,,,,,
Sol-17814,,,,,,,
Sol-17815,,,,,,,
Sol-17816,,,,,,,
Sol-17817,,,,,,,
Sol-17818,,,,,,,
Sol-17819,,,,,,,
Sol-17820,,,,,,,
Sol-17821,,,,,,,
Sol-17822,,,,,,,
Sol-17823,,,,,,,
Sol-17824,,,,,,,
Sol-17825,,,,,,,
Sol-17826,,,,,,,
Sol-17827,,,,,,,
Sol-17828,,,,,,,
Sol-17829,,,,,,,
Sol-17830,,,,,,,
Sol-17831,,,,,,,
Sol-17832,,,,,,,
Sol-17833,,,,,,,
Sol-17834,,,,,,,
Sol-17835,,,,,,,
Sol-17836,,,,,,,
Sol-17837,,,,,,,
Sol-17838,,,,,,,
Sol-17839,,,,,,,
Sol-17840,,,,,,,
Sol-17841,,,,,,,
Sol-17842,,,,,,,
Sol-17843,,,,,,,
Sol-17844,,,,,,,
Sol-17845,,,,,,,
Sol-17846,,,,,,,
Sol-17847,,,,,,,
Sol-17848,,,,,,,
Sol-17849,,,,,,,
Sol-17850,,,,,,,
Sol-17851,,,,,,,
Sol-17852,,,,,,,
Sol-17853,,,,,,,
Sol-17854,,,,,,,
Sol-17855,,,,,,,
Sol-17856,,,,,,,
Sol-17857,,,,,,,
Sol-17858,,,,,,,
Sol-17859,,,,,,,
Sol-17860,,,,,,,
Sol-17861,,,,,,,
Sol-17862,,,,,,,
Sol-17863,,,,,,,
Sol-17864,,,,,,,
Sol-17865,,,,,,,
Sol-17866,,,,,,,
Sol-17867,,,,,,,
Sol-17868,,,,,,,
Sol-17869,,,,,,,
Sol-17870,,,,,,,
Sol-17871,,,,,,,
Sol-17872,,,,,,,
Sol-17873,,,,,,,
Sol-17874,,,,,,,
Sol-17875,,,,,,,
Sol-17876,,,,,,,
Sol-17877,,,,,,,
Sol-17878,,,,,,,
Sol-17879,,,,,,,
Sol-17880,,,,,,,
Sol-17881,,,,,,,
Sol-17882,,,,,,,
Sol-17883,,,,,,,
Sol-17884,,,,,,,
Sol-17885,,,,,,,
Sol-17886,,,,,,,
Sol-17887,,,,,,,
Sol-17888,,,,,,,
Sol-17889,,,,,,,
Sol-17890,,,,,,,
Sol-17891,,,,,,,
Sol-17892,,,,,,,
Sol-17893,,,,,,,
Sol-17894,,,,,,,
Sol-17895,,,,,,,
Sol-17896,,,,,,,
Sol-17897,,,,,,,
Sol-17898,,,,,,,
Sol-17899,,,,,,,
Sol-17900,,,,,,,
Sol-17901,,,,,,,
Sol-17902,,,,,,,
Sol-17903,,,,,,,
Sol-17904,,,,,,,
Sol-17905,,,,,,,
Sol-17906,,,,,,,
Sol-17907,,,,,,,
Sol-17908,,,,,,,
Sol-17909,,,,,,,
Sol-17910,,,,,,,
Sol-17911,,,,,,,
Sol-17912,,,,,,,
Sol-17913,,,,,,,
Sol-17914,,,,,,,
Sol-17915,,,,,,,
Sol-17916,,,,,,,
Sol-17917,,,,,,,
Sol-17918,,,,,,,
Sol-17919,,,,,,,
Sol-17920,,,,,,,
Sol-17921,,,,,,,
Sol-17922,,,,,,,
Sol-17923,,,,,,,
Sol-17924,,,,,,,
Sol-17925,,,,,,,
Sol-17926,,,,,,,
Sol-17927,,,,,,,
Sol-17928,,,,,,,
Sol-17929,,,,,,,
Sol-17930,,,,,,,
Sol-17931,,,,,,,
Sol-17932,,,,,,,
Sol-17933,,,,,,,
Sol-17934,,,,,,,
Sol-17935,,,,,,,
Sol-17936,,,,,,,
Sol-17937,,,,,,,
Sol-17938,,,,,,,
Sol-17939,,,,,,,
Sol-17940,,,,,,,
Sol-17941,,,,,,,
Sol-17942,,,,,,,
Sol-17943,,,,,,,
Sol-17944,,,,,,,
Sol-17945,,,,,,,
Sol-17946,,,,,,,
Sol-17947,,,,,,,
Sol-17948,,,,,,,
Sol-17949,,,,,,,
Sol-17950,,,,,,,
Sol-17951,,,,,,,
Sol-17952,,,,,,,
Sol-17953,,,,,,,
Sol-17954,,,,,,,
Sol-17955,,,,,,,
Sol-17956,,,,,,,
Sol-17957,,,,,,,
Sol-17958,,,,,,,
Sol-17959,,,,,,,
Sol-17960,,,,,,,
Sol-17961,,,,,,,
Sol-17962,,,,,,,
Sol-17963,,,,,,,
Sol-17964,,,,,,,
Sol-17965,,,,,,,
Sol-17966,,,,,,,
Sol-17967,,,,,,,
Sol-17968,,,,,,,
Sol-17969,,,,,,,
Sol-17970,,,,,,,
Sol-17971,,,,,,,
Sol-17972,,,,,,,
Sol-17973,,,,,,,
Sol-17974,,,,,,,
Sol-17975,,,,,,,
Sol-17976,,,,,,,
Sol-17977,,,,,,,
Sol-17978,,,,,,,
Sol-17979,,,,,,,
Sol-17980,,,,,,,
Sol-17981,,,,,,,
Sol-17982,,,,,,,
Sol-17983,,,,,,,
Sol-17984,,,,,,,
Sol-17985,,,,,,,
Sol-17986,,,,,,,
Sol-17987,,,,,,,
Sol-17988,,,,,,,
Sol-17989,,,,,,,
Sol-17990,,,,,,,
Sol-17991,,,,,,,
Sol-17992,,,,,,,
Sol-17993,,,,,,,
Sol-17994,,,,,,,
Sol-17995,,,,,,,
Sol-17996,,,,,,,
Sol-17997,,,,,,,
Sol-17998,,,,,,,
Sol-17999,,,,,,,
Sol-18000,,,,,,,
Sol-18001,,,,,,,
Sol-18002,,,,,,,
Sol-18003,,,,,,,
Sol-18004,,,,,,,
Sol-18005,,,,,,,
Sol-18006,,,,,,,
Sol-18007,,,,,,,
Sol-18008,,,,,,,
Sol-18009,,,,,,,
Sol-18010,,,,,,,
Sol-18011,,,,,,,
Sol-18012,,,,,,,
Sol-18013,,,,,,,
Sol-18014,,,,,,,
Sol-18015,,,,,,,
Sol-18016,,,,,,,
Sol-18017,,,,,,,
Sol-18018,,,,,,,
Sol-18019,,,,,,,
Sol-18020,,,,,,,
Sol-18021,,,,,,,
Sol-18022,,,,,,,
Sol-18023,,,,,,,
Sol-18024,,,,,,,
Sol-18025,,,,,,,
Sol-18026,,,,,,,
Sol-18027,,,,,,,
Sol-18028,,,,,,,
Sol-18029,,,,,,,
Sol-18030,,,,,,,
Sol-18031,,,,,,,
Sol-18032,,,,,,,
Sol-18033,,,,,,,
Sol-18034,,,,,,,
Sol-18035,,,,,,,
Sol-18036,,,,,,,
Sol-18037,,,,,,,
Sol-18038,,,,,,,
Sol-18039,,,,,,,
Sol-18040,,,,,,,
Sol-18041,,,,,,,
Sol-18042,,,,,,,
Sol-18043,,,,,,,
Sol-18044,,,,,,,
Sol-18045,,,,,,,
Sol-18046,,,,,,,
Sol-18047,,,,,,,
Sol-18048,,,,,,,
Sol-18049,,,,,,,
Sol-18050,,,,,,,
Sol-18051,,,,,,,
Sol-18052,,,,,,,
Sol-18053,,,,,,,
Sol-18054,,,,,,,
Sol-18055,,,,,,,
Sol-18056,,,,,,,
Sol-18057,,,,,,,
Sol-18058,,,,,,,
Sol-18059,,,,,,,
Sol-18060,,,,,,,
Sol-18061,,,,,,,
Sol-18062,,,,,,,
Sol-18063,,,,,,,
Sol-18064,,,,,,,
Sol-18065,,,,,,,
Sol-18066,,,,,,,
Sol-18067,,,,,,,
Sol-18068,,,,,,,
Sol-18069,,,,,,,
Sol-18070,,,,,,,
Sol-18071,,,,,,,
Sol-18072,,,,,,,
Sol-18073,,,,,,,
Sol-18074,,,,,,,
Sol-18075,,,,,,,
Sol-18076,,,,,,,
Sol-18077,,,,,,,
Sol-18078,,,,,,,
Sol-18079,,,,,,,
Sol-18080,,,,,,,
Sol-18081,,,,,,,
Sol-18082,,,,,,,
Sol-18083,,,,,,,
Sol-18084,,,,,,,
Sol-18085,,,,,,,
Sol-18086,,,,,,,
Sol-18087,,,,,,,
Sol-18088,,,,,,,
Sol-18089,,,,,,,
Sol-18090,,,,,,,
Sol-18091,,,,,,,
Sol-18092,,,,,,,
Sol-18093,,,,,,,
Sol-18094,,,,,,,
Sol-18095,,,,,,,
Sol-18096,,,,,,,
Sol-18097,,,,,,,
Sol-18098,,,,,,,
Sol-18099,,,,,,,
Sol-18100,,,,,,,
Sol-18101,,,,,,,
Sol-18102,,,,,,,
Sol-18103,,,,,,,
Sol-18104,,,,,,,
Sol-18105,,,,,,,
Sol-18106,,,,,,,
Sol-18107,,,,,,,
Sol-18108,,,,,,,
Sol-18109,,,,,,,
Sol-18110,,,,,,,
Sol-18111,,,,,,,
Sol-18112,,,,,,,
Sol-18113,,,,,,,
Sol-18114,,,,,,,
Sol-18115,,,,,,,
Sol-18116,,,,,,,
Sol-18117,,,,,,,
Sol-18118,,,,,,,
Sol-18119,,,,,,,
Sol-18120,,,,,,,
Sol-18121,,,,,,,
Sol-18122,,,,,,,
Sol-18123,,,,,,,
Sol-18124,,,,,,,
Sol-18125,,,,,,,
Sol-18126,,,,,,,
Sol-18127,,,,,,,
Sol-18128,,,,,,,
Sol-18129,,,,,,,
Sol-18130,,,,,,,
Sol-18131,,,,,,,
Sol-18132,,,,,,,
Sol-18133,,,,,,,
Sol-18134,,,,,,,
Sol-18135,,,,,,,
Sol-18136,,,,,,,
Sol-18137,,,,,,,
Sol-18138,,,,,,,
Sol-18139,,,,,,,
Sol-18140,,,,,,,
Sol-18141,,,,,,,
Sol-18142,,,,,,,
Sol-18143,,,,,,,
Sol-18144,,,,,,,
Sol-18145,,,,,,,
Sol-18146,,,,,,,
Sol-18147,,,,,,,
Sol-18148,,,,,,,
Sol-18149,,,,,,,
Sol-18150,,,,,,,
Sol-18151,,,,,,,
Sol-18152,,,,,,,
Sol-18153,,,,,,,
Sol-18154,,,,,,,
Sol-18155,,,,,,,
Sol-18156,,,,,,,
Sol-18157,,,,,,,
Sol-18158,,,,,,,
Sol-18159,,,,,,,
Sol-18160,,,,,,,
Sol-18161,,,,,,,
Sol-18162,,,,,,,
Sol-18163,,,,,,,
Sol-18164,,,,,,,
Sol-18165,,,,,,,
Sol-18166,,,,,,,
Sol-18167,,,,,,,
Sol-18168,,,,,,,
Sol-18169,,,,,,,
Sol-18170,,,,,,,
Sol-18171,,,,,,,
Sol-18172,,,,,,,
Sol-18173,,,,,,,
Sol-18174,,,,,,,
Sol-18175,,,,,,,
Sol-18176,,,,,,,
Sol-18177,,,,,,,
Sol-18178,,,,,,,
Sol-18179,,,,,,,
Sol-18180,,,,,,,
Sol-18181,,,,,,,
Sol-18182,,,,,,,
Sol-18183,,,,,,,
Sol-18184,,,,,,,
Sol-18185,,,,,,,
Sol-18186,,,,,,,
Sol-18187,,,,,,,
Sol-18188,,,,,,,
Sol-18189,,,,,,,
Sol-18190,,,,,,,
Sol-18191,,,,,,,
Sol-18192,,,,,,,
Sol-18193,,,,,,,
Sol-18194,,,,,,,
Sol-18195,,,,,,,
Sol-18196,,,,,,,
Sol-18197,,,,,,,
Sol-18198,,,,,,,
Sol-18199,,,,,,,
Sol-18200,,,,,,,
Sol-18201,,,,,,,
Sol-18202,,,,,,,
Sol-18203,,,,,,,
Sol-18204,,,,,,,
Sol-18205,,,,,,,
Sol-18206,,,,,,,
Sol-18207,,,,,,,
Sol-18208,,,,,,,
Sol-18209,,,,,,,
Sol-18210,,,,,,,
Sol-18211,,,,,,,
Sol-18212,,,,,,,
Sol-18213,,,,,,,
Sol-18214,,,,,,,
Sol-18215,,,,,,,
Sol-18216,,,,,,,
Sol-18217,,,,,,,
Sol-18218,,,,,,,
Sol-18219,,,,,,,
Sol-18220,,,,,,,
Sol-18221,,,,,,,
Sol-18222,,,,,,,
Sol-18223,,,,,,,
Sol-18224,,,,,,,
Sol-18225,,,,,,,
Sol-18226,,,,,,,
Sol-18227,,,,,,,
Sol-18228,,,,,,,
Sol-18229,,,,,,,
Sol-18230,,,,,,,
Sol-18231,,,,,,,
Sol-18232,,,,,,,
Sol-18233,,,,,,,
Sol-18234,,,,,,,
Sol-18235,,,,,,,
Sol-18236,,,,,,,
Sol-18237,,,,,,,
Sol-18238,,,,,,,
Sol-18239,,,,,,,
Sol-18240,,,,,,,
Sol-18241,,,,,,,
Sol-18242,,,,,,,
Sol-18243,,,,,,,
Sol-18244,,,,,,,
Sol-18245,,,,,,,
Sol-18246,,,,,,,
Sol-18247,,,,,,,
Sol-18248,,,,,,,
Sol-18249,,,,,,,
Sol-18250,,,,,,,
Sol-18251,,,,,,,
Sol-18252,,,,,,,
Sol-18253,,,,,,,
Sol-18254,,,,,,,
Sol-18255,,,,,,,
Sol-18256,,,,,,,
Sol-18257,,,,,,,
Sol-18258,,,,,,,
Sol-18259,,,,,,,
Sol-18260,,,,,,,
Sol-18261,,,,,,,
Sol-18262,,,,,,,
Sol-18263,,,,,,,
Sol-18264,,,,,,,
Sol-18265,,,,,,,
Sol-18266,,,,,,,
Sol-18267,,,,,,,
Sol-18268,,,,,,,
Sol-18269,,,,,,,
Sol-18270,,,,,,,
Sol-18271,,,,,,,
Sol-18272,,,,,,,
Sol-18273,,,,,,,
Sol-18274,,,,,,,
Sol-18275,,,,,,,
Sol-18276,,,,,,,
Sol-18277,,,,,,,
Sol-18278,,,,,,,
Sol-18279,,,,,,,
Sol-18280,,,,,,,
Sol-18281,,,,,,,
Sol-18282,,,,,,,
Sol-18283,,,,,,,
Sol-18284,,,,,,,
Sol-18285,,,,,,,
Sol-18286,,,,,,,
Sol-18287,,,,,,,
Sol-18288,,,,,,,
Sol-18289,,,,,,,
Sol-18290,,,,,,,
Sol-18291,,,,,,,
Sol-18292,,,,,,,
Sol-18293,,,,,,,
Sol-18294,,,,,,,
Sol-18295,,,,,,,
Sol-18296,,,,,,,
Sol-18297,,,,,,,
Sol-18298,,,,,,,
Sol-18299,,,,,,,
Sol-18300,,,,,,,
Sol-18301,,,,,,,
Sol-18302,,,,,,,
Sol-18303,,,,,,,
Sol-18304,,,,,,,
Sol-18305,,,,,,,
Sol-18306,,,,,,,
Sol-18307,,,,,,,
Sol-18308,,,,,,,
Sol-18309,,,,,,,
Sol-18310,,,,,,,
Sol-18311,,,,,,,
Sol-18312,,,,,,,
Sol-18313,,,,,,,
Sol-18314,,,,,,,
Sol-18315,,,,,,,
Sol-18316,,,,,,,
Sol-18317,,,,,,,
Sol-18318,,,,,,,
Sol-18319,,,,,,,
Sol-18320,,,,,,,
Sol-18321,,,,,,,
Sol-18322,,,,,,,
Sol-18323,,,,,,,
Sol-18324,,,,,,,
Sol-18325,,,,,,,
Sol-18326,,,,,,,
Sol-18327,,,,,,,
Sol-18328,,,,,,,
Sol-18329,,,,,,,
Sol-18330,,,,,,,
Sol-18331,,,,,,,
Sol-18332,,,,,,,
Sol-18333,,,,,,,
Sol-18334,,,,,,,
Sol-18335,,,,,,,
Sol-18336,,,,,,,
Sol-18337,,,,,,,
Sol-18338,,,,,,,
Sol-18339,,,,,,,
Sol-18340,,,,,,,
Sol-18341,,,,,,,
Sol-18342,,,,,,,
Sol-18343,,,,,,,
Sol-18344,,,,,,,
Sol-18345,,,,,,,
Sol-18346,,,,,,,
Sol-18347,,,,,,,
Sol-18348,,,,,,,
Sol-18349,,,,,,,
Sol-18350,,,,,,,
Sol-18351,,,,,,,
Sol-18352,,,,,,,
Sol-18353,,,,,,,
Sol-18354,,,,,,,
Sol-18355,,,,,,,
Sol-18356,,,,,,,
Sol-18357,,,,,,,
Sol-18358,,,,,,,
Sol-18359,,,,,,,
Sol-18360,,,,,,,
Sol-18361,,,,,,,
Sol-18362,,,,,,,
Sol-18363,,,,,,,
Sol-18364,,,,,,,
Sol-18365,,,,,,,
Sol-18366,,,,,,,
Sol-18367,,,,,,,
Sol-18368,,,,,,,
Sol-18369,,,,,,,
Sol-18370,,,,,,,
Sol-18371,,,,,,,
Sol-18372,,,,,,,
Sol-18373,,,,,,,
Sol-18374,,,,,,,
Sol-18375,,,,,,,
Sol-18376,,,,,,,
Sol-18377,,,,,,,
Sol-18378,,,,,,,
Sol-18379,,,,,,,
Sol-18380,,,,,,,
Sol-18381,,,,,,,
Sol-18382,,,,,,,
Sol-18383,,,,,,,
Sol-18384,,,,,,,
Sol-18385,,,,,,,
Sol-18386,,,,,,,
Sol-18387,,,,,,,
Sol-18388,,,,,,,
Sol-18389,,,,,,,
Sol-18390,,,,,,,
Sol-18391,,,,,,,
Sol-18392,,,,,,,
Sol-18393,,,,,,,
Sol-18394,,,,,,,
Sol-18395,,,,,,,
Sol-18396,,,,,,,
Sol-18397,,,,,,,
Sol-18398,,,,,,,
Sol-18399,,,,,,,
Sol-18400,,,,,,,
Sol-18401,,,,,,,
Sol-18402,,,,,,,
Sol-18403,,,,,,,
Sol-18404,,,,,,,
Sol-18405,,,,,,,
Sol-18406,,,,,,,
Sol-18407,,,,,,,
Sol-18408,,,,,,,
Sol-18409,,,,,,,
Sol-18410,,,,,,,
Sol-18411,,,,,,,
Sol-18412,,,,,,,
Sol-18413,,,,,,,
Sol-18414,,,,,,,
Sol-18415,,,,,,,
Sol-18416,,,,,,,
Sol-18417,,,,,,,
Sol-18418,,,,,,,
Sol-18419,,,,,,,
Sol-18420,,,,,,,
Sol-18421,,,,,,,
Sol-18422,,,,,,,
Sol-18423,,,,,,,
Sol-18424,,,,,,,
Sol-18425,,,,,,,
Sol-18426,,,,,,,
Sol-18427,,,,,,,
Sol-18428,,,,,,,
Sol-18429,,,,,,,
Sol-18430,,,,,,,
Sol-18431,,,,,,,
Sol-18432,,,,,,,
Sol-18433,,,,,,,
Sol-18434,,,,,,,
Sol-18435,,,,,,,
Sol-18436,,,,,,,
Sol-18437,,,,,,,
Sol-18438,,,,,,,
Sol-18439,,,,,,,
Sol-18440,,,,,,,
Sol-18441,,,,,,,
Sol-18442,,,,,,,
Sol-18443,,,,,,,
Sol-18444,,,,,,,
Sol-18445,,,,,,,
Sol-18446,,,,,,,
Sol-18447,,,,,,,
Sol-18448,,,,,,,
Sol-18449,,,,,,,
Sol-18450,,,,,,,
Sol-18451,,,,,,,
Sol-18452,,,,,,,
Sol-18453,,,,,,,
Sol-18454,,,,,,,
Sol-18455,,,,,,,
Sol-18456,,,,,,,
Sol-18457,,,,,,,
Sol-18458,,,,,,,
Sol-18459,,,,,,,
Sol-18460,,,,,,,
Sol-18461,,,,,,,
Sol-18462,,,,,,,
Sol-18463,,,,,,,
Sol-18464,,,,,,,
Sol-18465,,,,,,,
Sol-18466,,,,,,,
Sol-18467,,,,,,,
Sol-18468,,,,,,,
Sol-18469,,,,,,,
Sol-18470,,,,,,,
Sol-18471,,,,,,,
Sol-18472,,,,,,,
Sol-18473,,,,,,,
Sol-18474,,,,,,,
Sol-18475,,,,,,,
Sol-18476,,,,,,,
Sol-18477,,,,,,,
Sol-18478,,,,,,,
Sol-18479,,,,,,,
Sol-18480,,,,,,,
Sol-18481,,,,,,,
Sol-18482,,,,,,,
Sol-18483,,,,,,,
Sol-18484,,,,,,,
Sol-18485,,,,,,,
Sol-18486,,,,,,,
Sol-18487,,,,,,,
Sol-18488,,,,,,,
Sol-18489,,,,,,,
Sol-18490,,,,,,,
Sol-18491,,,,,,,
Sol-18492,,,,,,,
Sol-18493,,,,,,,
Sol-18494,,,,,,,
Sol-18495,,,,,,,
Sol-18496,,,,,,,
Sol-18497,,,,,,,
Sol-18498,,,,,,,
Sol-18499,,,,,,,
Sol-18500,,,,,,,
Sol-18501,,,,,,,
Sol-18502,,,,,,,
Sol-18503,,,,,,,
Sol-18504,,,,,,,
Sol-18505,,,,,,,
Sol-18506,,,,,,,
Sol-18507,,,,,,,
Sol-18508,,,,,,,
Sol-18509,,,,,,,
Sol-18510,,,,,,,
Sol-18511,,,,,,,
Sol-18512,,,,,,,
Sol-18513,,,,,,,
Sol-18514,,,,,,,
Sol-18515,,,,,,,
Sol-18516,,,,,,,
Sol-18517,,,,,,,
Sol-18518,,,,,,,
Sol-18519,,,,,,,
Sol-18520,,,,,,,
Sol-18521,,,,,,,
Sol-18522,,,,,,,
Sol-18523,,,,,,,
Sol-18524,,,,,,,
Sol-18525,,,,,,,
Sol-18526,,,,,,,
Sol-18527,,,,,,,
Sol-18528,,,,,,,
Sol-18529,,,,,,,
Sol-18530,,,,,,,
Sol-18531,,,,,,,
Sol-18532,,,,,,,
Sol-18533,,,,,,,
Sol-18534,,,,,,,
Sol-18535,,,,,,,
Sol-18536,,,,,,,
Sol-18537,,,,,,,
Sol-18538,,,,,,,
Sol-18539,,,,,,,
Sol-18540,,,,,,,
Sol-18541,,,,,,,
Sol-18542,,,,,,,
Sol-18543,,,,,,,
Sol-18544,,,,,,,
Sol-18545,,,,,,,
Sol-18546,,,,,,,
Sol-18547,,,,,,,
Sol-18548,,,,,,,
Sol-18549,,,,,,,
Sol-18550,,,,,,,
Sol-18551,,,,,,,
Sol-18552,,,,,,,
Sol-18553,,,,,,,
Sol-18554,,,,,,,
Sol-18555,,,,,,,
Sol-18556,,,,,,,
Sol-18557,,,,,,,
Sol-18558,,,,,,,
Sol-18559,,,,,,,
Sol-18560,,,,,,,
Sol-18561,,,,,,,
Sol-18562,,,,,,,
Sol-18563,,,,,,,
Sol-18564,,,,,,,
Sol-18565,,,,,,,
Sol-18566,,,,,,,
Sol-18567,,,,,,,
Sol-18568,,,,,,,
Sol-18569,,,,,,,
Sol-18570,,,,,,,
Sol-18571,,,,,,,
Sol-18572,,,,,,,
Sol-18573,,,,,,,
Sol-18574,,,,,,,
Sol-18575,,,,,,,
Sol-18576,,,,,,,
Sol-18577,,,,,,,
Sol-18578,,,,,,,
Sol-18579,,,,,,,
Sol-18580,,,,,,,
Sol-18581,,,,,,,
Sol-18582,,,,,,,
Sol-18583,,,,,,,
Sol-18584,,,,,,,
Sol-18585,,,,,,,
Sol-18586,,,,,,,
Sol-18587,,,,,,,
Sol-18588,,,,,,,
Sol-18589,,,,,,,
Sol-18590,,,,,,,
Sol-18591,,,,,,,
Sol-18592,,,,,,,
Sol-18593,,,,,,,
Sol-18594,,,,,,,
Sol-18595,,,,,,,
Sol-18596,,,,,,,
Sol-18597,,,,,,,
Sol-18598,,,,,,,
Sol-18599,,,,,,,
Sol-18600,,,,,,,
Sol-18601,,,,,,,
Sol-18602,,,,,,,
Sol-18603,,,,,,,
Sol-18604,,,,,,,
Sol-18605,,,,,,,
Sol-18606,,,,,,,
Sol-18607,,,,,,,
Sol-18608,,,,,,,
Sol-18609,,,,,,,
Sol-18610,,,,,,,
Sol-18611,,,,,,,
Sol-18612,,,,,,,
Sol-18613,,,,,,,
Sol-18614,,,,,,,
Sol-18615,,,,,,,
Sol-18616,,,,,,,
Sol-18617,,,,,,,
Sol-18618,,,,,,,
Sol-18619,,,,,,,
Sol-18620,,,,,,,
Sol-18621,,,,,,,
Sol-18622,,,,,,,
Sol-18623,,,,,,,
Sol-18624,,,,,,,
Sol-18625,,,,,,,
Sol-18626,,,,,,,
Sol-18627,,,,,,,
Sol-18628,,,,,,,
Sol-18629,,,,,,,
Sol-18630,,,,,,,
Sol-18631,,,,,,,
Sol-18632,,,,,,,
Sol-18633,,,,,,,
Sol-18634,,,,,,,
Sol-18635,,,,,,,
Sol-18636,,,,,,,
Sol-18637,,,,,,,
Sol-18638,,,,,,,
Sol-18639,,,,,,,
Sol-18640,,,,,,,
Sol-18641,,,,,,,
Sol-18642,,,,,,,
Sol-18643,,,,,,,
Sol-18644,,,,,,,
Sol-18645,,,,,,,
Sol-18646,,,,,,,
Sol-18647,,,,,,,
Sol-18648,,,,,,,
Sol-18649,,,,,,,
Sol-18650,,,,,,,
Sol-18651,,,,,,,
Sol-18652,,,,,,,
Sol-18653,,,,,,,
Sol-18654,,,,,,,
Sol-18655,,,,,,,
Sol-18656,,,,,,,
Sol-18657,,,,,,,
Sol-18658,,,,,,,
Sol-18659,,,,,,,
Sol-18660,,,,,,,
Sol-18661,,,,,,,
Sol-18662,,,,,,,
Sol-18663,,,,,,,
Sol-18664,,,,,,,
Sol-18665,,,,,,,
Sol-18666,,,,,,,
Sol-18667,,,,,,,
Sol-18668,,,,,,,
Sol-18669,,,,,,,
Sol-18670,,,,,,,
Sol-18671,,,,,,,
Sol-18672,,,,,,,
Sol-18673,,,,,,,
Sol-18674,,,,,,,
Sol-18675,,,,,,,
Sol-18676,,,,,,,
Sol-18677,,,,,,,
Sol-18678,,,,,,,
Sol-18679,,,,,,,
Sol-18680,,,,,,,
Sol-18681,,,,,,,
Sol-18682,,,,,,,
Sol-18683,,,,,,,
Sol-18684,,,,,,,
Sol-18685,,,,,,,
Sol-18686,,,,,,,
Sol-18687,,,,,,,
Sol-18688,,,,,,,
Sol-18689,,,,,,,
Sol-18690,,,,,,,
Sol-18691,,,,,,,
Sol-18692,,,,,,,
Sol-18693,,,,,,,
Sol-18694,,,,,,,
Sol-18695,,,,,,,
Sol-18696,,,,,,,
Sol-18697,,,,,,,
Sol-18698,,,,,,,
Sol-18699,,,,,,,
Sol-18700,,,,,,,
Sol-18701,,,,,,,
Sol-18702,,,,,,,
Sol-18703,,,,,,,
Sol-18704,,,,,,,
Sol-18705,,,,,,,
Sol-18706,,,,,,,
Sol-18707,,,,,,,
Sol-18708,,,,,,,
Sol-18709,,,,,,,
Sol-18710,,,,,,,
Sol-18711,,,,,,,
Sol-18712,,,,,,,
Sol-18713,,,,,,,
Sol-18714,,,,,,,
Sol-18715,,,,,,,
Sol-18716,,,,,,,
Sol-18717,,,,,,,
Sol-18718,,,,,,,
Sol-18719,,,,,,,
Sol-18720,,,,,,,
Sol-18721,,,,,,,
Sol-18722,,,,,,,
Sol-18723,,,,,,,
Sol-18724,,,,,,,
Sol-18725,,,,,,,
Sol-18726,,,,,,,
Sol-18727,,,,,,,
Sol-18728,,,,,,,
Sol-18729,,,,,,,
Sol-18730,,,,,,,
Sol-18731,,,,,,,
Sol-18732,,,,,,,
Sol-18733,,,,,,,
Sol-18734,,,,,,,
Sol-18735,,,,,,,
Sol-18736,,,,,,,
Sol-18737,,,,,,,
Sol-18738,,,,,,,
Sol-18739,,,,,,,
Sol-18740,,,,,,,
Sol-18741,,,,,,,
Sol-18742,,,,,,,
Sol-18743,,,,,,,
Sol-18744,,,,,,,
Sol-18745,,,,,,,
Sol-18746,,,,,,,
Sol-18747,,,,,,,
Sol-18748,,,,,,,
Sol-18749,,,,,,,
Sol-18750,,,,,,,
Sol-18751,,,,,,,
Sol-18752,,,,,,,
Sol-18753,,,,,,,
Sol-18754,,,,,,,
Sol-18755,,,,,,,
Sol-18756,,,,,,,
Sol-18757,,,,,,,
Sol-18758,,,,,,,
Sol-18759,,,,,,,
Sol-18760,,,,,,,
Sol-18761,,,,,,,
Sol-18762,,,,,,,
Sol-18763,,,,,,,
Sol-18764,,,,,,,
Sol-18765,,,,,,,
Sol-18766,,,,,,,
Sol-18767,,,,,,,
Sol-18768,,,,,,,
Sol-18769,,,,,,,
Sol-18770,,,,,,,
Sol-18771,,,,,,,
Sol-18772,,,,,,,
Sol-18773,,,,,,,
Sol-18774,,,,,,,
Sol-18775,,,,,,,
Sol-18776,,,,,,,
Sol-18777,,,,,,,
Sol-18778,,,,,,,
Sol-18779,,,,,,,
Sol-18780,,,,,,,
Sol-18781,,,,,,,
Sol-18782,,,,,,,
Sol-18783,,,,,,,
Sol-18784,,,,,,,
Sol-18785,,,,,,,
Sol-18786,,,,,,,
Sol-18787,,,,,,,
Sol-18788,,,,,,,
Sol-18789,,,,,,,
Sol-18790,,,,,,,
Sol-18791,,,,,,,
Sol-18792,,,,,,,
Sol-18793,,,,,,,
Sol-18794,,,,,,,
Sol-18795,,,,,,,
Sol-18796,,,,,,,
Sol-18797,,,,,,,
Sol-18798,,,,,,,
Sol-18799,,,,,,,
Sol-18800,,,,,,,
Sol-18801,,,,,,,
Sol-18802,,,,,,,
Sol-18803,,,,,,,
Sol-18804,,,,,,,
Sol-18805,,,,,,,
Sol-18806,,,,,,,
Sol-18807,,,,,,,
Sol-18808,,,,,,,
Sol-18809,,,,,,,
Sol-18810,,,,,,,
Sol-18811,,,,,,,
Sol-18812,,,,,,,
Sol-18813,,,,,,,
Sol-18814,,,,,,,
Sol-18815,,,,,,,
Sol-18816,,,,,,,
Sol-18817,,,,,,,
Sol-18818,,,,,,,
Sol-18819,,,,,,,
Sol-18820,,,,,,,
Sol-18821,,,,,,,
Sol-18822,,,,,,,
Sol-18823,,,,,,,
Sol-18824,,,,,,,
Sol-18825,,,,,,,
Sol-18826,,,,,,,
Sol-18827,,,,,,,
Sol-18828,,,,,,,
Sol-18829,,,,,,,
Sol-18830,,,,,,,
Sol-18831,,,,,,,
Sol-18832,,,,,,,
Sol-18833,,,,,,,
Sol-18834,,,,,,,
Sol-18835,,,,,,,
Sol-18836,,,,,,,
Sol-18837,,,,,,,
Sol-18838,,,,,,,
Sol-18839,,,,,,,
Sol-18840,,,,,,,
Sol-18841,,,,,,,
Sol-18842,,,,,,,
Sol-18843,,,,,,,
Sol-18844,,,,,,,
Sol-18845,,,,,,,
Sol-18846,,,,,,,
Sol-18847,,,,,,,
Sol-18848,,,,,,,
Sol-18849,,,,,,,
Sol-18850,,,,,,,
Sol-18851,,,,,,,
Sol-18852,,,,,,,
Sol-18853,,,,,,,
Sol-18854,,,,,,,
Sol-18855,,,,,,,
Sol-18856,,,,,,,
Sol-18857,,,,,,,
Sol-18858,,,,,,,
Sol-18859,,,,,,,
Sol-18860,,,,,,,
Sol-18861,,,,,,,
Sol-18862,,,,,,,
Sol-18863,,,,,,,
Sol-18864,,,,,,,
Sol-18865,,,,,,,
Sol-18866,,,,,,,
Sol-18867,,,,,,,
Sol-18868,,,,,,,
Sol-18869,,,,,,,
Sol-18870,,,,,,,
Sol-18871,,,,,,,
Sol-18872,,,,,,,
Sol-18873,,,,,,,
Sol-18874,,,,,,,
Sol-18875,,,,,,,
Sol-18876,,,,,,,
Sol-18877,,,,,,,
Sol-18878,,,,,,,
Sol-18879,,,,,,,
Sol-18880,,,,,,,
Sol-18881,,,,,,,
Sol-18882,,,,,,,
Sol-18883,,,,,,,
Sol-18884,,,,,,,
Sol-18885,,,,,,,
Sol-18886,,,,,,,
Sol-18887,,,,,,,
Sol-18888,,,,,,,
Sol-18889,,,,,,,
Sol-18890,,,,,,,
Sol-18891,,,,,,,
Sol-18892,,,,,,,
Sol-18893,,,,,,,
Sol-18894,,,,,,,
Sol-18895,,,,,,,
Sol-18896,,,,,,,
Sol-18897,,,,,,,
Sol-18898,,,,,,,
Sol-18899,,,,,,,
Sol-18900,,,,,,,
Sol-18901,,,,,,,
Sol-18902,,,,,,,
Sol-18903,,,,,,,
Sol-18904,,,,,,,
Sol-18905,,,,,,,
Sol-18906,,,,,,,
Sol-18907,,,,,,,
Sol-18908,,,,,,,
Sol-18909,,,,,,,
Sol-18910,,,,,,,
Sol-18911,,,,,,,
Sol-18912,,,,,,,
Sol-18913,,,,,,,
Sol-18914,,,,,,,
Sol-18915,,,,,,,
Sol-18916,,,,,,,
Sol-18917,,,,,,,
Sol-18918,,,,,,,
Sol-18919,,,,,,,
Sol-18920,,,,,,,
Sol-18921,,,,,,,
Sol-18922,,,,,,,
Sol-18923,,,,,,,
Sol-18924,,,,,,,
Sol-18925,,,,,,,
Sol-18926,,,,,,,
Sol-18927,,,,,,,
Sol-18928,,,,,,,
Sol-18929,,,,,,,
Sol-18930,,,,,,,
Sol-18931,,,,,,,
Sol-18932,,,,,,,
Sol-18933,,,,,,,
Sol-18934,,,,,,,
Sol-18935,,,,,,,
Sol-18936,,,,,,,
Sol-18937,,,,,,,
Sol-18938,,,,,,,
Sol-18939,,,,,,,
Sol-18940,,,,,,,
Sol-18941,,,,,,,
Sol-18942,,,,,,,
Sol-18943,,,,,,,
Sol-18944,,,,,,,
Sol-18945,,,,,,,
Sol-18946,,,,,,,
Sol-18947,,,,,,,
Sol-18948,,,,,,,
Sol-18949,,,,,,,
Sol-18950,,,,,,,
Sol-18951,,,,,,,
Sol-18952,,,,,,,
Sol-18953,,,,,,,
Sol-18954,,,,,,,
Sol-18955,,,,,,,
Sol-18956,,,,,,,
Sol-18957,,,,,,,
Sol-18958,,,,,,,
Sol-18959,,,,,,,
Sol-18960,,,,,,,
Sol-18961,,,,,,,
Sol-18962,,,,,,,
Sol-18963,,,,,,,
Sol-18964,,,,,,,
Sol-18965,,,,,,,
Sol-18966,,,,,,,
Sol-18967,,,,,,,
Sol-18968,,,,,,,
Sol-18969,,,,,,,
Sol-18970,,,,,,,
Sol-18971,,,,,,,
Sol-18972,,,,,,,
Sol-18973,,,,,,,
Sol-18974,,,,,,,
Sol-18975,,,,,,,
Sol-18976,,,,,,,
Sol-18977,,,,,,,
Sol-18978,,,,,,,
Sol-18979,,,,,,,
Sol-18980,,,,,,,
Sol-18981,,,,,,,
Sol-18982,,,,,,,
Sol-18983,,,,,,,
Sol-18984,,,,,,,
Sol-18985,,,,,,,
Sol-18986,,,,,,,
Sol-18987,,,,,,,
Sol-18988,,,,,,,
Sol-18989,,,,,,,
Sol-18990,,,,,,,
Sol-18991,,,,,,,
Sol-18992,,,,,,,
Sol-18993,,,,,,,
Sol-18994,,,,,,,
Sol-18995,,,,,,,
Sol-18996,,,,,,,
Sol-18997,,,,,,,
Sol-18998,,,,,,,
Sol-18999,,,,,,,
Sol-19000,,,,,,,
Sol-19001,,,,,,,
Sol-19002,,,,,,,
Sol-19003,,,,,,,
Sol-19004,,,,,,,
Sol-19005,,,,,,,
Sol-19006,,,,,,,
Sol-19007,,,,,,,
Sol-19008,,,,,,,
Sol-19009,,,,,,,
Sol-19010,,,,,,,
Sol-19011,,,,,,,
Sol-19012,,,,,,,
Sol-19013,,,,,,,
Sol-19014,,,,,,,
Sol-19015,,,,,,,
Sol-19016,,,,,,,
Sol-19017,,,,,,,
Sol-19018,,,,,,,
Sol-19019,,,,,,,
Sol-19020,,,,,,,
Sol-19021,,,,,,,
Sol-19022,,,,,,,
Sol-19023,,,,,,,
Sol-19024,,,,,,,
Sol-19025,,,,,,,
Sol-19026,,,,,,,
Sol-19027,,,,,,,
Sol-19028,,,,,,,
Sol-19029,,,,,,,
Sol-19030,,,,,,,
Sol-19031,,,,,,,
Sol-19032,,,,,,,
Sol-19033,,,,,,,
Sol-19034,,,,,,,
Sol-19035,,,,,,,
Sol-19036,,,,,,,
Sol-19037,,,,,,,
Sol-19038,,,,,,,
Sol-19039,,,,,,,
Sol-19040,,,,,,,
Sol-19041,,,,,,,
Sol-19042,,,,,,,
Sol-19043,,,,,,,
Sol-19044,,,,,,,
Sol-19045,,,,,,,
Sol-19046,,,,,,,
Sol-19047,,,,,,,
Sol-19048,,,,,,,
Sol-19049,,,,,,,
Sol-19050,,,,,,,
Sol-19051,,,,,,,
Sol-19052,,,,,,,
Sol-19053,,,,,,,
Sol-19054,,,,,,,
Sol-19055,,,,,,,
Sol-19056,,,,,,,
Sol-19057,,,,,,,
Sol-19058,,,,,,,
Sol-19059,,,,,,,
Sol-19060,,,,,,,
Sol-19061,,,,,,,
Sol-19062,,,,,,,
Sol-19063,,,,,,,
Sol-19064,,,,,,,
Sol-19065,,,,,,,
Sol-19066,,,,,,,
Sol-19067,,,,,,,
Sol-19068,,,,,,,
Sol-19069,,,,,,,
Sol-19070,,,,,,,
Sol-19071,,,,,,,
Sol-19072,,,,,,,
Sol-19073,,,,,,,
Sol-19074,,,,,,,
Sol-19075,,,,,,,
Sol-19076,,,,,,,
Sol-19077,,,,,,,
Sol-19078,,,,,,,
Sol-19079,,,,,,,
Sol-19080,,,,,,,
Sol-19081,,,,,,,
Sol-19082,,,,,,,
Sol-19083,,,,,,,
Sol-19084,,,,,,,
Sol-19085,,,,,,,
Sol-19086,,,,,,,
Sol-19087,,,,,,,
Sol-19088,,,,,,,
Sol-19089,,,,,,,
Sol-19090,,,,,,,
Sol-19091,,,,,,,
Sol-19092,,,,,,,
Sol-19093,,,,,,,
Sol-19094,,,,,,,
Sol-19095,,,,,,,
Sol-19096,,,,,,,
Sol-19097,,,,,,,
Sol-19098,,,,,,,
Sol-19099,,,,,,,
Sol-19100,,,,,,,
Sol-19101,,,,,,,
Sol-19102,,,,,,,
Sol-19103,,,,,,,
Sol-19104,,,,,,,
Sol-19105,,,,,,,
Sol-19106,,,,,,,
Sol-19107,,,,,,,
Sol-19108,,,,,,,
Sol-19109,,,,,,,
Sol-19110,,,,,,,
Sol-19111,,,,,,,
Sol-19112,,,,,,,
Sol-19113,,,,,,,
Sol-19114,,,,,,,
Sol-19115,,,,,,,
Sol-19116,,,,,,,
Sol-19117,,,,,,,
Sol-19118,,,,,,,
Sol-19119,,,,,,,
Sol-19120,,,,,,,
Sol-19121,,,,,,,
Sol-19122,,,,,,,
Sol-19123,,,,,,,
Sol-19124,,,,,,,
Sol-19125,,,,,,,
Sol-19126,,,,,,,
Sol-19127,,,,,,,
Sol-19128,,,,,,,
Sol-19129,,,,,,,
Sol-19130,,,,,,,
Sol-19131,,,,,,,
Sol-19132,,,,,,,
Sol-19133,,,,,,,
Sol-19134,,,,,,,
Sol-19135,,,,,,,
Sol-19136,,,,,,,
Sol-19137,,,,,,,
Sol-19138,,,,,,,
Sol-19139,,,,,,,
Sol-19140,,,,,,,
Sol-19141,,,,,,,
Sol-19142,,,,,,,
Sol-19143,,,,,,,
Sol-19144,,,,,,,
Sol-19145,,,,,,,
Sol-19146,,,,,,,
Sol-19147,,,,,,,
Sol-19148,,,,,,,
Sol-19149,,,,,,,
Sol-19150,,,,,,,
Sol-19151,,,,,,,
Sol-19152,,,,,,,
Sol-19153,,,,,,,
Sol-19154,,,,,,,
Sol-19155,,,,,,,
Sol-19156,,,,,,,
Sol-19157,,,,,,,
Sol-19158,,,,,,,
Sol-19159,,,,,,,
Sol-19160,,,,,,,
Sol-19161,,,,,,,
Sol-19162,,,,,,,
Sol-19163,,,,,,,
Sol-19164,,,,,,,
Sol-19165,,,,,,,
Sol-19166,,,,,,,
Sol-19167,,,,,,,
Sol-19168,,,,,,,
Sol-19169,,,,,,,
Sol-19170,,,,,,,
Sol-19171,,,,,,,
Sol-19172,,,,,,,
Sol-19173,,,,,,,
Sol-19174,,,,,,,
Sol-19175,,,,,,,
Sol-19176,,,,,,,
Sol-19177,,,,,,,
Sol-19178,,,,,,,
Sol-19179,,,,,,,
Sol-19180,,,,,,,
Sol-19181,,,,,,,
Sol-19182,,,,,,,
Sol-19183,,,,,,,
Sol-19184,,,,,,,
Sol-19185,,,,,,,
Sol-19186,,,,,,,
Sol-19187,,,,,,,
Sol-19188,,,,,,,
Sol-19189,,,,,,,
Sol-19190,,,,,,,
Sol-19191,,,,,,,
Sol-19192,,,,,,,
Sol-19193,,,,,,,
Sol-19194,,,,,,,
Sol-19195,,,,,,,
Sol-19196,,,,,,,
Sol-19197,,,,,,,
Sol-19198,,,,,,,
Sol-19199,,,,,,,
Sol-19200,,,,,,,
Sol-19201,,,,,,,
Sol-19202,,,,,,,
Sol-19203,,,,,,,
Sol-19204,,,,,,,
Sol-19205,,,,,,,
Sol-19206,,,,,,,
Sol-19207,,,,,,,
Sol-19208,,,,,,,
Sol-19209,,,,,,,
Sol-19210,,,,,,,
Sol-19211,,,,,,,
Sol-19212,,,,,,,
Sol-19213,,,,,,,
Sol-19214,,,,,,,
Sol-19215,,,,,,,
Sol-19216,,,,,,,
Sol-19217,,,,,,,
Sol-19218,,,,,,,
Sol-19219,,,,,,,
Sol-19220,,,,,,,
Sol-19221,,,,,,,
Sol-19222,,,,,,,
Sol-19223,,,,,,,
Sol-19224,,,,,,,
Sol-19225,,,,,,,
Sol-19226,,,,,,,
Sol-19227,,,,,,,
Sol-19228,,,,,,,
Sol-19229,,,,,,,
Sol-19230,,,,,,,
Sol-19231,,,,,,,
Sol-19232,,,,,,,
Sol-19233,,,,,,,
Sol-19234,,,,,,,
Sol-19235,,,,,,,
Sol-19236,,,,,,,
Sol-19237,,,,,,,
Sol-19238,,,,,,,
Sol-19239,,,,,,,
Sol-19240,,,,,,,
Sol-19241,,,,,,,
Sol-19242,,,,,,,
Sol-19243,,,,,,,
Sol-19244,,,,,,,
Sol-19245,,,,,,,
Sol-19246,,,,,,,
Sol-19247,,,,,,,
Sol-19248,,,,,,,
Sol-19249,,,,,,,
Sol-19250,,,,,,,
Sol-19251,,,,,,,
Sol-19252,,,,,,,
Sol-19253,,,,,,,
Sol-19254,,,,,,,
Sol-19255,,,,,,,
Sol-19256,,,,,,,
Sol-19257,,,,,,,
Sol-19258,,,,,,,
Sol-19259,,,,,,,
Sol-19260,,,,,,,
Sol-19261,,,,,,,
Sol-19262,,,,,,,
Sol-19263,,,,,,,
Sol-19264,,,,,,,
Sol-19265,,,,,,,
Sol-19266,,,,,,,
Sol-19267,,,,,,,
Sol-19268,,,,,,,
Sol-19269,,,,,,,
Sol-19270,,,,,,,
Sol-19271,,,,,,,
Sol-19272,,,,,,,
Sol-19273,,,,,,,
Sol-19274,,,,,,,
Sol-19275,,,,,,,
Sol-19276,,,,,,,
Sol-19277,,,,,,,
Sol-19278,,,,,,,
Sol-19279,,,,,,,
Sol-19280,,,,,,,
Sol-19281,,,,,,,
Sol-19282,,,,,,,
Sol-19283,,,,,,,
Sol-19284,,,,,,,
Sol-19285,,,,,,,
Sol-19286,,,,,,,
Sol-19287,,,,,,,
Sol-19288,,,,,,,
Sol-19289,,,,,,,
Sol-19290,,,,,,,
Sol-19291,,,,,,,
Sol-19292,,,,,,,
Sol-19293,,,,,,,
Sol-19294,,,,,,,
Sol-19295,,,,,,,
Sol-19296,,,,,,,
Sol-19297,,,,,,,
Sol-19298,,,,,,,
Sol-19299,,,,,,,
Sol-19300,,,,,,,
Sol-19301,,,,,,,
Sol-19302,,,,,,,
Sol-19303,,,,,,,
Sol-19304,,,,,,,
Sol-19305,,,,,,,
Sol-19306,,,,,,,
Sol-19307,,,,,,,
Sol-19308,,,,,,,
Sol-19309,,,,,,,
Sol-19310,,,,,,,
Sol-19311,,,,,,,
Sol-19312,,,,,,,
Sol-19313,,,,,,,
Sol-19314,,,,,,,
Sol-19315,,,,,,,
Sol-19316,,,,,,,
Sol-19317,,,,,,,
Sol-19318,,,,,,,
Sol-19319,,,,,,,
Sol-19320,,,,,,,
Sol-19321,,,,,,,
Sol-19322,,,,,,,
Sol-19323,,,,,,,
Sol-19324,,,,,,,
Sol-19325,,,,,,,
Sol-19326,,,,,,,
Sol-19327,,,,,,,
Sol-19328,,,,,,,
Sol-19329,,,,,,,
Sol-19330,,,,,,,
Sol-19331,,,,,,,
Sol-19332,,,,,,,
Sol-19333,,,,,,,
Sol-19334,,,,,,,
Sol-19335,,,,,,,
Sol-19336,,,,,,,
Sol-19337,,,,,,,
Sol-19338,,,,,,,
Sol-19339,,,,,,,
Sol-19340,,,,,,,
Sol-19341,,,,,,,
Sol-19342,,,,,,,
Sol-19343,,,,,,,
Sol-19344,,,,,,,
Sol-19345,,,,,,,
Sol-19346,,,,,,,
Sol-19347,,,,,,,
Sol-19348,,,,,,,
Sol-19349,,,,,,,
Sol-19350,,,,,,,
Sol-19351,,,,,,,
Sol-19352,,,,,,,
Sol-19353,,,,,,,
Sol-19354,,,,,,,
Sol-19355,,,,,,,
Sol-19356,,,,,,,
Sol-19357,,,,,,,
Sol-19358,,,,,,,
Sol-19359,,,,,,,
Sol-19360,,,,,,,
Sol-19361,,,,,,,
Sol-19362,,,,,,,
Sol-19363,,,,,,,
Sol-19364,,,,,,,
Sol-19365,,,,,,,
Sol-19366,,,,,,,
Sol-19367,,,,,,,
Sol-19368,,,,,,,
Sol-19369,,,,,,,
Sol-19370,,,,,,,
Sol-19371,,,,,,,
Sol-19372,,,,,,,
Sol-19373,,,,,,,
Sol-19374,,,,,,,
Sol-19375,,,,,,,
Sol-19376,,,,,,,
Sol-19377,,,,,,,
Sol-19378,,,,,,,
Sol-19379,,,,,,,
Sol-19380,,,,,,,
Sol-19381,,,,,,,
Sol-19382,,,,,,,
Sol-19383,,,,,,,
Sol-19384,,,,,,,
Sol-19385,,,,,,,
Sol-19386,,,,,,,
Sol-19387,,,,,,,
Sol-19388,,,,,,,
Sol-19389,,,,,,,
Sol-19390,,,,,,,
Sol-19391,,,,,,,
Sol-19392,,,,,,,
Sol-19393,,,,,,,
Sol-19394,,,,,,,
Sol-19395,,,,,,,
Sol-19396,,,,,,,
Sol-19397,,,,,,,
Sol-19398,,,,,,,
Sol-19399,,,,,,,
Sol-19400,,,,,,,
Sol-19401,,,,,,,
Sol-19402,,,,,,,
Sol-19403,,,,,,,
Sol-19404,,,,,,,
Sol-19405,,,,,,,
Sol-19406,,,,,,,
Sol-19407,,,,,,,
Sol-19408,,,,,,,
Sol-19409,,,,,,,
Sol-19410,,,,,,,
Sol-19411,,,,,,,
Sol-19412,,,,,,,
Sol-19413,,,,,,,
Sol-19414,,,,,,,
Sol-19415,,,,,,,
Sol-19416,,,,,,,
Sol-19417,,,,,,,
Sol-19418,,,,,,,
Sol-19419,,,,,,,
Sol-19420,,,,,,,
Sol-19421,,,,,,,
Sol-19422,,,,,,,
Sol-19423,,,,,,,
Sol-19424,,,,,,,
Sol-19425,,,,,,,
Sol-19426,,,,,,,
Sol-19427,,,,,,,
Sol-19428,,,,,,,
Sol-19429,,,,,,,
Sol-19430,,,,,,,
Sol-19431,,,,,,,
Sol-19432,,,,,,,
Sol-19433,,,,,,,
Sol-19434,,,,,,,
Sol-19435,,,,,,,
Sol-19436,,,,,,,
Sol-19437,,,,,,,
Sol-19438,,,,,,,
Sol-19439,,,,,,,
Sol-19440,,,,,,,
Sol-19441,,,,,,,
Sol-19442,,,,,,,
Sol-19443,,,,,,,
Sol-19444,,,,,,,
Sol-19445,,,,,,,
Sol-19446,,,,,,,
Sol-19447,,,,,,,
Sol-19448,,,,,,,
Sol-19449,,,,,,,
Sol-19450,,,,,,,
Sol-19451,,,,,,,
Sol-19452,,,,,,,
Sol-19453,,,,,,,
Sol-19454,,,,,,,
Sol-19455,,,,,,,
Sol-19456,,,,,,,
Sol-19457,,,,,,,
Sol-19458,,,,,,,
Sol-19459,,,,,,,
Sol-19460,,,,,,,
Sol-19461,,,,,,,
Sol-19462,,,,,,,
Sol-19463,,,,,,,
Sol-19464,,,,,,,
Sol-19465,,,,,,,
Sol-19466,,,,,,,
Sol-19467,,,,,,,
Sol-19468,,,,,,,
Sol-19469,,,,,,,
Sol-19470,,,,,,,
Sol-19471,,,,,,,
Sol-19472,,,,,,,
Sol-19473,,,,,,,
Sol-19474,,,,,,,
Sol-19475,,,,,,,
Sol-19476,,,,,,,
Sol-19477,,,,,,,
Sol-19478,,,,,,,
Sol-19479,,,,,,,
Sol-19480,,,,,,,
Sol-19481,,,,,,,
Sol-19482,,,,,,,
Sol-19483,,,,,,,
Sol-19484,,,,,,,
Sol-19485,,,,,,,
Sol-19486,,,,,,,
Sol-19487,,,,,,,
Sol-19488,,,,,,,
Sol-19489,,,,,,,
Sol-19490,,,,,,,
Sol-19491,,,,,,,
Sol-19492,,,,,,,
Sol-19493,,,,,,,
Sol-19494,,,,,,,
Sol-19495,,,,,,,
Sol-19496,,,,,,,
Sol-19497,,,,,,,
Sol-19498,,,,,,,
Sol-19499,,,,,,,
Sol-19500,,,,,,,
Sol-19501,,,,,,,
Sol-19502,,,,,,,
Sol-19503,,,,,,,
Sol-19504,,,,,,,
Sol-19505,,,,,,,
Sol-19506,,,,,,,
Sol-19507,,,,,,,
Sol-19508,,,,,,,
Sol-19509,,,,,,,
Sol-19510,,,,,,,
Sol-19511,,,,,,,
Sol-19512,,,,,,,
Sol-19513,,,,,,,
Sol-19514,,,,,,,
Sol-19515,,,,,,,
Sol-19516,,,,,,,
Sol-19517,,,,,,,
Sol-19518,,,,,,,
Sol-19519,,,,,,,
Sol-19520,,,,,,,
Sol-19521,,,,,,,
Sol-19522,,,,,,,
Sol-19523,,,,,,,
Sol-19524,,,,,,,
Sol-19525,,,,,,,
Sol-19526,,,,,,,
Sol-19527,,,,,,,
Sol-19528,,,,,,,
Sol-19529,,,,,,,
Sol-19530,,,,,,,
Sol-19531,,,,,,,
Sol-19532,,,,,,,
Sol-19533,,,,,,,
Sol-19534,,,,,,,
Sol-19535,,,,,,,
Sol-19536,,,,,,,
Sol-19537,,,,,,,
Sol-19538,,,,,,,
Sol-19539,,,,,,,
Sol-19540,,,,,,,
Sol-19541,,,,,,,
Sol-19542,,,,,,,
Sol-19543,,,,,,,
Sol-19544,,,,,,,
Sol-19545,,,,,,,
Sol-19546,,,,,,,
Sol-19547,,,,,,,
Sol-19548,,,,,,,
Sol-19549,,,,,,,
Sol-19550,,,,,,,
Sol-19551,,,,,,,
Sol-19552,,,,,,,
Sol-19553,,,,,,,
Sol-19554,,,,,,,
Sol-19555,,,,,,,
Sol-19556,,,,,,,
Sol-19557,,,,,,,
Sol-19558,,,,,,,
Sol-19559,,,,,,,
Sol-19560,,,,,,,
Sol-19561,,,,,,,
Sol-19562,,,,,,,
Sol-19563,,,,,,,
Sol-19564,,,,,,,
Sol-19565,,,,,,,
Sol-19566,,,,,,,
Sol-19567,,,,,,,
Sol-19568,,,,,,,
Sol-19569,,,,,,,
Sol-19570,,,,,,,
Sol-19571,,,,,,,
Sol-19572,,,,,,,
Sol-19573,,,,,,,
Sol-19574,,,,,,,
Sol-19575,,,,,,,
Sol-19576,,,,,,,
Sol-19577,,,,,,,
Sol-19578,,,,,,,
Sol-19579,,,,,,,
Sol-19580,,,,,,,
Sol-19581,,,,,,,
Sol-19582,,,,,,,
Sol-19583,,,,,,,
Sol-19584,,,,,,,
Sol-19585,,,,,,,
Sol-19586,,,,,,,
Sol-19587,,,,,,,
Sol-19588,,,,,,,
Sol-19589,,,,,,,
Sol-19590,,,,,,,
Sol-19591,,,,,,,
Sol-19592,,,,,,,
Sol-19593,,,,,,,
Sol-19594,,,,,,,
Sol-19595,,,,,,,
Sol-19596,,,,,,,
Sol-19597,,,,,,,
Sol-19598,,,,,,,
Sol-19599,,,,,,,
Sol-19600,,,,,,,
Sol-19601,,,,,,,
Sol-19602,,,,,,,
Sol-19603,,,,,,,
Sol-19604,,,,,,,
Sol-19605,,,,,,,
Sol-19606,,,,,,,
Sol-19607,,,,,,,
Sol-19608,,,,,,,
Sol-19609,,,,,,,
Sol-19610,,,,,,,
Sol-19611,,,,,,,
Sol-19612,,,,,,,
Sol-19613,,,,,,,
Sol-19614,,,,,,,
Sol-19615,,,,,,,
Sol-19616,,,,,,,
Sol-19617,,,,,,,
Sol-19618,,,,,,,
Sol-19619,,,,,,,
Sol-19620,,,,,,,
Sol-19621,,,,,,,
Sol-19622,,,,,,,
Sol-19623,,,,,,,
Sol-19624,,,,,,,
Sol-19625,,,,,,,
Sol-19626,,,,,,,
Sol-19627,,,,,,,
Sol-19628,,,,,,,
Sol-19629,,,,,,,
Sol-19630,,,,,,,
Sol-19631,,,,,,,
Sol-19632,,,,,,,
Sol-19633,,,,,,,
Sol-19634,,,,,,,
Sol-19635,,,,,,,
Sol-19636,,,,,,,
Sol-19637,,,,,,,
Sol-19638,,,,,,,
Sol-19639,,,,,,,
Sol-19640,,,,,,,
Sol-19641,,,,,,,
Sol-19642,,,,,,,
Sol-19643,,,,,,,
Sol-19644,,,,,,,
Sol-19645,,,,,,,
Sol-19646,,,,,,,
Sol-19647,,,,,,,
Sol-19648,,,,,,,
Sol-19649,,,,,,,
Sol-19650,,,,,,,
Sol-19651,,,,,,,
Sol-19652,,,,,,,
Sol-19653,,,,,,,
Sol-19654,,,,,,,
Sol-19655,,,,,,,
Sol-19656,,,,,,,
Sol-19657,,,,,,,
Sol-19658,,,,,,,
Sol-19659,,,,,,,
Sol-19660,,,,,,,
Sol-19661,,,,,,,
Sol-19662,,,,,,,
Sol-19663,,,,,,,
Sol-19664,,,,,,,
Sol-19665,,,,,,,
Sol-19666,,,,,,,
Sol-19667,,,,,,,
Sol-19668,,,,,,,
Sol-19669,,,,,,,
Sol-19670,,,,,,,
Sol-19671,,,,,,,
Sol-19672,,,,,,,
Sol-19673,,,,,,,
Sol-19674,,,,,,,
Sol-19675,,,,,,,
Sol-19676,,,,,,,
Sol-19677,,,,,,,
Sol-19678,,,,,,,
Sol-19679,,,,,,,
Sol-19680,,,,,,,
Sol-19681,,,,,,,
Sol-19682,,,,,,,
Sol-19683,,,,,,,
Sol-19684,,,,,,,
Sol-19685,,,,,,,
Sol-19686,,,,,,,
Sol-19687,,,,,,,
Sol-19688,,,,,,,
Sol-19689,,,,,,,
Sol-19690,,,,,,,
Sol-19691,,,,,,,
Sol-19692,,,,,,,
Sol-19693,,,,,,,
Sol-19694,,,,,,,
Sol-19695,,,,,,,
Sol-19696,,,,,,,
Sol-19697,,,,,,,
Sol-19698,,,,,,,
Sol-19699,,,,,,,
Sol-19700,,,,,,,
Sol-19701,,,,,,,
Sol-19702,,,,,,,
Sol-19703,,,,,,,
Sol-19704,,,,,,,
Sol-19705,,,,,,,
Sol-19706,,,,,,,
Sol-19707,,,,,,,
Sol-19708,,,,,,,
Sol-19709,,,,,,,
Sol-19710,,,,,,,
Sol-19711,,,,,,,
Sol-19712,,,,,,,
Sol-19713,,,,,,,
Sol-19714,,,,,,,
Sol-19715,,,,,,,
Sol-19716,,,,,,,
Sol-19717,,,,,,,
Sol-19718,,,,,,,
Sol-19719,,,,,,,
Sol-19720,,,,,,,
Sol-19721,,,,,,,
Sol-19722,,,,,,,
Sol-19723,,,,,,,
Sol-19724,,,,,,,
Sol-19725,,,,,,,
Sol-19726,,,,,,,
Sol-19727,,,,,,,
Sol-19728,,,,,,,
Sol-19729,,,,,,,
Sol-19730,,,,,,,
Sol-19731,,,,,,,
Sol-19732,,,,,,,
Sol-19733,,,,,,,
Sol-19734,,,,,,,
Sol-19735,,,,,,,
Sol-19736,,,,,,,
Sol-19737,,,,,,,
Sol-19738,,,,,,,
Sol-19739,,,,,,,
Sol-19740,,,,,,,
Sol-19741,,,,,,,
Sol-19742,,,,,,,
Sol-19743,,,,,,,
Sol-19744,,,,,,,
Sol-19745,,,,,,,
Sol-19746,,,,,,,
Sol-19747,,,,,,,
Sol-19748,,,,,,,
Sol-19749,,,,,,,
Sol-19750,,,,,,,
Sol-19751,,,,,,,
Sol-19752,,,,,,,
Sol-19753,,,,,,,
Sol-19754,,,,,,,
Sol-19755,,,,,,,
Sol-19756,,,,,,,
Sol-19757,,,,,,,
Sol-19758,,,,,,,
Sol-19759,,,,,,,
Sol-19760,,,,,,,
Sol-19761,,,,,,,
Sol-19762,,,,,,,
Sol-19763,,,,,,,
Sol-19764,,,,,,,
Sol-19765,,,,,,,
Sol-19766,,,,,,,
Sol-19767,,,,,,,
Sol-19768,,,,,,,
Sol-19769,,,,,,,
Sol-19770,,,,,,,
Sol-19771,,,,,,,
Sol-19772,,,,,,,
Sol-19773,,,,,,,
Sol-19774,,,,,,,
Sol-19775,,,,,,,
Sol-19776,,,,,,,
Sol-19777,,,,,,,
Sol-19778,,,,,,,
Sol-19779,,,,,,,
Sol-19780,,,,,,,
Sol-19781,,,,,,,
Sol-19782,,,,,,,
Sol-19783,,,,,,,
Sol-19784,,,,,,,
Sol-19785,,,,,,,
Sol-19786,,,,,,,
Sol-19787,,,,,,,
Sol-19788,,,,,,,
Sol-19789,,,,,,,
Sol-19790,,,,,,,
Sol-19791,,,,,,,
Sol-19792,,,,,,,
Sol-19793,,,,,,,
Sol-19794,,,,,,,
Sol-19795,,,,,,,
Sol-19796,,,,,,,
Sol-19797,,,,,,,
Sol-19798,,,,,,,
Sol-19799,,,,,,,
Sol-19800,,,,,,,
Sol-19801,,,,,,,
Sol-19802,,,,,,,
Sol-19803,,,,,,,
Sol-19804,,,,,,,
Sol-19805,,,,,,,
Sol-19806,,,,,,,
Sol-19807,,,,,,,
Sol-19808,,,,,,,
Sol-19809,,,,,,,
Sol-19810,,,,,,,
Sol-19811,,,,,,,
Sol-19812,,,,,,,
Sol-19813,,,,,,,
Sol-19814,,,,,,,
Sol-19815,,,,,,,
Sol-19816,,,,,,,
Sol-19817,,,,,,,
Sol-19818,,,,,,,
Sol-19819,,,,,,,
Sol-19820,,,,,,,
Sol-19821,,,,,,,
Sol-19822,,,,,,,
Sol-19823,,,,,,,
Sol-19824,,,,,,,
Sol-19825,,,,,,,
Sol-19826,,,,,,,
Sol-19827,,,,,,,
Sol-19828,,,,,,,
Sol-19829,,,,,,,
Sol-19830,,,,,,,
Sol-19831,,,,,,,
Sol-19832,,,,,,,
Sol-19833,,,,,,,
Sol-19834,,,,,,,
Sol-19835,,,,,,,
Sol-19836,,,,,,,
Sol-19837,,,,,,,
Sol-19838,,,,,,,
Sol-19839,,,,,,,
Sol-19840,,,,,,,
Sol-19841,,,,,,,
Sol-19842,,,,,,,
Sol-19843,,,,,,,
Sol-19844,,,,,,,
Sol-19845,,,,,,,
Sol-19846,,,,,,,
Sol-19847,,,,,,,
Sol-19848,,,,,,,
Sol-19849,,,,,,,
Sol-19850,,,,,,,
Sol-19851,,,,,,,
Sol-19852,,,,,,,
Sol-19853,,,,,,,
Sol-19854,,,,,,,
Sol-19855,,,,,,,
Sol-19856,,,,,,,
Sol-19857,,,,,,,
Sol-19858,,,,,,,
Sol-19859,,,,,,,
Sol-19860,,,,,,,
Sol-19861,,,,,,,
Sol-19862,,,,,,,
Sol-19863,,,,,,,
Sol-19864,,,,,,,
Sol-19865,,,,,,,
Sol-19866,,,,,,,
Sol-19867,,,,,,,
Sol-19868,,,,,,,
Sol-19869,,,,,,,
Sol-19870,,,,,,,
Sol-19871,,,,,,,
Sol-19872,,,,,,,
Sol-19873,,,,,,,
Sol-19874,,,,,,,
Sol-19875,,,,,,,
Sol-19876,,,,,,,
Sol-19877,,,,,,,
Sol-19878,,,,,,,
Sol-19879,,,,,,,
Sol-19880,,,,,,,
Sol-19881,,,,,,,
Sol-19882,,,,,,,
Sol-19883,,,,,,,
Sol-19884,,,,,,,
Sol-19885,,,,,,,
Sol-19886,,,,,,,
Sol-19887,,,,,,,
Sol-19888,,,,,,,
Sol-19889,,,,,,,
Sol-19890,,,,,,,
Sol-19891,,,,,,,
Sol-19892,,,,,,,
Sol-19893,,,,,,,
Sol-19894,,,,,,,
Sol-19895,,,,,,,
Sol-19896,,,,,,,
Sol-19897,,,,,,,
Sol-19898,,,,,,,
Sol-19899,,,,,,,
Sol-19900,,,,,,,
Sol-19901,,,,,,,
Sol-19902,,,,,,,
Sol-19903,,,,,,,
Sol-19904,,,,,,,
Sol-19905,,,,,,,
Sol-19906,,,,,,,
Sol-19907,,,,,,,
Sol-19908,,,,,,,
Sol-19909,,,,,,,
Sol-19910,,,,,,,
Sol-19911,,,,,,,
Sol-19912,,,,,,,
Sol-19913,,,,,,,
Sol-19914,,,,,,,
Sol-19915,,,,,,,
Sol-19916,,,,,,,
Sol-19917,,,,,,,
Sol-19918,,,,,,,
Sol-19919,,,,,,,
Sol-19920,,,,,,,
Sol-19921,,,,,,,
Sol-19922,,,,,,,
Sol-19923,,,,,,,
Sol-19924,,,,,,,
Sol-19925,,,,,,,
Sol-19926,,,,,,,
Sol-19927,,,,,,,
Sol-19928,,,,,,,
Sol-19929,,,,,,,
Sol-19930,,,,,,,
Sol-19931,,,,,,,
Sol-19932,,,,,,,
Sol-19933,,,,,,,
Sol-19934,,,,,,,
Sol-19935,,,,,,,
Sol-19936,,,,,,,
Sol-19937,,,,,,,
Sol-19938,,,,,,,
Sol-19939,,,,,,,
Sol-19940,,,,,,,
Sol-19941,,,,,,,
Sol-19942,,,,,,,
Sol-19943,,,,,,,
Sol-19944,,,,,,,
Sol-19945,,,,,,,
Sol-19946,,,,,,,
Sol-19947,,,,,,,
Sol-19948,,,,,,,
Sol-19949,,,,,,,
Sol-19950,,,,,,,
Sol-19951,,,,,,,
Sol-19952,,,,,,,
Sol-19953,,,,,,,
Sol-19954,,,,,,,
Sol-19955,,,,,,,
Sol-19956,,,,,,,
Sol-19957,,,,,,,
Sol-19958,,,,,,,
Sol-19959,,,,,,,
Sol-19960,,,,,,,
Sol-19961,,,,,,,
Sol-19962,,,,,,,
Sol-19963,,,,,,,
Sol-19964,,,,,,,
Sol-19965,,,,,,,
Sol-19966,,,,,,,
Sol-19967,,,,,,,
Sol-19968,,,,,,,
Sol-19969,,,,,,,
Sol-19970,,,,,,,
Sol-19971,,,,,,,
Sol-19972,,,,,,,
Sol-19973,,,,,,,
Sol-19974,,,,,,,
Sol-19975,,,,,,,
Sol-19976,,,,,,,
Sol-19977,,,,,,,
Sol-19978,,,,,,,
Sol-19979,,,,,,,
Sol-19980,,,,,,,
Sol-19981,,,,,,,
Sol-19982,,,,,,,
Sol-19983,,,,,,,
Sol-19984,,,,,,,
Sol-19985,,,,,,,
Sol-19986,,,,,,,
Sol-19987,,,,,,,
Sol-19988,,,,,,,
Sol-19989,,,,,,,
Sol-19990,,,,,,,
Sol-19991,,,,,,,
Sol-19992,,,,,,,
Sol-19993,,,,,,,
Sol-19994,,,,,,,
Sol-19995,,,,,,,
Sol-19996,,,,,,,
Sol-19997,,,,,,,
Sol-19998,,,,,,,
Sol-19999,,,,,,,
Sol-20000,,,,,,,
Sol-20001,,,,,,,
Sol-20002,,,,,,,
Sol-20003,,,,,,,
Sol-20004,,,,,,,
Sol-20005,,,,,,,
Sol-20006,,,,,,,
Sol-20007,,,,,,,
Sol-20008,,,,,,,
Sol-20009,,,,,,,
Sol-20010,,,,,,,
Sol-20011,,,,,,,
Sol-20012,,,,,,,
Sol-20013,,,,,,,
Sol-20014,,,,,,,
Sol-20015,,,,,,,
Sol-20016,,,,,,,
Sol-20017,,,,,,,
Sol-20018,,,,,,,
Sol-20019,,,,,,,
Sol-20020,,,,,,,
Sol-20021,,,,,,,
Sol-20022,,,,,,,
Sol-20023,,,,,,,
Sol-20024,,,,,,,
Sol-20025,,,,,,,
Sol-20026,,,,,,,
Sol-20027,,,,,,,
Sol-20028,,,,,,,
Sol-20029,,,,,,,
Sol-20030,,,,,,,
Sol-20031,,,,,,,
Sol-20032,,,,,,,
Sol-20033,,,,,,,
Sol-20034,,,,,,,
Sol-20035,,,,,,,
Sol-20036,,,,,,,
Sol-20037,,,,,,,
Sol-20038,,,,,,,
Sol-20039,,,,,,,
Sol-20040,,,,,,,
Sol-20041,,,,,,,
Sol-20042,,,,,,,
Sol-20043,,,,,,,
Sol-20044,,,,,,,
Sol-20045,,,,,,,
Sol-20046,,,,,,,
Sol-20047,,,,,,,
Sol-20048,,,,,,,
Sol-20049,,,,,,,
Sol-20050,,,,,,,
Sol-20051,,,,,,,
Sol-20052,,,,,,,
Sol-20053,,,,,,,
Sol-20054,,,,,,,
Sol-20055,,,,,,,
Sol-20056,,,,,,,
Sol-20057,,,,,,,
Sol-20058,,,,,,,
Sol-20059,,,,,,,
Sol-20060,,,,,,,
Sol-20061,,,,,,,
Sol-20062,,,,,,,
Sol-20063,,,,,,,
Sol-20064,,,,,,,
Sol-20065,,,,,,,
Sol-20066,,,,,,,
Sol-20067,,,,,,,
Sol-20068,,,,,,,
Sol-20069,,,,,,,
Sol-20070,,,,,,,
Sol-20071,,,,,,,
Sol-20072,,,,,,,
Sol-20073,,,,,,,
Sol-20074,,,,,,,
Sol-20075,,,,,,,
Sol-20076,,,,,,,
Sol-20077,,,,,,,
Sol-20078,,,,,,,
Sol-20079,,,,,,,
Sol-20080,,,,,,,
Sol-20081,,,,,,,
Sol-20082,,,,,,,
Sol-20083,,,,,,,
Sol-20084,,,,,,,
Sol-20085,,,,,,,
Sol-20086,,,,,,,
Sol-20087,,,,,,,
Sol-20088,,,,,,,
Sol-20089,,,,,,,
Sol-20090,,,,,,,
Sol-20091,,,,,,,
Sol-20092,,,,,,,
Sol-20093,,,,,,,
Sol-20094,,,,,,,
Sol-20095,,,,,,,
Sol-20096,,,,,,,
Sol-20097,,,,,,,
Sol-20098,,,,,,,
Sol-20099,,,,,,,
Sol-20100,,,,,,,
Sol-20101,,,,,,,
Sol-20102,,,,,,,
Sol-20103,,,,,,,
Sol-20104,,,,,,,
Sol-20105,,,,,,,
Sol-20106,,,,,,,
Sol-20107,,,,,,,
Sol-20108,,,,,,,
Sol-20109,,,,,,,
Sol-20110,,,,,,,
Sol-20111,,,,,,,
Sol-20112,,,,,,,
Sol-20113,,,,,,,
Sol-20114,,,,,,,
Sol-20115,,,,,,,
Sol-20116,,,,,,,
Sol-20117,,,,,,,
Sol-20118,,,,,,,
Sol-20119,,,,,,,
Sol-20120,,,,,,,
Sol-20121,,,,,,,
Sol-20122,,,,,,,
Sol-20123,,,,,,,
Sol-20124,,,,,,,
Sol-20125,,,,,,,
Sol-20126,,,,,,,
Sol-20127,,,,,,,
Sol-20128,,,,,,,
Sol-20129,,,,,,,
Sol-20130,,,,,,,
Sol-20131,,,,,,,
Sol-20132,,,,,,,
Sol-20133,,,,,,,
Sol-20134,,,,,,,
Sol-20135,,,,,,,
Sol-20136,,,,,,,
Sol-20137,,,,,,,
Sol-20138,,,,,,,
Sol-20139,,,,,,,
Sol-20140,,,,,,,
Sol-20141,,,,,,,
Sol-20142,,,,,,,
Sol-20143,,,,,,,
Sol-20144,,,,,,,
Sol-20145,,,,,,,
Sol-20146,,,,,,,
Sol-20147,,,,,,,
Sol-20148,,,,,,,
Sol-20149,,,,,,,
Sol-20150,,,,,,,
Sol-20151,,,,,,,
Sol-20152,,,,,,,
Sol-20153,,,,,,,
Sol-20154,,,,,,,
Sol-20155,,,,,,,
Sol-20156,,,,,,,
Sol-20157,,,,,,,
Sol-20158,,,,,,,
Sol-20159,,,,,,,
Sol-20160,,,,,,,
Sol-20161,,,,,,,
Sol-20162,,,,,,,
Sol-20163,,,,,,,
Sol-20164,,,,,,,
Sol-20165,,,,,,,
Sol-20166,,,,,,,
Sol-20167,,,,,,,
Sol-20168,,,,,,,
Sol-20169,,,,,,,
Sol-20170,,,,,,,
Sol-20171,,,,,,,
Sol-20172,,,,,,,
Sol-20173,,,,,,,
Sol-20174,,,,,,,
Sol-20175,,,,,,,
Sol-20176,,,,,,,
Sol-20177,,,,,,,
Sol-20178,,,,,,,
Sol-20179,,,,,,,
Sol-20180,,,,,,,
Sol-20181,,,,,,,
Sol-20182,,,,,,,
Sol-20183,,,,,,,
Sol-20184,,,,,,,
Sol-20185,,,,,,,
Sol-20186,,,,,,,
Sol-20187,,,,,,,
Sol-20188,,,,,,,
Sol-20189,,,,,,,
Sol-20190,,,,,,,
Sol-20191,,,,,,,
Sol-20192,,,,,,,
Sol-20193,,,,,,,
Sol-20194,,,,,,,
Sol-20195,,,,,,,
Sol-20196,,,,,,,
Sol-20197,,,,,,,
Sol-20198,,,,,,,
Sol-20199,,,,,,,
Sol-20200,,,,,,,
Sol-20201,,,,,,,
Sol-20202,,,,,,,
Sol-20203,,,,,,,
Sol-20204,,,,,,,
Sol-20205,,,,,,,
Sol-20206,,,,,,,
Sol-20207,,,,,,,
Sol-20208,,,,,,,
Sol-20209,,,,,,,
Sol-20210,,,,,,,
Sol-20211,,,,,,,
Sol-20212,,,,,,,
Sol-20213,,,,,,,
Sol-20214,,,,,,,
Sol-20215,,,,,,,
Sol-20216,,,,,,,
Sol-20217,,,,,,,
Sol-20218,,,,,,,
Sol-20219,,,,,,,
Sol-20220,,,,,,,
Sol-20221,,,,,,,
Sol-20222,,,,,,,
Sol-20223,,,,,,,
Sol-20224,,,,,,,
Sol-20225,,,,,,,
Sol-20226,,,,,,,
Sol-20227,,,,,,,
Sol-20228,,,,,,,
Sol-20229,,,,,,,
Sol-20230,,,,,,,
Sol-20231,,,,,,,
Sol-20232,,,,,,,
Sol-20233,,,,,,,
Sol-20234,,,,,,,
Sol-20235,,,,,,,
Sol-20236,,,,,,,
Sol-20237,,,,,,,
Sol-20238,,,,,,,
Sol-20239,,,,,,,
Sol-20240,,,,,,,
Sol-20241,,,,,,,
Sol-20242,,,,,,,
Sol-20243,,,,,,,
Sol-20244,,,,,,,
Sol-20245,,,,,,,
Sol-20246,,,,,,,
Sol-20247,,,,,,,
Sol-20248,,,,,,,
Sol-20249,,,,,,,
Sol-20250,,,,,,,
Sol-20251,,,,,,,
Sol-20252,,,,,,,
Sol-20253,,,,,,,
Sol-20254,,,,,,,
Sol-20255,,,,,,,
Sol-20256,,,,,,,
Sol-20257,,,,,,,
Sol-20258,,,,,,,
Sol-20259,,,,,,,
Sol-20260,,,,,,,
Sol-20261,,,,,,,
Sol-20262,,,,,,,
Sol-20263,,,,,,,
Sol-20264,,,,,,,
Sol-20265,,,,,,,
Sol-20266,,,,,,,
Sol-20267,,,,,,,
Sol-20268,,,,,,,
Sol-20269,,,,,,,
Sol-20270,,,,,,,
Sol-20271,,,,,,,
Sol-20272,,,,,,,
Sol-20273,,,,,,,
Sol-20274,,,,,,,
Sol-20275,,,,,,,
Sol-20276,,,,,,,
Sol-20277,,,,,,,
Sol-20278,,,,,,,
Sol-20279,,,,,,,
Sol-20280,,,,,,,
Sol-20281,,,,,,,
Sol-20282,,,,,,,
Sol-20283,,,,,,,
Sol-20284,,,,,,,
Sol-20285,,,,,,,
Sol-20286,,,,,,,
Sol-20287,,,,,,,
Sol-20288,,,,,,,
Sol-20289,,,,,,,
Sol-20290,,,,,,,
Sol-20291,,,,,,,
Sol-20292,,,,,,,
Sol-20293,,,,,,,
Sol-20294,,,,,,,
Sol-20295,,,,,,,
Sol-20296,,,,,,,
Sol-20297,,,,,,,
Sol-20298,,,,,,,
Sol-20299,,,,,,,
Sol-20300,,,,,,,
Sol-20301,,,,,,,
Sol-20302,,,,,,,
Sol-20303,,,,,,,
Sol-20304,,,,,,,
Sol-20305,,,,,,,
Sol-20306,,,,,,,
Sol-20307,,,,,,,
Sol-20308,,,,,,,
Sol-20309,,,,,,,
Sol-20310,,,,,,,
Sol-20311,,,,,,,
Sol-20312,,,,,,,
Sol-20313,,,,,,,
Sol-20314,,,,,,,
Sol-20315,,,,,,,
Sol-20316,,,,,,,
Sol-20317,,,,,,,
Sol-20318,,,,,,,
Sol-20319,,,,,,,
Sol-20320,,,,,,,
Sol-20321,,,,,,,
Sol-20322,,,,,,,
Sol-20323,,,,,,,
Sol-20324,,,,,,,
Sol-20325,,,,,,,
Sol-20326,,,,,,,
Sol-20327,,,,,,,
Sol-20328,,,,,,,
Sol-20329,,,,,,,
Sol-20330,,,,,,,
Sol-20331,,,,,,,
Sol-20332,,,,,,,
Sol-20333,,,,,,,
Sol-20334,,,,,,,
Sol-20335,,,,,,,
Sol-20336,,,,,,,
Sol-20337,,,,,,,
Sol-20338,,,,,,,
Sol-20339,,,,,,,
Sol-20340,,,,,,,
Sol-20341,,,,,,,
Sol-20342,,,,,,,
Sol-20343,,,,,,,
Sol-20344,,,,,,,
Sol-20345,,,,,,,
Sol-20346,,,,,,,
Sol-20347,,,,,,,
Sol-20348,,,,,,,
Sol-20349,,,,,,,
Sol-20350,,,,,,,
Sol-20351,,,,,,,
Sol-20352,,,,,,,
Sol-20353,,,,,,,
Sol-20354,,,,,,,
Sol-20355,,,,,,,
Sol-20356,,,,,,,
Sol-20357,,,,,,,
Sol-20358,,,,,,,
Sol-20359,,,,,,,
Sol-20360,,,,,,,
Sol-20361,,,,,,,
Sol-20362,,,,,,,
Sol-20363,,,,,,,
Sol-20364,,,,,,,
Sol-20365,,,,,,,
Sol-20366,,,,,,,
Sol-20367,,,,,,,
Sol-20368,,,,,,,
Sol-20369,,,,,,,
Sol-20370,,,,,,,
Sol-20371,,,,,,,
Sol-20372,,,,,,,
Sol-20373,,,,,,,
Sol-20374,,,,,,,
Sol-20375,,,,,,,
Sol-20376,,,,,,,
Sol-20377,,,,,,,
Sol-20378,,,,,,,
Sol-20379,,,,,,,
Sol-20380,,,,,,,
Sol-20381,,,,,,,
Sol-20382,,,,,,,
Sol-20383,,,,,,,
Sol-20384,,,,,,,
Sol-20385,,,,,,,
Sol-20386,,,,,,,
Sol-20387,,,,,,,
Sol-20388,,,,,,,
Sol-20389,,,,,,,
Sol-20390,,,,,,,
Sol-20391,,,,,,,
Sol-20392,,,,,,,
Sol-20393,,,,,,,
Sol-20394,,,,,,,
Sol-20395,,,,,,,
Sol-20396,,,,,,,
Sol-20397,,,,,,,
Sol-20398,,,,,,,
Sol-20399,,,,,,,
Sol-20400,,,,,,,
Sol-20401,,,,,,,
Sol-20402,,,,,,,
Sol-20403,,,,,,,
Sol-20404,,,,,,,
Sol-20405,,,,,,,
Sol-20406,,,,,,,
Sol-20407,,,,,,,
Sol-20408,,,,,,,
Sol-20409,,,,,,,
Sol-20410,,,,,,,
Sol-20411,,,,,,,
Sol-20412,,,,,,,
Sol-20413,,,,,,,
Sol-20414,,,,,,,
Sol-20415,,,,,,,
Sol-20416,,,,,,,
Sol-20417,,,,,,,
Sol-20418,,,,,,,
Sol-20419,,,,,,,
Sol-20420,,,,,,,
Sol-20421,,,,,,,
Sol-20422,,,,,,,
Sol-20423,,,,,,,
Sol-20424,,,,,,,
Sol-20425,,,,,,,
Sol-20426,,,,,,,
Sol-20427,,,,,,,
Sol-20428,,,,,,,
Sol-20429,,,,,,,
Sol-20430,,,,,,,
Sol-20431,,,,,,,
Sol-20432,,,,,,,
Sol-20433,,,,,,,
Sol-20434,,,,,,,
Sol-20435,,,,,,,
Sol-20436,,,,,,,
Sol-20437,,,,,,,
Sol-20438,,,,,,,
Sol-20439,,,,,,,
Sol-20440,,,,,,,
Sol-20441,,,,,,,
Sol-20442,,,,,,,
Sol-20443,,,,,,,
Sol-20444,,,,,,,
Sol-20445,,,,,,,
Sol-20446,,,,,,,
Sol-20447,,,,,,,
Sol-20448,,,,,,,
Sol-20449,,,,,,,
Sol-20450,,,,,,,
Sol-20451,,,,,,,
Sol-20452,,,,,,,
Sol-20453,,,,,,,
Sol-20454,,,,,,,
Sol-20455,,,,,,,
Sol-20456,,,,,,,
Sol-20457,,,,,,,
Sol-20458,,,,,,,
Sol-20459,,,,,,,
Sol-20460,,,,,,,
Sol-20461,,,,,,,
Sol-20462,,,,,,,
Sol-20463,,,,,,,
Sol-20464,,,,,,,
Sol-20465,,,,,,,
Sol-20466,,,,,,,
Sol-20467,,,,,,,
Sol-20468,,,,,,,
Sol-20469,,,,,,,
Sol-20470,,,,,,,
Sol-20471,,,,,,,
Sol-20472,,,,,,,
Sol-20473,,,,,,,
Sol-20474,,,,,,,
Sol-20475,,,,,,,
Sol-20476,,,,,,,
Sol-20477,,,,,,,
Sol-20478,,,,,,,
Sol-20479,,,,,,,
Sol-20480,,,,,,,
Sol-20481,,,,,,,
Sol-20482,,,,,,,
Sol-20483,,,,,,,
Sol-20484,,,,,,,
Sol-20485,,,,,,,
Sol-20486,,,,,,,
Sol-20487,,,,,,,
Sol-20488,,,,,,,
Sol-20489,,,,,,,
Sol-20490,,,,,,,
Sol-20491,,,,,,,
Sol-20492,,,,,,,
Sol-20493,,,,,,,
Sol-20494,,,,,,,
Sol-20495,,,,,,,
Sol-20496,,,,,,,
Sol-20497,,,,,,,
Sol-20498,,,,,,,
Sol-20499,,,,,,,
Sol-20500,,,,,,,
Sol-20501,,,,,,,
Sol-20502,,,,,,,
Sol-20503,,,,,,,
Sol-20504,,,,,,,
Sol-20505,,,,,,,
Sol-20506,,,,,,,
Sol-20507,,,,,,,
Sol-20508,,,,,,,
Sol-20509,,,,,,,
Sol-20510,,,,,,,
Sol-20511,,,,,,,
Sol-20512,,,,,,,
Sol-20513,,,,,,,
Sol-20514,,,,,,,
Sol-20515,,,,,,,
Sol-20516,,,,,,,
Sol-20517,,,,,,,
Sol-20518,,,,,,,
Sol-20519,,,,,,,
Sol-20520,,,,,,,
Sol-20521,,,,,,,
Sol-20522,,,,,,,
Sol-20523,,,,,,,
Sol-20524,,,,,,,
Sol-20525,,,,,,,
Sol-20526,,,,,,,
Sol-20527,,,,,,,
Sol-20528,,,,,,,
Sol-20529,,,,,,,
Sol-20530,,,,,,,
Sol-20531,,,,,,,
Sol-20532,,,,,,,
Sol-20533,,,,,,,
Sol-20534,,,,,,,
Sol-20535,,,,,,,
Sol-20536,,,,,,,
Sol-20537,,,,,,,
Sol-20538,,,,,,,
Sol-20539,,,,,,,
Sol-20540,,,,,,,
Sol-20541,,,,,,,
Sol-20542,,,,,,,
Sol-20543,,,,,,,
Sol-20544,,,,,,,
Sol-20545,,,,,,,
Sol-20546,,,,,,,
Sol-20547,,,,,,,
Sol-20548,,,,,,,
Sol-20549,,,,,,,
Sol-20550,,,,,,,
Sol-20551,,,,,,,
Sol-20552,,,,,,,
Sol-20553,,,,,,,
Sol-20554,,,,,,,
Sol-20555,,,,,,,
Sol-20556,,,,,,,
Sol-20557,,,,,,,
Sol-20558,,,,,,,
Sol-20559,,,,,,,
Sol-20560,,,,,,,
Sol-20561,,,,,,,
Sol-20562,,,,,,,
Sol-20563,,,,,,,
Sol-20564,,,,,,,
Sol-20565,,,,,,,
Sol-20566,,,,,,,
Sol-20567,,,,,,,
Sol-20568,,,,,,,
Sol-20569,,,,,,,
Sol-20570,,,,,,,
Sol-20571,,,,,,,
Sol-20572,,,,,,,
Sol-20573,,,,,,,
Sol-20574,,,,,,,
Sol-20575,,,,,,,
Sol-20576,,,,,,,
Sol-20577,,,,,,,
Sol-20578,,,,,,,
Sol-20579,,,,,,,
Sol-20580,,,,,,,
Sol-20581,,,,,,,
Sol-20582,,,,,,,
Sol-20583,,,,,,,
Sol-20584,,,,,,,
Sol-20585,,,,,,,
Sol-20586,,,,,,,
Sol-20587,,,,,,,
Sol-20588,,,,,,,
Sol-20589,,,,,,,
Sol-20590,,,,,,,
Sol-20591,,,,,,,
Sol-20592,,,,,,,
Sol-20593,,,,,,,
Sol-20594,,,,,,,
Sol-20595,,,,,,,
Sol-20596,,,,,,,
Sol-20597,,,,,,,
Sol-20598,,,,,,,
Sol-20599,,,,,,,
Sol-20600,,,,,,,
Sol-20601,,,,,,,
Sol-20602,,,,,,,
Sol-20603,,,,,,,
Sol-20604,,,,,,,
Sol-20605,,,,,,,
Sol-20606,,,,,,,
Sol-20607,,,,,,,
Sol-20608,,,,,,,
Sol-20609,,,,,,,
Sol-20610,,,,,,,
Sol-20611,,,,,,,
Sol-20612,,,,,,,
Sol-20613,,,,,,,
Sol-20614,,,,,,,
Sol-20615,,,,,,,
Sol-20616,,,,,,,
Sol-20617,,,,,,,
Sol-20618,,,,,,,
Sol-20619,,,,,,,
Sol-20620,,,,,,,
Sol-20621,,,,,,,
Sol-20622,,,,,,,
Sol-20623,,,,,,,
Sol-20624,,,,,,,
Sol-20625,,,,,,,
Sol-20626,,,,,,,
Sol-20627,,,,,,,
Sol-20628,,,,,,,
Sol-20629,,,,,,,
Sol-20630,,,,,,,
Sol-20631,,,,,,,
Sol-20632,,,,,,,
Sol-20633,,,,,,,
Sol-20634,,,,,,,
Sol-20635,,,,,,,
Sol-20636,,,,,,,
Sol-20637,,,,,,,
Sol-20638,,,,,,,
Sol-20639,,,,,,,
Sol-20640,,,,,,,
Sol-20641,,,,,,,
Sol-20642,,,,,,,
Sol-20643,,,,,,,
Sol-20644,,,,,,,
Sol-20645,,,,,,,
Sol-20646,,,,,,,
Sol-20647,,,,,,,
Sol-20648,,,,,,,
Sol-20649,,,,,,,
Sol-20650,,,,,,,
Sol-20651,,,,,,,
Sol-20652,,,,,,,
Sol-20653,,,,,,,
Sol-20654,,,,,,,
Sol-20655,,,,,,,
Sol-20656,,,,,,,
Sol-20657,,,,,,,
Sol-20658,,,,,,,
Sol-20659,,,,,,,
Sol-20660,,,,,,,
Sol-20661,,,,,,,
Sol-20662,,,,,,,
Sol-20663,,,,,,,
Sol-20664,,,,,,,
Sol-20665,,,,,,,
Sol-20666,,,,,,,
Sol-20667,,,,,,,
Sol-20668,,,,,,,
Sol-20669,,,,,,,
Sol-20670,,,,,,,
Sol-20671,,,,,,,
Sol-20672,,,,,,,
Sol-20673,,,,,,,
Sol-20674,,,,,,,
Sol-20675,,,,,,,
Sol-20676,,,,,,,
Sol-20677,,,,,,,
Sol-20678,,,,,,,
Sol-20679,,,,,,,
Sol-20680,,,,,,,
Sol-20681,,,,,,,
Sol-20682,,,,,,,
Sol-20683,,,,,,,
Sol-20684,,,,,,,
Sol-20685,,,,,,,
Sol-20686,,,,,,,
Sol-20687,,,,,,,
Sol-20688,,,,,,,
Sol-20689,,,,,,,
Sol-20690,,,,,,,
Sol-20691,,,,,,,
Sol-20692,,,,,,,
Sol-20693,,,,,,,
Sol-20694,,,,,,,
Sol-20695,,,,,,,
Sol-20696,,,,,,,
Sol-20697,,,,,,,
Sol-20698,,,,,,,
Sol-20699,,,,,,,
Sol-20700,,,,,,,
Sol-20701,,,,,,,
Sol-20702,,,,,,,
Sol-20703,,,,,,,
Sol-20704,,,,,,,
Sol-20705,,,,,,,
Sol-20706,,,,,,,
Sol-20707,,,,,,,
Sol-20708,,,,,,,
Sol-20709,,,,,,,
Sol-20710,,,,,,,
Sol-20711,,,,,,,
Sol-20712,,,,,,,
Sol-20713,,,,,,,
Sol-20714,,,,,,,
Sol-20715,,,,,,,
Sol-20716,,,,,,,
Sol-20717,,,,,,,
Sol-20718,,,,,,,
Sol-20719,,,,,,,
Sol-20720,,,,,,,
Sol-20721,,,,,,,
Sol-20722,,,,,,,
Sol-20723,,,,,,,
Sol-20724,,,,,,,
Sol-20725,,,,,,,
Sol-20726,,,,,,,
Sol-20727,,,,,,,
Sol-20728,,,,,,,
Sol-20729,,,,,,,
Sol-20730,,,,,,,
Sol-20731,,,,,,,
Sol-20732,,,,,,,
Sol-20733,,,,,,,
Sol-20734,,,,,,,
Sol-20735,,,,,,,
Sol-20736,,,,,,,
Sol-20737,,,,,,,
Sol-20738,,,,,,,
Sol-20739,,,,,,,
Sol-20740,,,,,,,
Sol-20741,,,,,,,
Sol-20742,,,,,,,
Sol-20743,,,,,,,
Sol-20744,,,,,,,
Sol-20745,,,,,,,
Sol-20746,,,,,,,
Sol-20747,,,,,,,
Sol-20748,,,,,,,
Sol-20749,,,,,,,
Sol-20750,,,,,,,
Sol-20751,,,,,,,
Sol-20752,,,,,,,
Sol-20753,,,,,,,
Sol-20754,,,,,,,
Sol-20755,,,,,,,
Sol-20756,,,,,,,
Sol-20757,,,,,,,
Sol-20758,,,,,,,
Sol-20759,,,,,,,
Sol-20760,,,,,,,
Sol-20761,,,,,,,
Sol-20762,,,,,,,
Sol-20763,,,,,,,
Sol-20764,,,,,,,
Sol-20765,,,,,,,
Sol-20766,,,,,,,
Sol-20767,,,,,,,
Sol-20768,,,,,,,
Sol-20769,,,,,,,
Sol-20770,,,,,,,
Sol-20771,,,,,,,
Sol-20772,,,,,,,
Sol-20773,,,,,,,
Sol-20774,,,,,,,
Sol-20775,,,,,,,
Sol-20776,,,,,,,
Sol-20777,,,,,,,
Sol-20778,,,,,,,
Sol-20779,,,,,,,
Sol-20780,,,,,,,
Sol-20781,,,,,,,
Sol-20782,,,,,,,
Sol-20783,,,,,,,
Sol-20784,,,,,,,
Sol-20785,,,,,,,
Sol-20786,,,,,,,
Sol-20787,,,,,,,
Sol-20788,,,,,,,
Sol-20789,,,,,,,
Sol-20790,,,,,,,
Sol-20791,,,,,,,
Sol-20792,,,,,,,
Sol-20793,,,,,,,
Sol-20794,,,,,,,
Sol-20795,,,,,,,
Sol-20796,,,,,,,
Sol-20797,,,,,,,
Sol-20798,,,,,,,
Sol-20799,,,,,,,
Sol-20800,,,,,,,
Sol-20801,,,,,,,
Sol-20802,,,,,,,
Sol-20803,,,,,,,
Sol-20804,,,,,,,
Sol-20805,,,,,,,
Sol-20806,,,,,,,
Sol-20807,,,,,,,
Sol-20808,,,,,,,
Sol-20809,,,,,,,
Sol-20810,,,,,,,
Sol-20811,,,,,,,
Sol-20812,,,,,,,
Sol-20813,,,,,,,
Sol-20814,,,,,,,
Sol-20815,,,,,,,
Sol-20816,,,,,,,
Sol-20817,,,,,,,
Sol-20818,,,,,,,
Sol-20819,,,,,,,
Sol-20820,,,,,,,
Sol-20821,,,,,,,
Sol-20822,,,,,,,
Sol-20823,,,,,,,
Sol-20824,,,,,,,
Sol-20825,,,,,,,
Sol-20826,,,,,,,
Sol-20827,,,,,,,
Sol-20828,,,,,,,
Sol-20829,,,,,,,
Sol-20830,,,,,,,
Sol-20831,,,,,,,
Sol-20832,,,,,,,
Sol-20833,,,,,,,
Sol-20834,,,,,,,
Sol-20835,,,,,,,
Sol-20836,,,,,,,
Sol-20837,,,,,,,
Sol-20838,,,,,,,
Sol-20839,,,,,,,
Sol-20840,,,,,,,
Sol-20841,,,,,,,
Sol-20842,,,,,,,
Sol-20843,,,,,,,
Sol-20844,,,,,,,
Sol-20845,,,,,,,
Sol-20846,,,,,,,
Sol-20847,,,,,,,
Sol-20848,,,,,,,
Sol-20849,,,,,,,
Sol-20850,,,,,,,
Sol-20851,,,,,,,
Sol-20852,,,,,,,
Sol-20853,,,,,,,
Sol-20854,,,,,,,
Sol-20855,,,,,,,
Sol-20856,,,,,,,
Sol-20857,,,,,,,
Sol-20858,,,,,,,
Sol-20859,,,,,,,
Sol-20860,,,,,,,
Sol-20861,,,,,,,
Sol-20862,,,,,,,
Sol-20863,,,,,,,
Sol-20864,,,,,,,
Sol-20865,,,,,,,
Sol-20866,,,,,,,
Sol-20867,,,,,,,
Sol-20868,,,,,,,
Sol-20869,,,,,,,
Sol-20870,,,,,,,
Sol-20871,,,,,,,
Sol-20872,,,,,,,
Sol-20873,,,,,,,
Sol-20874,,,,,,,
Sol-20875,,,,,,,
Sol-20876,,,,,,,
Sol-20877,,,,,,,
Sol-20878,,,,,,,
Sol-20879,,,,,,,
Sol-20880,,,,,,,
Sol-20881,,,,,,,
Sol-20882,,,,,,,
Sol-20883,,,,,,,
Sol-20884,,,,,,,
Sol-20885,,,,,,,
Sol-20886,,,,,,,
Sol-20887,,,,,,,
Sol-20888,,,,,,,
Sol-20889,,,,,,,
Sol-20890,,,,,,,
Sol-20891,,,,,,,
Sol-20892,,,,,,,
Sol-20893,,,,,,,
Sol-20894,,,,,,,
Sol-20895,,,,,,,
Sol-20896,,,,,,,
Sol-20897,,,,,,,
Sol-20898,,,,,,,
Sol-20899,,,,,,,
Sol-20900,,,,,,,
Sol-20901,,,,,,,
Sol-20902,,,,,,,
Sol-20903,,,,,,,
Sol-20904,,,,,,,
Sol-20905,,,,,,,
Sol-20906,,,,,,,
Sol-20907,,,,,,,
Sol-20908,,,,,,,
Sol-20909,,,,,,,
Sol-20910,,,,,,,
Sol-20911,,,,,,,
Sol-20912,,,,,,,
Sol-20913,,,,,,,
Sol-20914,,,,,,,
Sol-20915,,,,,,,
Sol-20916,,,,,,,
Sol-20917,,,,,,,
Sol-20918,,,,,,,
Sol-20919,,,,,,,
Sol-20920,,,,,,,
Sol-20921,,,,,,,
Sol-20922,,,,,,,
Sol-20923,,,,,,,
Sol-20924,,,,,,,
Sol-20925,,,,,,,
Sol-20926,,,,,,,
Sol-20927,,,,,,,
Sol-20928,,,,,,,
Sol-20929,,,,,,,
Sol-20930,,,,,,,
Sol-20931,,,,,,,
Sol-20932,,,,,,,
Sol-20933,,,,,,,
Sol-20934,,,,,,,
Sol-20935,,,,,,,
Sol-20936,,,,,,,
Sol-20937,,,,,,,
Sol-20938,,,,,,,
Sol-20939,,,,,,,
Sol-20940,,,,,,,
Sol-20941,,,,,,,
Sol-20942,,,,,,,
Sol-20943,,,,,,,
Sol-20944,,,,,,,
Sol-20945,,,,,,,
Sol-20946,,,,,,,
Sol-20947,,,,,,,
Sol-20948,,,,,,,
Sol-20949,,,,,,,
Sol-20950,,,,,,,
Sol-20951,,,,,,,
Sol-20952,,,,,,,
Sol-20953,,,,,,,
Sol-20954,,,,,,,
Sol-20955,,,,,,,
Sol-20956,,,,,,,
Sol-20957,,,,,,,
Sol-20958,,,,,,,
Sol-20959,,,,,,,
Sol-20960,,,,,,,
Sol-20961,,,,,,,
Sol-20962,,,,,,,
Sol-20963,,,,,,,
Sol-20964,,,,,,,
Sol-20965,,,,,,,
Sol-20966,,,,,,,
Sol-20967,,,,,,,
Sol-20968,,,,,,,
Sol-20969,,,,,,,
Sol-20970,,,,,,,
Sol-20971,,,,,,,
Sol-20972,,,,,,,
Sol-20973,,,,,,,
Sol-20974,,,,,,,
Sol-20975,,,,,,,
Sol-20976,,,,,,,
Sol-20977,,,,,,,
Sol-20978,,,,,,,
Sol-20979,,,,,,,
Sol-20980,,,,,,,
Sol-20981,,,,,,,
Sol-20982,,,,,,,
Sol-20983,,,,,,,
Sol-20984,,,,,,,
Sol-20985,,,,,,,
Sol-20986,,,,,,,
Sol-20987,,,,,,,
Sol-20988,,,,,,,
Sol-20989,,,,,,,
Sol-20990,,,,,,,
Sol-20991,,,,,,,
Sol-20992,,,,,,,
Sol-20993,,,,,,,
Sol-20994,,,,,,,
Sol-20995,,,,,,,
Sol-20996,,,,,,,
Sol-20997,,,,,,,
Sol-20998,,,,,,,
Sol-20999,,,,,,,
Sol-21000,,,,,,,
Sol-21001,,,,,,,
Sol-21002,,,,,,,
Sol-21003,,,,,,,
Sol-21004,,,,,,,
Sol-21005,,,,,,,
Sol-21006,,,,,,,
Sol-21007,,,,,,,
Sol-21008,,,,,,,
Sol-21009,,,,,,,
Sol-21010,,,,,,,
Sol-21011,,,,,,,
Sol-21012,,,,,,,
Sol-21013,,,,,,,
Sol-21014,,,,,,,
Sol-21015,,,,,,,
Sol-21016,,,,,,,
Sol-21017,,,,,,,
Sol-21018,,,,,,,
Sol-21019,,,,,,,
Sol-21020,,,,,,,
Sol-21021,,,,,,,
Sol-21022,,,,,,,
Sol-21023,,,,,,,
Sol-21024,,,,,,,
Sol-21025,,,,,,,
Sol-21026,,,,,,,
Sol-21027,,,,,,,
Sol-21028,,,,,,,
Sol-21029,,,,,,,
Sol-21030,,,,,,,
Sol-21031,,,,,,,
Sol-21032,,,,,,,
Sol-21033,,,,,,,
Sol-21034,,,,,,,
Sol-21035,,,,,,,
Sol-21036,,,,,,,
Sol-21037,,,,,,,
Sol-21038,,,,,,,
Sol-21039,,,,,,,
Sol-21040,,,,,,,
Sol-21041,,,,,,,
Sol-21042,,,,,,,
Sol-21043,,,,,,,
Sol-21044,,,,,,,
Sol-21045,,,,,,,
Sol-21046,,,,,,,
Sol-21047,,,,,,,
Sol-21048,,,,,,,
Sol-21049,,,,,,,
Sol-21050,,,,,,,
Sol-21051,,,,,,,
Sol-21052,,,,,,,
Sol-21053,,,,,,,
Sol-21054,,,,,,,
Sol-21055,,,,,,,
Sol-21056,,,,,,,
Sol-21057,,,,,,,
Sol-21058,,,,,,,
Sol-21059,,,,,,,
Sol-21060,,,,,,,
Sol-21061,,,,,,,
Sol-21062,,,,,,,
Sol-21063,,,,,,,
Sol-21064,,,,,,,
Sol-21065,,,,,,,
Sol-21066,,,,,,,
Sol-21067,,,,,,,
Sol-21068,,,,,,,
Sol-21069,,,,,,,
Sol-21070,,,,,,,
Sol-21071,,,,,,,
Sol-21072,,,,,,,
Sol-21073,,,,,,,
Sol-21074,,,,,,,
Sol-21075,,,,,,,
Sol-21076,,,,,,,
Sol-21077,,,,,,,
Sol-21078,,,,,,,
Sol-21079,,,,,,,
Sol-21080,,,,,,,
Sol-21081,,,,,,,
Sol-21082,,,,,,,
Sol-21083,,,,,,,
Sol-21084,,,,,,,
Sol-21085,,,,,,,
Sol-21086,,,,,,,
Sol-21087,,,,,,,
Sol-21088,,,,,,,
Sol-21089,,,,,,,
Sol-21090,,,,,,,
Sol-21091,,,,,,,
Sol-21092,,,,,,,
Sol-21093,,,,,,,
Sol-21094,,,,,,,
Sol-21095,,,,,,,
Sol-21096,,,,,,,
Sol-21097,,,,,,,
Sol-21098,,,,,,,
Sol-21099,,,,,,,
Sol-21100,,,,,,,
Sol-21101,,,,,,,
Sol-21102,,,,,,,
Sol-21103,,,,,,,
Sol-21104,,,,,,,
Sol-21105,,,,,,,
Sol-21106,,,,,,,
Sol-21107,,,,,,,
Sol-21108,,,,,,,
Sol-21109,,,,,,,
Sol-21110,,,,,,,
Sol-21111,,,,,,,
Sol-21112,,,,,,,
Sol-21113,,,,,,,
Sol-21114,,,,,,,
Sol-21115,,,,,,,
Sol-21116,,,,,,,
Sol-21117,,,,,,,
Sol-21118,,,,,,,
Sol-21119,,,,,,,
Sol-21120,,,,,,,
Sol-21121,,,,,,,
Sol-21122,,,,,,,
Sol-21123,,,,,,,
Sol-21124,,,,,,,
Sol-21125,,,,,,,
Sol-21126,,,,,,,
Sol-21127,,,,,,,
Sol-21128,,,,,,,
Sol-21129,,,,,,,
Sol-21130,,,,,,,
Sol-21131,,,,,,,
Sol-21132,,,,,,,
Sol-21133,,,,,,,
Sol-21134,,,,,,,
Sol-21135,,,,,,,
Sol-21136,,,,,,,
Sol-21137,,,,,,,
Sol-21138,,,,,,,
Sol-21139,,,,,,,
Sol-21140,,,,,,,
Sol-21141,,,,,,,
Sol-21142,,,,,,,
Sol-21143,,,,,,,
Sol-21144,,,,,,,
Sol-21145,,,,,,,
Sol-21146,,,,,,,
Sol-21147,,,,,,,
Sol-21148,,,,,,,
Sol-21149,,,,,,,
Sol-21150,,,,,,,
Sol-21151,,,,,,,
Sol-21152,,,,,,,
Sol-21153,,,,,,,
Sol-21154,,,,,,,
Sol-21155,,,,,,,
Sol-21156,,,,,,,
Sol-21157,,,,,,,
Sol-21158,,,,,,,
Sol-21159,,,,,,,
Sol-21160,,,,,,,
Sol-21161,,,,,,,
Sol-21162,,,,,,,
Sol-21163,,,,,,,
Sol-21164,,,,,,,
Sol-21165,,,,,,,
Sol-21166,,,,,,,
Sol-21167,,,,,,,
Sol-21168,,,,,,,
Sol-21169,,,,,,,
Sol-21170,,,,,,,
Sol-21171,,,,,,,
Sol-21172,,,,,,,
Sol-21173,,,,,,,
Sol-21174,,,,,,,
Sol-21175,,,,,,,
Sol-21176,,,,,,,
Sol-21177,,,,,,,
Sol-21178,,,,,,,
Sol-21179,,,,,,,
Sol-21180,,,,,,,
Sol-21181,,,,,,,
Sol-21182,,,,,,,
Sol-21183,,,,,,,
Sol-21184,,,,,,,
Sol-21185,,,,,,,
Sol-21186,,,,,,,
Sol-21187,,,,,,,
Sol-21188,,,,,,,
Sol-21189,,,,,,,
Sol-21190,,,,,,,
Sol-21191,,,,,,,
Sol-21192,,,,,,,
Sol-21193,,,,,,,
Sol-21194,,,,,,,
Sol-21195,,,,,,,
Sol-21196,,,,,,,
Sol-21197,,,,,,,
Sol-21198,,,,,,,
Sol-21199,,,,,,,
Sol-21200,,,,,,,
Sol-21201,,,,,,,
Sol-21202,,,,,,,
Sol-21203,,,,,,,
Sol-21204,,,,,,,
Sol-21205,,,,,,,
Sol-21206,,,,,,,
Sol-21207,,,,,,,
Sol-21208,,,,,,,
Sol-21209,,,,,,,
Sol-21210,,,,,,,
Sol-21211,,,,,,,
Sol-21212,,,,,,,
Sol-21213,,,,,,,
Sol-21214,,,,,,,
Sol-21215,,,,,,,
Sol-21216,,,,,,,
Sol-21217,,,,,,,
Sol-21218,,,,,,,
Sol-21219,,,,,,,
Sol-21220,,,,,,,
Sol-21221,,,,,,,
Sol-21222,,,,,,,
Sol-21223,,,,,,,
Sol-21224,,,,,,,
Sol-21225,,,,,,,
Sol-21226,,,,,,,
Sol-21227,,,,,,,
Sol-21228,,,,,,,
Sol-21229,,,,,,,
Sol-21230,,,,,,,
Sol-21231,,,,,,,
Sol-21232,,,,,,,
Sol-21233,,,,,,,
Sol-21234,,,,,,,
Sol-21235,,,,,,,
Sol-21236,,,,,,,
Sol-21237,,,,,,,
Sol-21238,,,,,,,
Sol-21239,,,,,,,
Sol-21240,,,,,,,
Sol-21241,,,,,,,
Sol-21242,,,,,,,
Sol-21243,,,,,,,
Sol-21244,,,,,,,
Sol-21245,,,,,,,
Sol-21246,,,,,,,
Sol-21247,,,,,,,
Sol-21248,,,,,,,
Sol-21249,,,,,,,
Sol-21250,,,,,,,
Sol-21251,,,,,,,
Sol-21252,,,,,,,
Sol-21253,,,,,,,
Sol-21254,,,,,,,
Sol-21255,,,,,,,
Sol-21256,,,,,,,
Sol-21257,,,,,,,
Sol-21258,,,,,,,
Sol-21259,,,,,,,
Sol-21260,,,,,,,
Sol-21261,,,,,,,
Sol-21262,,,,,,,
Sol-21263,,,,,,,
Sol-21264,,,,,,,
Sol-21265,,,,,,,
Sol-21266,,,,,,,
Sol-21267,,,,,,,
Sol-21268,,,,,,,
Sol-21269,,,,,,,
Sol-21270,,,,,,,
Sol-21271,,,,,,,
Sol-21272,,,,,,,
Sol-21273,,,,,,,
Sol-21274,,,,,,,
Sol-21275,,,,,,,
Sol-21276,,,,,,,
Sol-21277,,,,,,,
Sol-21278,,,,,,,
Sol-21279,,,,,,,
Sol-21280,,,,,,,
Sol-21281,,,,,,,
Sol-21282,,,,,,,
Sol-21283,,,,,,,
Sol-21284,,,,,,,
Sol-21285,,,,,,,
Sol-21286,,,,,,,
Sol-21287,,,,,,,
Sol-21288,,,,,,,
Sol-21289,,,,,,,
Sol-21290,,,,,,,
Sol-21291,,,,,,,
Sol-21292,,,,,,,
Sol-21293,,,,,,,
Sol-21294,,,,,,,
Sol-21295,,,,,,,
Sol-21296,,,,,,,
Sol-21297,,,,,,,
Sol-21298,,,,,,,
Sol-21299,,,,,,,
Sol-21300,,,,,,,
Sol-21301,,,,,,,
Sol-21302,,,,,,,
Sol-21303,,,,,,,
Sol-21304,,,,,,,
Sol-21305,,,,,,,
Sol-21306,,,,,,,
Sol-21307,,,,,,,
Sol-21308,,,,,,,
Sol-21309,,,,,,,
Sol-21310,,,,,,,
Sol-21311,,,,,,,
Sol-21312,,,,,,,
Sol-21313,,,,,,,
Sol-21314,,,,,,,
Sol-21315,,,,,,,
Sol-21316,,,,,,,
Sol-21317,,,,,,,
Sol-21318,,,,,,,
Sol-21319,,,,,,,
Sol-21320,,,,,,,
Sol-21321,,,,,,,
Sol-21322,,,,,,,
Sol-21323,,,,,,,
Sol-21324,,,,,,,
Sol-21325,,,,,,,
Sol-21326,,,,,,,
Sol-21327,,,,,,,
Sol-21328,,,,,,,
Sol-21329,,,,,,,
Sol-21330,,,,,,,
Sol-21331,,,,,,,
Sol-21332,,,,,,,
Sol-21333,,,,,,,
Sol-21334,,,,,,,
Sol-21335,,,,,,,
Sol-21336,,,,,,,
Sol-21337,,,,,,,
Sol-21338,,,,,,,
Sol-21339,,,,,,,
Sol-21340,,,,,,,
Sol-21341,,,,,,,
Sol-21342,,,,,,,
Sol-21343,,,,,,,
Sol-21344,,,,,,,
Sol-21345,,,,,,,
Sol-21346,,,,,,,
Sol-21347,,,,,,,
Sol-21348,,,,,,,
Sol-21349,,,,,,,
Sol-21350,,,,,,,
Sol-21351,,,,,,,
Sol-21352,,,,,,,
Sol-21353,,,,,,,
Sol-21354,,,,,,,
Sol-21355,,,,,,,
Sol-21356,,,,,,,
Sol-21357,,,,,,,
Sol-21358,,,,,,,
Sol-21359,,,,,,,
Sol-21360,,,,,,,
Sol-21361,,,,,,,
Sol-21362,,,,,,,
Sol-21363,,,,,,,
Sol-21364,,,,,,,
Sol-21365,,,,,,,
Sol-21366,,,,,,,
Sol-21367,,,,,,,
Sol-21368,,,,,,,
Sol-21369,,,,,,,
Sol-21370,,,,,,,
Sol-21371,,,,,,,
Sol-21372,,,,,,,
Sol-21373,,,,,,,
Sol-21374,,,,,,,
Sol-21375,,,,,,,
Sol-21376,,,,,,,
Sol-21377,,,,,,,
Sol-21378,,,,,,,
Sol-21379,,,,,,,
Sol-21380,,,,,,,
Sol-21381,,,,,,,
Sol-21382,,,,,,,
Sol-21383,,,,,,,
Sol-21384,,,,,,,
Sol-21385,,,,,,,
Sol-21386,,,,,,,
Sol-21387,,,,,,,
Sol-21388,,,,,,,
Sol-21389,,,,,,,
Sol-21390,,,,,,,
Sol-21391,,,,,,,
Sol-21392,,,,,,,
Sol-21393,,,,,,,
Sol-21394,,,,,,,
Sol-21395,,,,,,,
Sol-21396,,,,,,,
Sol-21397,,,,,,,
Sol-21398,,,,,,,
Sol-21399,,,,,,,
Sol-21400,,,,,,,
Sol-21401,,,,,,,
Sol-21402,,,,,,,
Sol-21403,,,,,,,
Sol-21404,,,,,,,
Sol-21405,,,,,,,
Sol-21406,,,,,,,
Sol-21407,,,,,,,
Sol-21408,,,,,,,
Sol-21409,,,,,,,
Sol-21410,,,,,,,
Sol-21411,,,,,,,
Sol-21412,,,,,,,
Sol-21413,,,,,,,
Sol-21414,,,,,,,
Sol-21415,,,,,,,
Sol-21416,,,,,,,
Sol-21417,,,,,,,
Sol-21418,,,,,,,
Sol-21419,,,,,,,
Sol-21420,,,,,,,
Sol-21421,,,,,,,
Sol-21422,,,,,,,
Sol-21423,,,,,,,
Sol-21424,,,,,,,
Sol-21425,,,,,,,
Sol-21426,,,,,,,
Sol-21427,,,,,,,
Sol-21428,,,,,,,
Sol-21429,,,,,,,
Sol-21430,,,,,,,
Sol-21431,,,,,,,
Sol-21432,,,,,,,
Sol-21433,,,,,,,
Sol-21434,,,,,,,
Sol-21435,,,,,,,
Sol-21436,,,,,,,
Sol-21437,,,,,,,
Sol-21438,,,,,,,
Sol-21439,,,,,,,
Sol-21440,,,,,,,
Sol-21441,,,,,,,
Sol-21442,,,,,,,
Sol-21443,,,,,,,
Sol-21444,,,,,,,
Sol-21445,,,,,,,
Sol-21446,,,,,,,
Sol-21447,,,,,,,
Sol-21448,,,,,,,
Sol-21449,,,,,,,
Sol-21450,,,,,,,
Sol-21451,,,,,,,
Sol-21452,,,,,,,
Sol-21453,,,,,,,
Sol-21454,,,,,,,
Sol-21455,,,,,,,
Sol-21456,,,,,,,
Sol-21457,,,,,,,
Sol-21458,,,,,,,
Sol-21459,,,,,,,
Sol-21460,,,,,,,
Sol-21461,,,,,,,
Sol-21462,,,,,,,
Sol-21463,,,,,,,
Sol-21464,,,,,,,
Sol-21465,,,,,,,
Sol-21466,,,,,,,
Sol-21467,,,,,,,
Sol-21468,,,,,,,
Sol-21469,,,,,,,
Sol-21470,,,,,,,
Sol-21471,,,,,,,
Sol-21472,,,,,,,
Sol-21473,,,,,,,
Sol-21474,,,,,,,
Sol-21475,,,,,,,
Sol-21476,,,,,,,
Sol-21477,,,,,,,
Sol-21478,,,,,,,
Sol-21479,,,,,,,
Sol-21480,,,,,,,
Sol-21481,,,,,,,
Sol-21482,,,,,,,
Sol-21483,,,,,,,
Sol-21484,,,,,,,
Sol-21485,,,,,,,
Sol-21486,,,,,,,
Sol-21487,,,,,,,
Sol-21488,,,,,,,
Sol-21489,,,,,,,
Sol-21490,,,,,,,
Sol-21491,,,,,,,
Sol-21492,,,,,,,
Sol-21493,,,,,,,
Sol-21494,,,,,,,
Sol-21495,,,,,,,
Sol-21496,,,,,,,
Sol-21497,,,,,,,
Sol-21498,,,,,,,
Sol-21499,,,,,,,
Sol-21500,,,,,,,
Sol-21501,,,,,,,
Sol-21502,,,,,,,
Sol-21503,,,,,,,
Sol-21504,,,,,,,
Sol-21505,,,,,,,
Sol-21506,,,,,,,
Sol-21507,,,,,,,
Sol-21508,,,,,,,
Sol-21509,,,,,,,
Sol-21510,,,,,,,
Sol-21511,,,,,,,
Sol-21512,,,,,,,
Sol-21513,,,,,,,
Sol-21514,,,,,,,
Sol-21515,,,,,,,
Sol-21516,,,,,,,
Sol-21517,,,,,,,
Sol-21518,,,,,,,
Sol-21519,,,,,,,
Sol-21520,,,,,,,
Sol-21521,,,,,,,
Sol-21522,,,,,,,
Sol-21523,,,,,,,
Sol-21524,,,,,,,
Sol-21525,,,,,,,
Sol-21526,,,,,,,
Sol-21527,,,,,,,
Sol-21528,,,,,,,
Sol-21529,,,,,,,
Sol-21530,,,,,,,
Sol-21531,,,,,,,
Sol-21532,,,,,,,
Sol-21533,,,,,,,
Sol-21534,,,,,,,
Sol-21535,,,,,,,
Sol-21536,,,,,,,
Sol-21537,,,,,,,
Sol-21538,,,,,,,
Sol-21539,,,,,,,
Sol-21540,,,,,,,
Sol-21541,,,,,,,
Sol-21542,,,,,,,
Sol-21543,,,,,,,
Sol-21544,,,,,,,
Sol-21545,,,,,,,
Sol-21546,,,,,,,
Sol-21547,,,,,,,
Sol-21548,,,,,,,
Sol-21549,,,,,,,
Sol-21550,,,,,,,
Sol-21551,,,,,,,
Sol-21552,,,,,,,
Sol-21553,,,,,,,
Sol-21554,,,,,,,
Sol-21555,,,,,,,
Sol-21556,,,,,,,
Sol-21557,,,,,,,
Sol-21558,,,,,,,
Sol-21559,,,,,,,
Sol-21560,,,,,,,
Sol-21561,,,,,,,
Sol-21562,,,,,,,
Sol-21563,,,,,,,
Sol-21564,,,,,,,
Sol-21565,,,,,,,
Sol-21566,,,,,,,
Sol-21567,,,,,,,
Sol-21568,,,,,,,
Sol-21569,,,,,,,
Sol-21570,,,,,,,
Sol-21571,,,,,,,
Sol-21572,,,,,,,
Sol-21573,,,,,,,
Sol-21574,,,,,,,
Sol-21575,,,,,,,
Sol-21576,,,,,,,
Sol-21577,,,,,,,
Sol-21578,,,,,,,
Sol-21579,,,,,,,
Sol-21580,,,,,,,
Sol-21581,,,,,,,
Sol-21582,,,,,,,
Sol-21583,,,,,,,
Sol-21584,,,,,,,
Sol-21585,,,,,,,
Sol-21586,,,,,,,
Sol-21587,,,,,,,
Sol-21588,,,,,,,
Sol-21589,,,,,,,
Sol-21590,,,,,,,
Sol-21591,,,,,,,
Sol-21592,,,,,,,
Sol-21593,,,,,,,
Sol-21594,,,,,,,
Sol-21595,,,,,,,
Sol-21596,,,,,,,
Sol-21597,,,,,,,
Sol-21598,,,,,,,
Sol-21599,,,,,,,
Sol-21600,,,,,,,
Sol-21601,,,,,,,
Sol-21602,,,,,,,
Sol-21603,,,,,,,
Sol-21604,,,,,,,
Sol-21605,,,,,,,
Sol-21606,,,,,,,
Sol-21607,,,,,,,
Sol-21608,,,,,,,
Sol-21609,,,,,,,
Sol-21610,,,,,,,
Sol-21611,,,,,,,
Sol-21612,,,,,,,
Sol-21613,,,,,,,
Sol-21614,,,,,,,
Sol-21615,,,,,,,
Sol-21616,,,,,,,
Sol-21617,,,,,,,
Sol-21618,,,,,,,
Sol-21619,,,,,,,
Sol-21620,,,,,,,
Sol-21621,,,,,,,
Sol-21622,,,,,,,
Sol-21623,,,,,,,
Sol-21624,,,,,,,
Sol-21625,,,,,,,
Sol-21626,,,,,,,
Sol-21627,,,,,,,
Sol-21628,,,,,,,
Sol-21629,,,,,,,
Sol-21630,,,,,,,
Sol-21631,,,,,,,
Sol-21632,,,,,,,
Sol-21633,,,,,,,
Sol-21634,,,,,,,
Sol-21635,,,,,,,
Sol-21636,,,,,,,
Sol-21637,,,,,,,
Sol-21638,,,,,,,
Sol-21639,,,,,,,
Sol-21640,,,,,,,
Sol-21641,,,,,,,
Sol-21642,,,,,,,
Sol-21643,,,,,,,
Sol-21644,,,,,,,
Sol-21645,,,,,,,
Sol-21646,,,,,,,
Sol-21647,,,,,,,
Sol-21648,,,,,,,
Sol-21649,,,,,,,
Sol-21650,,,,,,,
Sol-21651,,,,,,,
Sol-21652,,,,,,,
Sol-21653,,,,,,,
Sol-21654,,,,,,,
Sol-21655,,,,,,,
Sol-21656,,,,,,,
Sol-21657,,,,,,,
Sol-21658,,,,,,,
Sol-21659,,,,,,,
Sol-21660,,,,,,,
Sol-21661,,,,,,,
Sol-21662,,,,,,,
Sol-21663,,,,,,,
Sol-21664,,,,,,,
Sol-21665,,,,,,,
Sol-21666,,,,,,,
Sol-21667,,,,,,,
Sol-21668,,,,,,,
Sol-21669,,,,,,,
Sol-21670,,,,,,,
Sol-21671,,,,,,,
Sol-21672,,,,,,,
Sol-21673,,,,,,,
Sol-21674,,,,,,,
Sol-21675,,,,,,,
Sol-21676,,,,,,,
Sol-21677,,,,,,,
Sol-21678,,,,,,,
Sol-21679,,,,,,,
Sol-21680,,,,,,,
Sol-21681,,,,,,,
Sol-21682,,,,,,,
Sol-21683,,,,,,,
Sol-21684,,,,,,,
Sol-21685,,,,,,,
Sol-21686,,,,,,,
Sol-21687,,,,,,,
Sol-21688,,,,,,,
Sol-21689,,,,,,,
Sol-21690,,,,,,,
Sol-21691,,,,,,,
Sol-21692,,,,,,,
Sol-21693,,,,,,,
Sol-21694,,,,,,,
Sol-21695,,,,,,,
Sol-21696,,,,,,,
Sol-21697,,,,,,,
Sol-21698,,,,,,,
Sol-21699,,,,,,,
Sol-21700,,,,,,,
Sol-21701,,,,,,,
Sol-21702,,,,,,,
Sol-21703,,,,,,,
Sol-21704,,,,,,,
Sol-21705,,,,,,,
Sol-21706,,,,,,,
Sol-21707,,,,,,,
Sol-21708,,,,,,,
Sol-21709,,,,,,,
Sol-21710,,,,,,,
Sol-21711,,,,,,,
Sol-21712,,,,,,,
Sol-21713,,,,,,,
Sol-21714,,,,,,,
Sol-21715,,,,,,,
Sol-21716,,,,,,,
Sol-21717,,,,,,,
Sol-21718,,,,,,,
Sol-21719,,,,,,,
Sol-21720,,,,,,,
Sol-21721,,,,,,,
Sol-21722,,,,,,,
Sol-21723,,,,,,,
Sol-21724,,,,,,,
Sol-21725,,,,,,,
Sol-21726,,,,,,,
Sol-21727,,,,,,,
Sol-21728,,,,,,,
Sol-21729,,,,,,,
Sol-21730,,,,,,,
Sol-21731,,,,,,,
Sol-21732,,,,,,,
Sol-21733,,,,,,,
Sol-21734,,,,,,,
Sol-21735,,,,,,,
Sol-21736,,,,,,,
Sol-21737,,,,,,,
Sol-21738,,,,,,,
Sol-21739,,,,,,,
Sol-21740,,,,,,,
Sol-21741,,,,,,,
Sol-21742,,,,,,,
Sol-21743,,,,,,,
Sol-21744,,,,,,,
Sol-21745,,,,,,,
Sol-21746,,,,,,,
Sol-21747,,,,,,,
Sol-21748,,,,,,,
Sol-21749,,,,,,,
Sol-21750,,,,,,,
Sol-21751,,,,,,,
Sol-21752,,,,,,,
Sol-21753,,,,,,,
Sol-21754,,,,,,,
Sol-21755,,,,,,,
Sol-21756,,,,,,,
Sol-21757,,,,,,,
Sol-21758,,,,,,,
Sol-21759,,,,,,,
Sol-21760,,,,,,,
Sol-21761,,,,,,,
Sol-21762,,,,,,,
Sol-21763,,,,,,,
Sol-21764,,,,,,,
Sol-21765,,,,,,,
Sol-21766,,,,,,,
Sol-21767,,,,,,,
Sol-21768,,,,,,,
Sol-21769,,,,,,,
Sol-21770,,,,,,,
Sol-21771,,,,,,,
Sol-21772,,,,,,,
Sol-21773,,,,,,,
Sol-21774,,,,,,,
Sol-21775,,,,,,,
Sol-21776,,,,,,,
Sol-21777,,,,,,,
Sol-21778,,,,,,,
Sol-21779,,,,,,,
Sol-21780,,,,,,,
Sol-21781,,,,,,,
Sol-21782,,,,,,,
Sol-21783,,,,,,,
Sol-21784,,,,,,,
Sol-21785,,,,,,,
Sol-21786,,,,,,,
Sol-21787,,,,,,,
Sol-21788,,,,,,,
Sol-21789,,,,,,,
Sol-21790,,,,,,,
Sol-21791,,,,,,,
Sol-21792,,,,,,,
Sol-21793,,,,,,,
Sol-21794,,,,,,,
Sol-21795,,,,,,,
Sol-21796,,,,,,,
Sol-21797,,,,,,,
Sol-21798,,,,,,,
Sol-21799,,,,,,,
Sol-21800,,,,,,,
Sol-21801,,,,,,,
Sol-21802,,,,,,,
Sol-21803,,,,,,,
Sol-21804,,,,,,,
Sol-21805,,,,,,,
Sol-21806,,,,,,,
Sol-21807,,,,,,,
Sol-21808,,,,,,,
Sol-21809,,,,,,,
Sol-21810,,,,,,,
Sol-21811,,,,,,,
Sol-21812,,,,,,,
Sol-21813,,,,,,,
Sol-21814,,,,,,,
Sol-21815,,,,,,,
Sol-21816,,,,,,,
Sol-21817,,,,,,,
Sol-21818,,,,,,,
Sol-21819,,,,,,,
Sol-21820,,,,,,,
Sol-21821,,,,,,,
Sol-21822,,,,,,,
Sol-21823,,,,,,,
Sol-21824,,,,,,,
Sol-21825,,,,,,,
Sol-21826,,,,,,,
Sol-21827,,,,,,,
Sol-21828,,,,,,,
Sol-21829,,,,,,,
Sol-21830,,,,,,,
Sol-21831,,,,,,,
Sol-21832,,,,,,,
Sol-21833,,,,,,,
Sol-21834,,,,,,,
Sol-21835,,,,,,,
Sol-21836,,,,,,,
Sol-21837,,,,,,,
Sol-21838,,,,,,,
Sol-21839,,,,,,,
Sol-21840,,,,,,,
Sol-21841,,,,,,,
Sol-21842,,,,,,,
Sol-21843,,,,,,,
Sol-21844,,,,,,,
Sol-21845,,,,,,,
Sol-21846,,,,,,,
Sol-21847,,,,,,,
Sol-21848,,,,,,,
Sol-21849,,,,,,,
Sol-21850,,,,,,,
Sol-21851,,,,,,,
Sol-21852,,,,,,,
Sol-21853,,,,,,,
Sol-21854,,,,,,,
Sol-21855,,,,,,,
Sol-21856,,,,,,,
Sol-21857,,,,,,,
Sol-21858,,,,,,,
Sol-21859,,,,,,,
Sol-21860,,,,,,,
Sol-21861,,,,,,,
Sol-21862,,,,,,,
Sol-21863,,,,,,,
Sol-21864,,,,,,,
Sol-21865,,,,,,,
Sol-21866,,,,,,,
Sol-21867,,,,,,,
Sol-21868,,,,,,,
Sol-21869,,,,,,,
Sol-21870,,,,,,,
Sol-21871,,,,,,,
Sol-21872,,,,,,,
Sol-21873,,,,,,,
Sol-21874,,,,,,,
Sol-21875,,,,,,,
Sol-21876,,,,,,,
Sol-21877,,,,,,,
Sol-21878,,,,,,,
Sol-21879,,,,,,,
Sol-21880,,,,,,,
Sol-21881,,,,,,,
Sol-21882,,,,,,,
Sol-21883,,,,,,,
Sol-21884,,,,,,,
Sol-21885,,,,,,,
Sol-21886,,,,,,,
Sol-21887,,,,,,,
Sol-21888,,,,,,,
Sol-21889,,,,,,,
Sol-21890,,,,,,,
Sol-21891,,,,,,,
Sol-21892,,,,,,,
Sol-21893,,,,,,,
Sol-21894,,,,,,,
Sol-21895,,,,,,,
Sol-21896,,,,,,,
Sol-21897,,,,,,,
Sol-21898,,,,,,,
Sol-21899,,,,,,,
Sol-21900,,,,,,,
Sol-21901,,,,,,,
Sol-21902,,,,,,,
Sol-21903,,,,,,,
Sol-21904,,,,,,,
Sol-21905,,,,,,,
Sol-21906,,,,,,,
Sol-21907,,,,,,,
Sol-21908,,,,,,,
Sol-21909,,,,,,,
Sol-21910,,,,,,,
Sol-21911,,,,,,,
Sol-21912,,,,,,,
Sol-21913,,,,,,,
Sol-21914,,,,,,,
Sol-21915,,,,,,,
Sol-21916,,,,,,,
Sol-21917,,,,,,,
Sol-21918,,,,,,,
Sol-21919,,,,,,,
Sol-21920,,,,,,,
Sol-21921,,,,,,,
Sol-21922,,,,,,,
Sol-21923,,,,,,,
Sol-21924,,,,,,,
Sol-21925,,,,,,,
Sol-21926,,,,,,,
Sol-21927,,,,,,,
Sol-21928,,,,,,,
Sol-21929,,,,,,,
Sol-21930,,,,,,,
Sol-21931,,,,,,,
Sol-21932,,,,,,,
Sol-21933,,,,,,,
Sol-21934,,,,,,,
Sol-21935,,,,,,,
Sol-21936,,,,,,,
Sol-21937,,,,,,,
Sol-21938,,,,,,,
Sol-21939,,,,,,,
Sol-21940,,,,,,,
Sol-21941,,,,,,,
Sol-21942,,,,,,,
Sol-21943,,,,,,,
Sol-21944,,,,,,,
Sol-21945,,,,,,,
Sol-21946,,,,,,,
Sol-21947,,,,,,,
Sol-21948,,,,,,,
Sol-21949,,,,,,,
Sol-21950,,,,,,,
Sol-21951,,,,,,,
Sol-21952,,,,,,,
Sol-21953,,,,,,,
Sol-21954,,,,,,,
Sol-21955,,,,,,,
Sol-21956,,,,,,,
Sol-21957,,,,,,,
Sol-21958,,,,,,,
Sol-21959,,,,,,,
Sol-21960,,,,,,,
Sol-21961,,,,,,,
Sol-21962,,,,,,,
Sol-21963,,,,,,,
Sol-21964,,,,,,,
Sol-21965,,,,,,,
Sol-21966,,,,,,,
Sol-21967,,,,,,,
Sol-21968,,,,,,,
Sol-21969,,,,,,,
Sol-21970,,,,,,,
Sol-21971,,,,,,,
Sol-21972,,,,,,,
Sol-21973,,,,,,,
Sol-21974,,,,,,,
Sol-21975,,,,,,,
Sol-21976,,,,,,,
Sol-21977,,,,,,,
Sol-21978,,,,,,,
Sol-21979,,,,,,,
Sol-21980,,,,,,,
Sol-21981,,,,,,,
Sol-21982,,,,,,,
Sol-21983,,,,,,,
Sol-21984,,,,,,,
Sol-21985,,,,,,,
Sol-21986,,,,,,,
Sol-21987,,,,,,,
Sol-21988,,,,,,,
Sol-21989,,,,,,,
Sol-21990,,,,,,,
Sol-21991,,,,,,,
Sol-21992,,,,,,,
Sol-21993,,,,,,,
Sol-21994,,,,,,,
Sol-21995,,,,,,,
Sol-21996,,,,,,,
Sol-21997,,,,,,,
Sol-21998,,,,,,,
Sol-21999,,,,,,,
Sol-22000,,,,,,,
Sol-22001,,,,,,,
Sol-22002,,,,,,,
Sol-22003,,,,,,,
Sol-22004,,,,,,,
Sol-22005,,,,,,,
Sol-22006,,,,,,,
Sol-22007,,,,,,,
Sol-22008,,,,,,,
Sol-22009,,,,,,,
Sol-22010,,,,,,,
Sol-22011,,,,,,,
Sol-22012,,,,,,,
Sol-22013,,,,,,,
Sol-22014,,,,,,,
Sol-22015,,,,,,,
Sol-22016,,,,,,,
Sol-22017,,,,,,,
Sol-22018,,,,,,,
Sol-22019,,,,,,,
Sol-22020,,,,,,,
Sol-22021,,,,,,,
Sol-22022,,,,,,,
Sol-22023,,,,,,,
Sol-22024,,,,,,,
Sol-22025,,,,,,,
Sol-22026,,,,,,,
Sol-22027,,,,,,,
Sol-22028,,,,,,,
Sol-22029,,,,,,,
Sol-22030,,,,,,,
Sol-22031,,,,,,,
Sol-22032,,,,,,,
Sol-22033,,,,,,,
Sol-22034,,,,,,,
Sol-22035,,,,,,,
Sol-22036,,,,,,,
Sol-22037,,,,,,,
Sol-22038,,,,,,,
Sol-22039,,,,,,,
Sol-22040,,,,,,,
Sol-22041,,,,,,,
Sol-22042,,,,,,,
Sol-22043,,,,,,,
Sol-22044,,,,,,,
Sol-22045,,,,,,,
Sol-22046,,,,,,,
Sol-22047,,,,,,,
Sol-22048,,,,,,,
Sol-22049,,,,,,,
Sol-22050,,,,,,,
Sol-22051,,,,,,,
Sol-22052,,,,,,,
Sol-22053,,,,,,,
Sol-22054,,,,,,,
Sol-22055,,,,,,,
Sol-22056,,,,,,,
Sol-22057,,,,,,,
Sol-22058,,,,,,,
Sol-22059,,,,,,,
Sol-22060,,,,,,,
Sol-22061,,,,,,,
Sol-22062,,,,,,,
Sol-22063,,,,,,,
Sol-22064,,,,,,,
Sol-22065,,,,,,,
Sol-22066,,,,,,,
Sol-22067,,,,,,,
Sol-22068,,,,,,,
Sol-22069,,,,,,,
Sol-22070,,,,,,,
Sol-22071,,,,,,,
Sol-22072,,,,,,,
Sol-22073,,,,,,,
Sol-22074,,,,,,,
Sol-22075,,,,,,,
Sol-22076,,,,,,,
Sol-22077,,,,,,,
Sol-22078,,,,,,,
Sol-22079,,,,,,,
Sol-22080,,,,,,,
Sol-22081,,,,,,,
Sol-22082,,,,,,,
Sol-22083,,,,,,,
Sol-22084,,,,,,,
Sol-22085,,,,,,,
Sol-22086,,,,,,,
Sol-22087,,,,,,,
Sol-22088,,,,,,,
Sol-22089,,,,,,,
Sol-22090,,,,,,,
Sol-22091,,,,,,,
Sol-22092,,,,,,,
Sol-22093,,,,,,,
Sol-22094,,,,,,,
Sol-22095,,,,,,,
Sol-22096,,,,,,,
Sol-22097,,,,,,,
Sol-22098,,,,,,,
Sol-22099,,,,,,,
Sol-22100,,,,,,,
Sol-22101,,,,,,,
Sol-22102,,,,,,,
Sol-22103,,,,,,,
Sol-22104,,,,,,,
Sol-22105,,,,,,,
Sol-22106,,,,,,,
Sol-22107,,,,,,,
Sol-22108,,,,,,,
Sol-22109,,,,,,,
Sol-22110,,,,,,,
Sol-22111,,,,,,,
Sol-22112,,,,,,,
Sol-22113,,,,,,,
Sol-22114,,,,,,,
Sol-22115,,,,,,,
Sol-22116,,,,,,,
Sol-22117,,,,,,,
Sol-22118,,,,,,,
Sol-22119,,,,,,,
Sol-22120,,,,,,,
Sol-22121,,,,,,,
Sol-22122,,,,,,,
Sol-22123,,,,,,,
Sol-22124,,,,,,,
Sol-22125,,,,,,,
Sol-22126,,,,,,,
Sol-22127,,,,,,,
Sol-22128,,,,,,,
Sol-22129,,,,,,,
Sol-22130,,,,,,,
Sol-22131,,,,,,,
Sol-22132,,,,,,,
Sol-22133,,,,,,,
Sol-22134,,,,,,,
Sol-22135,,,,,,,
Sol-22136,,,,,,,
Sol-22137,,,,,,,
Sol-22138,,,,,,,
Sol-22139,,,,,,,
Sol-22140,,,,,,,
Sol-22141,,,,,,,
Sol-22142,,,,,,,
Sol-22143,,,,,,,
Sol-22144,,,,,,,
Sol-22145,,,,,,,
Sol-22146,,,,,,,
Sol-22147,,,,,,,
Sol-22148,,,,,,,
Sol-22149,,,,,,,
Sol-22150,,,,,,,
Sol-22151,,,,,,,
Sol-22152,,,,,,,
Sol-22153,,,,,,,
Sol-22154,,,,,,,
Sol-22155,,,,,,,
Sol-22156,,,,,,,
Sol-22157,,,,,,,
Sol-22158,,,,,,,
Sol-22159,,,,,,,
Sol-22160,,,,,,,
Sol-22161,,,,,,,
Sol-22162,,,,,,,
Sol-22163,,,,,,,
Sol-22164,,,,,,,
Sol-22165,,,,,,,
Sol-22166,,,,,,,
Sol-22167,,,,,,,
Sol-22168,,,,,,,
Sol-22169,,,,,,,
Sol-22170,,,,,,,
Sol-22171,,,,,,,
Sol-22172,,,,,,,
Sol-22173,,,,,,,
Sol-22174,,,,,,,
Sol-22175,,,,,,,
Sol-22176,,,,,,,
Sol-22177,,,,,,,
Sol-22178,,,,,,,
Sol-22179,,,,,,,
Sol-22180,,,,,,,
Sol-22181,,,,,,,
Sol-22182,,,,,,,
Sol-22183,,,,,,,
Sol-22184,,,,,,,
Sol-22185,,,,,,,
Sol-22186,,,,,,,
Sol-22187,,,,,,,
Sol-22188,,,,,,,
Sol-22189,,,,,,,
Sol-22190,,,,,,,
Sol-22191,,,,,,,
Sol-22192,,,,,,,
Sol-22193,,,,,,,
Sol-22194,,,,,,,
Sol-22195,,,,,,,
Sol-22196,,,,,,,
Sol-22197,,,,,,,
Sol-22198,,,,,,,
Sol-22199,,,,,,,
Sol-22200,,,,,,,
Sol-22201,,,,,,,
Sol-22202,,,,,,,
Sol-22203,,,,,,,
Sol-22204,,,,,,,
Sol-22205,,,,,,,
Sol-22206,,,,,,,
Sol-22207,,,,,,,
Sol-22208,,,,,,,
Sol-22209,,,,,,,
Sol-22210,,,,,,,
Sol-22211,,,,,,,
Sol-22212,,,,,,,
Sol-22213,,,,,,,
Sol-22214,,,,,,,
Sol-22215,,,,,,,
Sol-22216,,,,,,,
Sol-22217,,,,,,,
Sol-22218,,,,,,,
Sol-22219,,,,,,,
Sol-22220,,,,,,,
Sol-22221,,,,,,,
Sol-22222,,,,,,,
Sol-22223,,,,,,,
Sol-22224,,,,,,,
Sol-22225,,,,,,,
Sol-22226,,,,,,,
Sol-22227,,,,,,,
Sol-22228,,,,,,,
Sol-22229,,,,,,,
Sol-22230,,,,,,,
Sol-22231,,,,,,,
Sol-22232,,,,,,,
Sol-22233,,,,,,,
Sol-22234,,,,,,,
Sol-22235,,,,,,,
Sol-22236,,,,,,,
Sol-22237,,,,,,,
Sol-22238,,,,,,,
Sol-22239,,,,,,,
Sol-22240,,,,,,,
Sol-22241,,,,,,,
Sol-22242,,,,,,,
Sol-22243,,,,,,,
Sol-22244,,,,,,,
Sol-22245,,,,,,,
Sol-22246,,,,,,,
Sol-22247,,,,,,,
Sol-22248,,,,,,,
Sol-22249,,,,,,,
Sol-22250,,,,,,,
Sol-22251,,,,,,,
Sol-22252,,,,,,,
Sol-22253,,,,,,,
Sol-22254,,,,,,,
Sol-22255,,,,,,,
Sol-22256,,,,,,,
Sol-22257,,,,,,,
Sol-22258,,,,,,,
Sol-22259,,,,,,,
Sol-22260,,,,,,,
Sol-22261,,,,,,,
Sol-22262,,,,,,,
Sol-22263,,,,,,,
Sol-22264,,,,,,,
Sol-22265,,,,,,,
Sol-22266,,,,,,,
Sol-22267,,,,,,,
Sol-22268,,,,,,,
Sol-22269,,,,,,,
Sol-22270,,,,,,,
Sol-22271,,,,,,,
Sol-22272,,,,,,,
Sol-22273,,,,,,,
Sol-22274,,,,,,,
Sol-22275,,,,,,,
Sol-22276,,,,,,,
Sol-22277,,,,,,,
Sol-22278,,,,,,,
Sol-22279,,,,,,,
Sol-22280,,,,,,,
Sol-22281,,,,,,,
Sol-22282,,,,,,,
Sol-22283,,,,,,,
Sol-22284,,,,,,,
Sol-22285,,,,,,,
Sol-22286,,,,,,,
Sol-22287,,,,,,,
Sol-22288,,,,,,,
Sol-22289,,,,,,,
Sol-22290,,,,,,,
Sol-22291,,,,,,,
Sol-22292,,,,,,,
Sol-22293,,,,,,,
Sol-22294,,,,,,,
Sol-22295,,,,,,,
Sol-22296,,,,,,,
Sol-22297,,,,,,,
Sol-22298,,,,,,,
Sol-22299,,,,,,,
Sol-22300,,,,,,,
Sol-22301,,,,,,,
Sol-22302,,,,,,,
Sol-22303,,,,,,,
Sol-22304,,,,,,,
Sol-22305,,,,,,,
Sol-22306,,,,,,,
Sol-22307,,,,,,,
Sol-22308,,,,,,,
Sol-22309,,,,,,,
Sol-22310,,,,,,,
Sol-22311,,,,,,,
Sol-22312,,,,,,,
Sol-22313,,,,,,,
Sol-22314,,,,,,,
Sol-22315,,,,,,,
Sol-22316,,,,,,,
Sol-22317,,,,,,,
Sol-22318,,,,,,,
Sol-22319,,,,,,,
Sol-22320,,,,,,,
Sol-22321,,,,,,,
Sol-22322,,,,,,,
Sol-22323,,,,,,,
Sol-22324,,,,,,,
Sol-22325,,,,,,,
Sol-22326,,,,,,,
Sol-22327,,,,,,,
Sol-22328,,,,,,,
Sol-22329,,,,,,,
Sol-22330,,,,,,,
Sol-22331,,,,,,,
Sol-22332,,,,,,,
Sol-22333,,,,,,,
Sol-22334,,,,,,,
Sol-22335,,,,,,,
Sol-22336,,,,,,,
Sol-22337,,,,,,,
Sol-22338,,,,,,,
Sol-22339,,,,,,,
Sol-22340,,,,,,,
Sol-22341,,,,,,,
Sol-22342,,,,,,,
Sol-22343,,,,,,,
Sol-22344,,,,,,,
Sol-22345,,,,,,,
Sol-22346,,,,,,,
Sol-22347,,,,,,,
Sol-22348,,,,,,,
Sol-22349,,,,,,,
Sol-22350,,,,,,,
Sol-22351,,,,,,,
Sol-22352,,,,,,,
Sol-22353,,,,,,,
Sol-22354,,,,,,,
Sol-22355,,,,,,,
Sol-22356,,,,,,,
Sol-22357,,,,,,,
Sol-22358,,,,,,,
Sol-22359,,,,,,,
Sol-22360,,,,,,,
Sol-22361,,,,,,,
Sol-22362,,,,,,,
Sol-22363,,,,,,,
Sol-22364,,,,,,,
Sol-22365,,,,,,,
Sol-22366,,,,,,,
Sol-22367,,,,,,,
Sol-22368,,,,,,,
Sol-22369,,,,,,,
Sol-22370,,,,,,,
Sol-22371,,,,,,,
Sol-22372,,,,,,,
Sol-22373,,,,,,,
Sol-22374,,,,,,,
Sol-22375,,,,,,,
Sol-22376,,,,,,,
Sol-22377,,,,,,,
Sol-22378,,,,,,,
Sol-22379,,,,,,,
Sol-22380,,,,,,,
Sol-22381,,,,,,,
Sol-22382,,,,,,,
Sol-22383,,,,,,,
Sol-22384,,,,,,,
Sol-22385,,,,,,,
Sol-22386,,,,,,,
Sol-22387,,,,,,,
Sol-22388,,,,,,,
Sol-22389,,,,,,,
Sol-22390,,,,,,,
Sol-22391,,,,,,,
Sol-22392,,,,,,,
Sol-22393,,,,,,,
Sol-22394,,,,,,,
Sol-22395,,,,,,,
Sol-22396,,,,,,,
Sol-22397,,,,,,,
Sol-22398,,,,,,,
Sol-22399,,,,,,,
Sol-22400,,,,,,,
Sol-22401,,,,,,,
Sol-22402,,,,,,,
Sol-22403,,,,,,,
Sol-22404,,,,,,,
Sol-22405,,,,,,,
Sol-22406,,,,,,,
Sol-22407,,,,,,,
Sol-22408,,,,,,,
Sol-22409,,,,,,,
Sol-22410,,,,,,,
Sol-22411,,,,,,,
Sol-22412,,,,,,,
Sol-22413,,,,,,,
Sol-22414,,,,,,,
Sol-22415,,,,,,,
Sol-22416,,,,,,,
Sol-22417,,,,,,,
Sol-22418,,,,,,,
Sol-22419,,,,,,,
Sol-22420,,,,,,,
Sol-22421,,,,,,,
Sol-22422,,,,,,,
Sol-22423,,,,,,,
Sol-22424,,,,,,,
Sol-22425,,,,,,,
Sol-22426,,,,,,,
Sol-22427,,,,,,,
Sol-22428,,,,,,,
Sol-22429,,,,,,,
Sol-22430,,,,,,,
Sol-22431,,,,,,,
Sol-22432,,,,,,,
Sol-22433,,,,,,,
Sol-22434,,,,,,,
Sol-22435,,,,,,,
Sol-22436,,,,,,,
Sol-22437,,,,,,,
Sol-22438,,,,,,,
Sol-22439,,,,,,,
Sol-22440,,,,,,,
Sol-22441,,,,,,,
Sol-22442,,,,,,,
Sol-22443,,,,,,,
Sol-22444,,,,,,,
Sol-22445,,,,,,,
Sol-22446,,,,,,,
Sol-22447,,,,,,,
Sol-22448,,,,,,,
Sol-22449,,,,,,,
Sol-22450,,,,,,,
Sol-22451,,,,,,,
Sol-22452,,,,,,,
Sol-22453,,,,,,,
Sol-22454,,,,,,,
Sol-22455,,,,,,,
Sol-22456,,,,,,,
Sol-22457,,,,,,,
Sol-22458,,,,,,,
Sol-22459,,,,,,,
Sol-22460,,,,,,,
Sol-22461,,,,,,,
Sol-22462,,,,,,,
Sol-22463,,,,,,,
Sol-22464,,,,,,,
Sol-22465,,,,,,,
Sol-22466,,,,,,,
Sol-22467,,,,,,,
Sol-22468,,,,,,,
Sol-22469,,,,,,,
Sol-22470,,,,,,,
Sol-22471,,,,,,,
Sol-22472,,,,,,,
Sol-22473,,,,,,,
Sol-22474,,,,,,,
Sol-22475,,,,,,,
Sol-22476,,,,,,,
Sol-22477,,,,,,,
Sol-22478,,,,,,,
Sol-22479,,,,,,,
Sol-22480,,,,,,,
Sol-22481,,,,,,,
Sol-22482,,,,,,,
Sol-22483,,,,,,,
Sol-22484,,,,,,,
Sol-22485,,,,,,,
Sol-22486,,,,,,,
Sol-22487,,,,,,,
Sol-22488,,,,,,,
Sol-22489,,,,,,,
Sol-22490,,,,,,,
Sol-22491,,,,,,,
Sol-22492,,,,,,,
Sol-22493,,,,,,,
Sol-22494,,,,,,,
Sol-22495,,,,,,,
Sol-22496,,,,,,,
Sol-22497,,,,,,,
Sol-22498,,,,,,,
Sol-22499,,,,,,,
Sol-22500,,,,,,,
Sol-22501,,,,,,,
Sol-22502,,,,,,,
Sol-22503,,,,,,,
Sol-22504,,,,,,,
Sol-22505,,,,,,,
Sol-22506,,,,,,,
Sol-22507,,,,,,,
Sol-22508,,,,,,,
Sol-22509,,,,,,,
Sol-22510,,,,,,,
Sol-22511,,,,,,,
Sol-22512,,,,,,,
Sol-22513,,,,,,,
Sol-22514,,,,,,,
Sol-22515,,,,,,,
Sol-22516,,,,,,,
Sol-22517,,,,,,,
Sol-22518,,,,,,,
Sol-22519,,,,,,,
Sol-22520,,,,,,,
Sol-22521,,,,,,,
Sol-22522,,,,,,,
Sol-22523,,,,,,,
Sol-22524,,,,,,,
Sol-22525,,,,,,,
Sol-22526,,,,,,,
Sol-22527,,,,,,,
Sol-22528,,,,,,,
Sol-22529,,,,,,,
Sol-22530,,,,,,,
Sol-22531,,,,,,,
Sol-22532,,,,,,,
Sol-22533,,,,,,,
Sol-22534,,,,,,,
Sol-22535,,,,,,,
Sol-22536,,,,,,,
Sol-22537,,,,,,,
Sol-22538,,,,,,,
Sol-22539,,,,,,,
Sol-22540,,,,,,,
Sol-22541,,,,,,,
Sol-22542,,,,,,,
Sol-22543,,,,,,,
Sol-22544,,,,,,,
Sol-22545,,,,,,,
Sol-22546,,,,,,,
Sol-22547,,,,,,,
Sol-22548,,,,,,,
Sol-22549,,,,,,,
Sol-22550,,,,,,,
Sol-22551,,,,,,,
Sol-22552,,,,,,,
Sol-22553,,,,,,,
Sol-22554,,,,,,,
Sol-22555,,,,,,,
Sol-22556,,,,,,,
Sol-22557,,,,,,,
Sol-22558,,,,,,,
Sol-22559,,,,,,,
Sol-22560,,,,,,,
Sol-22561,,,,,,,
Sol-22562,,,,,,,
Sol-22563,,,,,,,
Sol-22564,,,,,,,
Sol-22565,,,,,,,
Sol-22566,,,,,,,
Sol-22567,,,,,,,
Sol-22568,,,,,,,
Sol-22569,,,,,,,
Sol-22570,,,,,,,
Sol-22571,,,,,,,
Sol-22572,,,,,,,
Sol-22573,,,,,,,
Sol-22574,,,,,,,
Sol-22575,,,,,,,
Sol-22576,,,,,,,
Sol-22577,,,,,,,
Sol-22578,,,,,,,
Sol-22579,,,,,,,
Sol-22580,,,,,,,
Sol-22581,,,,,,,
Sol-22582,,,,,,,
Sol-22583,,,,,,,
Sol-22584,,,,,,,
Sol-22585,,,,,,,
Sol-22586,,,,,,,
Sol-22587,,,,,,,
Sol-22588,,,,,,,
Sol-22589,,,,,,,
Sol-22590,,,,,,,
Sol-22591,,,,,,,
Sol-22592,,,,,,,
Sol-22593,,,,,,,
Sol-22594,,,,,,,
Sol-22595,,,,,,,
Sol-22596,,,,,,,
Sol-22597,,,,,,,
Sol-22598,,,,,,,
Sol-22599,,,,,,,
Sol-22600,,,,,,,
Sol-22601,,,,,,,
Sol-22602,,,,,,,
Sol-22603,,,,,,,
Sol-22604,,,,,,,
Sol-22605,,,,,,,
Sol-22606,,,,,,,
Sol-22607,,,,,,,
Sol-22608,,,,,,,
Sol-22609,,,,,,,
Sol-22610,,,,,,,
Sol-22611,,,,,,,
Sol-22612,,,,,,,
Sol-22613,,,,,,,
Sol-22614,,,,,,,
Sol-22615,,,,,,,
Sol-22616,,,,,,,
Sol-22617,,,,,,,
Sol-22618,,,,,,,
Sol-22619,,,,,,,
Sol-22620,,,,,,,
Sol-22621,,,,,,,
Sol-22622,,,,,,,
Sol-22623,,,,,,,
Sol-22624,,,,,,,
Sol-22625,,,,,,,
Sol-22626,,,,,,,
Sol-22627,,,,,,,
Sol-22628,,,,,,,
Sol-22629,,,,,,,
Sol-22630,,,,,,,
Sol-22631,,,,,,,
Sol-22632,,,,,,,
Sol-22633,,,,,,,
Sol-22634,,,,,,,
Sol-22635,,,,,,,
Sol-22636,,,,,,,
Sol-22637,,,,,,,
Sol-22638,,,,,,,
Sol-22639,,,,,,,
Sol-22640,,,,,,,
Sol-22641,,,,,,,
Sol-22642,,,,,,,
Sol-22643,,,,,,,
Sol-22644,,,,,,,
Sol-22645,,,,,,,
Sol-22646,,,,,,,
Sol-22647,,,,,,,
Sol-22648,,,,,,,
Sol-22649,,,,,,,
Sol-22650,,,,,,,
Sol-22651,,,,,,,
Sol-22652,,,,,,,
Sol-22653,,,,,,,
Sol-22654,,,,,,,
Sol-22655,,,,,,,
Sol-22656,,,,,,,
Sol-22657,,,,,,,
Sol-22658,,,,,,,
Sol-22659,,,,,,,
Sol-22660,,,,,,,
Sol-22661,,,,,,,
Sol-22662,,,,,,,
Sol-22663,,,,,,,
Sol-22664,,,,,,,
Sol-22665,,,,,,,
Sol-22666,,,,,,,
Sol-22667,,,,,,,
Sol-22668,,,,,,,
Sol-22669,,,,,,,
Sol-22670,,,,,,,
Sol-22671,,,,,,,
Sol-22672,,,,,,,
Sol-22673,,,,,,,
Sol-22674,,,,,,,
Sol-22675,,,,,,,
Sol-22676,,,,,,,
Sol-22677,,,,,,,
Sol-22678,,,,,,,
Sol-22679,,,,,,,
Sol-22680,,,,,,,
Sol-22681,,,,,,,
Sol-22682,,,,,,,
Sol-22683,,,,,,,
Sol-22684,,,,,,,
Sol-22685,,,,,,,
Sol-22686,,,,,,,
Sol-22687,,,,,,,
Sol-22688,,,,,,,
Sol-22689,,,,,,,
Sol-22690,,,,,,,
Sol-22691,,,,,,,
Sol-22692,,,,,,,
Sol-22693,,,,,,,
Sol-22694,,,,,,,
Sol-22695,,,,,,,
Sol-22696,,,,,,,
Sol-22697,,,,,,,
Sol-22698,,,,,,,
Sol-22699,,,,,,,
Sol-22700,,,,,,,
Sol-22701,,,,,,,
Sol-22702,,,,,,,
Sol-22703,,,,,,,
Sol-22704,,,,,,,
Sol-22705,,,,,,,
Sol-22706,,,,,,,
Sol-22707,,,,,,,
Sol-22708,,,,,,,
Sol-22709,,,,,,,
Sol-22710,,,,,,,
Sol-22711,,,,,,,
Sol-22712,,,,,,,
Sol-22713,,,,,,,
Sol-22714,,,,,,,
Sol-22715,,,,,,,
Sol-22716,,,,,,,
Sol-22717,,,,,,,
Sol-22718,,,,,,,
Sol-22719,,,,,,,
Sol-22720,,,,,,,
Sol-22721,,,,,,,
Sol-22722,,,,,,,
Sol-22723,,,,,,,
Sol-22724,,,,,,,
Sol-22725,,,,,,,
Sol-22726,,,,,,,
Sol-22727,,,,,,,
Sol-22728,,,,,,,
Sol-22729,,,,,,,
Sol-22730,,,,,,,
Sol-22731,,,,,,,
Sol-22732,,,,,,,
Sol-22733,,,,,,,
Sol-22734,,,,,,,
Sol-22735,,,,,,,
Sol-22736,,,,,,,
Sol-22737,,,,,,,
Sol-22738,,,,,,,
Sol-22739,,,,,,,
Sol-22740,,,,,,,
Sol-22741,,,,,,,
Sol-22742,,,,,,,
Sol-22743,,,,,,,
Sol-22744,,,,,,,
Sol-22745,,,,,,,
Sol-22746,,,,,,,
Sol-22747,,,,,,,
Sol-22748,,,,,,,
Sol-22749,,,,,,,
Sol-22750,,,,,,,
Sol-22751,,,,,,,
Sol-22752,,,,,,,
Sol-22753,,,,,,,
Sol-22754,,,,,,,
Sol-22755,,,,,,,
Sol-22756,,,,,,,
Sol-22757,,,,,,,
Sol-22758,,,,,,,
Sol-22759,,,,,,,
Sol-22760,,,,,,,
Sol-22761,,,,,,,
Sol-22762,,,,,,,
Sol-22763,,,,,,,
Sol-22764,,,,,,,
Sol-22765,,,,,,,
Sol-22766,,,,,,,
Sol-22767,,,,,,,
Sol-22768,,,,,,,
Sol-22769,,,,,,,
Sol-22770,,,,,,,
Sol-22771,,,,,,,
Sol-22772,,,,,,,
Sol-22773,,,,,,,
Sol-22774,,,,,,,
Sol-22775,,,,,,,
Sol-22776,,,,,,,
Sol-22777,,,,,,,
Sol-22778,,,,,,,
Sol-22779,,,,,,,
Sol-22780,,,,,,,
Sol-22781,,,,,,,
Sol-22782,,,,,,,
Sol-22783,,,,,,,
Sol-22784,,,,,,,
Sol-22785,,,,,,,
Sol-22786,,,,,,,
Sol-22787,,,,,,,
Sol-22788,,,,,,,
Sol-22789,,,,,,,
Sol-22790,,,,,,,
Sol-22791,,,,,,,
Sol-22792,,,,,,,
Sol-22793,,,,,,,
Sol-22794,,,,,,,
Sol-22795,,,,,,,
Sol-22796,,,,,,,
Sol-22797,,,,,,,
Sol-22798,,,,,,,
Sol-22799,,,,,,,
Sol-22800,,,,,,,
Sol-22801,,,,,,,
Sol-22802,,,,,,,
Sol-22803,,,,,,,
Sol-22804,,,,,,,
Sol-22805,,,,,,,
Sol-22806,,,,,,,
Sol-22807,,,,,,,
Sol-22808,,,,,,,
Sol-22809,,,,,,,
Sol-22810,,,,,,,
Sol-22811,,,,,,,
Sol-22812,,,,,,,
Sol-22813,,,,,,,
Sol-22814,,,,,,,
Sol-22815,,,,,,,
Sol-22816,,,,,,,
Sol-22817,,,,,,,
Sol-22818,,,,,,,
Sol-22819,,,,,,,
Sol-22820,,,,,,,
Sol-22821,,,,,,,
Sol-22822,,,,,,,
Sol-22823,,,,,,,
Sol-22824,,,,,,,
Sol-22825,,,,,,,
Sol-22826,,,,,,,
Sol-22827,,,,,,,
Sol-22828,,,,,,,
Sol-22829,,,,,,,
Sol-22830,,,,,,,
Sol-22831,,,,,,,
Sol-22832,,,,,,,
Sol-22833,,,,,,,
Sol-22834,,,,,,,
Sol-22835,,,,,,,
Sol-22836,,,,,,,
Sol-22837,,,,,,,
Sol-22838,,,,,,,
Sol-22839,,,,,,,
Sol-22840,,,,,,,
Sol-22841,,,,,,,
Sol-22842,,,,,,,
Sol-22843,,,,,,,
Sol-22844,,,,,,,
Sol-22845,,,,,,,
Sol-22846,,,,,,,
Sol-22847,,,,,,,
Sol-22848,,,,,,,
Sol-22849,,,,,,,
Sol-22850,,,,,,,
Sol-22851,,,,,,,
Sol-22852,,,,,,,
Sol-22853,,,,,,,
Sol-22854,,,,,,,
Sol-22855,,,,,,,
Sol-22856,,,,,,,
Sol-22857,,,,,,,
Sol-22858,,,,,,,
Sol-22859,,,,,,,
Sol-22860,,,,,,,
Sol-22861,,,,,,,
Sol-22862,,,,,,,
Sol-22863,,,,,,,
Sol-22864,,,,,,,
Sol-22865,,,,,,,
Sol-22866,,,,,,,
Sol-22867,,,,,,,
Sol-22868,,,,,,,
Sol-22869,,,,,,,
Sol-22870,,,,,,,
Sol-22871,,,,,,,
Sol-22872,,,,,,,
Sol-22873,,,,,,,
Sol-22874,,,,,,,
Sol-22875,,,,,,,
Sol-22876,,,,,,,
Sol-22877,,,,,,,
Sol-22878,,,,,,,
Sol-22879,,,,,,,
Sol-22880,,,,,,,
Sol-22881,,,,,,,
Sol-22882,,,,,,,
Sol-22883,,,,,,,
Sol-22884,,,,,,,
Sol-22885,,,,,,,
Sol-22886,,,,,,,
Sol-22887,,,,,,,
Sol-22888,,,,,,,
Sol-22889,,,,,,,
Sol-22890,,,,,,,
Sol-22891,,,,,,,
Sol-22892,,,,,,,
Sol-22893,,,,,,,
Sol-22894,,,,,,,
Sol-22895,,,,,,,
Sol-22896,,,,,,,
Sol-22897,,,,,,,
Sol-22898,,,,,,,
Sol-22899,,,,,,,
Sol-22900,,,,,,,
Sol-22901,,,,,,,
Sol-22902,,,,,,,
Sol-22903,,,,,,,
Sol-22904,,,,,,,
Sol-22905,,,,,,,
Sol-22906,,,,,,,
Sol-22907,,,,,,,
Sol-22908,,,,,,,
Sol-22909,,,,,,,
Sol-22910,,,,,,,
Sol-22911,,,,,,,
Sol-22912,,,,,,,
Sol-22913,,,,,,,
Sol-22914,,,,,,,
Sol-22915,,,,,,,
Sol-22916,,,,,,,
Sol-22917,,,,,,,
Sol-22918,,,,,,,
Sol-22919,,,,,,,
Sol-22920,,,,,,,
Sol-22921,,,,,,,
Sol-22922,,,,,,,
Sol-22923,,,,,,,
Sol-22924,,,,,,,
Sol-22925,,,,,,,
Sol-22926,,,,,,,
Sol-22927,,,,,,,
Sol-22928,,,,,,,
Sol-22929,,,,,,,
Sol-22930,,,,,,,
Sol-22931,,,,,,,
Sol-22932,,,,,,,
Sol-22933,,,,,,,
Sol-22934,,,,,,,
Sol-22935,,,,,,,
Sol-22936,,,,,,,
Sol-22937,,,,,,,
Sol-22938,,,,,,,
Sol-22939,,,,,,,
Sol-22940,,,,,,,
Sol-22941,,,,,,,
Sol-22942,,,,,,,
Sol-22943,,,,,,,
Sol-22944,,,,,,,
Sol-22945,,,,,,,
Sol-22946,,,,,,,
Sol-22947,,,,,,,
Sol-22948,,,,,,,
Sol-22949,,,,,,,
Sol-22950,,,,,,,
Sol-22951,,,,,,,
Sol-22952,,,,,,,
Sol-22953,,,,,,,
Sol-22954,,,,,,,
Sol-22955,,,,,,,
Sol-22956,,,,,,,
Sol-22957,,,,,,,
Sol-22958,,,,,,,
Sol-22959,,,,,,,
Sol-22960,,,,,,,
Sol-22961,,,,,,,
Sol-22962,,,,,,,
Sol-22963,,,,,,,
Sol-22964,,,,,,,
Sol-22965,,,,,,,
Sol-22966,,,,,,,
Sol-22967,,,,,,,
Sol-22968,,,,,,,
Sol-22969,,,,,,,
Sol-22970,,,,,,,
Sol-22971,,,,,,,
Sol-22972,,,,,,,
Sol-22973,,,,,,,
Sol-22974,,,,,,,
Sol-22975,,,,,,,
Sol-22976,,,,,,,
Sol-22977,,,,,,,
Sol-22978,,,,,,,
Sol-22979,,,,,,,
Sol-22980,,,,,,,
Sol-22981,,,,,,,
Sol-22982,,,,,,,
Sol-22983,,,,,,,
Sol-22984,,,,,,,
Sol-22985,,,,,,,
Sol-22986,,,,,,,
Sol-22987,,,,,,,
Sol-22988,,,,,,,
Sol-22989,,,,,,,
Sol-22990,,,,,,,
Sol-22991,,,,,,,
Sol-22992,,,,,,,
Sol-22993,,,,,,,
Sol-22994,,,,,,,
Sol-22995,,,,,,,
Sol-22996,,,,,,,
Sol-22997,,,,,,,
Sol-22998,,,,,,,
Sol-22999,,,,,,,
Sol-23000,,,,,,,
Sol-23001,,,,,,,
Sol-23002,,,,,,,
Sol-23003,,,,,,,
Sol-23004,,,,,,,
Sol-23005,,,,,,,
Sol-23006,,,,,,,
Sol-23007,,,,,,,
Sol-23008,,,,,,,
Sol-23009,,,,,,,
Sol-23010,,,,,,,
Sol-23011,,,,,,,
Sol-23012,,,,,,,
Sol-23013,,,,,,,
Sol-23014,,,,,,,
Sol-23015,,,,,,,
Sol-23016,,,,,,,
Sol-23017,,,,,,,
Sol-23018,,,,,,,
Sol-23019,,,,,,,
Sol-23020,,,,,,,
Sol-23021,,,,,,,
Sol-23022,,,,,,,
Sol-23023,,,,,,,
Sol-23024,,,,,,,
Sol-23025,,,,,,,
Sol-23026,,,,,,,
Sol-23027,,,,,,,
Sol-23028,,,,,,,
Sol-23029,,,,,,,
Sol-23030,,,,,,,
Sol-23031,,,,,,,
Sol-23032,,,,,,,
Sol-23033,,,,,,,
Sol-23034,,,,,,,
Sol-23035,,,,,,,
Sol-23036,,,,,,,
Sol-23037,,,,,,,
Sol-23038,,,,,,,
Sol-23039,,,,,,,
Sol-23040,,,,,,,
Sol-23041,,,,,,,
Sol-23042,,,,,,,
Sol-23043,,,,,,,
Sol-23044,,,,,,,
Sol-23045,,,,,,,
Sol-23046,,,,,,,
Sol-23047,,,,,,,
Sol-23048,,,,,,,
Sol-23049,,,,,,,
Sol-23050,,,,,,,
Sol-23051,,,,,,,
Sol-23052,,,,,,,
Sol-23053,,,,,,,
Sol-23054,,,,,,,
Sol-23055,,,,,,,
Sol-23056,,,,,,,
Sol-23057,,,,,,,
Sol-23058,,,,,,,
Sol-23059,,,,,,,
Sol-23060,,,,,,,
Sol-23061,,,,,,,
Sol-23062,,,,,,,
Sol-23063,,,,,,,
Sol-23064,,,,,,,
Sol-23065,,,,,,,
Sol-23066,,,,,,,
Sol-23067,,,,,,,
Sol-23068,,,,,,,
Sol-23069,,,,,,,
Sol-23070,,,,,,,
Sol-23071,,,,,,,
Sol-23072,,,,,,,
Sol-23073,,,,,,,
Sol-23074,,,,,,,
Sol-23075,,,,,,,
Sol-23076,,,,,,,
Sol-23077,,,,,,,
Sol-23078,,,,,,,
Sol-23079,,,,,,,
Sol-23080,,,,,,,
Sol-23081,,,,,,,
Sol-23082,,,,,,,
Sol-23083,,,,,,,
Sol-23084,,,,,,,
Sol-23085,,,,,,,
Sol-23086,,,,,,,
Sol-23087,,,,,,,
Sol-23088,,,,,,,
Sol-23089,,,,,,,
Sol-23090,,,,,,,
Sol-23091,,,,,,,
Sol-23092,,,,,,,
Sol-23093,,,,,,,
Sol-23094,,,,,,,
Sol-23095,,,,,,,
Sol-23096,,,,,,,
Sol-23097,,,,,,,
Sol-23098,,,,,,,
Sol-23099,,,,,,,
Sol-23100,,,,,,,
Sol-23101,,,,,,,
Sol-23102,,,,,,,
Sol-23103,,,,,,,
Sol-23104,,,,,,,
Sol-23105,,,,,,,
Sol-23106,,,,,,,
Sol-23107,,,,,,,
Sol-23108,,,,,,,
Sol-23109,,,,,,,
Sol-23110,,,,,,,
Sol-23111,,,,,,,
Sol-23112,,,,,,,
Sol-23113,,,,,,,
Sol-23114,,,,,,,
Sol-23115,,,,,,,
Sol-23116,,,,,,,
Sol-23117,,,,,,,
Sol-23118,,,,,,,
Sol-23119,,,,,,,
Sol-23120,,,,,,,
Sol-23121,,,,,,,
Sol-23122,,,,,,,
Sol-23123,,,,,,,
Sol-23124,,,,,,,
Sol-23125,,,,,,,
Sol-23126,,,,,,,
Sol-23127,,,,,,,
Sol-23128,,,,,,,
Sol-23129,,,,,,,
Sol-23130,,,,,,,
Sol-23131,,,,,,,
Sol-23132,,,,,,,
Sol-23133,,,,,,,
Sol-23134,,,,,,,
Sol-23135,,,,,,,
Sol-23136,,,,,,,
Sol-23137,,,,,,,
Sol-23138,,,,,,,
Sol-23139,,,,,,,
Sol-23140,,,,,,,
Sol-23141,,,,,,,
Sol-23142,,,,,,,
Sol-23143,,,,,,,
Sol-23144,,,,,,,
Sol-23145,,,,,,,
Sol-23146,,,,,,,
Sol-23147,,,,,,,
Sol-23148,,,,,,,
Sol-23149,,,,,,,
Sol-23150,,,,,,,
Sol-23151,,,,,,,
Sol-23152,,,,,,,
Sol-23153,,,,,,,
Sol-23154,,,,,,,
Sol-23155,,,,,,,
Sol-23156,,,,,,,
Sol-23157,,,,,,,
Sol-23158,,,,,,,
Sol-23159,,,,,,,
Sol-23160,,,,,,,
Sol-23161,,,,,,,
Sol-23162,,,,,,,
Sol-23163,,,,,,,
Sol-23164,,,,,,,
Sol-23165,,,,,,,
Sol-23166,,,,,,,
Sol-23167,,,,,,,
Sol-23168,,,,,,,
Sol-23169,,,,,,,
Sol-23170,,,,,,,
Sol-23171,,,,,,,
Sol-23172,,,,,,,
Sol-23173,,,,,,,
Sol-23174,,,,,,,
Sol-23175,,,,,,,
Sol-23176,,,,,,,
Sol-23177,,,,,,,
Sol-23178,,,,,,,
Sol-23179,,,,,,,
Sol-23180,,,,,,,
Sol-23181,,,,,,,
Sol-23182,,,,,,,
Sol-23183,,,,,,,
Sol-23184,,,,,,,
Sol-23185,,,,,,,
Sol-23186,,,,,,,
Sol-23187,,,,,,,
Sol-23188,,,,,,,
Sol-23189,,,,,,,
Sol-23190,,,,,,,
Sol-23191,,,,,,,
Sol-23192,,,,,,,
Sol-23193,,,,,,,
Sol-23194,,,,,,,
Sol-23195,,,,,,,
Sol-23196,,,,,,,
Sol-23197,,,,,,,
Sol-23198,,,,,,,
Sol-23199,,,,,,,
Sol-23200,,,,,,,
Sol-23201,,,,,,,
Sol-23202,,,,,,,
Sol-23203,,,,,,,
Sol-23204,,,,,,,
Sol-23205,,,,,,,
Sol-23206,,,,,,,
Sol-23207,,,,,,,
Sol-23208,,,,,,,
Sol-23209,,,,,,,
Sol-23210,,,,,,,
Sol-23211,,,,,,,
Sol-23212,,,,,,,
Sol-23213,,,,,,,
Sol-23214,,,,,,,
Sol-23215,,,,,,,
Sol-23216,,,,,,,
Sol-23217,,,,,,,
Sol-23218,,,,,,,
Sol-23219,,,,,,,
Sol-23220,,,,,,,
Sol-23221,,,,,,,
Sol-23222,,,,,,,
Sol-23223,,,,,,,
Sol-23224,,,,,,,
Sol-23225,,,,,,,
Sol-23226,,,,,,,
Sol-23227,,,,,,,
Sol-23228,,,,,,,
Sol-23229,,,,,,,
Sol-23230,,,,,,,
Sol-23231,,,,,,,
Sol-23232,,,,,,,
Sol-23233,,,,,,,
Sol-23234,,,,,,,
Sol-23235,,,,,,,
Sol-23236,,,,,,,
Sol-23237,,,,,,,
Sol-23238,,,,,,,
Sol-23239,,,,,,,
Sol-23240,,,,,,,
Sol-23241,,,,,,,
Sol-23242,,,,,,,
Sol-23243,,,,,,,
Sol-23244,,,,,,,
Sol-23245,,,,,,,
Sol-23246,,,,,,,
Sol-23247,,,,,,,
Sol-23248,,,,,,,
Sol-23249,,,,,,,
Sol-23250,,,,,,,
Sol-23251,,,,,,,
Sol-23252,,,,,,,
Sol-23253,,,,,,,
Sol-23254,,,,,,,
Sol-23255,,,,,,,
Sol-23256,,,,,,,
Sol-23257,,,,,,,
Sol-23258,,,,,,,
Sol-23259,,,,,,,
Sol-23260,,,,,,,
Sol-23261,,,,,,,
Sol-23262,,,,,,,
Sol-23263,,,,,,,
Sol-23264,,,,,,,
Sol-23265,,,,,,,
Sol-23266,,,,,,,
Sol-23267,,,,,,,
Sol-23268,,,,,,,
Sol-23269,,,,,,,
Sol-23270,,,,,,,
Sol-23271,,,,,,,
Sol-23272,,,,,,,
Sol-23273,,,,,,,
Sol-23274,,,,,,,
Sol-23275,,,,,,,
Sol-23276,,,,,,,
Sol-23277,,,,,,,
Sol-23278,,,,,,,
Sol-23279,,,,,,,
Sol-23280,,,,,,,
Sol-23281,,,,,,,
Sol-23282,,,,,,,
Sol-23283,,,,,,,
Sol-23284,,,,,,,
Sol-23285,,,,,,,
Sol-23286,,,,,,,
Sol-23287,,,,,,,
Sol-23288,,,,,,,
Sol-23289,,,,,,,
Sol-23290,,,,,,,
Sol-23291,,,,,,,
Sol-23292,,,,,,,
Sol-23293,,,,,,,
Sol-23294,,,,,,,
Sol-23295,,,,,,,
Sol-23296,,,,,,,
Sol-23297,,,,,,,
Sol-23298,,,,,,,
Sol-23299,,,,,,,
Sol-23300,,,,,,,
Sol-23301,,,,,,,
Sol-23302,,,,,,,
Sol-23303,,,,,,,
Sol-23304,,,,,,,
Sol-23305,,,,,,,
Sol-23306,,,,,,,
Sol-23307,,,,,,,
Sol-23308,,,,,,,
Sol-23309,,,,,,,
Sol-23310,,,,,,,
Sol-23311,,,,,,,
Sol-23312,,,,,,,
Sol-23313,,,,,,,
Sol-23314,,,,,,,
Sol-23315,,,,,,,
Sol-23316,,,,,,,
Sol-23317,,,,,,,
Sol-23318,,,,,,,
Sol-23319,,,,,,,
Sol-23320,,,,,,,
Sol-23321,,,,,,,
Sol-23322,,,,,,,
Sol-23323,,,,,,,
Sol-23324,,,,,,,
Sol-23325,,,,,,,
Sol-23326,,,,,,,
Sol-23327,,,,,,,
Sol-23328,,,,,,,
Sol-23329,,,,,,,
Sol-23330,,,,,,,
Sol-23331,,,,,,,
Sol-23332,,,,,,,
Sol-23333,,,,,,,
Sol-23334,,,,,,,
Sol-23335,,,,,,,
Sol-23336,,,,,,,
Sol-23337,,,,,,,
Sol-23338,,,,,,,
Sol-23339,,,,,,,
Sol-23340,,,,,,,
Sol-23341,,,,,,,
Sol-23342,,,,,,,
Sol-23343,,,,,,,
Sol-23344,,,,,,,
Sol-23345,,,,,,,
Sol-23346,,,,,,,
Sol-23347,,,,,,,
Sol-23348,,,,,,,
Sol-23349,,,,,,,
Sol-23350,,,,,,,
Sol-23351,,,,,,,
Sol-23352,,,,,,,
Sol-23353,,,,,,,
Sol-23354,,,,,,,
Sol-23355,,,,,,,
Sol-23356,,,,,,,
Sol-23357,,,,,,,
Sol-23358,,,,,,,
Sol-23359,,,,,,,
Sol-23360,,,,,,,
Sol-23361,,,,,,,
Sol-23362,,,,,,,
Sol-23363,,,,,,,
Sol-23364,,,,,,,
Sol-23365,,,,,,,
Sol-23366,,,,,,,
Sol-23367,,,,,,,
Sol-23368,,,,,,,
Sol-23369,,,,,,,
Sol-23370,,,,,,,
Sol-23371,,,,,,,
Sol-23372,,,,,,,
Sol-23373,,,,,,,
Sol-23374,,,,,,,
Sol-23375,,,,,,,
Sol-23376,,,,,,,
Sol-23377,,,,,,,
Sol-23378,,,,,,,
Sol-23379,,,,,,,
Sol-23380,,,,,,,
Sol-23381,,,,,,,
Sol-23382,,,,,,,
Sol-23383,,,,,,,
Sol-23384,,,,,,,
Sol-23385,,,,,,,
Sol-23386,,,,,,,
Sol-23387,,,,,,,
Sol-23388,,,,,,,
Sol-23389,,,,,,,
Sol-23390,,,,,,,
Sol-23391,,,,,,,
Sol-23392,,,,,,,
Sol-23393,,,,,,,
Sol-23394,,,,,,,
Sol-23395,,,,,,,
Sol-23396,,,,,,,
Sol-23397,,,,,,,
Sol-23398,,,,,,,
Sol-23399,,,,,,,
Sol-23400,,,,,,,
Sol-23401,,,,,,,
Sol-23402,,,,,,,
Sol-23403,,,,,,,
Sol-23404,,,,,,,
Sol-23405,,,,,,,
Sol-23406,,,,,,,
Sol-23407,,,,,,,
Sol-23408,,,,,,,
Sol-23409,,,,,,,
Sol-23410,,,,,,,
Sol-23411,,,,,,,
Sol-23412,,,,,,,
Sol-23413,,,,,,,
Sol-23414,,,,,,,
Sol-23415,,,,,,,
Sol-23416,,,,,,,
Sol-23417,,,,,,,
Sol-23418,,,,,,,
Sol-23419,,,,,,,
Sol-23420,,,,,,,
Sol-23421,,,,,,,
Sol-23422,,,,,,,
Sol-23423,,,,,,,
Sol-23424,,,,,,,
Sol-23425,,,,,,,
Sol-23426,,,,,,,
Sol-23427,,,,,,,
Sol-23428,,,,,,,
Sol-23429,,,,,,,
Sol-23430,,,,,,,
Sol-23431,,,,,,,
Sol-23432,,,,,,,
Sol-23433,,,,,,,
Sol-23434,,,,,,,
Sol-23435,,,,,,,
Sol-23436,,,,,,,
Sol-23437,,,,,,,
Sol-23438,,,,,,,
Sol-23439,,,,,,,
Sol-23440,,,,,,,
Sol-23441,,,,,,,
Sol-23442,,,,,,,
Sol-23443,,,,,,,
Sol-23444,,,,,,,
Sol-23445,,,,,,,
Sol-23446,,,,,,,
Sol-23447,,,,,,,
Sol-23448,,,,,,,
Sol-23449,,,,,,,
Sol-23450,,,,,,,
Sol-23451,,,,,,,
Sol-23452,,,,,,,
Sol-23453,,,,,,,
Sol-23454,,,,,,,
Sol-23455,,,,,,,
Sol-23456,,,,,,,
Sol-23457,,,,,,,
Sol-23458,,,,,,,
Sol-23459,,,,,,,
Sol-23460,,,,,,,
Sol-23461,,,,,,,
Sol-23462,,,,,,,
Sol-23463,,,,,,,
Sol-23464,,,,,,,
Sol-23465,,,,,,,
Sol-23466,,,,,,,
Sol-23467,,,,,,,
Sol-23468,,,,,,,
Sol-23469,,,,,,,
Sol-23470,,,,,,,
Sol-23471,,,,,,,
Sol-23472,,,,,,,
Sol-23473,,,,,,,
Sol-23474,,,,,,,
Sol-23475,,,,,,,
Sol-23476,,,,,,,
Sol-23477,,,,,,,
Sol-23478,,,,,,,
Sol-23479,,,,,,,
Sol-23480,,,,,,,
Sol-23481,,,,,,,
Sol-23482,,,,,,,
Sol-23483,,,,,,,
Sol-23484,,,,,,,
Sol-23485,,,,,,,
Sol-23486,,,,,,,
Sol-23487,,,,,,,
Sol-23488,,,,,,,
Sol-23489,,,,,,,
Sol-23490,,,,,,,
Sol-23491,,,,,,,
Sol-23492,,,,,,,
Sol-23493,,,,,,,
Sol-23494,,,,,,,
Sol-23495,,,,,,,
Sol-23496,,,,,,,
Sol-23497,,,,,,,
Sol-23498,,,,,,,
Sol-23499,,,,,,,
Sol-23500,,,,,,,
Sol-23501,,,,,,,
Sol-23502,,,,,,,
Sol-23503,,,,,,,
Sol-23504,,,,,,,
Sol-23505,,,,,,,
Sol-23506,,,,,,,
Sol-23507,,,,,,,
Sol-23508,,,,,,,
Sol-23509,,,,,,,
Sol-23510,,,,,,,
Sol-23511,,,,,,,
Sol-23512,,,,,,,
Sol-23513,,,,,,,
Sol-23514,,,,,,,
Sol-23515,,,,,,,
Sol-23516,,,,,,,
Sol-23517,,,,,,,
Sol-23518,,,,,,,
Sol-23519,,,,,,,
Sol-23520,,,,,,,
Sol-23521,,,,,,,
Sol-23522,,,,,,,
Sol-23523,,,,,,,
Sol-23524,,,,,,,
Sol-23525,,,,,,,
Sol-23526,,,,,,,
Sol-23527,,,,,,,
Sol-23528,,,,,,,
Sol-23529,,,,,,,
Sol-23530,,,,,,,
Sol-23531,,,,,,,
Sol-23532,,,,,,,
Sol-23533,,,,,,,
Sol-23534,,,,,,,
Sol-23535,,,,,,,
Sol-23536,,,,,,,
Sol-23537,,,,,,,
Sol-23538,,,,,,,
Sol-23539,,,,,,,
Sol-23540,,,,,,,
Sol-23541,,,,,,,
Sol-23542,,,,,,,
Sol-23543,,,,,,,
Sol-23544,,,,,,,
Sol-23545,,,,,,,
Sol-23546,,,,,,,
Sol-23547,,,,,,,
Sol-23548,,,,,,,
Sol-23549,,,,,,,
Sol-23550,,,,,,,
Sol-23551,,,,,,,
Sol-23552,,,,,,,
Sol-23553,,,,,,,
Sol-23554,,,,,,,
Sol-23555,,,,,,,
Sol-23556,,,,,,,
Sol-23557,,,,,,,
Sol-23558,,,,,,,
Sol-23559,,,,,,,
Sol-23560,,,,,,,
Sol-23561,,,,,,,
Sol-23562,,,,,,,
Sol-23563,,,,,,,
Sol-23564,,,,,,,
Sol-23565,,,,,,,
Sol-23566,,,,,,,
Sol-23567,,,,,,,
Sol-23568,,,,,,,
Sol-23569,,,,,,,
Sol-23570,,,,,,,
Sol-23571,,,,,,,
Sol-23572,,,,,,,
Sol-23573,,,,,,,
Sol-23574,,,,,,,
Sol-23575,,,,,,,
Sol-23576,,,,,,,
Sol-23577,,,,,,,
Sol-23578,,,,,,,
Sol-23579,,,,,,,
Sol-23580,,,,,,,
Sol-23581,,,,,,,
Sol-23582,,,,,,,
Sol-23583,,,,,,,
Sol-23584,,,,,,,
Sol-23585,,,,,,,
Sol-23586,,,,,,,
Sol-23587,,,,,,,
Sol-23588,,,,,,,
Sol-23589,,,,,,,
Sol-23590,,,,,,,
Sol-23591,,,,,,,
Sol-23592,,,,,,,
Sol-23593,,,,,,,
Sol-23594,,,,,,,
Sol-23595,,,,,,,
Sol-23596,,,,,,,
Sol-23597,,,,,,,
Sol-23598,,,,,,,
Sol-23599,,,,,,,
Sol-23600,,,,,,,
Sol-23601,,,,,,,
Sol-23602,,,,,,,
Sol-23603,,,,,,,
Sol-23604,,,,,,,
Sol-23605,,,,,,,
Sol-23606,,,,,,,
Sol-23607,,,,,,,
Sol-23608,,,,,,,
Sol-23609,,,,,,,
Sol-23610,,,,,,,
Sol-23611,,,,,,,
Sol-23612,,,,,,,
Sol-23613,,,,,,,
Sol-23614,,,,,,,
Sol-23615,,,,,,,
Sol-23616,,,,,,,
Sol-23617,,,,,,,
Sol-23618,,,,,,,
Sol-23619,,,,,,,
Sol-23620,,,,,,,
Sol-23621,,,,,,,
Sol-23622,,,,,,,
Sol-23623,,,,,,,
Sol-23624,,,,,,,
Sol-23625,,,,,,,
Sol-23626,,,,,,,
Sol-23627,,,,,,,
Sol-23628,,,,,,,
Sol-23629,,,,,,,
Sol-23630,,,,,,,
Sol-23631,,,,,,,
Sol-23632,,,,,,,
Sol-23633,,,,,,,
Sol-23634,,,,,,,
Sol-23635,,,,,,,
Sol-23636,,,,,,,
Sol-23637,,,,,,,
Sol-23638,,,,,,,
Sol-23639,,,,,,,
Sol-23640,,,,,,,
Sol-23641,,,,,,,
Sol-23642,,,,,,,
Sol-23643,,,,,,,
Sol-23644,,,,,,,
Sol-23645,,,,,,,
Sol-23646,,,,,,,
Sol-23647,,,,,,,
Sol-23648,,,,,,,
Sol-23649,,,,,,,
Sol-23650,,,,,,,
Sol-23651,,,,,,,
Sol-23652,,,,,,,
Sol-23653,,,,,,,
Sol-23654,,,,,,,
Sol-23655,,,,,,,
Sol-23656,,,,,,,
Sol-23657,,,,,,,
Sol-23658,,,,,,,
Sol-23659,,,,,,,
Sol-23660,,,,,,,
Sol-23661,,,,,,,
Sol-23662,,,,,,,
Sol-23663,,,,,,,
Sol-23664,,,,,,,
Sol-23665,,,,,,,
Sol-23666,,,,,,,
Sol-23667,,,,,,,
Sol-23668,,,,,,,
Sol-23669,,,,,,,
Sol-23670,,,,,,,
Sol-23671,,,,,,,
Sol-23672,,,,,,,
Sol-23673,,,,,,,
Sol-23674,,,,,,,
Sol-23675,,,,,,,
Sol-23676,,,,,,,
Sol-23677,,,,,,,
Sol-23678,,,,,,,
Sol-23679,,,,,,,
Sol-23680,,,,,,,
Sol-23681,,,,,,,
Sol-23682,,,,,,,
Sol-23683,,,,,,,
Sol-23684,,,,,,,
Sol-23685,,,,,,,
Sol-23686,,,,,,,
Sol-23687,,,,,,,
Sol-23688,,,,,,,
Sol-23689,,,,,,,
Sol-23690,,,,,,,
Sol-23691,,,,,,,
Sol-23692,,,,,,,
Sol-23693,,,,,,,
Sol-23694,,,,,,,
Sol-23695,,,,,,,
Sol-23696,,,,,,,
Sol-23697,,,,,,,
Sol-23698,,,,,,,
Sol-23699,,,,,,,
Sol-23700,,,,,,,
Sol-23701,,,,,,,
Sol-23702,,,,,,,
Sol-23703,,,,,,,
Sol-23704,,,,,,,
Sol-23705,,,,,,,
Sol-23706,,,,,,,
Sol-23707,,,,,,,
Sol-23708,,,,,,,
Sol-23709,,,,,,,
Sol-23710,,,,,,,
Sol-23711,,,,,,,
Sol-23712,,,,,,,
Sol-23713,,,,,,,
Sol-23714,,,,,,,
Sol-23715,,,,,,,
Sol-23716,,,,,,,
Sol-23717,,,,,,,
Sol-23718,,,,,,,
Sol-23719,,,,,,,
Sol-23720,,,,,,,
Sol-23721,,,,,,,
Sol-23722,,,,,,,
Sol-23723,,,,,,,
Sol-23724,,,,,,,
Sol-23725,,,,,,,
Sol-23726,,,,,,,
Sol-23727,,,,,,,
Sol-23728,,,,,,,
Sol-23729,,,,,,,
Sol-23730,,,,,,,
Sol-23731,,,,,,,
Sol-23732,,,,,,,
Sol-23733,,,,,,,
Sol-23734,,,,,,,
Sol-23735,,,,,,,
Sol-23736,,,,,,,
Sol-23737,,,,,,,
Sol-23738,,,,,,,
Sol-23739,,,,,,,
Sol-23740,,,,,,,
Sol-23741,,,,,,,
Sol-23742,,,,,,,
Sol-23743,,,,,,,
Sol-23744,,,,,,,
Sol-23745,,,,,,,
Sol-23746,,,,,,,
Sol-23747,,,,,,,
Sol-23748,,,,,,,
Sol-23749,,,,,,,
Sol-23750,,,,,,,
Sol-23751,,,,,,,
Sol-23752,,,,,,,
Sol-23753,,,,,,,
Sol-23754,,,,,,,
Sol-23755,,,,,,,
Sol-23756,,,,,,,
Sol-23757,,,,,,,
Sol-23758,,,,,,,
Sol-23759,,,,,,,
Sol-23760,,,,,,,
Sol-23761,,,,,,,
Sol-23762,,,,,,,
Sol-23763,,,,,,,
Sol-23764,,,,,,,
Sol-23765,,,,,,,
Sol-23766,,,,,,,
Sol-23767,,,,,,,
Sol-23768,,,,,,,
Sol-23769,,,,,,,
Sol-23770,,,,,,,
Sol-23771,,,,,,,
Sol-23772,,,,,,,
Sol-23773,,,,,,,
Sol-23774,,,,,,,
Sol-23775,,,,,,,
Sol-23776,,,,,,,
Sol-23777,,,,,,,
Sol-23778,,,,,,,
Sol-23779,,,,,,,
Sol-23780,,,,,,,
Sol-23781,,,,,,,
Sol-23782,,,,,,,
Sol-23783,,,,,,,
Sol-23784,,,,,,,
Sol-23785,,,,,,,
Sol-23786,,,,,,,
Sol-23787,,,,,,,
Sol-23788,,,,,,,
Sol-23789,,,,,,,
Sol-23790,,,,,,,
Sol-23791,,,,,,,
Sol-23792,,,,,,,
Sol-23793,,,,,,,
Sol-23794,,,,,,,
Sol-23795,,,,,,,
Sol-23796,,,,,,,
Sol-23797,,,,,,,
Sol-23798,,,,,,,
Sol-23799,,,,,,,
Sol-23800,,,,,,,
Sol-23801,,,,,,,
Sol-23802,,,,,,,
Sol-23803,,,,,,,
Sol-23804,,,,,,,
Sol-23805,,,,,,,
Sol-23806,,,,,,,
Sol-23807,,,,,,,
Sol-23808,,,,,,,
Sol-23809,,,,,,,
Sol-23810,,,,,,,
Sol-23811,,,,,,,
Sol-23812,,,,,,,
Sol-23813,,,,,,,
Sol-23814,,,,,,,
Sol-23815,,,,,,,
Sol-23816,,,,,,,
Sol-23817,,,,,,,
Sol-23818,,,,,,,
Sol-23819,,,,,,,
Sol-23820,,,,,,,
Sol-23821,,,,,,,
Sol-23822,,,,,,,
Sol-23823,,,,,,,
Sol-23824,,,,,,,
Sol-23825,,,,,,,
Sol-23826,,,,,,,
Sol-23827,,,,,,,
Sol-23828,,,,,,,
Sol-23829,,,,,,,
Sol-23830,,,,,,,
Sol-23831,,,,,,,
Sol-23832,,,,,,,
Sol-23833,,,,,,,
Sol-23834,,,,,,,
Sol-23835,,,,,,,
Sol-23836,,,,,,,
Sol-23837,,,,,,,
Sol-23838,,,,,,,
Sol-23839,,,,,,,
Sol-23840,,,,,,,
Sol-23841,,,,,,,
Sol-23842,,,,,,,
Sol-23843,,,,,,,
Sol-23844,,,,,,,
Sol-23845,,,,,,,
Sol-23846,,,,,,,
Sol-23847,,,,,,,
Sol-23848,,,,,,,
Sol-23849,,,,,,,
Sol-23850,,,,,,,
Sol-23851,,,,,,,
Sol-23852,,,,,,,
Sol-23853,,,,,,,
Sol-23854,,,,,,,
Sol-23855,,,,,,,
Sol-23856,,,,,,,
Sol-23857,,,,,,,
Sol-23858,,,,,,,
Sol-23859,,,,,,,
Sol-23860,,,,,,,
Sol-23861,,,,,,,
Sol-23862,,,,,,,
Sol-23863,,,,,,,
Sol-23864,,,,,,,
Sol-23865,,,,,,,
Sol-23866,,,,,,,
Sol-23867,,,,,,,
Sol-23868,,,,,,,
Sol-23869,,,,,,,
Sol-23870,,,,,,,
Sol-23871,,,,,,,
Sol-23872,,,,,,,
Sol-23873,,,,,,,
Sol-23874,,,,,,,
Sol-23875,,,,,,,
Sol-23876,,,,,,,
Sol-23877,,,,,,,
Sol-23878,,,,,,,
Sol-23879,,,,,,,
Sol-23880,,,,,,,
Sol-23881,,,,,,,
Sol-23882,,,,,,,
Sol-23883,,,,,,,
Sol-23884,,,,,,,
Sol-23885,,,,,,,
Sol-23886,,,,,,,
Sol-23887,,,,,,,
Sol-23888,,,,,,,
Sol-23889,,,,,,,
Sol-23890,,,,,,,
Sol-23891,,,,,,,
Sol-23892,,,,,,,
Sol-23893,,,,,,,
Sol-23894,,,,,,,
Sol-23895,,,,,,,
Sol-23896,,,,,,,
Sol-23897,,,,,,,
Sol-23898,,,,,,,
Sol-23899,,,,,,,
Sol-23900,,,,,,,
Sol-23901,,,,,,,
Sol-23902,,,,,,,
Sol-23903,,,,,,,
Sol-23904,,,,,,,
Sol-23905,,,,,,,
Sol-23906,,,,,,,
Sol-23907,,,,,,,
Sol-23908,,,,,,,
Sol-23909,,,,,,,
Sol-23910,,,,,,,
Sol-23911,,,,,,,
Sol-23912,,,,,,,
Sol-23913,,,,,,,
Sol-23914,,,,,,,
Sol-23915,,,,,,,
Sol-23916,,,,,,,
Sol-23917,,,,,,,
Sol-23918,,,,,,,
Sol-23919,,,,,,,
Sol-23920,,,,,,,
Sol-23921,,,,,,,
Sol-23922,,,,,,,
Sol-23923,,,,,,,
Sol-23924,,,,,,,
Sol-23925,,,,,,,
Sol-23926,,,,,,,
Sol-23927,,,,,,,
Sol-23928,,,,,,,
Sol-23929,,,,,,,
Sol-23930,,,,,,,
Sol-23931,,,,,,,
Sol-23932,,,,,,,
Sol-23933,,,,,,,
Sol-23934,,,,,,,
Sol-23935,,,,,,,
Sol-23936,,,,,,,
Sol-23937,,,,,,,
Sol-23938,,,,,,,
Sol-23939,,,,,,,
Sol-23940,,,,,,,
Sol-23941,,,,,,,
Sol-23942,,,,,,,
Sol-23943,,,,,,,
Sol-23944,,,,,,,
Sol-23945,,,,,,,
Sol-23946,,,,,,,
Sol-23947,,,,,,,
Sol-23948,,,,,,,
Sol-23949,,,,,,,
Sol-23950,,,,,,,
Sol-23951,,,,,,,
Sol-23952,,,,,,,
Sol-23953,,,,,,,
Sol-23954,,,,,,,
Sol-23955,,,,,,,
Sol-23956,,,,,,,
Sol-23957,,,,,,,
Sol-23958,,,,,,,
Sol-23959,,,,,,,
Sol-23960,,,,,,,
Sol-23961,,,,,,,
Sol-23962,,,,,,,
Sol-23963,,,,,,,
Sol-23964,,,,,,,
Sol-23965,,,,,,,
Sol-23966,,,,,,,
Sol-23967,,,,,,,
Sol-23968,,,,,,,
Sol-23969,,,,,,,
Sol-23970,,,,,,,
Sol-23971,,,,,,,
Sol-23972,,,,,,,
Sol-23973,,,,,,,
Sol-23974,,,,,,,
Sol-23975,,,,,,,
Sol-23976,,,,,,,
Sol-23977,,,,,,,
Sol-23978,,,,,,,
Sol-23979,,,,,,,
Sol-23980,,,,,,,
Sol-23981,,,,,,,
Sol-23982,,,,,,,
Sol-23983,,,,,,,
Sol-23984,,,,,,,
Sol-23985,,,,,,,
Sol-23986,,,,,,,
Sol-23987,,,,,,,
Sol-23988,,,,,,,
Sol-23989,,,,,,,
Sol-23990,,,,,,,
Sol-23991,,,,,,,
Sol-23992,,,,,,,
Sol-23993,,,,,,,
Sol-23994,,,,,,,
Sol-23995,,,,,,,
Sol-23996,,,,,,,
Sol-23997,,,,,,,
Sol-23998,,,,,,,
Sol-23999,,,,,,,
Sol-24000,,,,,,,
Sol-24001,,,,,,,
Sol-24002,,,,,,,
Sol-24003,,,,,,,
Sol-24004,,,,,,,
Sol-24005,,,,,,,
Sol-24006,,,,,,,
Sol-24007,,,,,,,
Sol-24008,,,,,,,
Sol-24009,,,,,,,
Sol-24010,,,,,,,
Sol-24011,,,,,,,
Sol-24012,,,,,,,
Sol-24013,,,,,,,
Sol-24014,,,,,,,
Sol-24015,,,,,,,
Sol-24016,,,,,,,
Sol-24017,,,,,,,
Sol-24018,,,,,,,
Sol-24019,,,,,,,
Sol-24020,,,,,,,
Sol-24021,,,,,,,
Sol-24022,,,,,,,
Sol-24023,,,,,,,
Sol-24024,,,,,,,
Sol-24025,,,,,,,
Sol-24026,,,,,,,
Sol-24027,,,,,,,
Sol-24028,,,,,,,
Sol-24029,,,,,,,
Sol-24030,,,,,,,
Sol-24031,,,,,,,
Sol-24032,,,,,,,
Sol-24033,,,,,,,
Sol-24034,,,,,,,
Sol-24035,,,,,,,
Sol-24036,,,,,,,
Sol-24037,,,,,,,
Sol-24038,,,,,,,
Sol-24039,,,,,,,
Sol-24040,,,,,,,
Sol-24041,,,,,,,
Sol-24042,,,,,,,
Sol-24043,,,,,,,
Sol-24044,,,,,,,
Sol-24045,,,,,,,
Sol-24046,,,,,,,
Sol-24047,,,,,,,
Sol-24048,,,,,,,
Sol-24049,,,,,,,
Sol-24050,,,,,,,
Sol-24051,,,,,,,
Sol-24052,,,,,,,
Sol-24053,,,,,,,
Sol-24054,,,,,,,
Sol-24055,,,,,,,
Sol-24056,,,,,,,
Sol-24057,,,,,,,
Sol-24058,,,,,,,
Sol-24059,,,,,,,
Sol-24060,,,,,,,
Sol-24061,,,,,,,
Sol-24062,,,,,,,
Sol-24063,,,,,,,
Sol-24064,,,,,,,
Sol-24065,,,,,,,
Sol-24066,,,,,,,
Sol-24067,,,,,,,
Sol-24068,,,,,,,
Sol-24069,,,,,,,
Sol-24070,,,,,,,
Sol-24071,,,,,,,
Sol-24072,,,,,,,
Sol-24073,,,,,,,
Sol-24074,,,,,,,
Sol-24075,,,,,,,
Sol-24076,,,,,,,
Sol-24077,,,,,,,
Sol-24078,,,,,,,
Sol-24079,,,,,,,
Sol-24080,,,,,,,
Sol-24081,,,,,,,
Sol-24082,,,,,,,
Sol-24083,,,,,,,
Sol-24084,,,,,,,
Sol-24085,,,,,,,
Sol-24086,,,,,,,
Sol-24087,,,,,,,
Sol-24088,,,,,,,
Sol-24089,,,,,,,
Sol-24090,,,,,,,
Sol-24091,,,,,,,
Sol-24092,,,,,,,
Sol-24093,,,,,,,
Sol-24094,,,,,,,
Sol-24095,,,,,,,
Sol-24096,,,,,,,
Sol-24097,,,,,,,
Sol-24098,,,,,,,
Sol-24099,,,,,,,
Sol-24100,,,,,,,
Sol-24101,,,,,,,
Sol-24102,,,,,,,
Sol-24103,,,,,,,
Sol-24104,,,,,,,
Sol-24105,,,,,,,
Sol-24106,,,,,,,
Sol-24107,,,,,,,
Sol-24108,,,,,,,
Sol-24109,,,,,,,
Sol-24110,,,,,,,
Sol-24111,,,,,,,
Sol-24112,,,,,,,
Sol-24113,,,,,,,
Sol-24114,,,,,,,
Sol-24115,,,,,,,
Sol-24116,,,,,,,
Sol-24117,,,,,,,
Sol-24118,,,,,,,
Sol-24119,,,,,,,
Sol-24120,,,,,,,
Sol-24121,,,,,,,
Sol-24122,,,,,,,
Sol-24123,,,,,,,
Sol-24124,,,,,,,
Sol-24125,,,,,,,
Sol-24126,,,,,,,
Sol-24127,,,,,,,
Sol-24128,,,,,,,
Sol-24129,,,,,,,
Sol-24130,,,,,,,
Sol-24131,,,,,,,
Sol-24132,,,,,,,
Sol-24133,,,,,,,
Sol-24134,,,,,,,
Sol-24135,,,,,,,
Sol-24136,,,,,,,
Sol-24137,,,,,,,
Sol-24138,,,,,,,
Sol-24139,,,,,,,
Sol-24140,,,,,,,
Sol-24141,,,,,,,
Sol-24142,,,,,,,
Sol-24143,,,,,,,
Sol-24144,,,,,,,
Sol-24145,,,,,,,
Sol-24146,,,,,,,
Sol-24147,,,,,,,
Sol-24148,,,,,,,
Sol-24149,,,,,,,
Sol-24150,,,,,,,
Sol-24151,,,,,,,
Sol-24152,,,,,,,
Sol-24153,,,,,,,
Sol-24154,,,,,,,
Sol-24155,,,,,,,
Sol-24156,,,,,,,
Sol-24157,,,,,,,
Sol-24158,,,,,,,
Sol-24159,,,,,,,
Sol-24160,,,,,,,
Sol-24161,,,,,,,
Sol-24162,,,,,,,
Sol-24163,,,,,,,
Sol-24164,,,,,,,
Sol-24165,,,,,,,
Sol-24166,,,,,,,
Sol-24167,,,,,,,
Sol-24168,,,,,,,
Sol-24169,,,,,,,
Sol-24170,,,,,,,
Sol-24171,,,,,,,
Sol-24172,,,,,,,
Sol-24173,,,,,,,
Sol-24174,,,,,,,
Sol-24175,,,,,,,
Sol-24176,,,,,,,
Sol-24177,,,,,,,
Sol-24178,,,,,,,
Sol-24179,,,,,,,
Sol-24180,,,,,,,
Sol-24181,,,,,,,
Sol-24182,,,,,,,
Sol-24183,,,,,,,
Sol-24184,,,,,,,
Sol-24185,,,,,,,
Sol-24186,,,,,,,
Sol-24187,,,,,,,
Sol-24188,,,,,,,
Sol-24189,,,,,,,
Sol-24190,,,,,,,
Sol-24191,,,,,,,
Sol-24192,,,,,,,
Sol-24193,,,,,,,
Sol-24194,,,,,,,
Sol-24195,,,,,,,
Sol-24196,,,,,,,
Sol-24197,,,,,,,
Sol-24198,,,,,,,
Sol-24199,,,,,,,
Sol-24200,,,,,,,
Sol-24201,,,,,,,
Sol-24202,,,,,,,
Sol-24203,,,,,,,
Sol-24204,,,,,,,
Sol-24205,,,,,,,
Sol-24206,,,,,,,
Sol-24207,,,,,,,
Sol-24208,,,,,,,
Sol-24209,,,,,,,
Sol-24210,,,,,,,
Sol-24211,,,,,,,
Sol-24212,,,,,,,
Sol-24213,,,,,,,
Sol-24214,,,,,,,
Sol-24215,,,,,,,
Sol-24216,,,,,,,
Sol-24217,,,,,,,
Sol-24218,,,,,,,
Sol-24219,,,,,,,
Sol-24220,,,,,,,
Sol-24221,,,,,,,
Sol-24222,,,,,,,
Sol-24223,,,,,,,
Sol-24224,,,,,,,
Sol-24225,,,,,,,
Sol-24226,,,,,,,
Sol-24227,,,,,,,
Sol-24228,,,,,,,
Sol-24229,,,,,,,
Sol-24230,,,,,,,
Sol-24231,,,,,,,
Sol-24232,,,,,,,
Sol-24233,,,,,,,
Sol-24234,,,,,,,
Sol-24235,,,,,,,
Sol-24236,,,,,,,
Sol-24237,,,,,,,
Sol-24238,,,,,,,
Sol-24239,,,,,,,
Sol-24240,,,,,,,
Sol-24241,,,,,,,
Sol-24242,,,,,,,
Sol-24243,,,,,,,
Sol-24244,,,,,,,
Sol-24245,,,,,,,
Sol-24246,,,,,,,
Sol-24247,,,,,,,
Sol-24248,,,,,,,
Sol-24249,,,,,,,
Sol-24250,,,,,,,
Sol-24251,,,,,,,
Sol-24252,,,,,,,
Sol-24253,,,,,,,
Sol-24254,,,,,,,
Sol-24255,,,,,,,
Sol-24256,,,,,,,
Sol-24257,,,,,,,
Sol-24258,,,,,,,
Sol-24259,,,,,,,
Sol-24260,,,,,,,
Sol-24261,,,,,,,
Sol-24262,,,,,,,
Sol-24263,,,,,,,
Sol-24264,,,,,,,
Sol-24265,,,,,,,
Sol-24266,,,,,,,
Sol-24267,,,,,,,
Sol-24268,,,,,,,
Sol-24269,,,,,,,
Sol-24270,,,,,,,
Sol-24271,,,,,,,
Sol-24272,,,,,,,
Sol-24273,,,,,,,
Sol-24274,,,,,,,
Sol-24275,,,,,,,
Sol-24276,,,,,,,
Sol-24277,,,,,,,
Sol-24278,,,,,,,
Sol-24279,,,,,,,
Sol-24280,,,,,,,
Sol-24281,,,,,,,
Sol-24282,,,,,,,
Sol-24283,,,,,,,
Sol-24284,,,,,,,
Sol-24285,,,,,,,
Sol-24286,,,,,,,
Sol-24287,,,,,,,
Sol-24288,,,,,,,
Sol-24289,,,,,,,
Sol-24290,,,,,,,
Sol-24291,,,,,,,
Sol-24292,,,,,,,
Sol-24293,,,,,,,
Sol-24294,,,,,,,
Sol-24295,,,,,,,
Sol-24296,,,,,,,
Sol-24297,,,,,,,
Sol-24298,,,,,,,
Sol-24299,,,,,,,
Sol-24300,,,,,,,
Sol-24301,,,,,,,
Sol-24302,,,,,,,
Sol-24303,,,,,,,
Sol-24304,,,,,,,
Sol-24305,,,,,,,
Sol-24306,,,,,,,
Sol-24307,,,,,,,
Sol-24308,,,,,,,
Sol-24309,,,,,,,
Sol-24310,,,,,,,
Sol-24311,,,,,,,
Sol-24312,,,,,,,
Sol-24313,,,,,,,
Sol-24314,,,,,,,
Sol-24315,,,,,,,
Sol-24316,,,,,,,
Sol-24317,,,,,,,
Sol-24318,,,,,,,
Sol-24319,,,,,,,
Sol-24320,,,,,,,
Sol-24321,,,,,,,
Sol-24322,,,,,,,
Sol-24323,,,,,,,
Sol-24324,,,,,,,
Sol-24325,,,,,,,
Sol-24326,,,,,,,
Sol-24327,,,,,,,
Sol-24328,,,,,,,
Sol-24329,,,,,,,
Sol-24330,,,,,,,
Sol-24331,,,,,,,
Sol-24332,,,,,,,
Sol-24333,,,,,,,
Sol-24334,,,,,,,
Sol-24335,,,,,,,
Sol-24336,,,,,,,
Sol-24337,,,,,,,
Sol-24338,,,,,,,
Sol-24339,,,,,,,
Sol-24340,,,,,,,
Sol-24341,,,,,,,
Sol-24342,,,,,,,
Sol-24343,,,,,,,
Sol-24344,,,,,,,
Sol-24345,,,,,,,
Sol-24346,,,,,,,
Sol-24347,,,,,,,
Sol-24348,,,,,,,
Sol-24349,,,,,,,
Sol-24350,,,,,,,
Sol-24351,,,,,,,
Sol-24352,,,,,,,
Sol-24353,,,,,,,
Sol-24354,,,,,,,
Sol-24355,,,,,,,
Sol-24356,,,,,,,
Sol-24357,,,,,,,
Sol-24358,,,,,,,
Sol-24359,,,,,,,
Sol-24360,,,,,,,
Sol-24361,,,,,,,
Sol-24362,,,,,,,
Sol-24363,,,,,,,
Sol-24364,,,,,,,
Sol-24365,,,,,,,
Sol-24366,,,,,,,
Sol-24367,,,,,,,
Sol-24368,,,,,,,
Sol-24369,,,,,,,
Sol-24370,,,,,,,
Sol-24371,,,,,,,
Sol-24372,,,,,,,
Sol-24373,,,,,,,
Sol-24374,,,,,,,
Sol-24375,,,,,,,
Sol-24376,,,,,,,
Sol-24377,,,,,,,
Sol-24378,,,,,,,
Sol-24379,,,,,,,
Sol-24380,,,,,,,
Sol-24381,,,,,,,
Sol-24382,,,,,,,
Sol-24383,,,,,,,
Sol-24384,,,,,,,
Sol-24385,,,,,,,
Sol-24386,,,,,,,
Sol-24387,,,,,,,
Sol-24388,,,,,,,
Sol-24389,,,,,,,
Sol-24390,,,,,,,
Sol-24391,,,,,,,
Sol-24392,,,,,,,
Sol-24393,,,,,,,
Sol-24394,,,,,,,
Sol-24395,,,,,,,
Sol-24396,,,,,,,
Sol-24397,,,,,,,
Sol-24398,,,,,,,
Sol-24399,,,,,,,
Sol-24400,,,,,,,
Sol-24401,,,,,,,
Sol-24402,,,,,,,
Sol-24403,,,,,,,
Sol-24404,,,,,,,
Sol-24405,,,,,,,
Sol-24406,,,,,,,
Sol-24407,,,,,,,
Sol-24408,,,,,,,
Sol-24409,,,,,,,
Sol-24410,,,,,,,
Sol-24411,,,,,,,
Sol-24412,,,,,,,
Sol-24413,,,,,,,
Sol-24414,,,,,,,
Sol-24415,,,,,,,
Sol-24416,,,,,,,
Sol-24417,,,,,,,
Sol-24418,,,,,,,
Sol-24419,,,,,,,
Sol-24420,,,,,,,
Sol-24421,,,,,,,
Sol-24422,,,,,,,
Sol-24423,,,,,,,
Sol-24424,,,,,,,
Sol-24425,,,,,,,
Sol-24426,,,,,,,
Sol-24427,,,,,,,
Sol-24428,,,,,,,
Sol-24429,,,,,,,
Sol-24430,,,,,,,
Sol-24431,,,,,,,
Sol-24432,,,,,,,
Sol-24433,,,,,,,
Sol-24434,,,,,,,
Sol-24435,,,,,,,
Sol-24436,,,,,,,
Sol-24437,,,,,,,
Sol-24438,,,,,,,
Sol-24439,,,,,,,
Sol-24440,,,,,,,
Sol-24441,,,,,,,
Sol-24442,,,,,,,
Sol-24443,,,,,,,
Sol-24444,,,,,,,
Sol-24445,,,,,,,
Sol-24446,,,,,,,
Sol-24447,,,,,,,
Sol-24448,,,,,,,
Sol-24449,,,,,,,
Sol-24450,,,,,,,
Sol-24451,,,,,,,
Sol-24452,,,,,,,
Sol-24453,,,,,,,
Sol-24454,,,,,,,
Sol-24455,,,,,,,
Sol-24456,,,,,,,
Sol-24457,,,,,,,
Sol-24458,,,,,,,
Sol-24459,,,,,,,
Sol-24460,,,,,,,
Sol-24461,,,,,,,
Sol-24462,,,,,,,
Sol-24463,,,,,,,
Sol-24464,,,,,,,
Sol-24465,,,,,,,
Sol-24466,,,,,,,
Sol-24467,,,,,,,
Sol-24468,,,,,,,
Sol-24469,,,,,,,
Sol-24470,,,,,,,
Sol-24471,,,,,,,
Sol-24472,,,,,,,
Sol-24473,,,,,,,
Sol-24474,,,,,,,
Sol-24475,,,,,,,
Sol-24476,,,,,,,
Sol-24477,,,,,,,
Sol-24478,,,,,,,
Sol-24479,,,,,,,
Sol-24480,,,,,,,
Sol-24481,,,,,,,
Sol-24482,,,,,,,
Sol-24483,,,,,,,
Sol-24484,,,,,,,
Sol-24485,,,,,,,
Sol-24486,,,,,,,
Sol-24487,,,,,,,
Sol-24488,,,,,,,
Sol-24489,,,,,,,
Sol-24490,,,,,,,
Sol-24491,,,,,,,
Sol-24492,,,,,,,
Sol-24493,,,,,,,
Sol-24494,,,,,,,
Sol-24495,,,,,,,
Sol-24496,,,,,,,
Sol-24497,,,,,,,
Sol-24498,,,,,,,
Sol-24499,,,,,,,
Sol-24500,,,,,,,
Sol-24501,,,,,,,
Sol-24502,,,,,,,
Sol-24503,,,,,,,
Sol-24504,,,,,,,
Sol-24505,,,,,,,
Sol-24506,,,,,,,
Sol-24507,,,,,,,
Sol-24508,,,,,,,
Sol-24509,,,,,,,
Sol-24510,,,,,,,
Sol-24511,,,,,,,
Sol-24512,,,,,,,
Sol-24513,,,,,,,
Sol-24514,,,,,,,
Sol-24515,,,,,,,
Sol-24516,,,,,,,
Sol-24517,,,,,,,
Sol-24518,,,,,,,
Sol-24519,,,,,,,
Sol-24520,,,,,,,
Sol-24521,,,,,,,
Sol-24522,,,,,,,
Sol-24523,,,,,,,
Sol-24524,,,,,,,
Sol-24525,,,,,,,
Sol-24526,,,,,,,
Sol-24527,,,,,,,
Sol-24528,,,,,,,
Sol-24529,,,,,,,
Sol-24530,,,,,,,
Sol-24531,,,,,,,
Sol-24532,,,,,,,
Sol-24533,,,,,,,
Sol-24534,,,,,,,
Sol-24535,,,,,,,
Sol-24536,,,,,,,
Sol-24537,,,,,,,
Sol-24538,,,,,,,
Sol-24539,,,,,,,
Sol-24540,,,,,,,
Sol-24541,,,,,,,
Sol-24542,,,,,,,
Sol-24543,,,,,,,
Sol-24544,,,,,,,
Sol-24545,,,,,,,
Sol-24546,,,,,,,
Sol-24547,,,,,,,
Sol-24548,,,,,,,
Sol-24549,,,,,,,
Sol-24550,,,,,,,
Sol-24551,,,,,,,
Sol-24552,,,,,,,
Sol-24553,,,,,,,
Sol-24554,,,,,,,
Sol-24555,,,,,,,
Sol-24556,,,,,,,
Sol-24557,,,,,,,
Sol-24558,,,,,,,
Sol-24559,,,,,,,
Sol-24560,,,,,,,
Sol-24561,,,,,,,
Sol-24562,,,,,,,
Sol-24563,,,,,,,
Sol-24564,,,,,,,
Sol-24565,,,,,,,
Sol-24566,,,,,,,
Sol-24567,,,,,,,
Sol-24568,,,,,,,
Sol-24569,,,,,,,
Sol-24570,,,,,,,
Sol-24571,,,,,,,
Sol-24572,,,,,,,
Sol-24573,,,,,,,
Sol-24574,,,,,,,
Sol-24575,,,,,,,
Sol-24576,,,,,,,
Sol-24577,,,,,,,
Sol-24578,,,,,,,
Sol-24579,,,,,,,
Sol-24580,,,,,,,
Sol-24581,,,,,,,
Sol-24582,,,,,,,
Sol-24583,,,,,,,
Sol-24584,,,,,,,
Sol-24585,,,,,,,
Sol-24586,,,,,,,
Sol-24587,,,,,,,
Sol-24588,,,,,,,
Sol-24589,,,,,,,
Sol-24590,,,,,,,
Sol-24591,,,,,,,
Sol-24592,,,,,,,
Sol-24593,,,,,,,
Sol-24594,,,,,,,
Sol-24595,,,,,,,
Sol-24596,,,,,,,
Sol-24597,,,,,,,
Sol-24598,,,,,,,
Sol-24599,,,,,,,
Sol-24600,,,,,,,
Sol-24601,,,,,,,
Sol-24602,,,,,,,
Sol-24603,,,,,,,
Sol-24604,,,,,,,
Sol-24605,,,,,,,
Sol-24606,,,,,,,
Sol-24607,,,,,,,
Sol-24608,,,,,,,
Sol-24609,,,,,,,
Sol-24610,,,,,,,
Sol-24611,,,,,,,
Sol-24612,,,,,,,
Sol-24613,,,,,,,
Sol-24614,,,,,,,
Sol-24615,,,,,,,
Sol-24616,,,,,,,
Sol-24617,,,,,,,
Sol-24618,,,,,,,
Sol-24619,,,,,,,
Sol-24620,,,,,,,
Sol-24621,,,,,,,
Sol-24622,,,,,,,
Sol-24623,,,,,,,
Sol-24624,,,,,,,
Sol-24625,,,,,,,
Sol-24626,,,,,,,
Sol-24627,,,,,,,
Sol-24628,,,,,,,
Sol-24629,,,,,,,
Sol-24630,,,,,,,
Sol-24631,,,,,,,
Sol-24632,,,,,,,
Sol-24633,,,,,,,
Sol-24634,,,,,,,
Sol-24635,,,,,,,
Sol-24636,,,,,,,
Sol-24637,,,,,,,
Sol-24638,,,,,,,
Sol-24639,,,,,,,
Sol-24640,,,,,,,
Sol-24641,,,,,,,
Sol-24642,,,,,,,
Sol-24643,,,,,,,
Sol-24644,,,,,,,
Sol-24645,,,,,,,
Sol-24646,,,,,,,
Sol-24647,,,,,,,
Sol-24648,,,,,,,
Sol-24649,,,,,,,
Sol-24650,,,,,,,
Sol-24651,,,,,,,
Sol-24652,,,,,,,
Sol-24653,,,,,,,
Sol-24654,,,,,,,
Sol-24655,,,,,,,
Sol-24656,,,,,,,
Sol-24657,,,,,,,
Sol-24658,,,,,,,
Sol-24659,,,,,,,
Sol-24660,,,,,,,
Sol-24661,,,,,,,
Sol-24662,,,,,,,
Sol-24663,,,,,,,
Sol-24664,,,,,,,
Sol-24665,,,,,,,
Sol-24666,,,,,,,
Sol-24667,,,,,,,
Sol-24668,,,,,,,
Sol-24669,,,,,,,
Sol-24670,,,,,,,
Sol-24671,,,,,,,
Sol-24672,,,,,,,
Sol-24673,,,,,,,
Sol-24674,,,,,,,
Sol-24675,,,,,,,
Sol-24676,,,,,,,
Sol-24677,,,,,,,
Sol-24678,,,,,,,
Sol-24679,,,,,,,
Sol-24680,,,,,,,
Sol-24681,,,,,,,
Sol-24682,,,,,,,
Sol-24683,,,,,,,
Sol-24684,,,,,,,
Sol-24685,,,,,,,
Sol-24686,,,,,,,
Sol-24687,,,,,,,
Sol-24688,,,,,,,
Sol-24689,,,,,,,
Sol-24690,,,,,,,
Sol-24691,,,,,,,
Sol-24692,,,,,,,
Sol-24693,,,,,,,
Sol-24694,,,,,,,
Sol-24695,,,,,,,
Sol-24696,,,,,,,
Sol-24697,,,,,,,
Sol-24698,,,,,,,
Sol-24699,,,,,,,
Sol-24700,,,,,,,
Sol-24701,,,,,,,
Sol-24702,,,,,,,
Sol-24703,,,,,,,
Sol-24704,,,,,,,
Sol-24705,,,,,,,
Sol-24706,,,,,,,
Sol-24707,,,,,,,
Sol-24708,,,,,,,
Sol-24709,,,,,,,
Sol-24710,,,,,,,
Sol-24711,,,,,,,
Sol-24712,,,,,,,
Sol-24713,,,,,,,
Sol-24714,,,,,,,
Sol-24715,,,,,,,
Sol-24716,,,,,,,
Sol-24717,,,,,,,
Sol-24718,,,,,,,
Sol-24719,,,,,,,
Sol-24720,,,,,,,
Sol-24721,,,,,,,
Sol-24722,,,,,,,
Sol-24723,,,,,,,
Sol-24724,,,,,,,
Sol-24725,,,,,,,
Sol-24726,,,,,,,
Sol-24727,,,,,,,
Sol-24728,,,,,,,
Sol-24729,,,,,,,
Sol-24730,,,,,,,
Sol-24731,,,,,,,
Sol-24732,,,,,,,
Sol-24733,,,,,,,
Sol-24734,,,,,,,
Sol-24735,,,,,,,
Sol-24736,,,,,,,
Sol-24737,,,,,,,
Sol-24738,,,,,,,
Sol-24739,,,,,,,
Sol-24740,,,,,,,
Sol-24741,,,,,,,
Sol-24742,,,,,,,
Sol-24743,,,,,,,
Sol-24744,,,,,,,
Sol-24745,,,,,,,
Sol-24746,,,,,,,
Sol-24747,,,,,,,
Sol-24748,,,,,,,
Sol-24749,,,,,,,
Sol-24750,,,,,,,
Sol-24751,,,,,,,
Sol-24752,,,,,,,
Sol-24753,,,,,,,
Sol-24754,,,,,,,
Sol-24755,,,,,,,
Sol-24756,,,,,,,
Sol-24757,,,,,,,
Sol-24758,,,,,,,
Sol-24759,,,,,,,
Sol-24760,,,,,,,
Sol-24761,,,,,,,
Sol-24762,,,,,,,
Sol-24763,,,,,,,
Sol-24764,,,,,,,
Sol-24765,,,,,,,
Sol-24766,,,,,,,
Sol-24767,,,,,,,
Sol-24768,,,,,,,
Sol-24769,,,,,,,
Sol-24770,,,,,,,
Sol-24771,,,,,,,
Sol-24772,,,,,,,
Sol-24773,,,,,,,
Sol-24774,,,,,,,
Sol-24775,,,,,,,
Sol-24776,,,,,,,
Sol-24777,,,,,,,
Sol-24778,,,,,,,
Sol-24779,,,,,,,
Sol-24780,,,,,,,
Sol-24781,,,,,,,
Sol-24782,,,,,,,
Sol-24783,,,,,,,
Sol-24784,,,,,,,
Sol-24785,,,,,,,
Sol-24786,,,,,,,
Sol-24787,,,,,,,
Sol-24788,,,,,,,
Sol-24789,,,,,,,
Sol-24790,,,,,,,
Sol-24791,,,,,,,
Sol-24792,,,,,,,
Sol-24793,,,,,,,
Sol-24794,,,,,,,
Sol-24795,,,,,,,
Sol-24796,,,,,,,
Sol-24797,,,,,,,
Sol-24798,,,,,,,
Sol-24799,,,,,,,
Sol-24800,,,,,,,
Sol-24801,,,,,,,
Sol-24802,,,,,,,
Sol-24803,,,,,,,
Sol-24804,,,,,,,
Sol-24805,,,,,,,
Sol-24806,,,,,,,
Sol-24807,,,,,,,
Sol-24808,,,,,,,
Sol-24809,,,,,,,
Sol-24810,,,,,,,
Sol-24811,,,,,,,
Sol-24812,,,,,,,
Sol-24813,,,,,,,
Sol-24814,,,,,,,
Sol-24815,,,,,,,
Sol-24816,,,,,,,
Sol-24817,,,,,,,
Sol-24818,,,,,,,
Sol-24819,,,,,,,
Sol-24820,,,,,,,
Sol-24821,,,,,,,
Sol-24822,,,,,,,
Sol-24823,,,,,,,
Sol-24824,,,,,,,
Sol-24825,,,,,,,
Sol-24826,,,,,,,
Sol-24827,,,,,,,
Sol-24828,,,,,,,
Sol-24829,,,,,,,
Sol-24830,,,,,,,
Sol-24831,,,,,,,
Sol-24832,,,,,,,
Sol-24833,,,,,,,
Sol-24834,,,,,,,
Sol-24835,,,,,,,
Sol-24836,,,,,,,
Sol-24837,,,,,,,
Sol-24838,,,,,,,
Sol-24839,,,,,,,
Sol-24840,,,,,,,
Sol-24841,,,,,,,
Sol-24842,,,,,,,
Sol-24843,,,,,,,
Sol-24844,,,,,,,
Sol-24845,,,,,,,
Sol-24846,,,,,,,
Sol-24847,,,,,,,
Sol-24848,,,,,,,
Sol-24849,,,,,,,
Sol-24850,,,,,,,
Sol-24851,,,,,,,
Sol-24852,,,,,,,
Sol-24853,,,,,,,
Sol-24854,,,,,,,
Sol-24855,,,,,,,
Sol-24856,,,,,,,
Sol-24857,,,,,,,
Sol-24858,,,,,,,
Sol-24859,,,,,,,
Sol-24860,,,,,,,
Sol-24861,,,,,,,
Sol-24862,,,,,,,
Sol-24863,,,,,,,
Sol-24864,,,,,,,
Sol-24865,,,,,,,
Sol-24866,,,,,,,
Sol-24867,,,,,,,
Sol-24868,,,,,,,
Sol-24869,,,,,,,
Sol-24870,,,,,,,
Sol-24871,,,,,,,
Sol-24872,,,,,,,
Sol-24873,,,,,,,
Sol-24874,,,,,,,
Sol-24875,,,,,,,
Sol-24876,,,,,,,
Sol-24877,,,,,,,
Sol-24878,,,,,,,
Sol-24879,,,,,,,
Sol-24880,,,,,,,
Sol-24881,,,,,,,
Sol-24882,,,,,,,
Sol-24883,,,,,,,
Sol-24884,,,,,,,
Sol-24885,,,,,,,
Sol-24886,,,,,,,
Sol-24887,,,,,,,
Sol-24888,,,,,,,
Sol-24889,,,,,,,
Sol-24890,,,,,,,
Sol-24891,,,,,,,
Sol-24892,,,,,,,
Sol-24893,,,,,,,
Sol-24894,,,,,,,
Sol-24895,,,,,,,
Sol-24896,,,,,,,
Sol-24897,,,,,,,
Sol-24898,,,,,,,
Sol-24899,,,,,,,
Sol-24900,,,,,,,
Sol-24901,,,,,,,
Sol-24902,,,,,,,
Sol-24903,,,,,,,
Sol-24904,,,,,,,
Sol-24905,,,,,,,
Sol-24906,,,,,,,
Sol-24907,,,,,,,
Sol-24908,,,,,,,
Sol-24909,,,,,,,
Sol-24910,,,,,,,
Sol-24911,,,,,,,
Sol-24912,,,,,,,
Sol-24913,,,,,,,
Sol-24914,,,,,,,
Sol-24915,,,,,,,
Sol-24916,,,,,,,
Sol-24917,,,,,,,
Sol-24918,,,,,,,
Sol-24919,,,,,,,
Sol-24920,,,,,,,
Sol-24921,,,,,,,
Sol-24922,,,,,,,
Sol-24923,,,,,,,
Sol-24924,,,,,,,
Sol-24925,,,,,,,
Sol-24926,,,,,,,
Sol-24927,,,,,,,
Sol-24928,,,,,,,
Sol-24929,,,,,,,
Sol-24930,,,,,,,
Sol-24931,,,,,,,
Sol-24932,,,,,,,
Sol-24933,,,,,,,
Sol-24934,,,,,,,
Sol-24935,,,,,,,
Sol-24936,,,,,,,
Sol-24937,,,,,,,
Sol-24938,,,,,,,
Sol-24939,,,,,,,
Sol-24940,,,,,,,
Sol-24941,,,,,,,
Sol-24942,,,,,,,
Sol-24943,,,,,,,
Sol-24944,,,,,,,
Sol-24945,,,,,,,
Sol-24946,,,,,,,
Sol-24947,,,,,,,
Sol-24948,,,,,,,
Sol-24949,,,,,,,
Sol-24950,,,,,,,
Sol-24951,,,,,,,
Sol-24952,,,,,,,
Sol-24953,,,,,,,
Sol-24954,,,,,,,
Sol-24955,,,,,,,
Sol-24956,,,,,,,
Sol-24957,,,,,,,
Sol-24958,,,,,,,
Sol-24959,,,,,,,
Sol-24960,,,,,,,
Sol-24961,,,,,,,
Sol-24962,,,,,,,
Sol-24963,,,,,,,
Sol-24964,,,,,,,
Sol-24965,,,,,,,
Sol-24966,,,,,,,
Sol-24967,,,,,,,
Sol-24968,,,,,,,
Sol-24969,,,,,,,
Sol-24970,,,,,,,
Sol-24971,,,,,,,
Sol-24972,,,,,,,
Sol-24973,,,,,,,
Sol-24974,,,,,,,
Sol-24975,,,,,,,
Sol-24976,,,,,,,
Sol-24977,,,,,,,
Sol-24978,,,,,,,
Sol-24979,,,,,,,
Sol-24980,,,,,,,
Sol-24981,,,,,,,
Sol-24982,,,,,,,
Sol-24983,,,,,,,
Sol-24984,,,,,,,
Sol-24985,,,,,,,
Sol-24986,,,,,,,
Sol-24987,,,,,,,
Sol-24988,,,,,,,
Sol-24989,,,,,,,
Sol-24990,,,,,,,
Sol-24991,,,,,,,
Sol-24992,,,,,,,
Sol-24993,,,,,,,
Sol-24994,,,,,,,
Sol-24995,,,,,,,
Sol-24996,,,,,,,
Sol-24997,,,,,,,
Sol-24998,,,,,,,
Sol-24999,,,,,,,
Sol-25000,,,,,,,
Sol-25001,,,,,,,
Sol-25002,,,,,,,
Sol-25003,,,,,,,
Sol-25004,,,,,,,
Sol-25005,,,,,,,
Sol-25006,,,,,,,
Sol-25007,,,,,,,
Sol-25008,,,,,,,
Sol-25009,,,,,,,
Sol-25010,,,,,,,
Sol-25011,,,,,,,
Sol-25012,,,,,,,
Sol-25013,,,,,,,
Sol-25014,,,,,,,
Sol-25015,,,,,,,
Sol-25016,,,,,,,
Sol-25017,,,,,,,
Sol-25018,,,,,,,
Sol-25019,,,,,,,
Sol-25020,,,,,,,
Sol-25021,,,,,,,
Sol-25022,,,,,,,
Sol-25023,,,,,,,
Sol-25024,,,,,,,
Sol-25025,,,,,,,
Sol-25026,,,,,,,
Sol-25027,,,,,,,
Sol-25028,,,,,,,
Sol-25029,,,,,,,
Sol-25030,,,,,,,
Sol-25031,,,,,,,
Sol-25032,,,,,,,
Sol-25033,,,,,,,
Sol-25034,,,,,,,
Sol-25035,,,,,,,
Sol-25036,,,,,,,
Sol-25037,,,,,,,
Sol-25038,,,,,,,
Sol-25039,,,,,,,
Sol-25040,,,,,,,
Sol-25041,,,,,,,
Sol-25042,,,,,,,
Sol-25043,,,,,,,
Sol-25044,,,,,,,
Sol-25045,,,,,,,
Sol-25046,,,,,,,
Sol-25047,,,,,,,
Sol-25048,,,,,,,
Sol-25049,,,,,,,
Sol-25050,,,,,,,
Sol-25051,,,,,,,
Sol-25052,,,,,,,
Sol-25053,,,,,,,
Sol-25054,,,,,,,
Sol-25055,,,,,,,
Sol-25056,,,,,,,
Sol-25057,,,,,,,
Sol-25058,,,,,,,
Sol-25059,,,,,,,
Sol-25060,,,,,,,
Sol-25061,,,,,,,
Sol-25062,,,,,,,
Sol-25063,,,,,,,
Sol-25064,,,,,,,
Sol-25065,,,,,,,
Sol-25066,,,,,,,
Sol-25067,,,,,,,
Sol-25068,,,,,,,
Sol-25069,,,,,,,
Sol-25070,,,,,,,
Sol-25071,,,,,,,
Sol-25072,,,,,,,
Sol-25073,,,,,,,
Sol-25074,,,,,,,
Sol-25075,,,,,,,
Sol-25076,,,,,,,
Sol-25077,,,,,,,
Sol-25078,,,,,,,
Sol-25079,,,,,,,
Sol-25080,,,,,,,
Sol-25081,,,,,,,
Sol-25082,,,,,,,
Sol-25083,,,,,,,
Sol-25084,,,,,,,
Sol-25085,,,,,,,
Sol-25086,,,,,,,
Sol-25087,,,,,,,
Sol-25088,,,,,,,
Sol-25089,,,,,,,
Sol-25090,,,,,,,
Sol-25091,,,,,,,
Sol-25092,,,,,,,
Sol-25093,,,,,,,
Sol-25094,,,,,,,
Sol-25095,,,,,,,
Sol-25096,,,,,,,
Sol-25097,,,,,,,
Sol-25098,,,,,,,
Sol-25099,,,,,,,
Sol-25100,,,,,,,
Sol-25101,,,,,,,
Sol-25102,,,,,,,
Sol-25103,,,,,,,
Sol-25104,,,,,,,
Sol-25105,,,,,,,
Sol-25106,,,,,,,
Sol-25107,,,,,,,
Sol-25108,,,,,,,
Sol-25109,,,,,,,
Sol-25110,,,,,,,
Sol-25111,,,,,,,
Sol-25112,,,,,,,
Sol-25113,,,,,,,
Sol-25114,,,,,,,
Sol-25115,,,,,,,
Sol-25116,,,,,,,
Sol-25117,,,,,,,
Sol-25118,,,,,,,
Sol-25119,,,,,,,
Sol-25120,,,,,,,
Sol-25121,,,,,,,
Sol-25122,,,,,,,
Sol-25123,,,,,,,
Sol-25124,,,,,,,
Sol-25125,,,,,,,
Sol-25126,,,,,,,
Sol-25127,,,,,,,
Sol-25128,,,,,,,
Sol-25129,,,,,,,
Sol-25130,,,,,,,
Sol-25131,,,,,,,
Sol-25132,,,,,,,
Sol-25133,,,,,,,
Sol-25134,,,,,,,
Sol-25135,,,,,,,
Sol-25136,,,,,,,
Sol-25137,,,,,,,
Sol-25138,,,,,,,
Sol-25139,,,,,,,
Sol-25140,,,,,,,
Sol-25141,,,,,,,
Sol-25142,,,,,,,
Sol-25143,,,,,,,
Sol-25144,,,,,,,
Sol-25145,,,,,,,
Sol-25146,,,,,,,
Sol-25147,,,,,,,
Sol-25148,,,,,,,
Sol-25149,,,,,,,
Sol-25150,,,,,,,
Sol-25151,,,,,,,
Sol-25152,,,,,,,
Sol-25153,,,,,,,
Sol-25154,,,,,,,
Sol-25155,,,,,,,
Sol-25156,,,,,,,
Sol-25157,,,,,,,
Sol-25158,,,,,,,
Sol-25159,,,,,,,
Sol-25160,,,,,,,
Sol-25161,,,,,,,
Sol-25162,,,,,,,
Sol-25163,,,,,,,
Sol-25164,,,,,,,
Sol-25165,,,,,,,
Sol-25166,,,,,,,
Sol-25167,,,,,,,
Sol-25168,,,,,,,
Sol-25169,,,,,,,
Sol-25170,,,,,,,
Sol-25171,,,,,,,
Sol-25172,,,,,,,
Sol-25173,,,,,,,
Sol-25174,,,,,,,
Sol-25175,,,,,,,
Sol-25176,,,,,,,
Sol-25177,,,,,,,
Sol-25178,,,,,,,
Sol-25179,,,,,,,
Sol-25180,,,,,,,
Sol-25181,,,,,,,
Sol-25182,,,,,,,
Sol-25183,,,,,,,
Sol-25184,,,,,,,
Sol-25185,,,,,,,
Sol-25186,,,,,,,
Sol-25187,,,,,,,
Sol-25188,,,,,,,
Sol-25189,,,,,,,
Sol-25190,,,,,,,
Sol-25191,,,,,,,
Sol-25192,,,,,,,
Sol-25193,,,,,,,
Sol-25194,,,,,,,
Sol-25195,,,,,,,
Sol-25196,,,,,,,
Sol-25197,,,,,,,
Sol-25198,,,,,,,
Sol-25199,,,,,,,
Sol-25200,,,,,,,
Sol-25201,,,,,,,
Sol-25202,,,,,,,
Sol-25203,,,,,,,
Sol-25204,,,,,,,
Sol-25205,,,,,,,
Sol-25206,,,,,,,
Sol-25207,,,,,,,
Sol-25208,,,,,,,
Sol-25209,,,,,,,
Sol-25210,,,,,,,
Sol-25211,,,,,,,
Sol-25212,,,,,,,
Sol-25213,,,,,,,
Sol-25214,,,,,,,
Sol-25215,,,,,,,
Sol-25216,,,,,,,
Sol-25217,,,,,,,
Sol-25218,,,,,,,
Sol-25219,,,,,,,
Sol-25220,,,,,,,
Sol-25221,,,,,,,
Sol-25222,,,,,,,
Sol-25223,,,,,,,
Sol-25224,,,,,,,
Sol-25225,,,,,,,
Sol-25226,,,,,,,
Sol-25227,,,,,,,
Sol-25228,,,,,,,
Sol-25229,,,,,,,
Sol-25230,,,,,,,
Sol-25231,,,,,,,
Sol-25232,,,,,,,
Sol-25233,,,,,,,
Sol-25234,,,,,,,
Sol-25235,,,,,,,
Sol-25236,,,,,,,
Sol-25237,,,,,,,
Sol-25238,,,,,,,
Sol-25239,,,,,,,
Sol-25240,,,,,,,
Sol-25241,,,,,,,
Sol-25242,,,,,,,
Sol-25243,,,,,,,
Sol-25244,,,,,,,
Sol-25245,,,,,,,
Sol-25246,,,,,,,
Sol-25247,,,,,,,
Sol-25248,,,,,,,
Sol-25249,,,,,,,
Sol-25250,,,,,,,
Sol-25251,,,,,,,
Sol-25252,,,,,,,
Sol-25253,,,,,,,
Sol-25254,,,,,,,
Sol-25255,,,,,,,
Sol-25256,,,,,,,
Sol-25257,,,,,,,
Sol-25258,,,,,,,
Sol-25259,,,,,,,
Sol-25260,,,,,,,
Sol-25261,,,,,,,
Sol-25262,,,,,,,
Sol-25263,,,,,,,
Sol-25264,,,,,,,
Sol-25265,,,,,,,
Sol-25266,,,,,,,
Sol-25267,,,,,,,
Sol-25268,,,,,,,
Sol-25269,,,,,,,
Sol-25270,,,,,,,
Sol-25271,,,,,,,
Sol-25272,,,,,,,
Sol-25273,,,,,,,
Sol-25274,,,,,,,
Sol-25275,,,,,,,
Sol-25276,,,,,,,
Sol-25277,,,,,,,
Sol-25278,,,,,,,
Sol-25279,,,,,,,
Sol-25280,,,,,,,
Sol-25281,,,,,,,
Sol-25282,,,,,,,
Sol-25283,,,,,,,
Sol-25284,,,,,,,
Sol-25285,,,,,,,
Sol-25286,,,,,,,
Sol-25287,,,,,,,
Sol-25288,,,,,,,
Sol-25289,,,,,,,
Sol-25290,,,,,,,
Sol-25291,,,,,,,
Sol-25292,,,,,,,
Sol-25293,,,,,,,
Sol-25294,,,,,,,
Sol-25295,,,,,,,
Sol-25296,,,,,,,
Sol-25297,,,,,,,
Sol-25298,,,,,,,
Sol-25299,,,,,,,
Sol-25300,,,,,,,
Sol-25301,,,,,,,
Sol-25302,,,,,,,
Sol-25303,,,,,,,
Sol-25304,,,,,,,
Sol-25305,,,,,,,
Sol-25306,,,,,,,
Sol-25307,,,,,,,
Sol-25308,,,,,,,
Sol-25309,,,,,,,
Sol-25310,,,,,,,
Sol-25311,,,,,,,
Sol-25312,,,,,,,
Sol-25313,,,,,,,
Sol-25314,,,,,,,
Sol-25315,,,,,,,
Sol-25316,,,,,,,
Sol-25317,,,,,,,
Sol-25318,,,,,,,
Sol-25319,,,,,,,
Sol-25320,,,,,,,
Sol-25321,,,,,,,
Sol-25322,,,,,,,
Sol-25323,,,,,,,
Sol-25324,,,,,,,
Sol-25325,,,,,,,
Sol-25326,,,,,,,
Sol-25327,,,,,,,
Sol-25328,,,,,,,
Sol-25329,,,,,,,
Sol-25330,,,,,,,
Sol-25331,,,,,,,
Sol-25332,,,,,,,
Sol-25333,,,,,,,
Sol-25334,,,,,,,
Sol-25335,,,,,,,
Sol-25336,,,,,,,
Sol-25337,,,,,,,
Sol-25338,,,,,,,
Sol-25339,,,,,,,
Sol-25340,,,,,,,
Sol-25341,,,,,,,
Sol-25342,,,,,,,
Sol-25343,,,,,,,
Sol-25344,,,,,,,
Sol-25345,,,,,,,
Sol-25346,,,,,,,
Sol-25347,,,,,,,
Sol-25348,,,,,,,
Sol-25349,,,,,,,
Sol-25350,,,,,,,
Sol-25351,,,,,,,
Sol-25352,,,,,,,
Sol-25353,,,,,,,
Sol-25354,,,,,,,
Sol-25355,,,,,,,
Sol-25356,,,,,,,
Sol-25357,,,,,,,
Sol-25358,,,,,,,
Sol-25359,,,,,,,
Sol-25360,,,,,,,
Sol-25361,,,,,,,
Sol-25362,,,,,,,
Sol-25363,,,,,,,
Sol-25364,,,,,,,
Sol-25365,,,,,,,
Sol-25366,,,,,,,
Sol-25367,,,,,,,
Sol-25368,,,,,,,
Sol-25369,,,,,,,
Sol-25370,,,,,,,
Sol-25371,,,,,,,
Sol-25372,,,,,,,
Sol-25373,,,,,,,
Sol-25374,,,,,,,
Sol-25375,,,,,,,
Sol-25376,,,,,,,
Sol-25377,,,,,,,
Sol-25378,,,,,,,
Sol-25379,,,,,,,
Sol-25380,,,,,,,
Sol-25381,,,,,,,
Sol-25382,,,,,,,
Sol-25383,,,,,,,
Sol-25384,,,,,,,
Sol-25385,,,,,,,
Sol-25386,,,,,,,
Sol-25387,,,,,,,
Sol-25388,,,,,,,
Sol-25389,,,,,,,
Sol-25390,,,,,,,
Sol-25391,,,,,,,
Sol-25392,,,,,,,
Sol-25393,,,,,,,
Sol-25394,,,,,,,
Sol-25395,,,,,,,
Sol-25396,,,,,,,
Sol-25397,,,,,,,
Sol-25398,,,,,,,
Sol-25399,,,,,,,
Sol-25400,,,,,,,
Sol-25401,,,,,,,
Sol-25402,,,,,,,
Sol-25403,,,,,,,
Sol-25404,,,,,,,
Sol-25405,,,,,,,
Sol-25406,,,,,,,
Sol-25407,,,,,,,
Sol-25408,,,,,,,
Sol-25409,,,,,,,
Sol-25410,,,,,,,
Sol-25411,,,,,,,
Sol-25412,,,,,,,
Sol-25413,,,,,,,
Sol-25414,,,,,,,
Sol-25415,,,,,,,
Sol-25416,,,,,,,
Sol-25417,,,,,,,
Sol-25418,,,,,,,
Sol-25419,,,,,,,
Sol-25420,,,,,,,
Sol-25421,,,,,,,
Sol-25422,,,,,,,
Sol-25423,,,,,,,
Sol-25424,,,,,,,
Sol-25425,,,,,,,
Sol-25426,,,,,,,
Sol-25427,,,,,,,
Sol-25428,,,,,,,
Sol-25429,,,,,,,
Sol-25430,,,,,,,
Sol-25431,,,,,,,
Sol-25432,,,,,,,
Sol-25433,,,,,,,
Sol-25434,,,,,,,
Sol-25435,,,,,,,
Sol-25436,,,,,,,
Sol-25437,,,,,,,
Sol-25438,,,,,,,
Sol-25439,,,,,,,
Sol-25440,,,,,,,
Sol-25441,,,,,,,
Sol-25442,,,,,,,
Sol-25443,,,,,,,
Sol-25444,,,,,,,
Sol-25445,,,,,,,
Sol-25446,,,,,,,
Sol-25447,,,,,,,
Sol-25448,,,,,,,
Sol-25449,,,,,,,
Sol-25450,,,,,,,
Sol-25451,,,,,,,
Sol-25452,,,,,,,
Sol-25453,,,,,,,
Sol-25454,,,,,,,
Sol-25455,,,,,,,
Sol-25456,,,,,,,
Sol-25457,,,,,,,
Sol-25458,,,,,,,
Sol-25459,,,,,,,
Sol-25460,,,,,,,
Sol-25461,,,,,,,
Sol-25462,,,,,,,
Sol-25463,,,,,,,
Sol-25464,,,,,,,
Sol-25465,,,,,,,
Sol-25466,,,,,,,
Sol-25467,,,,,,,
Sol-25468,,,,,,,
Sol-25469,,,,,,,
Sol-25470,,,,,,,
Sol-25471,,,,,,,
Sol-25472,,,,,,,
Sol-25473,,,,,,,
Sol-25474,,,,,,,
Sol-25475,,,,,,,
Sol-25476,,,,,,,
Sol-25477,,,,,,,
Sol-25478,,,,,,,
Sol-25479,,,,,,,
Sol-25480,,,,,,,
Sol-25481,,,,,,,
Sol-25482,,,,,,,
Sol-25483,,,,,,,
Sol-25484,,,,,,,
Sol-25485,,,,,,,
Sol-25486,,,,,,,
Sol-25487,,,,,,,
Sol-25488,,,,,,,
Sol-25489,,,,,,,
Sol-25490,,,,,,,
Sol-25491,,,,,,,
Sol-25492,,,,,,,
Sol-25493,,,,,,,
Sol-25494,,,,,,,
Sol-25495,,,,,,,
Sol-25496,,,,,,,
Sol-25497,,,,,,,
Sol-25498,,,,,,,
Sol-25499,,,,,,,
Sol-25500,,,,,,,
Sol-25501,,,,,,,
Sol-25502,,,,,,,
Sol-25503,,,,,,,
Sol-25504,,,,,,,
Sol-25505,,,,,,,
Sol-25506,,,,,,,
Sol-25507,,,,,,,
Sol-25508,,,,,,,
Sol-25509,,,,,,,
Sol-25510,,,,,,,
Sol-25511,,,,,,,
Sol-25512,,,,,,,
Sol-25513,,,,,,,
Sol-25514,,,,,,,
Sol-25515,,,,,,,
Sol-25516,,,,,,,
Sol-25517,,,,,,,
Sol-25518,,,,,,,
Sol-25519,,,,,,,
Sol-25520,,,,,,,
Sol-25521,,,,,,,
Sol-25522,,,,,,,
Sol-25523,,,,,,,
Sol-25524,,,,,,,
Sol-25525,,,,,,,
Sol-25526,,,,,,,
Sol-25527,,,,,,,
Sol-25528,,,,,,,
Sol-25529,,,,,,,
Sol-25530,,,,,,,
Sol-25531,,,,,,,
Sol-25532,,,,,,,
Sol-25533,,,,,,,
Sol-25534,,,,,,,
Sol-25535,,,,,,,
Sol-25536,,,,,,,
Sol-25537,,,,,,,
Sol-25538,,,,,,,
Sol-25539,,,,,,,
Sol-25540,,,,,,,
Sol-25541,,,,,,,
Sol-25542,,,,,,,
Sol-25543,,,,,,,
Sol-25544,,,,,,,
Sol-25545,,,,,,,
Sol-25546,,,,,,,
Sol-25547,,,,,,,
Sol-25548,,,,,,,
Sol-25549,,,,,,,
Sol-25550,,,,,,,
Sol-25551,,,,,,,
Sol-25552,,,,,,,
Sol-25553,,,,,,,
Sol-25554,,,,,,,
Sol-25555,,,,,,,
Sol-25556,,,,,,,
Sol-25557,,,,,,,
Sol-25558,,,,,,,
Sol-25559,,,,,,,
Sol-25560,,,,,,,
Sol-25561,,,,,,,
Sol-25562,,,,,,,
Sol-25563,,,,,,,
Sol-25564,,,,,,,
Sol-25565,,,,,,,
Sol-25566,,,,,,,
Sol-25567,,,,,,,
Sol-25568,,,,,,,
Sol-25569,,,,,,,
Sol-25570,,,,,,,
Sol-25571,,,,,,,
Sol-25572,,,,,,,
Sol-25573,,,,,,,
Sol-25574,,,,,,,
Sol-25575,,,,,,,
Sol-25576,,,,,,,
Sol-25577,,,,,,,
Sol-25578,,,,,,,
Sol-25579,,,,,,,
Sol-25580,,,,,,,
Sol-25581,,,,,,,
Sol-25582,,,,,,,
Sol-25583,,,,,,,
Sol-25584,,,,,,,
Sol-25585,,,,,,,
Sol-25586,,,,,,,
Sol-25587,,,,,,,
Sol-25588,,,,,,,
Sol-25589,,,,,,,
Sol-25590,,,,,,,
Sol-25591,,,,,,,
Sol-25592,,,,,,,
Sol-25593,,,,,,,
Sol-25594,,,,,,,
Sol-25595,,,,,,,
Sol-25596,,,,,,,
Sol-25597,,,,,,,
Sol-25598,,,,,,,
Sol-25599,,,,,,,
Sol-25600,,,,,,,
Sol-25601,,,,,,,
Sol-25602,,,,,,,
Sol-25603,,,,,,,
Sol-25604,,,,,,,
Sol-25605,,,,,,,
Sol-25606,,,,,,,
Sol-25607,,,,,,,
Sol-25608,,,,,,,
Sol-25609,,,,,,,
Sol-25610,,,,,,,
Sol-25611,,,,,,,
Sol-25612,,,,,,,
Sol-25613,,,,,,,
Sol-25614,,,,,,,
Sol-25615,,,,,,,
Sol-25616,,,,,,,
Sol-25617,,,,,,,
Sol-25618,,,,,,,
Sol-25619,,,,,,,
Sol-25620,,,,,,,
Sol-25621,,,,,,,
Sol-25622,,,,,,,
Sol-25623,,,,,,,
Sol-25624,,,,,,,
Sol-25625,,,,,,,
Sol-25626,,,,,,,
Sol-25627,,,,,,,
Sol-25628,,,,,,,
Sol-25629,,,,,,,
Sol-25630,,,,,,,
Sol-25631,,,,,,,
Sol-25632,,,,,,,
Sol-25633,,,,,,,
Sol-25634,,,,,,,
Sol-25635,,,,,,,
Sol-25636,,,,,,,
Sol-25637,,,,,,,
Sol-25638,,,,,,,
Sol-25639,,,,,,,
Sol-25640,,,,,,,
Sol-25641,,,,,,,
Sol-25642,,,,,,,
Sol-25643,,,,,,,
Sol-25644,,,,,,,
Sol-25645,,,,,,,
Sol-25646,,,,,,,
Sol-25647,,,,,,,
Sol-25648,,,,,,,
Sol-25649,,,,,,,
Sol-25650,,,,,,,
Sol-25651,,,,,,,
Sol-25652,,,,,,,
Sol-25653,,,,,,,
Sol-25654,,,,,,,
Sol-25655,,,,,,,
Sol-25656,,,,,,,
Sol-25657,,,,,,,
Sol-25658,,,,,,,
Sol-25659,,,,,,,
Sol-25660,,,,,,,
Sol-25661,,,,,,,
Sol-25662,,,,,,,
Sol-25663,,,,,,,
Sol-25664,,,,,,,
Sol-25665,,,,,,,
Sol-25666,,,,,,,
Sol-25667,,,,,,,
Sol-25668,,,,,,,
Sol-25669,,,,,,,
Sol-25670,,,,,,,
Sol-25671,,,,,,,
Sol-25672,,,,,,,
Sol-25673,,,,,,,
Sol-25674,,,,,,,
Sol-25675,,,,,,,
Sol-25676,,,,,,,
Sol-25677,,,,,,,
Sol-25678,,,,,,,
Sol-25679,,,,,,,
Sol-25680,,,,,,,
Sol-25681,,,,,,,
Sol-25682,,,,,,,
Sol-25683,,,,,,,
Sol-25684,,,,,,,
Sol-25685,,,,,,,
Sol-25686,,,,,,,
Sol-25687,,,,,,,
Sol-25688,,,,,,,
Sol-25689,,,,,,,
Sol-25690,,,,,,,
Sol-25691,,,,,,,
Sol-25692,,,,,,,
Sol-25693,,,,,,,
Sol-25694,,,,,,,
Sol-25695,,,,,,,
Sol-25696,,,,,,,
Sol-25697,,,,,,,
Sol-25698,,,,,,,
Sol-25699,,,,,,,
Sol-25700,,,,,,,
Sol-25701,,,,,,,
Sol-25702,,,,,,,
Sol-25703,,,,,,,
Sol-25704,,,,,,,
Sol-25705,,,,,,,
Sol-25706,,,,,,,
Sol-25707,,,,,,,
Sol-25708,,,,,,,
Sol-25709,,,,,,,
Sol-25710,,,,,,,
Sol-25711,,,,,,,
Sol-25712,,,,,,,
Sol-25713,,,,,,,
Sol-25714,,,,,,,
Sol-25715,,,,,,,
Sol-25716,,,,,,,
Sol-25717,,,,,,,
Sol-25718,,,,,,,
Sol-25719,,,,,,,
Sol-25720,,,,,,,
Sol-25721,,,,,,,
Sol-25722,,,,,,,
Sol-25723,,,,,,,
Sol-25724,,,,,,,
Sol-25725,,,,,,,
Sol-25726,,,,,,,
Sol-25727,,,,,,,
Sol-25728,,,,,,,
Sol-25729,,,,,,,
Sol-25730,,,,,,,
Sol-25731,,,,,,,
Sol-25732,,,,,,,
Sol-25733,,,,,,,
Sol-25734,,,,,,,
Sol-25735,,,,,,,
Sol-25736,,,,,,,
Sol-25737,,,,,,,
Sol-25738,,,,,,,
Sol-25739,,,,,,,
Sol-25740,,,,,,,
Sol-25741,,,,,,,
Sol-25742,,,,,,,
Sol-25743,,,,,,,
Sol-25744,,,,,,,
Sol-25745,,,,,,,
Sol-25746,,,,,,,
Sol-25747,,,,,,,
Sol-25748,,,,,,,
Sol-25749,,,,,,,
Sol-25750,,,,,,,
Sol-25751,,,,,,,
Sol-25752,,,,,,,
Sol-25753,,,,,,,
Sol-25754,,,,,,,
Sol-25755,,,,,,,
Sol-25756,,,,,,,
Sol-25757,,,,,,,
Sol-25758,,,,,,,
Sol-25759,,,,,,,
Sol-25760,,,,,,,
Sol-25761,,,,,,,
Sol-25762,,,,,,,
Sol-25763,,,,,,,
Sol-25764,,,,,,,
Sol-25765,,,,,,,
Sol-25766,,,,,,,
Sol-25767,,,,,,,
Sol-25768,,,,,,,
Sol-25769,,,,,,,
Sol-25770,,,,,,,
Sol-25771,,,,,,,
Sol-25772,,,,,,,
Sol-25773,,,,,,,
Sol-25774,,,,,,,
Sol-25775,,,,,,,
Sol-25776,,,,,,,
Sol-25777,,,,,,,
Sol-25778,,,,,,,
Sol-25779,,,,,,,
Sol-25780,,,,,,,
Sol-25781,,,,,,,
Sol-25782,,,,,,,
Sol-25783,,,,,,,
Sol-25784,,,,,,,
Sol-25785,,,,,,,
Sol-25786,,,,,,,
Sol-25787,,,,,,,
Sol-25788,,,,,,,
Sol-25789,,,,,,,
Sol-25790,,,,,,,
Sol-25791,,,,,,,
Sol-25792,,,,,,,
Sol-25793,,,,,,,
Sol-25794,,,,,,,
Sol-25795,,,,,,,
Sol-25796,,,,,,,
Sol-25797,,,,,,,
Sol-25798,,,,,,,
Sol-25799,,,,,,,
Sol-25800,,,,,,,
Sol-25801,,,,,,,
Sol-25802,,,,,,,
Sol-25803,,,,,,,
Sol-25804,,,,,,,
Sol-25805,,,,,,,
Sol-25806,,,,,,,
Sol-25807,,,,,,,
Sol-25808,,,,,,,
Sol-25809,,,,,,,
Sol-25810,,,,,,,
Sol-25811,,,,,,,
Sol-25812,,,,,,,
Sol-25813,,,,,,,
Sol-25814,,,,,,,
Sol-25815,,,,,,,
Sol-25816,,,,,,,
Sol-25817,,,,,,,
Sol-25818,,,,,,,
Sol-25819,,,,,,,
Sol-25820,,,,,,,
Sol-25821,,,,,,,
Sol-25822,,,,,,,
Sol-25823,,,,,,,
Sol-25824,,,,,,,
Sol-25825,,,,,,,
Sol-25826,,,,,,,
Sol-25827,,,,,,,
Sol-25828,,,,,,,
Sol-25829,,,,,,,
Sol-25830,,,,,,,
Sol-25831,,,,,,,
Sol-25832,,,,,,,
Sol-25833,,,,,,,
Sol-25834,,,,,,,
Sol-25835,,,,,,,
Sol-25836,,,,,,,
Sol-25837,,,,,,,
Sol-25838,,,,,,,
Sol-25839,,,,,,,
Sol-25840,,,,,,,
Sol-25841,,,,,,,
Sol-25842,,,,,,,
Sol-25843,,,,,,,
Sol-25844,,,,,,,
Sol-25845,,,,,,,
Sol-25846,,,,,,,
Sol-25847,,,,,,,
Sol-25848,,,,,,,
Sol-25849,,,,,,,
Sol-25850,,,,,,,
Sol-25851,,,,,,,
Sol-25852,,,,,,,
Sol-25853,,,,,,,
Sol-25854,,,,,,,
Sol-25855,,,,,,,
Sol-25856,,,,,,,
Sol-25857,,,,,,,
Sol-25858,,,,,,,
Sol-25859,,,,,,,
Sol-25860,,,,,,,
Sol-25861,,,,,,,
Sol-25862,,,,,,,
Sol-25863,,,,,,,
Sol-25864,,,,,,,
Sol-25865,,,,,,,
Sol-25866,,,,,,,
Sol-25867,,,,,,,
Sol-25868,,,,,,,
Sol-25869,,,,,,,
Sol-25870,,,,,,,
Sol-25871,,,,,,,
Sol-25872,,,,,,,
Sol-25873,,,,,,,
Sol-25874,,,,,,,
Sol-25875,,,,,,,
Sol-25876,,,,,,,
Sol-25877,,,,,,,
Sol-25878,,,,,,,
Sol-25879,,,,,,,
Sol-25880,,,,,,,
Sol-25881,,,,,,,
Sol-25882,,,,,,,
Sol-25883,,,,,,,
Sol-25884,,,,,,,
Sol-25885,,,,,,,
Sol-25886,,,,,,,
Sol-25887,,,,,,,
Sol-25888,,,,,,,
Sol-25889,,,,,,,
Sol-25890,,,,,,,
Sol-25891,,,,,,,
Sol-25892,,,,,,,
Sol-25893,,,,,,,
Sol-25894,,,,,,,
Sol-25895,,,,,,,
Sol-25896,,,,,,,
Sol-25897,,,,,,,
Sol-25898,,,,,,,
Sol-25899,,,,,,,
Sol-25900,,,,,,,
Sol-25901,,,,,,,
Sol-25902,,,,,,,
Sol-25903,,,,,,,
Sol-25904,,,,,,,
Sol-25905,,,,,,,
Sol-25906,,,,,,,
Sol-25907,,,,,,,
Sol-25908,,,,,,,
Sol-25909,,,,,,,
Sol-25910,,,,,,,
Sol-25911,,,,,,,
Sol-25912,,,,,,,
Sol-25913,,,,,,,
Sol-25914,,,,,,,
Sol-25915,,,,,,,
Sol-25916,,,,,,,
Sol-25917,,,,,,,
Sol-25918,,,,,,,
Sol-25919,,,,,,,
Sol-25920,,,,,,,
Sol-25921,,,,,,,
Sol-25922,,,,,,,
Sol-25923,,,,,,,
Sol-25924,,,,,,,
Sol-25925,,,,,,,
Sol-25926,,,,,,,
Sol-25927,,,,,,,
Sol-25928,,,,,,,
Sol-25929,,,,,,,
Sol-25930,,,,,,,
Sol-25931,,,,,,,
Sol-25932,,,,,,,
Sol-25933,,,,,,,
Sol-25934,,,,,,,
Sol-25935,,,,,,,
Sol-25936,,,,,,,
Sol-25937,,,,,,,
Sol-25938,,,,,,,
Sol-25939,,,,,,,
Sol-25940,,,,,,,
Sol-25941,,,,,,,
Sol-25942,,,,,,,
Sol-25943,,,,,,,
Sol-25944,,,,,,,
Sol-25945,,,,,,,
Sol-25946,,,,,,,
Sol-25947,,,,,,,
Sol-25948,,,,,,,
Sol-25949,,,,,,,
Sol-25950,,,,,,,
Sol-25951,,,,,,,
Sol-25952,,,,,,,
Sol-25953,,,,,,,
Sol-25954,,,,,,,
Sol-25955,,,,,,,
Sol-25956,,,,,,,
Sol-25957,,,,,,,
Sol-25958,,,,,,,
Sol-25959,,,,,,,
Sol-25960,,,,,,,
Sol-25961,,,,,,,
Sol-25962,,,,,,,
Sol-25963,,,,,,,
Sol-25964,,,,,,,
Sol-25965,,,,,,,
Sol-25966,,,,,,,
Sol-25967,,,,,,,
Sol-25968,,,,,,,
Sol-25969,,,,,,,
Sol-25970,,,,,,,
Sol-25971,,,,,,,
Sol-25972,,,,,,,
Sol-25973,,,,,,,
Sol-25974,,,,,,,
Sol-25975,,,,,,,
Sol-25976,,,,,,,
Sol-25977,,,,,,,
Sol-25978,,,,,,,
Sol-25979,,,,,,,
Sol-25980,,,,,,,
Sol-25981,,,,,,,
Sol-25982,,,,,,,
Sol-25983,,,,,,,
Sol-25984,,,,,,,
Sol-25985,,,,,,,
Sol-25986,,,,,,,
Sol-25987,,,,,,,
Sol-25988,,,,,,,
Sol-25989,,,,,,,
Sol-25990,,,,,,,
Sol-25991,,,,,,,
Sol-25992,,,,,,,
Sol-25993,,,,,,,
Sol-25994,,,,,,,
Sol-25995,,,,,,,
Sol-25996,,,,,,,
Sol-25997,,,,,,,
Sol-25998,,,,,,,
Sol-25999,,,,,,,
Sol-26000,,,,,,,
Sol-26001,,,,,,,
Sol-26002,,,,,,,
Sol-26003,,,,,,,
Sol-26004,,,,,,,
Sol-26005,,,,,,,
Sol-26006,,,,,,,
Sol-26007,,,,,,,
Sol-26008,,,,,,,
Sol-26009,,,,,,,
Sol-26010,,,,,,,
Sol-26011,,,,,,,
Sol-26012,,,,,,,
Sol-26013,,,,,,,
Sol-26014,,,,,,,
Sol-26015,,,,,,,
Sol-26016,,,,,,,
Sol-26017,,,,,,,
Sol-26018,,,,,,,
Sol-26019,,,,,,,
Sol-26020,,,,,,,
Sol-26021,,,,,,,
Sol-26022,,,,,,,
Sol-26023,,,,,,,
Sol-26024,,,,,,,
Sol-26025,,,,,,,
Sol-26026,,,,,,,
Sol-26027,,,,,,,
Sol-26028,,,,,,,
Sol-26029,,,,,,,
Sol-26030,,,,,,,
Sol-26031,,,,,,,
Sol-26032,,,,,,,
Sol-26033,,,,,,,
Sol-26034,,,,,,,
Sol-26035,,,,,,,
Sol-26036,,,,,,,
Sol-26037,,,,,,,
Sol-26038,,,,,,,
Sol-26039,,,,,,,
Sol-26040,,,,,,,
Sol-26041,,,,,,,
Sol-26042,,,,,,,
Sol-26043,,,,,,,
Sol-26044,,,,,,,
Sol-26045,,,,,,,
Sol-26046,,,,,,,
Sol-26047,,,,,,,
Sol-26048,,,,,,,
Sol-26049,,,,,,,
Sol-26050,,,,,,,
Sol-26051,,,,,,,
Sol-26052,,,,,,,
Sol-26053,,,,,,,
Sol-26054,,,,,,,
Sol-26055,,,,,,,
Sol-26056,,,,,,,
Sol-26057,,,,,,,
Sol-26058,,,,,,,
Sol-26059,,,,,,,
Sol-26060,,,,,,,
Sol-26061,,,,,,,
Sol-26062,,,,,,,
Sol-26063,,,,,,,
Sol-26064,,,,,,,
Sol-26065,,,,,,,
Sol-26066,,,,,,,
Sol-26067,,,,,,,
Sol-26068,,,,,,,
Sol-26069,,,,,,,
Sol-26070,,,,,,,
Sol-26071,,,,,,,
Sol-26072,,,,,,,
Sol-26073,,,,,,,
Sol-26074,,,,,,,
Sol-26075,,,,,,,
Sol-26076,,,,,,,
Sol-26077,,,,,,,
Sol-26078,,,,,,,
Sol-26079,,,,,,,
Sol-26080,,,,,,,
Sol-26081,,,,,,,
Sol-26082,,,,,,,
Sol-26083,,,,,,,
Sol-26084,,,,,,,
Sol-26085,,,,,,,
Sol-26086,,,,,,,
Sol-26087,,,,,,,
Sol-26088,,,,,,,
Sol-26089,,,,,,,
Sol-26090,,,,,,,
Sol-26091,,,,,,,
Sol-26092,,,,,,,
Sol-26093,,,,,,,
Sol-26094,,,,,,,
Sol-26095,,,,,,,
Sol-26096,,,,,,,
Sol-26097,,,,,,,
Sol-26098,,,,,,,
Sol-26099,,,,,,,
Sol-26100,,,,,,,
Sol-26101,,,,,,,
Sol-26102,,,,,,,
Sol-26103,,,,,,,
Sol-26104,,,,,,,
Sol-26105,,,,,,,
Sol-26106,,,,,,,
Sol-26107,,,,,,,
Sol-26108,,,,,,,
Sol-26109,,,,,,,
Sol-26110,,,,,,,
Sol-26111,,,,,,,
Sol-26112,,,,,,,
Sol-26113,,,,,,,
Sol-26114,,,,,,,
Sol-26115,,,,,,,
Sol-26116,,,,,,,
Sol-26117,,,,,,,
Sol-26118,,,,,,,
Sol-26119,,,,,,,
Sol-26120,,,,,,,
Sol-26121,,,,,,,
Sol-26122,,,,,,,
Sol-26123,,,,,,,
Sol-26124,,,,,,,
Sol-26125,,,,,,,
Sol-26126,,,,,,,
Sol-26127,,,,,,,
Sol-26128,,,,,,,
Sol-26129,,,,,,,
Sol-26130,,,,,,,
Sol-26131,,,,,,,
Sol-26132,,,,,,,
Sol-26133,,,,,,,
Sol-26134,,,,,,,
Sol-26135,,,,,,,
Sol-26136,,,,,,,
Sol-26137,,,,,,,
Sol-26138,,,,,,,
Sol-26139,,,,,,,
Sol-26140,,,,,,,
Sol-26141,,,,,,,
Sol-26142,,,,,,,
Sol-26143,,,,,,,
Sol-26144,,,,,,,
Sol-26145,,,,,,,
Sol-26146,,,,,,,
Sol-26147,,,,,,,
Sol-26148,,,,,,,
Sol-26149,,,,,,,
Sol-26150,,,,,,,
Sol-26151,,,,,,,
Sol-26152,,,,,,,
Sol-26153,,,,,,,
Sol-26154,,,,,,,
Sol-26155,,,,,,,
Sol-26156,,,,,,,
Sol-26157,,,,,,,
Sol-26158,,,,,,,
Sol-26159,,,,,,,
Sol-26160,,,,,,,
Sol-26161,,,,,,,
Sol-26162,,,,,,,
Sol-26163,,,,,,,
Sol-26164,,,,,,,
Sol-26165,,,,,,,
Sol-26166,,,,,,,
Sol-26167,,,,,,,
Sol-26168,,,,,,,
Sol-26169,,,,,,,
Sol-26170,,,,,,,
Sol-26171,,,,,,,
Sol-26172,,,,,,,
Sol-26173,,,,,,,
Sol-26174,,,,,,,
Sol-26175,,,,,,,
Sol-26176,,,,,,,
Sol-26177,,,,,,,
Sol-26178,,,,,,,
Sol-26179,,,,,,,
Sol-26180,,,,,,,
Sol-26181,,,,,,,
Sol-26182,,,,,,,
Sol-26183,,,,,,,
Sol-26184,,,,,,,
Sol-26185,,,,,,,
Sol-26186,,,,,,,
Sol-26187,,,,,,,
Sol-26188,,,,,,,
Sol-26189,,,,,,,
Sol-26190,,,,,,,
Sol-26191,,,,,,,
Sol-26192,,,,,,,
Sol-26193,,,,,,,
Sol-26194,,,,,,,
Sol-26195,,,,,,,
Sol-26196,,,,,,,
Sol-26197,,,,,,,
Sol-26198,,,,,,,
Sol-26199,,,,,,,
Sol-26200,,,,,,,
Sol-26201,,,,,,,
Sol-26202,,,,,,,
Sol-26203,,,,,,,
Sol-26204,,,,,,,
Sol-26205,,,,,,,
Sol-26206,,,,,,,
Sol-26207,,,,,,,
Sol-26208,,,,,,,
Sol-26209,,,,,,,
Sol-26210,,,,,,,
Sol-26211,,,,,,,
Sol-26212,,,,,,,
Sol-26213,,,,,,,
Sol-26214,,,,,,,
Sol-26215,,,,,,,
Sol-26216,,,,,,,
Sol-26217,,,,,,,
Sol-26218,,,,,,,
Sol-26219,,,,,,,
Sol-26220,,,,,,,
Sol-26221,,,,,,,
Sol-26222,,,,,,,
Sol-26223,,,,,,,
Sol-26224,,,,,,,
Sol-26225,,,,,,,
Sol-26226,,,,,,,
Sol-26227,,,,,,,
Sol-26228,,,,,,,
Sol-26229,,,,,,,
Sol-26230,,,,,,,
Sol-26231,,,,,,,
Sol-26232,,,,,,,
Sol-26233,,,,,,,
Sol-26234,,,,,,,
Sol-26235,,,,,,,
Sol-26236,,,,,,,
Sol-26237,,,,,,,
Sol-26238,,,,,,,
Sol-26239,,,,,,,
Sol-26240,,,,,,,
Sol-26241,,,,,,,
Sol-26242,,,,,,,
Sol-26243,,,,,,,
Sol-26244,,,,,,,
Sol-26245,,,,,,,
Sol-26246,,,,,,,
Sol-26247,,,,,,,
Sol-26248,,,,,,,
Sol-26249,,,,,,,
Sol-26250,,,,,,,
Sol-26251,,,,,,,
Sol-26252,,,,,,,
Sol-26253,,,,,,,
Sol-26254,,,,,,,
Sol-26255,,,,,,,
Sol-26256,,,,,,,
Sol-26257,,,,,,,
Sol-26258,,,,,,,
Sol-26259,,,,,,,
Sol-26260,,,,,,,
Sol-26261,,,,,,,
Sol-26262,,,,,,,
Sol-26263,,,,,,,
Sol-26264,,,,,,,
Sol-26265,,,,,,,
Sol-26266,,,,,,,
Sol-26267,,,,,,,
Sol-26268,,,,,,,
Sol-26269,,,,,,,
Sol-26270,,,,,,,
Sol-26271,,,,,,,
Sol-26272,,,,,,,
Sol-26273,,,,,,,
Sol-26274,,,,,,,
Sol-26275,,,,,,,
Sol-26276,,,,,,,
Sol-26277,,,,,,,
Sol-26278,,,,,,,
Sol-26279,,,,,,,
Sol-26280,,,,,,,
Sol-26281,,,,,,,
Sol-26282,,,,,,,
Sol-26283,,,,,,,
Sol-26284,,,,,,,
Sol-26285,,,,,,,
Sol-26286,,,,,,,
Sol-26287,,,,,,,
Sol-26288,,,,,,,
Sol-26289,,,,,,,
Sol-26290,,,,,,,
Sol-26291,,,,,,,
Sol-26292,,,,,,,
Sol-26293,,,,,,,
Sol-26294,,,,,,,
Sol-26295,,,,,,,
Sol-26296,,,,,,,
Sol-26297,,,,,,,
Sol-26298,,,,,,,
Sol-26299,,,,,,,
Sol-26300,,,,,,,
Sol-26301,,,,,,,
Sol-26302,,,,,,,
Sol-26303,,,,,,,
Sol-26304,,,,,,,
Sol-26305,,,,,,,
Sol-26306,,,,,,,
Sol-26307,,,,,,,
Sol-26308,,,,,,,
Sol-26309,,,,,,,
Sol-26310,,,,,,,
Sol-26311,,,,,,,
Sol-26312,,,,,,,
Sol-26313,,,,,,,
Sol-26314,,,,,,,
Sol-26315,,,,,,,
Sol-26316,,,,,,,
Sol-26317,,,,,,,
Sol-26318,,,,,,,
Sol-26319,,,,,,,
Sol-26320,,,,,,,
Sol-26321,,,,,,,
Sol-26322,,,,,,,
Sol-26323,,,,,,,
Sol-26324,,,,,,,
Sol-26325,,,,,,,
Sol-26326,,,,,,,
Sol-26327,,,,,,,
Sol-26328,,,,,,,
Sol-26329,,,,,,,
Sol-26330,,,,,,,
Sol-26331,,,,,,,
Sol-26332,,,,,,,
Sol-26333,,,,,,,
Sol-26334,,,,,,,
Sol-26335,,,,,,,
Sol-26336,,,,,,,
Sol-26337,,,,,,,
Sol-26338,,,,,,,
Sol-26339,,,,,,,
Sol-26340,,,,,,,
Sol-26341,,,,,,,
Sol-26342,,,,,,,
Sol-26343,,,,,,,
Sol-26344,,,,,,,
Sol-26345,,,,,,,
Sol-26346,,,,,,,
Sol-26347,,,,,,,
Sol-26348,,,,,,,
Sol-26349,,,,,,,
Sol-26350,,,,,,,
Sol-26351,,,,,,,
Sol-26352,,,,,,,
Sol-26353,,,,,,,
Sol-26354,,,,,,,
Sol-26355,,,,,,,
Sol-26356,,,,,,,
Sol-26357,,,,,,,
Sol-26358,,,,,,,
Sol-26359,,,,,,,
Sol-26360,,,,,,,
Sol-26361,,,,,,,
Sol-26362,,,,,,,
Sol-26363,,,,,,,
Sol-26364,,,,,,,
Sol-26365,,,,,,,
Sol-26366,,,,,,,
Sol-26367,,,,,,,
Sol-26368,,,,,,,
Sol-26369,,,,,,,
Sol-26370,,,,,,,
Sol-26371,,,,,,,
Sol-26372,,,,,,,
Sol-26373,,,,,,,
Sol-26374,,,,,,,
Sol-26375,,,,,,,
Sol-26376,,,,,,,
Sol-26377,,,,,,,
Sol-26378,,,,,,,
Sol-26379,,,,,,,
Sol-26380,,,,,,,
Sol-26381,,,,,,,
Sol-26382,,,,,,,
Sol-26383,,,,,,,
Sol-26384,,,,,,,
Sol-26385,,,,,,,
Sol-26386,,,,,,,
Sol-26387,,,,,,,
Sol-26388,,,,,,,
Sol-26389,,,,,,,
Sol-26390,,,,,,,
Sol-26391,,,,,,,
Sol-26392,,,,,,,
Sol-26393,,,,,,,
Sol-26394,,,,,,,
Sol-26395,,,,,,,
Sol-26396,,,,,,,
Sol-26397,,,,,,,
Sol-26398,,,,,,,
Sol-26399,,,,,,,
Sol-26400,,,,,,,
Sol-26401,,,,,,,
Sol-26402,,,,,,,
Sol-26403,,,,,,,
Sol-26404,,,,,,,
Sol-26405,,,,,,,
Sol-26406,,,,,,,
Sol-26407,,,,,,,
Sol-26408,,,,,,,
Sol-26409,,,,,,,
Sol-26410,,,,,,,
Sol-26411,,,,,,,
Sol-26412,,,,,,,
Sol-26413,,,,,,,
Sol-26414,,,,,,,
Sol-26415,,,,,,,
Sol-26416,,,,,,,
Sol-26417,,,,,,,
Sol-26418,,,,,,,
Sol-26419,,,,,,,
Sol-26420,,,,,,,
Sol-26421,,,,,,,
Sol-26422,,,,,,,
Sol-26423,,,,,,,
Sol-26424,,,,,,,
Sol-26425,,,,,,,
Sol-26426,,,,,,,
Sol-26427,,,,,,,
Sol-26428,,,,,,,
Sol-26429,,,,,,,
Sol-26430,,,,,,,
Sol-26431,,,,,,,
Sol-26432,,,,,,,
Sol-26433,,,,,,,
Sol-26434,,,,,,,
Sol-26435,,,,,,,
Sol-26436,,,,,,,
Sol-26437,,,,,,,
Sol-26438,,,,,,,
Sol-26439,,,,,,,
Sol-26440,,,,,,,
Sol-26441,,,,,,,
Sol-26442,,,,,,,
Sol-26443,,,,,,,
Sol-26444,,,,,,,
Sol-26445,,,,,,,
Sol-26446,,,,,,,
Sol-26447,,,,,,,
Sol-26448,,,,,,,
Sol-26449,,,,,,,
Sol-26450,,,,,,,
Sol-26451,,,,,,,
Sol-26452,,,,,,,
Sol-26453,,,,,,,
Sol-26454,,,,,,,
Sol-26455,,,,,,,
Sol-26456,,,,,,,
Sol-26457,,,,,,,
Sol-26458,,,,,,,
Sol-26459,,,,,,,
Sol-26460,,,,,,,
Sol-26461,,,,,,,
Sol-26462,,,,,,,
Sol-26463,,,,,,,
Sol-26464,,,,,,,
Sol-26465,,,,,,,
Sol-26466,,,,,,,
Sol-26467,,,,,,,
Sol-26468,,,,,,,
Sol-26469,,,,,,,
Sol-26470,,,,,,,
Sol-26471,,,,,,,
Sol-26472,,,,,,,
Sol-26473,,,,,,,
Sol-26474,,,,,,,
Sol-26475,,,,,,,
Sol-26476,,,,,,,
Sol-26477,,,,,,,
Sol-26478,,,,,,,
Sol-26479,,,,,,,
Sol-26480,,,,,,,
Sol-26481,,,,,,,
Sol-26482,,,,,,,
Sol-26483,,,,,,,
Sol-26484,,,,,,,
Sol-26485,,,,,,,
Sol-26486,,,,,,,
Sol-26487,,,,,,,
Sol-26488,,,,,,,
Sol-26489,,,,,,,
Sol-26490,,,,,,,
Sol-26491,,,,,,,
Sol-26492,,,,,,,
Sol-26493,,,,,,,
Sol-26494,,,,,,,
Sol-26495,,,,,,,
Sol-26496,,,,,,,
Sol-26497,,,,,,,
Sol-26498,,,,,,,
Sol-26499,,,,,,,
Sol-26500,,,,,,,
Sol-26501,,,,,,,
Sol-26502,,,,,,,
Sol-26503,,,,,,,
Sol-26504,,,,,,,
Sol-26505,,,,,,,
Sol-26506,,,,,,,
Sol-26507,,,,,,,
Sol-26508,,,,,,,
Sol-26509,,,,,,,
Sol-26510,,,,,,,
Sol-26511,,,,,,,
Sol-26512,,,,,,,
Sol-26513,,,,,,,
Sol-26514,,,,,,,
Sol-26515,,,,,,,
Sol-26516,,,,,,,
Sol-26517,,,,,,,
Sol-26518,,,,,,,
Sol-26519,,,,,,,
Sol-26520,,,,,,,
Sol-26521,,,,,,,
Sol-26522,,,,,,,
Sol-26523,,,,,,,
Sol-26524,,,,,,,
Sol-26525,,,,,,,
Sol-26526,,,,,,,
Sol-26527,,,,,,,
Sol-26528,,,,,,,
Sol-26529,,,,,,,
Sol-26530,,,,,,,
Sol-26531,,,,,,,
Sol-26532,,,,,,,
Sol-26533,,,,,,,
Sol-26534,,,,,,,
Sol-26535,,,,,,,
Sol-26536,,,,,,,
Sol-26537,,,,,,,
Sol-26538,,,,,,,
Sol-26539,,,,,,,
Sol-26540,,,,,,,
Sol-26541,,,,,,,
Sol-26542,,,,,,,
Sol-26543,,,,,,,
Sol-26544,,,,,,,
Sol-26545,,,,,,,
Sol-26546,,,,,,,
Sol-26547,,,,,,,
Sol-26548,,,,,,,
Sol-26549,,,,,,,
Sol-26550,,,,,,,
Sol-26551,,,,,,,
Sol-26552,,,,,,,
Sol-26553,,,,,,,
Sol-26554,,,,,,,
Sol-26555,,,,,,,
Sol-26556,,,,,,,
Sol-26557,,,,,,,
Sol-26558,,,,,,,
Sol-26559,,,,,,,
Sol-26560,,,,,,,
Sol-26561,,,,,,,
Sol-26562,,,,,,,
Sol-26563,,,,,,,
Sol-26564,,,,,,,
Sol-26565,,,,,,,
Sol-26566,,,,,,,
Sol-26567,,,,,,,
Sol-26568,,,,,,,
Sol-26569,,,,,,,
Sol-26570,,,,,,,
Sol-26571,,,,,,,
Sol-26572,,,,,,,
Sol-26573,,,,,,,
Sol-26574,,,,,,,
Sol-26575,,,,,,,
Sol-26576,,,,,,,
Sol-26577,,,,,,,
Sol-26578,,,,,,,
Sol-26579,,,,,,,
Sol-26580,,,,,,,
Sol-26581,,,,,,,
Sol-26582,,,,,,,
Sol-26583,,,,,,,
Sol-26584,,,,,,,
Sol-26585,,,,,,,
Sol-26586,,,,,,,
Sol-26587,,,,,,,
Sol-26588,,,,,,,
Sol-26589,,,,,,,
Sol-26590,,,,,,,
Sol-26591,,,,,,,
Sol-26592,,,,,,,
Sol-26593,,,,,,,
Sol-26594,,,,,,,
Sol-26595,,,,,,,
Sol-26596,,,,,,,
Sol-26597,,,,,,,
Sol-26598,,,,,,,
Sol-26599,,,,,,,
Sol-26600,,,,,,,
Sol-26601,,,,,,,
Sol-26602,,,,,,,
Sol-26603,,,,,,,
Sol-26604,,,,,,,
Sol-26605,,,,,,,
Sol-26606,,,,,,,
Sol-26607,,,,,,,
Sol-26608,,,,,,,
Sol-26609,,,,,,,
Sol-26610,,,,,,,
Sol-26611,,,,,,,
Sol-26612,,,,,,,
Sol-26613,,,,,,,
Sol-26614,,,,,,,
Sol-26615,,,,,,,
Sol-26616,,,,,,,
Sol-26617,,,,,,,
Sol-26618,,,,,,,
Sol-26619,,,,,,,
Sol-26620,,,,,,,
Sol-26621,,,,,,,
Sol-26622,,,,,,,
Sol-26623,,,,,,,
Sol-26624,,,,,,,
Sol-26625,,,,,,,
Sol-26626,,,,,,,
Sol-26627,,,,,,,
Sol-26628,,,,,,,
Sol-26629,,,,,,,
Sol-26630,,,,,,,
Sol-26631,,,,,,,
Sol-26632,,,,,,,
Sol-26633,,,,,,,
Sol-26634,,,,,,,
Sol-26635,,,,,,,
Sol-26636,,,,,,,
Sol-26637,,,,,,,
Sol-26638,,,,,,,
Sol-26639,,,,,,,
Sol-26640,,,,,,,
Sol-26641,,,,,,,
Sol-26642,,,,,,,
Sol-26643,,,,,,,
Sol-26644,,,,,,,
Sol-26645,,,,,,,
Sol-26646,,,,,,,
Sol-26647,,,,,,,
Sol-26648,,,,,,,
Sol-26649,,,,,,,
Sol-26650,,,,,,,
Sol-26651,,,,,,,
Sol-26652,,,,,,,
Sol-26653,,,,,,,
Sol-26654,,,,,,,
Sol-26655,,,,,,,
Sol-26656,,,,,,,
Sol-26657,,,,,,,
Sol-26658,,,,,,,
Sol-26659,,,,,,,
Sol-26660,,,,,,,
Sol-26661,,,,,,,
Sol-26662,,,,,,,
Sol-26663,,,,,,,
Sol-26664,,,,,,,
Sol-26665,,,,,,,
Sol-26666,,,,,,,
Sol-26667,,,,,,,
Sol-26668,,,,,,,
Sol-26669,,,,,,,
Sol-26670,,,,,,,
Sol-26671,,,,,,,
Sol-26672,,,,,,,
Sol-26673,,,,,,,
Sol-26674,,,,,,,
Sol-26675,,,,,,,
Sol-26676,,,,,,,
Sol-26677,,,,,,,
Sol-26678,,,,,,,
Sol-26679,,,,,,,
Sol-26680,,,,,,,
Sol-26681,,,,,,,
Sol-26682,,,,,,,
Sol-26683,,,,,,,
Sol-26684,,,,,,,
Sol-26685,,,,,,,
Sol-26686,,,,,,,
Sol-26687,,,,,,,
Sol-26688,,,,,,,
Sol-26689,,,,,,,
Sol-26690,,,,,,,
Sol-26691,,,,,,,
Sol-26692,,,,,,,
Sol-26693,,,,,,,
Sol-26694,,,,,,,
Sol-26695,,,,,,,
Sol-26696,,,,,,,
Sol-26697,,,,,,,
Sol-26698,,,,,,,
Sol-26699,,,,,,,
Sol-26700,,,,,,,
Sol-26701,,,,,,,
Sol-26702,,,,,,,
Sol-26703,,,,,,,
Sol-26704,,,,,,,
Sol-26705,,,,,,,
Sol-26706,,,,,,,
Sol-26707,,,,,,,
Sol-26708,,,,,,,
Sol-26709,,,,,,,
Sol-26710,,,,,,,
Sol-26711,,,,,,,
Sol-26712,,,,,,,
Sol-26713,,,,,,,
Sol-26714,,,,,,,
Sol-26715,,,,,,,
Sol-26716,,,,,,,
Sol-26717,,,,,,,
Sol-26718,,,,,,,
Sol-26719,,,,,,,
Sol-26720,,,,,,,
Sol-26721,,,,,,,
Sol-26722,,,,,,,
Sol-26723,,,,,,,
Sol-26724,,,,,,,
Sol-26725,,,,,,,
Sol-26726,,,,,,,
Sol-26727,,,,,,,
Sol-26728,,,,,,,
Sol-26729,,,,,,,
Sol-26730,,,,,,,
Sol-26731,,,,,,,
Sol-26732,,,,,,,
Sol-26733,,,,,,,
Sol-26734,,,,,,,
Sol-26735,,,,,,,
Sol-26736,,,,,,,
Sol-26737,,,,,,,
Sol-26738,,,,,,,
Sol-26739,,,,,,,
Sol-26740,,,,,,,
Sol-26741,,,,,,,
Sol-26742,,,,,,,
Sol-26743,,,,,,,
Sol-26744,,,,,,,
Sol-26745,,,,,,,
Sol-26746,,,,,,,
Sol-26747,,,,,,,
Sol-26748,,,,,,,
Sol-26749,,,,,,,
Sol-26750,,,,,,,
Sol-26751,,,,,,,
Sol-26752,,,,,,,
Sol-26753,,,,,,,
Sol-26754,,,,,,,
Sol-26755,,,,,,,
Sol-26756,,,,,,,
Sol-26757,,,,,,,
Sol-26758,,,,,,,
Sol-26759,,,,,,,
Sol-26760,,,,,,,
Sol-26761,,,,,,,
Sol-26762,,,,,,,
Sol-26763,,,,,,,
Sol-26764,,,,,,,
Sol-26765,,,,,,,
Sol-26766,,,,,,,
Sol-26767,,,,,,,
Sol-26768,,,,,,,
Sol-26769,,,,,,,
Sol-26770,,,,,,,
Sol-26771,,,,,,,
Sol-26772,,,,,,,
Sol-26773,,,,,,,
Sol-26774,,,,,,,
Sol-26775,,,,,,,
Sol-26776,,,,,,,
Sol-26777,,,,,,,
Sol-26778,,,,,,,
Sol-26779,,,,,,,
Sol-26780,,,,,,,
Sol-26781,,,,,,,
Sol-26782,,,,,,,
Sol-26783,,,,,,,
Sol-26784,,,,,,,
Sol-26785,,,,,,,
Sol-26786,,,,,,,
Sol-26787,,,,,,,
Sol-26788,,,,,,,
Sol-26789,,,,,,,
Sol-26790,,,,,,,
Sol-26791,,,,,,,
Sol-26792,,,,,,,
Sol-26793,,,,,,,
Sol-26794,,,,,,,
Sol-26795,,,,,,,
Sol-26796,,,,,,,
Sol-26797,,,,,,,
Sol-26798,,,,,,,
Sol-26799,,,,,,,
Sol-26800,,,,,,,
Sol-26801,,,,,,,
Sol-26802,,,,,,,
Sol-26803,,,,,,,
Sol-26804,,,,,,,
Sol-26805,,,,,,,
Sol-26806,,,,,,,
Sol-26807,,,,,,,
Sol-26808,,,,,,,
Sol-26809,,,,,,,
Sol-26810,,,,,,,
Sol-26811,,,,,,,
Sol-26812,,,,,,,
Sol-26813,,,,,,,
Sol-26814,,,,,,,
Sol-26815,,,,,,,
Sol-26816,,,,,,,
Sol-26817,,,,,,,
Sol-26818,,,,,,,
Sol-26819,,,,,,,
Sol-26820,,,,,,,
Sol-26821,,,,,,,
Sol-26822,,,,,,,
Sol-26823,,,,,,,
Sol-26824,,,,,,,
Sol-26825,,,,,,,
Sol-26826,,,,,,,
Sol-26827,,,,,,,
Sol-26828,,,,,,,
Sol-26829,,,,,,,
Sol-26830,,,,,,,
Sol-26831,,,,,,,
Sol-26832,,,,,,,
Sol-26833,,,,,,,
Sol-26834,,,,,,,
Sol-26835,,,,,,,
Sol-26836,,,,,,,
Sol-26837,,,,,,,
Sol-26838,,,,,,,
Sol-26839,,,,,,,
Sol-26840,,,,,,,
Sol-26841,,,,,,,
Sol-26842,,,,,,,
Sol-26843,,,,,,,
Sol-26844,,,,,,,
Sol-26845,,,,,,,
Sol-26846,,,,,,,
Sol-26847,,,,,,,
Sol-26848,,,,,,,
Sol-26849,,,,,,,
Sol-26850,,,,,,,
Sol-26851,,,,,,,
Sol-26852,,,,,,,
Sol-26853,,,,,,,
Sol-26854,,,,,,,
Sol-26855,,,,,,,
Sol-26856,,,,,,,
Sol-26857,,,,,,,
Sol-26858,,,,,,,
Sol-26859,,,,,,,
Sol-26860,,,,,,,
Sol-26861,,,,,,,
Sol-26862,,,,,,,
Sol-26863,,,,,,,
Sol-26864,,,,,,,
Sol-26865,,,,,,,
Sol-26866,,,,,,,
Sol-26867,,,,,,,
Sol-26868,,,,,,,
Sol-26869,,,,,,,
Sol-26870,,,,,,,
Sol-26871,,,,,,,
Sol-26872,,,,,,,
Sol-26873,,,,,,,
Sol-26874,,,,,,,
Sol-26875,,,,,,,
Sol-26876,,,,,,,
Sol-26877,,,,,,,
Sol-26878,,,,,,,
Sol-26879,,,,,,,
Sol-26880,,,,,,,
Sol-26881,,,,,,,
Sol-26882,,,,,,,
Sol-26883,,,,,,,
Sol-26884,,,,,,,
Sol-26885,,,,,,,
Sol-26886,,,,,,,
Sol-26887,,,,,,,
Sol-26888,,,,,,,
Sol-26889,,,,,,,
Sol-26890,,,,,,,
Sol-26891,,,,,,,
Sol-26892,,,,,,,
Sol-26893,,,,,,,
Sol-26894,,,,,,,
Sol-26895,,,,,,,
Sol-26896,,,,,,,
Sol-26897,,,,,,,
Sol-26898,,,,,,,
Sol-26899,,,,,,,
Sol-26900,,,,,,,
Sol-26901,,,,,,,
Sol-26902,,,,,,,
Sol-26903,,,,,,,
Sol-26904,,,,,,,
Sol-26905,,,,,,,
Sol-26906,,,,,,,
Sol-26907,,,,,,,
Sol-26908,,,,,,,
Sol-26909,,,,,,,
Sol-26910,,,,,,,
Sol-26911,,,,,,,
Sol-26912,,,,,,,
Sol-26913,,,,,,,
Sol-26914,,,,,,,
Sol-26915,,,,,,,
Sol-26916,,,,,,,
Sol-26917,,,,,,,
Sol-26918,,,,,,,
Sol-26919,,,,,,,
Sol-26920,,,,,,,
Sol-26921,,,,,,,
Sol-26922,,,,,,,
Sol-26923,,,,,,,
Sol-26924,,,,,,,
Sol-26925,,,,,,,
Sol-26926,,,,,,,
Sol-26927,,,,,,,
Sol-26928,,,,,,,
Sol-26929,,,,,,,
Sol-26930,,,,,,,
Sol-26931,,,,,,,
Sol-26932,,,,,,,
Sol-26933,,,,,,,
Sol-26934,,,,,,,
Sol-26935,,,,,,,
Sol-26936,,,,,,,
Sol-26937,,,,,,,
Sol-26938,,,,,,,
Sol-26939,,,,,,,
Sol-26940,,,,,,,
Sol-26941,,,,,,,
Sol-26942,,,,,,,
Sol-26943,,,,,,,
Sol-26944,,,,,,,
Sol-26945,,,,,,,
Sol-26946,,,,,,,
Sol-26947,,,,,,,
Sol-26948,,,,,,,
Sol-26949,,,,,,,
Sol-26950,,,,,,,
Sol-26951,,,,,,,
Sol-26952,,,,,,,
Sol-26953,,,,,,,
Sol-26954,,,,,,,
Sol-26955,,,,,,,
Sol-26956,,,,,,,
Sol-26957,,,,,,,
Sol-26958,,,,,,,
Sol-26959,,,,,,,
Sol-26960,,,,,,,
Sol-26961,,,,,,,
Sol-26962,,,,,,,
Sol-26963,,,,,,,
Sol-26964,,,,,,,
Sol-26965,,,,,,,
Sol-26966,,,,,,,
Sol-26967,,,,,,,
Sol-26968,,,,,,,
Sol-26969,,,,,,,
Sol-26970,,,,,,,
Sol-26971,,,,,,,
Sol-26972,,,,,,,
Sol-26973,,,,,,,
Sol-26974,,,,,,,
Sol-26975,,,,,,,
Sol-26976,,,,,,,
Sol-26977,,,,,,,
Sol-26978,,,,,,,
Sol-26979,,,,,,,
Sol-26980,,,,,,,
Sol-26981,,,,,,,
Sol-26982,,,,,,,
Sol-26983,,,,,,,
Sol-26984,,,,,,,
Sol-26985,,,,,,,
Sol-26986,,,,,,,
Sol-26987,,,,,,,
Sol-26988,,,,,,,
Sol-26989,,,,,,,
Sol-26990,,,,,,,
Sol-26991,,,,,,,
Sol-26992,,,,,,,
Sol-26993,,,,,,,
Sol-26994,,,,,,,
Sol-26995,,,,,,,
Sol-26996,,,,,,,
Sol-26997,,,,,,,
Sol-26998,,,,,,,
Sol-26999,,,,,,,
Sol-27000,,,,,,,
Sol-27001,,,,,,,
Sol-27002,,,,,,,
Sol-27003,,,,,,,
Sol-27004,,,,,,,
Sol-27005,,,,,,,
Sol-27006,,,,,,,
Sol-27007,,,,,,,
Sol-27008,,,,,,,
Sol-27009,,,,,,,
Sol-27010,,,,,,,
Sol-27011,,,,,,,
Sol-27012,,,,,,,
Sol-27013,,,,,,,
Sol-27014,,,,,,,
Sol-27015,,,,,,,
Sol-27016,,,,,,,
Sol-27017,,,,,,,
Sol-27018,,,,,,,
Sol-27019,,,,,,,
Sol-27020,,,,,,,
Sol-27021,,,,,,,
Sol-27022,,,,,,,
Sol-27023,,,,,,,
Sol-27024,,,,,,,
Sol-27025,,,,,,,
Sol-27026,,,,,,,
Sol-27027,,,,,,,
Sol-27028,,,,,,,
Sol-27029,,,,,,,
Sol-27030,,,,,,,
Sol-27031,,,,,,,
Sol-27032,,,,,,,
Sol-27033,,,,,,,
Sol-27034,,,,,,,
Sol-27035,,,,,,,
Sol-27036,,,,,,,
Sol-27037,,,,,,,
Sol-27038,,,,,,,
Sol-27039,,,,,,,
Sol-27040,,,,,,,
Sol-27041,,,,,,,
Sol-27042,,,,,,,
Sol-27043,,,,,,,
Sol-27044,,,,,,,
Sol-27045,,,,,,,
Sol-27046,,,,,,,
Sol-27047,,,,,,,
Sol-27048,,,,,,,
Sol-27049,,,,,,,
Sol-27050,,,,,,,
Sol-27051,,,,,,,
Sol-27052,,,,,,,
Sol-27053,,,,,,,
Sol-27054,,,,,,,
Sol-27055,,,,,,,
Sol-27056,,,,,,,
Sol-27057,,,,,,,
Sol-27058,,,,,,,
Sol-27059,,,,,,,
Sol-27060,,,,,,,
Sol-27061,,,,,,,
Sol-27062,,,,,,,
Sol-27063,,,,,,,
Sol-27064,,,,,,,
Sol-27065,,,,,,,
Sol-27066,,,,,,,
Sol-27067,,,,,,,
Sol-27068,,,,,,,
Sol-27069,,,,,,,
Sol-27070,,,,,,,
Sol-27071,,,,,,,
Sol-27072,,,,,,,
Sol-27073,,,,,,,
Sol-27074,,,,,,,
Sol-27075,,,,,,,
Sol-27076,,,,,,,
Sol-27077,,,,,,,
Sol-27078,,,,,,,
Sol-27079,,,,,,,
Sol-27080,,,,,,,
Sol-27081,,,,,,,
Sol-27082,,,,,,,
Sol-27083,,,,,,,
Sol-27084,,,,,,,
Sol-27085,,,,,,,
Sol-27086,,,,,,,
Sol-27087,,,,,,,
Sol-27088,,,,,,,
Sol-27089,,,,,,,
Sol-27090,,,,,,,
Sol-27091,,,,,,,
Sol-27092,,,,,,,
Sol-27093,,,,,,,
Sol-27094,,,,,,,
Sol-27095,,,,,,,
Sol-27096,,,,,,,
Sol-27097,,,,,,,
Sol-27098,,,,,,,
Sol-27099,,,,,,,
Sol-27100,,,,,,,
Sol-27101,,,,,,,
Sol-27102,,,,,,,
Sol-27103,,,,,,,
Sol-27104,,,,,,,
Sol-27105,,,,,,,
Sol-27106,,,,,,,
Sol-27107,,,,,,,
Sol-27108,,,,,,,
Sol-27109,,,,,,,
Sol-27110,,,,,,,
Sol-27111,,,,,,,
Sol-27112,,,,,,,
Sol-27113,,,,,,,
Sol-27114,,,,,,,
Sol-27115,,,,,,,
Sol-27116,,,,,,,
Sol-27117,,,,,,,
Sol-27118,,,,,,,
Sol-27119,,,,,,,
Sol-27120,,,,,,,
Sol-27121,,,,,,,
Sol-27122,,,,,,,
Sol-27123,,,,,,,
Sol-27124,,,,,,,
Sol-27125,,,,,,,
Sol-27126,,,,,,,
Sol-27127,,,,,,,
Sol-27128,,,,,,,
Sol-27129,,,,,,,
Sol-27130,,,,,,,
Sol-27131,,,,,,,
Sol-27132,,,,,,,
Sol-27133,,,,,,,
Sol-27134,,,,,,,
Sol-27135,,,,,,,
Sol-27136,,,,,,,
Sol-27137,,,,,,,
Sol-27138,,,,,,,
Sol-27139,,,,,,,
Sol-27140,,,,,,,
Sol-27141,,,,,,,
Sol-27142,,,,,,,
Sol-27143,,,,,,,
Sol-27144,,,,,,,
Sol-27145,,,,,,,
Sol-27146,,,,,,,
Sol-27147,,,,,,,
Sol-27148,,,,,,,
Sol-27149,,,,,,,
Sol-27150,,,,,,,
Sol-27151,,,,,,,
Sol-27152,,,,,,,
Sol-27153,,,,,,,
Sol-27154,,,,,,,
Sol-27155,,,,,,,
Sol-27156,,,,,,,
Sol-27157,,,,,,,
Sol-27158,,,,,,,
Sol-27159,,,,,,,
Sol-27160,,,,,,,
Sol-27161,,,,,,,
Sol-27162,,,,,,,
Sol-27163,,,,,,,
Sol-27164,,,,,,,
Sol-27165,,,,,,,
Sol-27166,,,,,,,
Sol-27167,,,,,,,
Sol-27168,,,,,,,
Sol-27169,,,,,,,
Sol-27170,,,,,,,
Sol-27171,,,,,,,
Sol-27172,,,,,,,
Sol-27173,,,,,,,
Sol-27174,,,,,,,
Sol-27175,,,,,,,
Sol-27176,,,,,,,
Sol-27177,,,,,,,
Sol-27178,,,,,,,
Sol-27179,,,,,,,
Sol-27180,,,,,,,
Sol-27181,,,,,,,
Sol-27182,,,,,,,
Sol-27183,,,,,,,
Sol-27184,,,,,,,
Sol-27185,,,,,,,
Sol-27186,,,,,,,
Sol-27187,,,,,,,
Sol-27188,,,,,,,
Sol-27189,,,,,,,
Sol-27190,,,,,,,
Sol-27191,,,,,,,
Sol-27192,,,,,,,
Sol-27193,,,,,,,
Sol-27194,,,,,,,
Sol-27195,,,,,,,
Sol-27196,,,,,,,
Sol-27197,,,,,,,
Sol-27198,,,,,,,
Sol-27199,,,,,,,
Sol-27200,,,,,,,
Sol-27201,,,,,,,
Sol-27202,,,,,,,
Sol-27203,,,,,,,
Sol-27204,,,,,,,
Sol-27205,,,,,,,
Sol-27206,,,,,,,
Sol-27207,,,,,,,
Sol-27208,,,,,,,
Sol-27209,,,,,,,
Sol-27210,,,,,,,
Sol-27211,,,,,,,
Sol-27212,,,,,,,
Sol-27213,,,,,,,
Sol-27214,,,,,,,
Sol-27215,,,,,,,
Sol-27216,,,,,,,
Sol-27217,,,,,,,
Sol-27218,,,,,,,
Sol-27219,,,,,,,
Sol-27220,,,,,,,
Sol-27221,,,,,,,
Sol-27222,,,,,,,
Sol-27223,,,,,,,
Sol-27224,,,,,,,
Sol-27225,,,,,,,
Sol-27226,,,,,,,
Sol-27227,,,,,,,
Sol-27228,,,,,,,
Sol-27229,,,,,,,
Sol-27230,,,,,,,
Sol-27231,,,,,,,
Sol-27232,,,,,,,
Sol-27233,,,,,,,
Sol-27234,,,,,,,
Sol-27235,,,,,,,
Sol-27236,,,,,,,
Sol-27237,,,,,,,
Sol-27238,,,,,,,
Sol-27239,,,,,,,
Sol-27240,,,,,,,
Sol-27241,,,,,,,
Sol-27242,,,,,,,
Sol-27243,,,,,,,
Sol-27244,,,,,,,
Sol-27245,,,,,,,
Sol-27246,,,,,,,
Sol-27247,,,,,,,
Sol-27248,,,,,,,
Sol-27249,,,,,,,
Sol-27250,,,,,,,
Sol-27251,,,,,,,
Sol-27252,,,,,,,
Sol-27253,,,,,,,
Sol-27254,,,,,,,
Sol-27255,,,,,,,
Sol-27256,,,,,,,
Sol-27257,,,,,,,
Sol-27258,,,,,,,
Sol-27259,,,,,,,
Sol-27260,,,,,,,
Sol-27261,,,,,,,
Sol-27262,,,,,,,
Sol-27263,,,,,,,
Sol-27264,,,,,,,
Sol-27265,,,,,,,
Sol-27266,,,,,,,
Sol-27267,,,,,,,
Sol-27268,,,,,,,
Sol-27269,,,,,,,
Sol-27270,,,,,,,
Sol-27271,,,,,,,
Sol-27272,,,,,,,
Sol-27273,,,,,,,
Sol-27274,,,,,,,
Sol-27275,,,,,,,
Sol-27276,,,,,,,
Sol-27277,,,,,,,
Sol-27278,,,,,,,
Sol-27279,,,,,,,
Sol-27280,,,,,,,
Sol-27281,,,,,,,
Sol-27282,,,,,,,
Sol-27283,,,,,,,
Sol-27284,,,,,,,
Sol-27285,,,,,,,
Sol-27286,,,,,,,
Sol-27287,,,,,,,
Sol-27288,,,,,,,
Sol-27289,,,,,,,
Sol-27290,,,,,,,
Sol-27291,,,,,,,
Sol-27292,,,,,,,
Sol-27293,,,,,,,
Sol-27294,,,,,,,
Sol-27295,,,,,,,
Sol-27296,,,,,,,
Sol-27297,,,,,,,
Sol-27298,,,,,,,
Sol-27299,,,,,,,
Sol-27300,,,,,,,
Sol-27301,,,,,,,
Sol-27302,,,,,,,
Sol-27303,,,,,,,
Sol-27304,,,,,,,
Sol-27305,,,,,,,
Sol-27306,,,,,,,
Sol-27307,,,,,,,
Sol-27308,,,,,,,
Sol-27309,,,,,,,
Sol-27310,,,,,,,
Sol-27311,,,,,,,
Sol-27312,,,,,,,
Sol-27313,,,,,,,
Sol-27314,,,,,,,
Sol-27315,,,,,,,
Sol-27316,,,,,,,
Sol-27317,,,,,,,
Sol-27318,,,,,,,
Sol-27319,,,,,,,
Sol-27320,,,,,,,
Sol-27321,,,,,,,
Sol-27322,,,,,,,
Sol-27323,,,,,,,
Sol-27324,,,,,,,
Sol-27325,,,,,,,
Sol-27326,,,,,,,
Sol-27327,,,,,,,
Sol-27328,,,,,,,
Sol-27329,,,,,,,
Sol-27330,,,,,,,
Sol-27331,,,,,,,
Sol-27332,,,,,,,
Sol-27333,,,,,,,
Sol-27334,,,,,,,
Sol-27335,,,,,,,
Sol-27336,,,,,,,
Sol-27337,,,,,,,
Sol-27338,,,,,,,
Sol-27339,,,,,,,
Sol-27340,,,,,,,
Sol-27341,,,,,,,
Sol-27342,,,,,,,
Sol-27343,,,,,,,
Sol-27344,,,,,,,
Sol-27345,,,,,,,
Sol-27346,,,,,,,
Sol-27347,,,,,,,
Sol-27348,,,,,,,
Sol-27349,,,,,,,
Sol-27350,,,,,,,
Sol-27351,,,,,,,
Sol-27352,,,,,,,
Sol-27353,,,,,,,
Sol-27354,,,,,,,
Sol-27355,,,,,,,
Sol-27356,,,,,,,
Sol-27357,,,,,,,
Sol-27358,,,,,,,
Sol-27359,,,,,,,
Sol-27360,,,,,,,
Sol-27361,,,,,,,
Sol-27362,,,,,,,
Sol-27363,,,,,,,
Sol-27364,,,,,,,
Sol-27365,,,,,,,
Sol-27366,,,,,,,
Sol-27367,,,,,,,
Sol-27368,,,,,,,
Sol-27369,,,,,,,
Sol-27370,,,,,,,
Sol-27371,,,,,,,
Sol-27372,,,,,,,
Sol-27373,,,,,,,
Sol-27374,,,,,,,
Sol-27375,,,,,,,
Sol-27376,,,,,,,
Sol-27377,,,,,,,
Sol-27378,,,,,,,
Sol-27379,,,,,,,
Sol-27380,,,,,,,
Sol-27381,,,,,,,
Sol-27382,,,,,,,
Sol-27383,,,,,,,
Sol-27384,,,,,,,
Sol-27385,,,,,,,
Sol-27386,,,,,,,
Sol-27387,,,,,,,
Sol-27388,,,,,,,
Sol-27389,,,,,,,
Sol-27390,,,,,,,
Sol-27391,,,,,,,
Sol-27392,,,,,,,
Sol-27393,,,,,,,
Sol-27394,,,,,,,
Sol-27395,,,,,,,
Sol-27396,,,,,,,
Sol-27397,,,,,,,
Sol-27398,,,,,,,
Sol-27399,,,,,,,
Sol-27400,,,,,,,
Sol-27401,,,,,,,
Sol-27402,,,,,,,
Sol-27403,,,,,,,
Sol-27404,,,,,,,
Sol-27405,,,,,,,
Sol-27406,,,,,,,
Sol-27407,,,,,,,
Sol-27408,,,,,,,
Sol-27409,,,,,,,
Sol-27410,,,,,,,
Sol-27411,,,,,,,
Sol-27412,,,,,,,
Sol-27413,,,,,,,
Sol-27414,,,,,,,
Sol-27415,,,,,,,
Sol-27416,,,,,,,
Sol-27417,,,,,,,
Sol-27418,,,,,,,
Sol-27419,,,,,,,
Sol-27420,,,,,,,
Sol-27421,,,,,,,
Sol-27422,,,,,,,
Sol-27423,,,,,,,
Sol-27424,,,,,,,
Sol-27425,,,,,,,
Sol-27426,,,,,,,
Sol-27427,,,,,,,
Sol-27428,,,,,,,
Sol-27429,,,,,,,
Sol-27430,,,,,,,
Sol-27431,,,,,,,
Sol-27432,,,,,,,
Sol-27433,,,,,,,
Sol-27434,,,,,,,
Sol-27435,,,,,,,
Sol-27436,,,,,,,
Sol-27437,,,,,,,
Sol-27438,,,,,,,
Sol-27439,,,,,,,
Sol-27440,,,,,,,
Sol-27441,,,,,,,
Sol-27442,,,,,,,
Sol-27443,,,,,,,
Sol-27444,,,,,,,
Sol-27445,,,,,,,
Sol-27446,,,,,,,
Sol-27447,,,,,,,
Sol-27448,,,,,,,
Sol-27449,,,,,,,
Sol-27450,,,,,,,
Sol-27451,,,,,,,
Sol-27452,,,,,,,
Sol-27453,,,,,,,
Sol-27454,,,,,,,
Sol-27455,,,,,,,
Sol-27456,,,,,,,
Sol-27457,,,,,,,
Sol-27458,,,,,,,
Sol-27459,,,,,,,
Sol-27460,,,,,,,
Sol-27461,,,,,,,
Sol-27462,,,,,,,
Sol-27463,,,,,,,
Sol-27464,,,,,,,
Sol-27465,,,,,,,
Sol-27466,,,,,,,
Sol-27467,,,,,,,
Sol-27468,,,,,,,
Sol-27469,,,,,,,
Sol-27470,,,,,,,
Sol-27471,,,,,,,
Sol-27472,,,,,,,
Sol-27473,,,,,,,
Sol-27474,,,,,,,
Sol-27475,,,,,,,
Sol-27476,,,,,,,
Sol-27477,,,,,,,
Sol-27478,,,,,,,
Sol-27479,,,,,,,
Sol-27480,,,,,,,
Sol-27481,,,,,,,
Sol-27482,,,,,,,
Sol-27483,,,,,,,
Sol-27484,,,,,,,
Sol-27485,,,,,,,
Sol-27486,,,,,,,
Sol-27487,,,,,,,
Sol-27488,,,,,,,
Sol-27489,,,,,,,
Sol-27490,,,,,,,
Sol-27491,,,,,,,
Sol-27492,,,,,,,
Sol-27493,,,,,,,
Sol-27494,,,,,,,
Sol-27495,,,,,,,
Sol-27496,,,,,,,
Sol-27497,,,,,,,
Sol-27498,,,,,,,
Sol-27499,,,,,,,
Sol-27500,,,,,,,
Sol-27501,,,,,,,
Sol-27502,,,,,,,
Sol-27503,,,,,,,
Sol-27504,,,,,,,
Sol-27505,,,,,,,
Sol-27506,,,,,,,
Sol-27507,,,,,,,
Sol-27508,,,,,,,
Sol-27509,,,,,,,
Sol-27510,,,,,,,
Sol-27511,,,,,,,
Sol-27512,,,,,,,
Sol-27513,,,,,,,
Sol-27514,,,,,,,
Sol-27515,,,,,,,
Sol-27516,,,,,,,
Sol-27517,,,,,,,
Sol-27518,,,,,,,
Sol-27519,,,,,,,
Sol-27520,,,,,,,
Sol-27521,,,,,,,
Sol-27522,,,,,,,
Sol-27523,,,,,,,
Sol-27524,,,,,,,
Sol-27525,,,,,,,
Sol-27526,,,,,,,
Sol-27527,,,,,,,
Sol-27528,,,,,,,
Sol-27529,,,,,,,
Sol-27530,,,,,,,
Sol-27531,,,,,,,
Sol-27532,,,,,,,
Sol-27533,,,,,,,
Sol-27534,,,,,,,
Sol-27535,,,,,,,
Sol-27536,,,,,,,
Sol-27537,,,,,,,
Sol-27538,,,,,,,
Sol-27539,,,,,,,
Sol-27540,,,,,,,
Sol-27541,,,,,,,
Sol-27542,,,,,,,
Sol-27543,,,,,,,
Sol-27544,,,,,,,
Sol-27545,,,,,,,
Sol-27546,,,,,,,
Sol-27547,,,,,,,
Sol-27548,,,,,,,
Sol-27549,,,,,,,
Sol-27550,,,,,,,
Sol-27551,,,,,,,
Sol-27552,,,,,,,
Sol-27553,,,,,,,
Sol-27554,,,,,,,
Sol-27555,,,,,,,
Sol-27556,,,,,,,
Sol-27557,,,,,,,
Sol-27558,,,,,,,
Sol-27559,,,,,,,
Sol-27560,,,,,,,
Sol-27561,,,,,,,
Sol-27562,,,,,,,
Sol-27563,,,,,,,
Sol-27564,,,,,,,
Sol-27565,,,,,,,
Sol-27566,,,,,,,
Sol-27567,,,,,,,
Sol-27568,,,,,,,
Sol-27569,,,,,,,
Sol-27570,,,,,,,
Sol-27571,,,,,,,
Sol-27572,,,,,,,
Sol-27573,,,,,,,
Sol-27574,,,,,,,
Sol-27575,,,,,,,
Sol-27576,,,,,,,
Sol-27577,,,,,,,
Sol-27578,,,,,,,
Sol-27579,,,,,,,
Sol-27580,,,,,,,
Sol-27581,,,,,,,
Sol-27582,,,,,,,
Sol-27583,,,,,,,
Sol-27584,,,,,,,
Sol-27585,,,,,,,
Sol-27586,,,,,,,
Sol-27587,,,,,,,
Sol-27588,,,,,,,
Sol-27589,,,,,,,
Sol-27590,,,,,,,
Sol-27591,,,,,,,
Sol-27592,,,,,,,
Sol-27593,,,,,,,
Sol-27594,,,,,,,
Sol-27595,,,,,,,
Sol-27596,,,,,,,
Sol-27597,,,,,,,
Sol-27598,,,,,,,
Sol-27599,,,,,,,
Sol-27600,,,,,,,
Sol-27601,,,,,,,
Sol-27602,,,,,,,
Sol-27603,,,,,,,
Sol-27604,,,,,,,
Sol-27605,,,,,,,
Sol-27606,,,,,,,
Sol-27607,,,,,,,
Sol-27608,,,,,,,
Sol-27609,,,,,,,
Sol-27610,,,,,,,
Sol-27611,,,,,,,
Sol-27612,,,,,,,
Sol-27613,,,,,,,
Sol-27614,,,,,,,
Sol-27615,,,,,,,
Sol-27616,,,,,,,
Sol-27617,,,,,,,
Sol-27618,,,,,,,
Sol-27619,,,,,,,
Sol-27620,,,,,,,
Sol-27621,,,,,,,
Sol-27622,,,,,,,
Sol-27623,,,,,,,
Sol-27624,,,,,,,
Sol-27625,,,,,,,
Sol-27626,,,,,,,
Sol-27627,,,,,,,
Sol-27628,,,,,,,
Sol-27629,,,,,,,
Sol-27630,,,,,,,
Sol-27631,,,,,,,
Sol-27632,,,,,,,
Sol-27633,,,,,,,
Sol-27634,,,,,,,
Sol-27635,,,,,,,
Sol-27636,,,,,,,
Sol-27637,,,,,,,
Sol-27638,,,,,,,
Sol-27639,,,,,,,
Sol-27640,,,,,,,
Sol-27641,,,,,,,
Sol-27642,,,,,,,
Sol-27643,,,,,,,
Sol-27644,,,,,,,
Sol-27645,,,,,,,
Sol-27646,,,,,,,
Sol-27647,,,,,,,
Sol-27648,,,,,,,
Sol-27649,,,,,,,
Sol-27650,,,,,,,
Sol-27651,,,,,,,
Sol-27652,,,,,,,
Sol-27653,,,,,,,
Sol-27654,,,,,,,
Sol-27655,,,,,,,
Sol-27656,,,,,,,
Sol-27657,,,,,,,
Sol-27658,,,,,,,
Sol-27659,,,,,,,
Sol-27660,,,,,,,
Sol-27661,,,,,,,
Sol-27662,,,,,,,
Sol-27663,,,,,,,
Sol-27664,,,,,,,
Sol-27665,,,,,,,
Sol-27666,,,,,,,
Sol-27667,,,,,,,
Sol-27668,,,,,,,
Sol-27669,,,,,,,
Sol-27670,,,,,,,
Sol-27671,,,,,,,
Sol-27672,,,,,,,
Sol-27673,,,,,,,
Sol-27674,,,,,,,
Sol-27675,,,,,,,
Sol-27676,,,,,,,
Sol-27677,,,,,,,
Sol-27678,,,,,,,
Sol-27679,,,,,,,
Sol-27680,,,,,,,
Sol-27681,,,,,,,
Sol-27682,,,,,,,
Sol-27683,,,,,,,
Sol-27684,,,,,,,
Sol-27685,,,,,,,
Sol-27686,,,,,,,
Sol-27687,,,,,,,
Sol-27688,,,,,,,
Sol-27689,,,,,,,
Sol-27690,,,,,,,
Sol-27691,,,,,,,
Sol-27692,,,,,,,
Sol-27693,,,,,,,
Sol-27694,,,,,,,
Sol-27695,,,,,,,
Sol-27696,,,,,,,
Sol-27697,,,,,,,
Sol-27698,,,,,,,
Sol-27699,,,,,,,
Sol-27700,,,,,,,
Sol-27701,,,,,,,
Sol-27702,,,,,,,
Sol-27703,,,,,,,
Sol-27704,,,,,,,
Sol-27705,,,,,,,
Sol-27706,,,,,,,
Sol-27707,,,,,,,
Sol-27708,,,,,,,
Sol-27709,,,,,,,
Sol-27710,,,,,,,
Sol-27711,,,,,,,
Sol-27712,,,,,,,
Sol-27713,,,,,,,
Sol-27714,,,,,,,
Sol-27715,,,,,,,
Sol-27716,,,,,,,
Sol-27717,,,,,,,
Sol-27718,,,,,,,
Sol-27719,,,,,,,
Sol-27720,,,,,,,
Sol-27721,,,,,,,
Sol-27722,,,,,,,
Sol-27723,,,,,,,
Sol-27724,,,,,,,
Sol-27725,,,,,,,
Sol-27726,,,,,,,
Sol-27727,,,,,,,
Sol-27728,,,,,,,
Sol-27729,,,,,,,
Sol-27730,,,,,,,
Sol-27731,,,,,,,
Sol-27732,,,,,,,
Sol-27733,,,,,,,
Sol-27734,,,,,,,
Sol-27735,,,,,,,
Sol-27736,,,,,,,
Sol-27737,,,,,,,
Sol-27738,,,,,,,
Sol-27739,,,,,,,
Sol-27740,,,,,,,
Sol-27741,,,,,,,
Sol-27742,,,,,,,
Sol-27743,,,,,,,
Sol-27744,,,,,,,
Sol-27745,,,,,,,
Sol-27746,,,,,,,
Sol-27747,,,,,,,
Sol-27748,,,,,,,
Sol-27749,,,,,,,
Sol-27750,,,,,,,
Sol-27751,,,,,,,
Sol-27752,,,,,,,
Sol-27753,,,,,,,
Sol-27754,,,,,,,
Sol-27755,,,,,,,
Sol-27756,,,,,,,
Sol-27757,,,,,,,
Sol-27758,,,,,,,
Sol-27759,,,,,,,
Sol-27760,,,,,,,
Sol-27761,,,,,,,
Sol-27762,,,,,,,
Sol-27763,,,,,,,
Sol-27764,,,,,,,
Sol-27765,,,,,,,
Sol-27766,,,,,,,
Sol-27767,,,,,,,
Sol-27768,,,,,,,
Sol-27769,,,,,,,
Sol-27770,,,,,,,
Sol-27771,,,,,,,
Sol-27772,,,,,,,
Sol-27773,,,,,,,
Sol-27774,,,,,,,
Sol-27775,,,,,,,
Sol-27776,,,,,,,
Sol-27777,,,,,,,
Sol-27778,,,,,,,
Sol-27779,,,,,,,
Sol-27780,,,,,,,
Sol-27781,,,,,,,
Sol-27782,,,,,,,
Sol-27783,,,,,,,
Sol-27784,,,,,,,
Sol-27785,,,,,,,
Sol-27786,,,,,,,
Sol-27787,,,,,,,
Sol-27788,,,,,,,
Sol-27789,,,,,,,
Sol-27790,,,,,,,
Sol-27791,,,,,,,
Sol-27792,,,,,,,
Sol-27793,,,,,,,
Sol-27794,,,,,,,
Sol-27795,,,,,,,
Sol-27796,,,,,,,
Sol-27797,,,,,,,
Sol-27798,,,,,,,
Sol-27799,,,,,,,
Sol-27800,,,,,,,
Sol-27801,,,,,,,
Sol-27802,,,,,,,
Sol-27803,,,,,,,
Sol-27804,,,,,,,
Sol-27805,,,,,,,
Sol-27806,,,,,,,
Sol-27807,,,,,,,
Sol-27808,,,,,,,
Sol-27809,,,,,,,
Sol-27810,,,,,,,
Sol-27811,,,,,,,
Sol-27812,,,,,,,
Sol-27813,,,,,,,
Sol-27814,,,,,,,
Sol-27815,,,,,,,
Sol-27816,,,,,,,
Sol-27817,,,,,,,
Sol-27818,,,,,,,
Sol-27819,,,,,,,
Sol-27820,,,,,,,
Sol-27821,,,,,,,
Sol-27822,,,,,,,
Sol-27823,,,,,,,
Sol-27824,,,,,,,
Sol-27825,,,,,,,
Sol-27826,,,,,,,
Sol-27827,,,,,,,
Sol-27828,,,,,,,
Sol-27829,,,,,,,
Sol-27830,,,,,,,
Sol-27831,,,,,,,
Sol-27832,,,,,,,
Sol-27833,,,,,,,
Sol-27834,,,,,,,
Sol-27835,,,,,,,
Sol-27836,,,,,,,
Sol-27837,,,,,,,
Sol-27838,,,,,,,
Sol-27839,,,,,,,
Sol-27840,,,,,,,
Sol-27841,,,,,,,
Sol-27842,,,,,,,
Sol-27843,,,,,,,
Sol-27844,,,,,,,
Sol-27845,,,,,,,
Sol-27846,,,,,,,
Sol-27847,,,,,,,
Sol-27848,,,,,,,
Sol-27849,,,,,,,
Sol-27850,,,,,,,
Sol-27851,,,,,,,
Sol-27852,,,,,,,
Sol-27853,,,,,,,
Sol-27854,,,,,,,
Sol-27855,,,,,,,
Sol-27856,,,,,,,
Sol-27857,,,,,,,
Sol-27858,,,,,,,
Sol-27859,,,,,,,
Sol-27860,,,,,,,
Sol-27861,,,,,,,
Sol-27862,,,,,,,
Sol-27863,,,,,,,
Sol-27864,,,,,,,
Sol-27865,,,,,,,
Sol-27866,,,,,,,
Sol-27867,,,,,,,
Sol-27868,,,,,,,
Sol-27869,,,,,,,
Sol-27870,,,,,,,
Sol-27871,,,,,,,
Sol-27872,,,,,,,
Sol-27873,,,,,,,
Sol-27874,,,,,,,
Sol-27875,,,,,,,
Sol-27876,,,,,,,
Sol-27877,,,,,,,
Sol-27878,,,,,,,
Sol-27879,,,,,,,
Sol-27880,,,,,,,
Sol-27881,,,,,,,
Sol-27882,,,,,,,
Sol-27883,,,,,,,
Sol-27884,,,,,,,
Sol-27885,,,,,,,
Sol-27886,,,,,,,
Sol-27887,,,,,,,
Sol-27888,,,,,,,
Sol-27889,,,,,,,
Sol-27890,,,,,,,
Sol-27891,,,,,,,
Sol-27892,,,,,,,
Sol-27893,,,,,,,
Sol-27894,,,,,,,
Sol-27895,,,,,,,
Sol-27896,,,,,,,
Sol-27897,,,,,,,
Sol-27898,,,,,,,
Sol-27899,,,,,,,
Sol-27900,,,,,,,
Sol-27901,,,,,,,
Sol-27902,,,,,,,
Sol-27903,,,,,,,
Sol-27904,,,,,,,
Sol-27905,,,,,,,
Sol-27906,,,,,,,
Sol-27907,,,,,,,
Sol-27908,,,,,,,
Sol-27909,,,,,,,
Sol-27910,,,,,,,
Sol-27911,,,,,,,
Sol-27912,,,,,,,
Sol-27913,,,,,,,
Sol-27914,,,,,,,
Sol-27915,,,,,,,
Sol-27916,,,,,,,
Sol-27917,,,,,,,
Sol-27918,,,,,,,
Sol-27919,,,,,,,
Sol-27920,,,,,,,
Sol-27921,,,,,,,
Sol-27922,,,,,,,
Sol-27923,,,,,,,
Sol-27924,,,,,,,
Sol-27925,,,,,,,
Sol-27926,,,,,,,
Sol-27927,,,,,,,
Sol-27928,,,,,,,
Sol-27929,,,,,,,
Sol-27930,,,,,,,
Sol-27931,,,,,,,
Sol-27932,,,,,,,
Sol-27933,,,,,,,
Sol-27934,,,,,,,
Sol-27935,,,,,,,
Sol-27936,,,,,,,
Sol-27937,,,,,,,
Sol-27938,,,,,,,
Sol-27939,,,,,,,
Sol-27940,,,,,,,
Sol-27941,,,,,,,
Sol-27942,,,,,,,
Sol-27943,,,,,,,
Sol-27944,,,,,,,
Sol-27945,,,,,,,
Sol-27946,,,,,,,
Sol-27947,,,,,,,
Sol-27948,,,,,,,
Sol-27949,,,,,,,
Sol-27950,,,,,,,
Sol-27951,,,,,,,
Sol-27952,,,,,,,
Sol-27953,,,,,,,
Sol-27954,,,,,,,
Sol-27955,,,,,,,
Sol-27956,,,,,,,
Sol-27957,,,,,,,
Sol-27958,,,,,,,
Sol-27959,,,,,,,
Sol-27960,,,,,,,
Sol-27961,,,,,,,
Sol-27962,,,,,,,
Sol-27963,,,,,,,
Sol-27964,,,,,,,
Sol-27965,,,,,,,
Sol-27966,,,,,,,
Sol-27967,,,,,,,
Sol-27968,,,,,,,
Sol-27969,,,,,,,
Sol-27970,,,,,,,
Sol-27971,,,,,,,
Sol-27972,,,,,,,
Sol-27973,,,,,,,
Sol-27974,,,,,,,
Sol-27975,,,,,,,
Sol-27976,,,,,,,
Sol-27977,,,,,,,
Sol-27978,,,,,,,
Sol-27979,,,,,,,
Sol-27980,,,,,,,
Sol-27981,,,,,,,
Sol-27982,,,,,,,
Sol-27983,,,,,,,
Sol-27984,,,,,,,
Sol-27985,,,,,,,
Sol-27986,,,,,,,
Sol-27987,,,,,,,
Sol-27988,,,,,,,
Sol-27989,,,,,,,
Sol-27990,,,,,,,
Sol-27991,,,,,,,
Sol-27992,,,,,,,
Sol-27993,,,,,,,
Sol-27994,,,,,,,
Sol-27995,,,,,,,
Sol-27996,,,,,,,
Sol-27997,,,,,,,
Sol-27998,,,,,,,
Sol-27999,,,,,,,
Sol-28000,,,,,,,
Sol-28001,,,,,,,
Sol-28002,,,,,,,
Sol-28003,,,,,,,
Sol-28004,,,,,,,
Sol-28005,,,,,,,
Sol-28006,,,,,,,
Sol-28007,,,,,,,
Sol-28008,,,,,,,
Sol-28009,,,,,,,
Sol-28010,,,,,,,
Sol-28011,,,,,,,
Sol-28012,,,,,,,
Sol-28013,,,,,,,
Sol-28014,,,,,,,
Sol-28015,,,,,,,
Sol-28016,,,,,,,
Sol-28017,,,,,,,
Sol-28018,,,,,,,
Sol-28019,,,,,,,
Sol-28020,,,,,,,
Sol-28021,,,,,,,
Sol-28022,,,,,,,
Sol-28023,,,,,,,
Sol-28024,,,,,,,
Sol-28025,,,,,,,
Sol-28026,,,,,,,
Sol-28027,,,,,,,
Sol-28028,,,,,,,
Sol-28029,,,,,,,
Sol-28030,,,,,,,
Sol-28031,,,,,,,
Sol-28032,,,,,,,
Sol-28033,,,,,,,
Sol-28034,,,,,,,
Sol-28035,,,,,,,
Sol-28036,,,,,,,
Sol-28037,,,,,,,
Sol-28038,,,,,,,
Sol-28039,,,,,,,
Sol-28040,,,,,,,
Sol-28041,,,,,,,
Sol-28042,,,,,,,
Sol-28043,,,,,,,
Sol-28044,,,,,,,
Sol-28045,,,,,,,
Sol-28046,,,,,,,
Sol-28047,,,,,,,
Sol-28048,,,,,,,
Sol-28049,,,,,,,
Sol-28050,,,,,,,
Sol-28051,,,,,,,
Sol-28052,,,,,,,
Sol-28053,,,,,,,
Sol-28054,,,,,,,
Sol-28055,,,,,,,
Sol-28056,,,,,,,
Sol-28057,,,,,,,
Sol-28058,,,,,,,
Sol-28059,,,,,,,
Sol-28060,,,,,,,
Sol-28061,,,,,,,
Sol-28062,,,,,,,
Sol-28063,,,,,,,
Sol-28064,,,,,,,
Sol-28065,,,,,,,
Sol-28066,,,,,,,
Sol-28067,,,,,,,
Sol-28068,,,,,,,
Sol-28069,,,,,,,
Sol-28070,,,,,,,
Sol-28071,,,,,,,
Sol-28072,,,,,,,
Sol-28073,,,,,,,
Sol-28074,,,,,,,
Sol-28075,,,,,,,
Sol-28076,,,,,,,
Sol-28077,,,,,,,
Sol-28078,,,,,,,
Sol-28079,,,,,,,
Sol-28080,,,,,,,
Sol-28081,,,,,,,
Sol-28082,,,,,,,
Sol-28083,,,,,,,
Sol-28084,,,,,,,
Sol-28085,,,,,,,
Sol-28086,,,,,,,
Sol-28087,,,,,,,
Sol-28088,,,,,,,
Sol-28089,,,,,,,
Sol-28090,,,,,,,
Sol-28091,,,,,,,
Sol-28092,,,,,,,
Sol-28093,,,,,,,
Sol-28094,,,,,,,
Sol-28095,,,,,,,
Sol-28096,,,,,,,
Sol-28097,,,,,,,
Sol-28098,,,,,,,
Sol-28099,,,,,,,
Sol-28100,,,,,,,
Sol-28101,,,,,,,
Sol-28102,,,,,,,
Sol-28103,,,,,,,
Sol-28104,,,,,,,
Sol-28105,,,,,,,
Sol-28106,,,,,,,
Sol-28107,,,,,,,
Sol-28108,,,,,,,
Sol-28109,,,,,,,
Sol-28110,,,,,,,
Sol-28111,,,,,,,
Sol-28112,,,,,,,
Sol-28113,,,,,,,
Sol-28114,,,,,,,
Sol-28115,,,,,,,
Sol-28116,,,,,,,
Sol-28117,,,,,,,
Sol-28118,,,,,,,
Sol-28119,,,,,,,
Sol-28120,,,,,,,
Sol-28121,,,,,,,
Sol-28122,,,,,,,
Sol-28123,,,,,,,
Sol-28124,,,,,,,
Sol-28125,,,,,,,
Sol-28126,,,,,,,
Sol-28127,,,,,,,
Sol-28128,,,,,,,
Sol-28129,,,,,,,
Sol-28130,,,,,,,
Sol-28131,,,,,,,
Sol-28132,,,,,,,
Sol-28133,,,,,,,
Sol-28134,,,,,,,
Sol-28135,,,,,,,
Sol-28136,,,,,,,
Sol-28137,,,,,,,
Sol-28138,,,,,,,
Sol-28139,,,,,,,
Sol-28140,,,,,,,
Sol-28141,,,,,,,
Sol-28142,,,,,,,
Sol-28143,,,,,,,
Sol-28144,,,,,,,
Sol-28145,,,,,,,
Sol-28146,,,,,,,
Sol-28147,,,,,,,
Sol-28148,,,,,,,
Sol-28149,,,,,,,
Sol-28150,,,,,,,
Sol-28151,,,,,,,
Sol-28152,,,,,,,
Sol-28153,,,,,,,
Sol-28154,,,,,,,
Sol-28155,,,,,,,
Sol-28156,,,,,,,
Sol-28157,,,,,,,
Sol-28158,,,,,,,
Sol-28159,,,,,,,
Sol-28160,,,,,,,
Sol-28161,,,,,,,
Sol-28162,,,,,,,
Sol-28163,,,,,,,
Sol-28164,,,,,,,
Sol-28165,,,,,,,
Sol-28166,,,,,,,
Sol-28167,,,,,,,
Sol-28168,,,,,,,
Sol-28169,,,,,,,
Sol-28170,,,,,,,
Sol-28171,,,,,,,
Sol-28172,,,,,,,
Sol-28173,,,,,,,
Sol-28174,,,,,,,
Sol-28175,,,,,,,
Sol-28176,,,,,,,
Sol-28177,,,,,,,
Sol-28178,,,,,,,
Sol-28179,,,,,,,
Sol-28180,,,,,,,
Sol-28181,,,,,,,
Sol-28182,,,,,,,
Sol-28183,,,,,,,
Sol-28184,,,,,,,
Sol-28185,,,,,,,
Sol-28186,,,,,,,
Sol-28187,,,,,,,
Sol-28188,,,,,,,
Sol-28189,,,,,,,
Sol-28190,,,,,,,
Sol-28191,,,,,,,
Sol-28192,,,,,,,
Sol-28193,,,,,,,
Sol-28194,,,,,,,
Sol-28195,,,,,,,
Sol-28196,,,,,,,
Sol-28197,,,,,,,
Sol-28198,,,,,,,
Sol-28199,,,,,,,
Sol-28200,,,,,,,
Sol-28201,,,,,,,
Sol-28202,,,,,,,
Sol-28203,,,,,,,
Sol-28204,,,,,,,
Sol-28205,,,,,,,
Sol-28206,,,,,,,
Sol-28207,,,,,,,
Sol-28208,,,,,,,
Sol-28209,,,,,,,
Sol-28210,,,,,,,
Sol-28211,,,,,,,
Sol-28212,,,,,,,
Sol-28213,,,,,,,
Sol-28214,,,,,,,
Sol-28215,,,,,,,
Sol-28216,,,,,,,
Sol-28217,,,,,,,
Sol-28218,,,,,,,
Sol-28219,,,,,,,
Sol-28220,,,,,,,
Sol-28221,,,,,,,
Sol-28222,,,,,,,
Sol-28223,,,,,,,
Sol-28224,,,,,,,
Sol-28225,,,,,,,
Sol-28226,,,,,,,
Sol-28227,,,,,,,
Sol-28228,,,,,,,
Sol-28229,,,,,,,
Sol-28230,,,,,,,
Sol-28231,,,,,,,
Sol-28232,,,,,,,
Sol-28233,,,,,,,
Sol-28234,,,,,,,
Sol-28235,,,,,,,
Sol-28236,,,,,,,
Sol-28237,,,,,,,
Sol-28238,,,,,,,
Sol-28239,,,,,,,
Sol-28240,,,,,,,
Sol-28241,,,,,,,
Sol-28242,,,,,,,
Sol-28243,,,,,,,
Sol-28244,,,,,,,
Sol-28245,,,,,,,
Sol-28246,,,,,,,
Sol-28247,,,,,,,
Sol-28248,,,,,,,
Sol-28249,,,,,,,
Sol-28250,,,,,,,
Sol-28251,,,,,,,
Sol-28252,,,,,,,
Sol-28253,,,,,,,
Sol-28254,,,,,,,
Sol-28255,,,,,,,
Sol-28256,,,,,,,
Sol-28257,,,,,,,
Sol-28258,,,,,,,
Sol-28259,,,,,,,
Sol-28260,,,,,,,
Sol-28261,,,,,,,
Sol-28262,,,,,,,
Sol-28263,,,,,,,
Sol-28264,,,,,,,
Sol-28265,,,,,,,
Sol-28266,,,,,,,
Sol-28267,,,,,,,
Sol-28268,,,,,,,
Sol-28269,,,,,,,
Sol-28270,,,,,,,
Sol-28271,,,,,,,
Sol-28272,,,,,,,
Sol-28273,,,,,,,
Sol-28274,,,,,,,
Sol-28275,,,,,,,
Sol-28276,,,,,,,
Sol-28277,,,,,,,
Sol-28278,,,,,,,
Sol-28279,,,,,,,
Sol-28280,,,,,,,
Sol-28281,,,,,,,
Sol-28282,,,,,,,
Sol-28283,,,,,,,
Sol-28284,,,,,,,
Sol-28285,,,,,,,
Sol-28286,,,,,,,
Sol-28287,,,,,,,
Sol-28288,,,,,,,
Sol-28289,,,,,,,
Sol-28290,,,,,,,
Sol-28291,,,,,,,
Sol-28292,,,,,,,
Sol-28293,,,,,,,
Sol-28294,,,,,,,
Sol-28295,,,,,,,
Sol-28296,,,,,,,
Sol-28297,,,,,,,
Sol-28298,,,,,,,
Sol-28299,,,,,,,
Sol-28300,,,,,,,
Sol-28301,,,,,,,
Sol-28302,,,,,,,
Sol-28303,,,,,,,
Sol-28304,,,,,,,
Sol-28305,,,,,,,
Sol-28306,,,,,,,
Sol-28307,,,,,,,
Sol-28308,,,,,,,
Sol-28309,,,,,,,
Sol-28310,,,,,,,
Sol-28311,,,,,,,
Sol-28312,,,,,,,
Sol-28313,,,,,,,
Sol-28314,,,,,,,
Sol-28315,,,,,,,
Sol-28316,,,,,,,
Sol-28317,,,,,,,
Sol-28318,,,,,,,
Sol-28319,,,,,,,
Sol-28320,,,,,,,
Sol-28321,,,,,,,
Sol-28322,,,,,,,
Sol-28323,,,,,,,
Sol-28324,,,,,,,
Sol-28325,,,,,,,
Sol-28326,,,,,,,
Sol-28327,,,,,,,
Sol-28328,,,,,,,
Sol-28329,,,,,,,
Sol-28330,,,,,,,
Sol-28331,,,,,,,
Sol-28332,,,,,,,
Sol-28333,,,,,,,
Sol-28334,,,,,,,
Sol-28335,,,,,,,
Sol-28336,,,,,,,
Sol-28337,,,,,,,
Sol-28338,,,,,,,
Sol-28339,,,,,,,
Sol-28340,,,,,,,
Sol-28341,,,,,,,
Sol-28342,,,,,,,
Sol-28343,,,,,,,
Sol-28344,,,,,,,
Sol-28345,,,,,,,
Sol-28346,,,,,,,
Sol-28347,,,,,,,
Sol-28348,,,,,,,
Sol-28349,,,,,,,
Sol-28350,,,,,,,
Sol-28351,,,,,,,
Sol-28352,,,,,,,
Sol-28353,,,,,,,
Sol-28354,,,,,,,
Sol-28355,,,,,,,
Sol-28356,,,,,,,
Sol-28357,,,,,,,
Sol-28358,,,,,,,
Sol-28359,,,,,,,
Sol-28360,,,,,,,
Sol-28361,,,,,,,
Sol-28362,,,,,,,
Sol-28363,,,,,,,
Sol-28364,,,,,,,
Sol-28365,,,,,,,
Sol-28366,,,,,,,
Sol-28367,,,,,,,
Sol-28368,,,,,,,
Sol-28369,,,,,,,
Sol-28370,,,,,,,
Sol-28371,,,,,,,
Sol-28372,,,,,,,
Sol-28373,,,,,,,
Sol-28374,,,,,,,
Sol-28375,,,,,,,
Sol-28376,,,,,,,
Sol-28377,,,,,,,
Sol-28378,,,,,,,
Sol-28379,,,,,,,
Sol-28380,,,,,,,
Sol-28381,,,,,,,
Sol-28382,,,,,,,
Sol-28383,,,,,,,
Sol-28384,,,,,,,
Sol-28385,,,,,,,
Sol-28386,,,,,,,
Sol-28387,,,,,,,
Sol-28388,,,,,,,
Sol-28389,,,,,,,
Sol-28390,,,,,,,
Sol-28391,,,,,,,
Sol-28392,,,,,,,
Sol-28393,,,,,,,
Sol-28394,,,,,,,
Sol-28395,,,,,,,
Sol-28396,,,,,,,
Sol-28397,,,,,,,
Sol-28398,,,,,,,
Sol-28399,,,,,,,
Sol-28400,,,,,,,
Sol-28401,,,,,,,
Sol-28402,,,,,,,
Sol-28403,,,,,,,
Sol-28404,,,,,,,
Sol-28405,,,,,,,
Sol-28406,,,,,,,
Sol-28407,,,,,,,
Sol-28408,,,,,,,
Sol-28409,,,,,,,
Sol-28410,,,,,,,
Sol-28411,,,,,,,
Sol-28412,,,,,,,
Sol-28413,,,,,,,
Sol-28414,,,,,,,
Sol-28415,,,,,,,
Sol-28416,,,,,,,
Sol-28417,,,,,,,
Sol-28418,,,,,,,
Sol-28419,,,,,,,
Sol-28420,,,,,,,
Sol-28421,,,,,,,
Sol-28422,,,,,,,
Sol-28423,,,,,,,
Sol-28424,,,,,,,
Sol-28425,,,,,,,
Sol-28426,,,,,,,
Sol-28427,,,,,,,
Sol-28428,,,,,,,
Sol-28429,,,,,,,
Sol-28430,,,,,,,
Sol-28431,,,,,,,
Sol-28432,,,,,,,
Sol-28433,,,,,,,
Sol-28434,,,,,,,
Sol-28435,,,,,,,
Sol-28436,,,,,,,
Sol-28437,,,,,,,
Sol-28438,,,,,,,
Sol-28439,,,,,,,
Sol-28440,,,,,,,
Sol-28441,,,,,,,
Sol-28442,,,,,,,
Sol-28443,,,,,,,
Sol-28444,,,,,,,
Sol-28445,,,,,,,
Sol-28446,,,,,,,
Sol-28447,,,,,,,
Sol-28448,,,,,,,
Sol-28449,,,,,,,
Sol-28450,,,,,,,
Sol-28451,,,,,,,
Sol-28452,,,,,,,
Sol-28453,,,,,,,
Sol-28454,,,,,,,
Sol-28455,,,,,,,
Sol-28456,,,,,,,
Sol-28457,,,,,,,
Sol-28458,,,,,,,
Sol-28459,,,,,,,
Sol-28460,,,,,,,
Sol-28461,,,,,,,
Sol-28462,,,,,,,
Sol-28463,,,,,,,
Sol-28464,,,,,,,
Sol-28465,,,,,,,
Sol-28466,,,,,,,
Sol-28467,,,,,,,
Sol-28468,,,,,,,
Sol-28469,,,,,,,
Sol-28470,,,,,,,
Sol-28471,,,,,,,
Sol-28472,,,,,,,
Sol-28473,,,,,,,
Sol-28474,,,,,,,
Sol-28475,,,,,,,
Sol-28476,,,,,,,
Sol-28477,,,,,,,
Sol-28478,,,,,,,
Sol-28479,,,,,,,
Sol-28480,,,,,,,
Sol-28481,,,,,,,
Sol-28482,,,,,,,
Sol-28483,,,,,,,
Sol-28484,,,,,,,
Sol-28485,,,,,,,
Sol-28486,,,,,,,
Sol-28487,,,,,,,
Sol-28488,,,,,,,
Sol-28489,,,,,,,
Sol-28490,,,,,,,
Sol-28491,,,,,,,
Sol-28492,,,,,,,
Sol-28493,,,,,,,
Sol-28494,,,,,,,
Sol-28495,,,,,,,
Sol-28496,,,,,,,
Sol-28497,,,,,,,
Sol-28498,,,,,,,
Sol-28499,,,,,,,
Sol-28500,,,,,,,
Sol-28501,,,,,,,
Sol-28502,,,,,,,
Sol-28503,,,,,,,
Sol-28504,,,,,,,
Sol-28505,,,,,,,
Sol-28506,,,,,,,
Sol-28507,,,,,,,
Sol-28508,,,,,,,
Sol-28509,,,,,,,
Sol-28510,,,,,,,
Sol-28511,,,,,,,
Sol-28512,,,,,,,
Sol-28513,,,,,,,
Sol-28514,,,,,,,
Sol-28515,,,,,,,
Sol-28516,,,,,,,
Sol-28517,,,,,,,
Sol-28518,,,,,,,
Sol-28519,,,,,,,
Sol-28520,,,,,,,
Sol-28521,,,,,,,
Sol-28522,,,,,,,
Sol-28523,,,,,,,
Sol-28524,,,,,,,
Sol-28525,,,,,,,
Sol-28526,,,,,,,
Sol-28527,,,,,,,
Sol-28528,,,,,,,
Sol-28529,,,,,,,
Sol-28530,,,,,,,
Sol-28531,,,,,,,
Sol-28532,,,,,,,
Sol-28533,,,,,,,
Sol-28534,,,,,,,
Sol-28535,,,,,,,
Sol-28536,,,,,,,
Sol-28537,,,,,,,
Sol-28538,,,,,,,
Sol-28539,,,,,,,
Sol-28540,,,,,,,
Sol-28541,,,,,,,
Sol-28542,,,,,,,
Sol-28543,,,,,,,
Sol-28544,,,,,,,
Sol-28545,,,,,,,
Sol-28546,,,,,,,
Sol-28547,,,,,,,
Sol-28548,,,,,,,
Sol-28549,,,,,,,
Sol-28550,,,,,,,
Sol-28551,,,,,,,
Sol-28552,,,,,,,
Sol-28553,,,,,,,
Sol-28554,,,,,,,
Sol-28555,,,,,,,
Sol-28556,,,,,,,
Sol-28557,,,,,,,
Sol-28558,,,,,,,
Sol-28559,,,,,,,
Sol-28560,,,,,,,
Sol-28561,,,,,,,
Sol-28562,,,,,,,
Sol-28563,,,,,,,
Sol-28564,,,,,,,
Sol-28565,,,,,,,
Sol-28566,,,,,,,
Sol-28567,,,,,,,
Sol-28568,,,,,,,
Sol-28569,,,,,,,
Sol-28570,,,,,,,
Sol-28571,,,,,,,
Sol-28572,,,,,,,
Sol-28573,,,,,,,
Sol-28574,,,,,,,
Sol-28575,,,,,,,
Sol-28576,,,,,,,
Sol-28577,,,,,,,
Sol-28578,,,,,,,
Sol-28579,,,,,,,
Sol-28580,,,,,,,
Sol-28581,,,,,,,
Sol-28582,,,,,,,
Sol-28583,,,,,,,
Sol-28584,,,,,,,
Sol-28585,,,,,,,
Sol-28586,,,,,,,
Sol-28587,,,,,,,
Sol-28588,,,,,,,
Sol-28589,,,,,,,
Sol-28590,,,,,,,
Sol-28591,,,,,,,
Sol-28592,,,,,,,
Sol-28593,,,,,,,
Sol-28594,,,,,,,
Sol-28595,,,,,,,
Sol-28596,,,,,,,
Sol-28597,,,,,,,
Sol-28598,,,,,,,
Sol-28599,,,,,,,
Sol-28600,,,,,,,
Sol-28601,,,,,,,
Sol-28602,,,,,,,
Sol-28603,,,,,,,
Sol-28604,,,,,,,
Sol-28605,,,,,,,
Sol-28606,,,,,,,
Sol-28607,,,,,,,
Sol-28608,,,,,,,
Sol-28609,,,,,,,
Sol-28610,,,,,,,
Sol-28611,,,,,,,
Sol-28612,,,,,,,
Sol-28613,,,,,,,
Sol-28614,,,,,,,
Sol-28615,,,,,,,
Sol-28616,,,,,,,
Sol-28617,,,,,,,
Sol-28618,,,,,,,
Sol-28619,,,,,,,
Sol-28620,,,,,,,
Sol-28621,,,,,,,
Sol-28622,,,,,,,
Sol-28623,,,,,,,
Sol-28624,,,,,,,
Sol-28625,,,,,,,
Sol-28626,,,,,,,
Sol-28627,,,,,,,
Sol-28628,,,,,,,
Sol-28629,,,,,,,
Sol-28630,,,,,,,
Sol-28631,,,,,,,
Sol-28632,,,,,,,
Sol-28633,,,,,,,
Sol-28634,,,,,,,
Sol-28635,,,,,,,
Sol-28636,,,,,,,
Sol-28637,,,,,,,
Sol-28638,,,,,,,
Sol-28639,,,,,,,
Sol-28640,,,,,,,
Sol-28641,,,,,,,
Sol-28642,,,,,,,
Sol-28643,,,,,,,
Sol-28644,,,,,,,
Sol-28645,,,,,,,
Sol-28646,,,,,,,
Sol-28647,,,,,,,
Sol-28648,,,,,,,
Sol-28649,,,,,,,
Sol-28650,,,,,,,
Sol-28651,,,,,,,
Sol-28652,,,,,,,
Sol-28653,,,,,,,
Sol-28654,,,,,,,
Sol-28655,,,,,,,
Sol-28656,,,,,,,
Sol-28657,,,,,,,
Sol-28658,,,,,,,
Sol-28659,,,,,,,
Sol-28660,,,,,,,
Sol-28661,,,,,,,
Sol-28662,,,,,,,
Sol-28663,,,,,,,
Sol-28664,,,,,,,
Sol-28665,,,,,,,
Sol-28666,,,,,,,
Sol-28667,,,,,,,
Sol-28668,,,,,,,
Sol-28669,,,,,,,
Sol-28670,,,,,,,
Sol-28671,,,,,,,
Sol-28672,,,,,,,
Sol-28673,,,,,,,
Sol-28674,,,,,,,
Sol-28675,,,,,,,
Sol-28676,,,,,,,
Sol-28677,,,,,,,
Sol-28678,,,,,,,
Sol-28679,,,,,,,
Sol-28680,,,,,,,
Sol-28681,,,,,,,
Sol-28682,,,,,,,
Sol-28683,,,,,,,
Sol-28684,,,,,,,
Sol-28685,,,,,,,
Sol-28686,,,,,,,
Sol-28687,,,,,,,
Sol-28688,,,,,,,
Sol-28689,,,,,,,
Sol-28690,,,,,,,
Sol-28691,,,,,,,
Sol-28692,,,,,,,
Sol-28693,,,,,,,
Sol-28694,,,,,,,
Sol-28695,,,,,,,
Sol-28696,,,,,,,
Sol-28697,,,,,,,
Sol-28698,,,,,,,
Sol-28699,,,,,,,
Sol-28700,,,,,,,
Sol-28701,,,,,,,
Sol-28702,,,,,,,
Sol-28703,,,,,,,
Sol-28704,,,,,,,
Sol-28705,,,,,,,
Sol-28706,,,,,,,
Sol-28707,,,,,,,
Sol-28708,,,,,,,
Sol-28709,,,,,,,
Sol-28710,,,,,,,
Sol-28711,,,,,,,
Sol-28712,,,,,,,
Sol-28713,,,,,,,
Sol-28714,,,,,,,
Sol-28715,,,,,,,
Sol-28716,,,,,,,
Sol-28717,,,,,,,
Sol-28718,,,,,,,
Sol-28719,,,,,,,
Sol-28720,,,,,,,
Sol-28721,,,,,,,
Sol-28722,,,,,,,
Sol-28723,,,,,,,
Sol-28724,,,,,,,
Sol-28725,,,,,,,
Sol-28726,,,,,,,
Sol-28727,,,,,,,
Sol-28728,,,,,,,
Sol-28729,,,,,,,
Sol-28730,,,,,,,
Sol-28731,,,,,,,
Sol-28732,,,,,,,
Sol-28733,,,,,,,
Sol-28734,,,,,,,
Sol-28735,,,,,,,
Sol-28736,,,,,,,
Sol-28737,,,,,,,
Sol-28738,,,,,,,
Sol-28739,,,,,,,
Sol-28740,,,,,,,
Sol-28741,,,,,,,
Sol-28742,,,,,,,
Sol-28743,,,,,,,
Sol-28744,,,,,,,
Sol-28745,,,,,,,
Sol-28746,,,,,,,
Sol-28747,,,,,,,
Sol-28748,,,,,,,
Sol-28749,,,,,,,
Sol-28750,,,,,,,
Sol-28751,,,,,,,
Sol-28752,,,,,,,
Sol-28753,,,,,,,
Sol-28754,,,,,,,
Sol-28755,,,,,,,
Sol-28756,,,,,,,
Sol-28757,,,,,,,
Sol-28758,,,,,,,
Sol-28759,,,,,,,
Sol-28760,,,,,,,
Sol-28761,,,,,,,
Sol-28762,,,,,,,
Sol-28763,,,,,,,
Sol-28764,,,,,,,
Sol-28765,,,,,,,
Sol-28766,,,,,,,
Sol-28767,,,,,,,
Sol-28768,,,,,,,
Sol-28769,,,,,,,
Sol-28770,,,,,,,
Sol-28771,,,,,,,
Sol-28772,,,,,,,
Sol-28773,,,,,,,
Sol-28774,,,,,,,
Sol-28775,,,,,,,
Sol-28776,,,,,,,
Sol-28777,,,,,,,
Sol-28778,,,,,,,
Sol-28779,,,,,,,
Sol-28780,,,,,,,
Sol-28781,,,,,,,
Sol-28782,,,,,,,
Sol-28783,,,,,,,
Sol-28784,,,,,,,
Sol-28785,,,,,,,
Sol-28786,,,,,,,
Sol-28787,,,,,,,
Sol-28788,,,,,,,
Sol-28789,,,,,,,
Sol-28790,,,,,,,
Sol-28791,,,,,,,
Sol-28792,,,,,,,
Sol-28793,,,,,,,
Sol-28794,,,,,,,
Sol-28795,,,,,,,
Sol-28796,,,,,,,
Sol-28797,,,,,,,
Sol-28798,,,,,,,
Sol-28799,,,,,,,
Sol-28800,,,,,,,
Sol-28801,,,,,,,
Sol-28802,,,,,,,
Sol-28803,,,,,,,
Sol-28804,,,,,,,
Sol-28805,,,,,,,
Sol-28806,,,,,,,
Sol-28807,,,,,,,
Sol-28808,,,,,,,
Sol-28809,,,,,,,
Sol-28810,,,,,,,
Sol-28811,,,,,,,
Sol-28812,,,,,,,
Sol-28813,,,,,,,
Sol-28814,,,,,,,
Sol-28815,,,,,,,
Sol-28816,,,,,,,
Sol-28817,,,,,,,
Sol-28818,,,,,,,
Sol-28819,,,,,,,
Sol-28820,,,,,,,
Sol-28821,,,,,,,
Sol-28822,,,,,,,
Sol-28823,,,,,,,
Sol-28824,,,,,,,
Sol-28825,,,,,,,
Sol-28826,,,,,,,
Sol-28827,,,,,,,
Sol-28828,,,,,,,
Sol-28829,,,,,,,
Sol-28830,,,,,,,
Sol-28831,,,,,,,
Sol-28832,,,,,,,
Sol-28833,,,,,,,
Sol-28834,,,,,,,
Sol-28835,,,,,,,
Sol-28836,,,,,,,
Sol-28837,,,,,,,
Sol-28838,,,,,,,
Sol-28839,,,,,,,
Sol-28840,,,,,,,
Sol-28841,,,,,,,
Sol-28842,,,,,,,
Sol-28843,,,,,,,
Sol-28844,,,,,,,
Sol-28845,,,,,,,
Sol-28846,,,,,,,
Sol-28847,,,,,,,
Sol-28848,,,,,,,
Sol-28849,,,,,,,
Sol-28850,,,,,,,
Sol-28851,,,,,,,
Sol-28852,,,,,,,
Sol-28853,,,,,,,
Sol-28854,,,,,,,
Sol-28855,,,,,,,
Sol-28856,,,,,,,
Sol-28857,,,,,,,
Sol-28858,,,,,,,
Sol-28859,,,,,,,
Sol-28860,,,,,,,
Sol-28861,,,,,,,
Sol-28862,,,,,,,
Sol-28863,,,,,,,
Sol-28864,,,,,,,
Sol-28865,,,,,,,
Sol-28866,,,,,,,
Sol-28867,,,,,,,
Sol-28868,,,,,,,
Sol-28869,,,,,,,
Sol-28870,,,,,,,
Sol-28871,,,,,,,
Sol-28872,,,,,,,
Sol-28873,,,,,,,
Sol-28874,,,,,,,
Sol-28875,,,,,,,
Sol-28876,,,,,,,
Sol-28877,,,,,,,
Sol-28878,,,,,,,
Sol-28879,,,,,,,
Sol-28880,,,,,,,
Sol-28881,,,,,,,
Sol-28882,,,,,,,
Sol-28883,,,,,,,
Sol-28884,,,,,,,
Sol-28885,,,,,,,
Sol-28886,,,,,,,
Sol-28887,,,,,,,
Sol-28888,,,,,,,
Sol-28889,,,,,,,
Sol-28890,,,,,,,
Sol-28891,,,,,,,
Sol-28892,,,,,,,
Sol-28893,,,,,,,
Sol-28894,,,,,,,
Sol-28895,,,,,,,
Sol-28896,,,,,,,
Sol-28897,,,,,,,
Sol-28898,,,,,,,
Sol-28899,,,,,,,
Sol-28900,,,,,,,
Sol-28901,,,,,,,
Sol-28902,,,,,,,
Sol-28903,,,,,,,
Sol-28904,,,,,,,
Sol-28905,,,,,,,
Sol-28906,,,,,,,
Sol-28907,,,,,,,
Sol-28908,,,,,,,
Sol-28909,,,,,,,
Sol-28910,,,,,,,
Sol-28911,,,,,,,
Sol-28912,,,,,,,
Sol-28913,,,,,,,
Sol-28914,,,,,,,
Sol-28915,,,,,,,
Sol-28916,,,,,,,
Sol-28917,,,,,,,
Sol-28918,,,,,,,
Sol-28919,,,,,,,
Sol-28920,,,,,,,
Sol-28921,,,,,,,
Sol-28922,,,,,,,
Sol-28923,,,,,,,
Sol-28924,,,,,,,
Sol-28925,,,,,,,
Sol-28926,,,,,,,
Sol-28927,,,,,,,
Sol-28928,,,,,,,
Sol-28929,,,,,,,
Sol-28930,,,,,,,
Sol-28931,,,,,,,
Sol-28932,,,,,,,
Sol-28933,,,,,,,
Sol-28934,,,,,,,
Sol-28935,,,,,,,
Sol-28936,,,,,,,
Sol-28937,,,,,,,
Sol-28938,,,,,,,
Sol-28939,,,,,,,
Sol-28940,,,,,,,
Sol-28941,,,,,,,
Sol-28942,,,,,,,
Sol-28943,,,,,,,
Sol-28944,,,,,,,
Sol-28945,,,,,,,
Sol-28946,,,,,,,
Sol-28947,,,,,,,
Sol-28948,,,,,,,
Sol-28949,,,,,,,
Sol-28950,,,,,,,
Sol-28951,,,,,,,
Sol-28952,,,,,,,
Sol-28953,,,,,,,
Sol-28954,,,,,,,
Sol-28955,,,,,,,
Sol-28956,,,,,,,
Sol-28957,,,,,,,
Sol-28958,,,,,,,
Sol-28959,,,,,,,
Sol-28960,,,,,,,
Sol-28961,,,,,,,
Sol-28962,,,,,,,
Sol-28963,,,,,,,
Sol-28964,,,,,,,
Sol-28965,,,,,,,
Sol-28966,,,,,,,
Sol-28967,,,,,,,
Sol-28968,,,,,,,
Sol-28969,,,,,,,
Sol-28970,,,,,,,
Sol-28971,,,,,,,
Sol-28972,,,,,,,
Sol-28973,,,,,,,
Sol-28974,,,,,,,
Sol-28975,,,,,,,
Sol-28976,,,,,,,
Sol-28977,,,,,,,
Sol-28978,,,,,,,
Sol-28979,,,,,,,
Sol-28980,,,,,,,
Sol-28981,,,,,,,
Sol-28982,,,,,,,
Sol-28983,,,,,,,
Sol-28984,,,,,,,
Sol-28985,,,,,,,
Sol-28986,,,,,,,
Sol-28987,,,,,,,
Sol-28988,,,,,,,
Sol-28989,,,,,,,
Sol-28990,,,,,,,
Sol-28991,,,,,,,
Sol-28992,,,,,,,
Sol-28993,,,,,,,
Sol-28994,,,,,,,
Sol-28995,,,,,,,
Sol-28996,,,,,,,
Sol-28997,,,,,,,
Sol-28998,,,,,,,
Sol-28999,,,,,,,
Sol-29000,,,,,,,
Sol-29001,,,,,,,
Sol-29002,,,,,,,
Sol-29003,,,,,,,
Sol-29004,,,,,,,
Sol-29005,,,,,,,
Sol-29006,,,,,,,
Sol-29007,,,,,,,
Sol-29008,,,,,,,
Sol-29009,,,,,,,
Sol-29010,,,,,,,
Sol-29011,,,,,,,
Sol-29012,,,,,,,
Sol-29013,,,,,,,
Sol-29014,,,,,,,
Sol-29015,,,,,,,
Sol-29016,,,,,,,
Sol-29017,,,,,,,
Sol-29018,,,,,,,
Sol-29019,,,,,,,
Sol-29020,,,,,,,
Sol-29021,,,,,,,
Sol-29022,,,,,,,
Sol-29023,,,,,,,
Sol-29024,,,,,,,
Sol-29025,,,,,,,
Sol-29026,,,,,,,
Sol-29027,,,,,,,
Sol-29028,,,,,,,
Sol-29029,,,,,,,
Sol-29030,,,,,,,
Sol-29031,,,,,,,
Sol-29032,,,,,,,
Sol-29033,,,,,,,
Sol-29034,,,,,,,
Sol-29035,,,,,,,
Sol-29036,,,,,,,
Sol-29037,,,,,,,
Sol-29038,,,,,,,
Sol-29039,,,,,,,
Sol-29040,,,,,,,
Sol-29041,,,,,,,
Sol-29042,,,,,,,
Sol-29043,,,,,,,
Sol-29044,,,,,,,
Sol-29045,,,,,,,
Sol-29046,,,,,,,
Sol-29047,,,,,,,
Sol-29048,,,,,,,
Sol-29049,,,,,,,
Sol-29050,,,,,,,
Sol-29051,,,,,,,
Sol-29052,,,,,,,
Sol-29053,,,,,,,
Sol-29054,,,,,,,
Sol-29055,,,,,,,
Sol-29056,,,,,,,
Sol-29057,,,,,,,
Sol-29058,,,,,,,
Sol-29059,,,,,,,
Sol-29060,,,,,,,
Sol-29061,,,,,,,
Sol-29062,,,,,,,
Sol-29063,,,,,,,
Sol-29064,,,,,,,
Sol-29065,,,,,,,
Sol-29066,,,,,,,
Sol-29067,,,,,,,
Sol-29068,,,,,,,
Sol-29069,,,,,,,
Sol-29070,,,,,,,
Sol-29071,,,,,,,
Sol-29072,,,,,,,
Sol-29073,,,,,,,
Sol-29074,,,,,,,
Sol-29075,,,,,,,
Sol-29076,,,,,,,
Sol-29077,,,,,,,
Sol-29078,,,,,,,
Sol-29079,,,,,,,
Sol-29080,,,,,,,
Sol-29081,,,,,,,
Sol-29082,,,,,,,
Sol-29083,,,,,,,
Sol-29084,,,,,,,
Sol-29085,,,,,,,
Sol-29086,,,,,,,
Sol-29087,,,,,,,
Sol-29088,,,,,,,
Sol-29089,,,,,,,
Sol-29090,,,,,,,
Sol-29091,,,,,,,
Sol-29092,,,,,,,
Sol-29093,,,,,,,
Sol-29094,,,,,,,
Sol-29095,,,,,,,
Sol-29096,,,,,,,
Sol-29097,,,,,,,
Sol-29098,,,,,,,
Sol-29099,,,,,,,
Sol-29100,,,,,,,
Sol-29101,,,,,,,
Sol-29102,,,,,,,
Sol-29103,,,,,,,
Sol-29104,,,,,,,
Sol-29105,,,,,,,
Sol-29106,,,,,,,
Sol-29107,,,,,,,
Sol-29108,,,,,,,
Sol-29109,,,,,,,
Sol-29110,,,,,,,
Sol-29111,,,,,,,
Sol-29112,,,,,,,
Sol-29113,,,,,,,
Sol-29114,,,,,,,
Sol-29115,,,,,,,
Sol-29116,,,,,,,
Sol-29117,,,,,,,
Sol-29118,,,,,,,
Sol-29119,,,,,,,
Sol-29120,,,,,,,
Sol-29121,,,,,,,
Sol-29122,,,,,,,
Sol-29123,,,,,,,
Sol-29124,,,,,,,
Sol-29125,,,,,,,
Sol-29126,,,,,,,
Sol-29127,,,,,,,
Sol-29128,,,,,,,
Sol-29129,,,,,,,
Sol-29130,,,,,,,
Sol-29131,,,,,,,
Sol-29132,,,,,,,
Sol-29133,,,,,,,
Sol-29134,,,,,,,
Sol-29135,,,,,,,
Sol-29136,,,,,,,
Sol-29137,,,,,,,
Sol-29138,,,,,,,
Sol-29139,,,,,,,
Sol-29140,,,,,,,
Sol-29141,,,,,,,
Sol-29142,,,,,,,
Sol-29143,,,,,,,
Sol-29144,,,,,,,
Sol-29145,,,,,,,
Sol-29146,,,,,,,
Sol-29147,,,,,,,
Sol-29148,,,,,,,
Sol-29149,,,,,,,
Sol-29150,,,,,,,
Sol-29151,,,,,,,
Sol-29152,,,,,,,
Sol-29153,,,,,,,
Sol-29154,,,,,,,
Sol-29155,,,,,,,
Sol-29156,,,,,,,
Sol-29157,,,,,,,
Sol-29158,,,,,,,
Sol-29159,,,,,,,
Sol-29160,,,,,,,
Sol-29161,,,,,,,
Sol-29162,,,,,,,
Sol-29163,,,,,,,
Sol-29164,,,,,,,
Sol-29165,,,,,,,
Sol-29166,,,,,,,
Sol-29167,,,,,,,
Sol-29168,,,,,,,
Sol-29169,,,,,,,
Sol-29170,,,,,,,
Sol-29171,,,,,,,
Sol-29172,,,,,,,
Sol-29173,,,,,,,
Sol-29174,,,,,,,
Sol-29175,,,,,,,
Sol-29176,,,,,,,
Sol-29177,,,,,,,
Sol-29178,,,,,,,
Sol-29179,,,,,,,
Sol-29180,,,,,,,
Sol-29181,,,,,,,
Sol-29182,,,,,,,
Sol-29183,,,,,,,
Sol-29184,,,,,,,
Sol-29185,,,,,,,
Sol-29186,,,,,,,
Sol-29187,,,,,,,
Sol-29188,,,,,,,
Sol-29189,,,,,,,
Sol-29190,,,,,,,
Sol-29191,,,,,,,
Sol-29192,,,,,,,
Sol-29193,,,,,,,
Sol-29194,,,,,,,
Sol-29195,,,,,,,
Sol-29196,,,,,,,
Sol-29197,,,,,,,
Sol-29198,,,,,,,
Sol-29199,,,,,,,
Sol-29200,,,,,,,
Sol-29201,,,,,,,
Sol-29202,,,,,,,
Sol-29203,,,,,,,
Sol-29204,,,,,,,
Sol-29205,,,,,,,
Sol-29206,,,,,,,
Sol-29207,,,,,,,
Sol-29208,,,,,,,
Sol-29209,,,,,,,
Sol-29210,,,,,,,
Sol-29211,,,,,,,
Sol-29212,,,,,,,
Sol-29213,,,,,,,
Sol-29214,,,,,,,
Sol-29215,,,,,,,
Sol-29216,,,,,,,
Sol-29217,,,,,,,
Sol-29218,,,,,,,
Sol-29219,,,,,,,
Sol-29220,,,,,,,
Sol-29221,,,,,,,
Sol-29222,,,,,,,
Sol-29223,,,,,,,
Sol-29224,,,,,,,
Sol-29225,,,,,,,
Sol-29226,,,,,,,
Sol-29227,,,,,,,
Sol-29228,,,,,,,
Sol-29229,,,,,,,
Sol-29230,,,,,,,
Sol-29231,,,,,,,
Sol-29232,,,,,,,
Sol-29233,,,,,,,
Sol-29234,,,,,,,
Sol-29235,,,,,,,
Sol-29236,,,,,,,
Sol-29237,,,,,,,
Sol-29238,,,,,,,
Sol-29239,,,,,,,
Sol-29240,,,,,,,
Sol-29241,,,,,,,
Sol-29242,,,,,,,
Sol-29243,,,,,,,
Sol-29244,,,,,,,
Sol-29245,,,,,,,
Sol-29246,,,,,,,
Sol-29247,,,,,,,
Sol-29248,,,,,,,
Sol-29249,,,,,,,
Sol-29250,,,,,,,
Sol-29251,,,,,,,
Sol-29252,,,,,,,
Sol-29253,,,,,,,
Sol-29254,,,,,,,
Sol-29255,,,,,,,
Sol-29256,,,,,,,
Sol-29257,,,,,,,
Sol-29258,,,,,,,
Sol-29259,,,,,,,
Sol-29260,,,,,,,
Sol-29261,,,,,,,
Sol-29262,,,,,,,
Sol-29263,,,,,,,
Sol-29264,,,,,,,
Sol-29265,,,,,,,
Sol-29266,,,,,,,
Sol-29267,,,,,,,
Sol-29268,,,,,,,
Sol-29269,,,,,,,
Sol-29270,,,,,,,
Sol-29271,,,,,,,
Sol-29272,,,,,,,
Sol-29273,,,,,,,
Sol-29274,,,,,,,
Sol-29275,,,,,,,
Sol-29276,,,,,,,
Sol-29277,,,,,,,
Sol-29278,,,,,,,
Sol-29279,,,,,,,
Sol-29280,,,,,,,
Sol-29281,,,,,,,
Sol-29282,,,,,,,
Sol-29283,,,,,,,
Sol-29284,,,,,,,
Sol-29285,,,,,,,
Sol-29286,,,,,,,
Sol-29287,,,,,,,
Sol-29288,,,,,,,
Sol-29289,,,,,,,
Sol-29290,,,,,,,
Sol-29291,,,,,,,
Sol-29292,,,,,,,
Sol-29293,,,,,,,
Sol-29294,,,,,,,
Sol-29295,,,,,,,
Sol-29296,,,,,,,
Sol-29297,,,,,,,
Sol-29298,,,,,,,
Sol-29299,,,,,,,
Sol-29300,,,,,,,
Sol-29301,,,,,,,
Sol-29302,,,,,,,
Sol-29303,,,,,,,
Sol-29304,,,,,,,
Sol-29305,,,,,,,
Sol-29306,,,,,,,
Sol-29307,,,,,,,
Sol-29308,,,,,,,
Sol-29309,,,,,,,
Sol-29310,,,,,,,
Sol-29311,,,,,,,
Sol-29312,,,,,,,
Sol-29313,,,,,,,
Sol-29314,,,,,,,
Sol-29315,,,,,,,
Sol-29316,,,,,,,
Sol-29317,,,,,,,
Sol-29318,,,,,,,
Sol-29319,,,,,,,
Sol-29320,,,,,,,
Sol-29321,,,,,,,
Sol-29322,,,,,,,
Sol-29323,,,,,,,
Sol-29324,,,,,,,
Sol-29325,,,,,,,
Sol-29326,,,,,,,
Sol-29327,,,,,,,
Sol-29328,,,,,,,
Sol-29329,,,,,,,
Sol-29330,,,,,,,
Sol-29331,,,,,,,
Sol-29332,,,,,,,
Sol-29333,,,,,,,
Sol-29334,,,,,,,
Sol-29335,,,,,,,
Sol-29336,,,,,,,
Sol-29337,,,,,,,
Sol-29338,,,,,,,
Sol-29339,,,,,,,
Sol-29340,,,,,,,
Sol-29341,,,,,,,
Sol-29342,,,,,,,
Sol-29343,,,,,,,
Sol-29344,,,,,,,
Sol-29345,,,,,,,
Sol-29346,,,,,,,
Sol-29347,,,,,,,
Sol-29348,,,,,,,
Sol-29349,,,,,,,
Sol-29350,,,,,,,
Sol-29351,,,,,,,
Sol-29352,,,,,,,
Sol-29353,,,,,,,
Sol-29354,,,,,,,
Sol-29355,,,,,,,
Sol-29356,,,,,,,
Sol-29357,,,,,,,
Sol-29358,,,,,,,
Sol-29359,,,,,,,
Sol-29360,,,,,,,
Sol-29361,,,,,,,
Sol-29362,,,,,,,
Sol-29363,,,,,,,
Sol-29364,,,,,,,
Sol-29365,,,,,,,
Sol-29366,,,,,,,
Sol-29367,,,,,,,
Sol-29368,,,,,,,
Sol-29369,,,,,,,
Sol-29370,,,,,,,
Sol-29371,,,,,,,
Sol-29372,,,,,,,
Sol-29373,,,,,,,
Sol-29374,,,,,,,
Sol-29375,,,,,,,
Sol-29376,,,,,,,
Sol-29377,,,,,,,
Sol-29378,,,,,,,
Sol-29379,,,,,,,
Sol-29380,,,,,,,
Sol-29381,,,,,,,
Sol-29382,,,,,,,
Sol-29383,,,,,,,
Sol-29384,,,,,,,
Sol-29385,,,,,,,
Sol-29386,,,,,,,
Sol-29387,,,,,,,
Sol-29388,,,,,,,
Sol-29389,,,,,,,
Sol-29390,,,,,,,
Sol-29391,,,,,,,
Sol-29392,,,,,,,
Sol-29393,,,,,,,
Sol-29394,,,,,,,
Sol-29395,,,,,,,
Sol-29396,,,,,,,
Sol-29397,,,,,,,
Sol-29398,,,,,,,
Sol-29399,,,,,,,
Sol-29400,,,,,,,
Sol-29401,,,,,,,
Sol-29402,,,,,,,
Sol-29403,,,,,,,
Sol-29404,,,,,,,
Sol-29405,,,,,,,
Sol-29406,,,,,,,
Sol-29407,,,,,,,
Sol-29408,,,,,,,
Sol-29409,,,,,,,
Sol-29410,,,,,,,
Sol-29411,,,,,,,
Sol-29412,,,,,,,
Sol-29413,,,,,,,
Sol-29414,,,,,,,
Sol-29415,,,,,,,
Sol-29416,,,,,,,
Sol-29417,,,,,,,
Sol-29418,,,,,,,
Sol-29419,,,,,,,
Sol-29420,,,,,,,
Sol-29421,,,,,,,
Sol-29422,,,,,,,
Sol-29423,,,,,,,
Sol-29424,,,,,,,
Sol-29425,,,,,,,
Sol-29426,,,,,,,
Sol-29427,,,,,,,
Sol-29428,,,,,,,
Sol-29429,,,,,,,
Sol-29430,,,,,,,
Sol-29431,,,,,,,
Sol-29432,,,,,,,
Sol-29433,,,,,,,
Sol-29434,,,,,,,
Sol-29435,,,,,,,
Sol-29436,,,,,,,
Sol-29437,,,,,,,
Sol-29438,,,,,,,
Sol-29439,,,,,,,
Sol-29440,,,,,,,
Sol-29441,,,,,,,
Sol-29442,,,,,,,
Sol-29443,,,,,,,
Sol-29444,,,,,,,
Sol-29445,,,,,,,
Sol-29446,,,,,,,
Sol-29447,,,,,,,
Sol-29448,,,,,,,
Sol-29449,,,,,,,
Sol-29450,,,,,,,
Sol-29451,,,,,,,
Sol-29452,,,,,,,
Sol-29453,,,,,,,
Sol-29454,,,,,,,
Sol-29455,,,,,,,
Sol-29456,,,,,,,
Sol-29457,,,,,,,
Sol-29458,,,,,,,
Sol-29459,,,,,,,
Sol-29460,,,,,,,
Sol-29461,,,,,,,
Sol-29462,,,,,,,
Sol-29463,,,,,,,
Sol-29464,,,,,,,
Sol-29465,,,,,,,
Sol-29466,,,,,,,
Sol-29467,,,,,,,
Sol-29468,,,,,,,
Sol-29469,,,,,,,
Sol-29470,,,,,,,
Sol-29471,,,,,,,
Sol-29472,,,,,,,
Sol-29473,,,,,,,
Sol-29474,,,,,,,
Sol-29475,,,,,,,
Sol-29476,,,,,,,
Sol-29477,,,,,,,
Sol-29478,,,,,,,
Sol-29479,,,,,,,
Sol-29480,,,,,,,
Sol-29481,,,,,,,
Sol-29482,,,,,,,
Sol-29483,,,,,,,
Sol-29484,,,,,,,
Sol-29485,,,,,,,
Sol-29486,,,,,,,
Sol-29487,,,,,,,
Sol-29488,,,,,,,
Sol-29489,,,,,,,
Sol-29490,,,,,,,
Sol-29491,,,,,,,
Sol-29492,,,,,,,
Sol-29493,,,,,,,
Sol-29494,,,,,,,
Sol-29495,,,,,,,
Sol-29496,,,,,,,
Sol-29497,,,,,,,
Sol-29498,,,,,,,
Sol-29499,,,,,,,
Sol-29500,,,,,,,
Sol-29501,,,,,,,
Sol-29502,,,,,,,
Sol-29503,,,,,,,
Sol-29504,,,,,,,
Sol-29505,,,,,,,
Sol-29506,,,,,,,
Sol-29507,,,,,,,
Sol-29508,,,,,,,
Sol-29509,,,,,,,
Sol-29510,,,,,,,
Sol-29511,,,,,,,
Sol-29512,,,,,,,
Sol-29513,,,,,,,
Sol-29514,,,,,,,
Sol-29515,,,,,,,
Sol-29516,,,,,,,
Sol-29517,,,,,,,
Sol-29518,,,,,,,
Sol-29519,,,,,,,
Sol-29520,,,,,,,
Sol-29521,,,,,,,
Sol-29522,,,,,,,
Sol-29523,,,,,,,
Sol-29524,,,,,,,
Sol-29525,,,,,,,
Sol-29526,,,,,,,
Sol-29527,,,,,,,
Sol-29528,,,,,,,
Sol-29529,,,,,,,
Sol-29530,,,,,,,
Sol-29531,,,,,,,
Sol-29532,,,,,,,
Sol-29533,,,,,,,
Sol-29534,,,,,,,
Sol-29535,,,,,,,
Sol-29536,,,,,,,
Sol-29537,,,,,,,
Sol-29538,,,,,,,
Sol-29539,,,,,,,
Sol-29540,,,,,,,
Sol-29541,,,,,,,
Sol-29542,,,,,,,
Sol-29543,,,,,,,
Sol-29544,,,,,,,
Sol-29545,,,,,,,
Sol-29546,,,,,,,
Sol-29547,,,,,,,
Sol-29548,,,,,,,
Sol-29549,,,,,,,
Sol-29550,,,,,,,
Sol-29551,,,,,,,
Sol-29552,,,,,,,
Sol-29553,,,,,,,
Sol-29554,,,,,,,
Sol-29555,,,,,,,
Sol-29556,,,,,,,
Sol-29557,,,,,,,
Sol-29558,,,,,,,
Sol-29559,,,,,,,
Sol-29560,,,,,,,
Sol-29561,,,,,,,
Sol-29562,,,,,,,
Sol-29563,,,,,,,
Sol-29564,,,,,,,
Sol-29565,,,,,,,
Sol-29566,,,,,,,
Sol-29567,,,,,,,
Sol-29568,,,,,,,
Sol-29569,,,,,,,
Sol-29570,,,,,,,
Sol-29571,,,,,,,
Sol-29572,,,,,,,
Sol-29573,,,,,,,
Sol-29574,,,,,,,
Sol-29575,,,,,,,
Sol-29576,,,,,,,
Sol-29577,,,,,,,
Sol-29578,,,,,,,
Sol-29579,,,,,,,
Sol-29580,,,,,,,
Sol-29581,,,,,,,
Sol-29582,,,,,,,
Sol-29583,,,,,,,
Sol-29584,,,,,,,
Sol-29585,,,,,,,
Sol-29586,,,,,,,
Sol-29587,,,,,,,
Sol-29588,,,,,,,
Sol-29589,,,,,,,
Sol-29590,,,,,,,
Sol-29591,,,,,,,
Sol-29592,,,,,,,
Sol-29593,,,,,,,
Sol-29594,,,,,,,
Sol-29595,,,,,,,
Sol-29596,,,,,,,
Sol-29597,,,,,,,
Sol-29598,,,,,,,
Sol-29599,,,,,,,
Sol-29600,,,,,,,
Sol-29601,,,,,,,
Sol-29602,,,,,,,
Sol-29603,,,,,,,
Sol-29604,,,,,,,
Sol-29605,,,,,,,
Sol-29606,,,,,,,
Sol-29607,,,,,,,
Sol-29608,,,,,,,
Sol-29609,,,,,,,
Sol-29610,,,,,,,
Sol-29611,,,,,,,
Sol-29612,,,,,,,
Sol-29613,,,,,,,
Sol-29614,,,,,,,
Sol-29615,,,,,,,
Sol-29616,,,,,,,
Sol-29617,,,,,,,
Sol-29618,,,,,,,
Sol-29619,,,,,,,
Sol-29620,,,,,,,
Sol-29621,,,,,,,
Sol-29622,,,,,,,
Sol-29623,,,,,,,
Sol-29624,,,,,,,
Sol-29625,,,,,,,
Sol-29626,,,,,,,
Sol-29627,,,,,,,
Sol-29628,,,,,,,
Sol-29629,,,,,,,
Sol-29630,,,,,,,
Sol-29631,,,,,,,
Sol-29632,,,,,,,
Sol-29633,,,,,,,
Sol-29634,,,,,,,
Sol-29635,,,,,,,
Sol-29636,,,,,,,
Sol-29637,,,,,,,
Sol-29638,,,,,,,
Sol-29639,,,,,,,
Sol-29640,,,,,,,
Sol-29641,,,,,,,
Sol-29642,,,,,,,
Sol-29643,,,,,,,
Sol-29644,,,,,,,
Sol-29645,,,,,,,
Sol-29646,,,,,,,
Sol-29647,,,,,,,
Sol-29648,,,,,,,
Sol-29649,,,,,,,
Sol-29650,,,,,,,
Sol-29651,,,,,,,
Sol-29652,,,,,,,
Sol-29653,,,,,,,
Sol-29654,,,,,,,
Sol-29655,,,,,,,
Sol-29656,,,,,,,
Sol-29657,,,,,,,
Sol-29658,,,,,,,
Sol-29659,,,,,,,
Sol-29660,,,,,,,
Sol-29661,,,,,,,
Sol-29662,,,,,,,
Sol-29663,,,,,,,
Sol-29664,,,,,,,
Sol-29665,,,,,,,
Sol-29666,,,,,,,
Sol-29667,,,,,,,
Sol-29668,,,,,,,
Sol-29669,,,,,,,
Sol-29670,,,,,,,
Sol-29671,,,,,,,
Sol-29672,,,,,,,
Sol-29673,,,,,,,
Sol-29674,,,,,,,
Sol-29675,,,,,,,
Sol-29676,,,,,,,
Sol-29677,,,,,,,
Sol-29678,,,,,,,
Sol-29679,,,,,,,
Sol-29680,,,,,,,
Sol-29681,,,,,,,
Sol-29682,,,,,,,
Sol-29683,,,,,,,
Sol-29684,,,,,,,
Sol-29685,,,,,,,
Sol-29686,,,,,,,
Sol-29687,,,,,,,
Sol-29688,,,,,,,
Sol-29689,,,,,,,
Sol-29690,,,,,,,
Sol-29691,,,,,,,
Sol-29692,,,,,,,
Sol-29693,,,,,,,
Sol-29694,,,,,,,
Sol-29695,,,,,,,
Sol-29696,,,,,,,
Sol-29697,,,,,,,
Sol-29698,,,,,,,
Sol-29699,,,,,,,
Sol-29700,,,,,,,
Sol-29701,,,,,,,
Sol-29702,,,,,,,
Sol-29703,,,,,,,
Sol-29704,,,,,,,
Sol-29705,,,,,,,
Sol-29706,,,,,,,
Sol-29707,,,,,,,
Sol-29708,,,,,,,
Sol-29709,,,,,,,
Sol-29710,,,,,,,
Sol-29711,,,,,,,
Sol-29712,,,,,,,
Sol-29713,,,,,,,
Sol-29714,,,,,,,
Sol-29715,,,,,,,
Sol-29716,,,,,,,
Sol-29717,,,,,,,
Sol-29718,,,,,,,
Sol-29719,,,,,,,
Sol-29720,,,,,,,
Sol-29721,,,,,,,
Sol-29722,,,,,,,
Sol-29723,,,,,,,
Sol-29724,,,,,,,
Sol-29725,,,,,,,
Sol-29726,,,,,,,
Sol-29727,,,,,,,
Sol-29728,,,,,,,
Sol-29729,,,,,,,
Sol-29730,,,,,,,
Sol-29731,,,,,,,
Sol-29732,,,,,,,
Sol-29733,,,,,,,
Sol-29734,,,,,,,
Sol-29735,,,,,,,
Sol-29736,,,,,,,
Sol-29737,,,,,,,
Sol-29738,,,,,,,
Sol-29739,,,,,,,
Sol-29740,,,,,,,
Sol-29741,,,,,,,
Sol-29742,,,,,,,
Sol-29743,,,,,,,
Sol-29744,,,,,,,
Sol-29745,,,,,,,
Sol-29746,,,,,,,
Sol-29747,,,,,,,
Sol-29748,,,,,,,
Sol-29749,,,,,,,
Sol-29750,,,,,,,
Sol-29751,,,,,,,
Sol-29752,,,,,,,
Sol-29753,,,,,,,
Sol-29754,,,,,,,
Sol-29755,,,,,,,
Sol-29756,,,,,,,
Sol-29757,,,,,,,
Sol-29758,,,,,,,
Sol-29759,,,,,,,
Sol-29760,,,,,,,
Sol-29761,,,,,,,
Sol-29762,,,,,,,
Sol-29763,,,,,,,
Sol-29764,,,,,,,
Sol-29765,,,,,,,
Sol-29766,,,,,,,
Sol-29767,,,,,,,
Sol-29768,,,,,,,
Sol-29769,,,,,,,
Sol-29770,,,,,,,
Sol-29771,,,,,,,
Sol-29772,,,,,,,
Sol-29773,,,,,,,
Sol-29774,,,,,,,
Sol-29775,,,,,,,
Sol-29776,,,,,,,
Sol-29777,,,,,,,
Sol-29778,,,,,,,
Sol-29779,,,,,,,
Sol-29780,,,,,,,
Sol-29781,,,,,,,
Sol-29782,,,,,,,
Sol-29783,,,,,,,
Sol-29784,,,,,,,
Sol-29785,,,,,,,
Sol-29786,,,,,,,
Sol-29787,,,,,,,
Sol-29788,,,,,,,
Sol-29789,,,,,,,
Sol-29790,,,,,,,
Sol-29791,,,,,,,
Sol-29792,,,,,,,
Sol-29793,,,,,,,
Sol-29794,,,,,,,
Sol-29795,,,,,,,
Sol-29796,,,,,,,
Sol-29797,,,,,,,
Sol-29798,,,,,,,
Sol-29799,,,,,,,
Sol-29800,,,,,,,
Sol-29801,,,,,,,
Sol-29802,,,,,,,
Sol-29803,,,,,,,
Sol-29804,,,,,,,
Sol-29805,,,,,,,
Sol-29806,,,,,,,
Sol-29807,,,,,,,
Sol-29808,,,,,,,
Sol-29809,,,,,,,
Sol-29810,,,,,,,
Sol-29811,,,,,,,
Sol-29812,,,,,,,
Sol-29813,,,,,,,
Sol-29814,,,,,,,
Sol-29815,,,,,,,
Sol-29816,,,,,,,
Sol-29817,,,,,,,
Sol-29818,,,,,,,
Sol-29819,,,,,,,
Sol-29820,,,,,,,
Sol-29821,,,,,,,
Sol-29822,,,,,,,
Sol-29823,,,,,,,
Sol-29824,,,,,,,
Sol-29825,,,,,,,
Sol-29826,,,,,,,
Sol-29827,,,,,,,
Sol-29828,,,,,,,
Sol-29829,,,,,,,
Sol-29830,,,,,,,
Sol-29831,,,,,,,
Sol-29832,,,,,,,
Sol-29833,,,,,,,
Sol-29834,,,,,,,
Sol-29835,,,,,,,
Sol-29836,,,,,,,
Sol-29837,,,,,,,
Sol-29838,,,,,,,
Sol-29839,,,,,,,
Sol-29840,,,,,,,
Sol-29841,,,,,,,
Sol-29842,,,,,,,
Sol-29843,,,,,,,
Sol-29844,,,,,,,
Sol-29845,,,,,,,
Sol-29846,,,,,,,
Sol-29847,,,,,,,
Sol-29848,,,,,,,
Sol-29849,,,,,,,
Sol-29850,,,,,,,
Sol-29851,,,,,,,
Sol-29852,,,,,,,
Sol-29853,,,,,,,
Sol-29854,,,,,,,
Sol-29855,,,,,,,
Sol-29856,,,,,,,
Sol-29857,,,,,,,
Sol-29858,,,,,,,
Sol-29859,,,,,,,
Sol-29860,,,,,,,
Sol-29861,,,,,,,
Sol-29862,,,,,,,
Sol-29863,,,,,,,
Sol-29864,,,,,,,
Sol-29865,,,,,,,
Sol-29866,,,,,,,
Sol-29867,,,,,,,
Sol-29868,,,,,,,
Sol-29869,,,,,,,
Sol-29870,,,,,,,
Sol-29871,,,,,,,
Sol-29872,,,,,,,
Sol-29873,,,,,,,
Sol-29874,,,,,,,
Sol-29875,,,,,,,
Sol-29876,,,,,,,
Sol-29877,,,,,,,
Sol-29878,,,,,,,
Sol-29879,,,,,,,
Sol-29880,,,,,,,
Sol-29881,,,,,,,
Sol-29882,,,,,,,
Sol-29883,,,,,,,
Sol-29884,,,,,,,
Sol-29885,,,,,,,
Sol-29886,,,,,,,
Sol-29887,,,,,,,
Sol-29888,,,,,,,
Sol-29889,,,,,,,
Sol-29890,,,,,,,
Sol-29891,,,,,,,
Sol-29892,,,,,,,
Sol-29893,,,,,,,
Sol-29894,,,,,,,
Sol-29895,,,,,,,
Sol-29896,,,,,,,
Sol-29897,,,,,,,
Sol-29898,,,,,,,
Sol-29899,,,,,,,
Sol-29900,,,,,,,
Sol-29901,,,,,,,
Sol-29902,,,,,,,
Sol-29903,,,,,,,
Sol-29904,,,,,,,
Sol-29905,,,,,,,
Sol-29906,,,,,,,
Sol-29907,,,,,,,
Sol-29908,,,,,,,
Sol-29909,,,,,,,
Sol-29910,,,,,,,
Sol-29911,,,,,,,
Sol-29912,,,,,,,
Sol-29913,,,,,,,
Sol-29914,,,,,,,
Sol-29915,,,,,,,
Sol-29916,,,,,,,
Sol-29917,,,,,,,
Sol-29918,,,,,,,
Sol-29919,,,,,,,
Sol-29920,,,,,,,
Sol-29921,,,,,,,
Sol-29922,,,,,,,
Sol-29923,,,,,,,
Sol-29924,,,,,,,
Sol-29925,,,,,,,
Sol-29926,,,,,,,
Sol-29927,,,,,,,
Sol-29928,,,,,,,
Sol-29929,,,,,,,
Sol-29930,,,,,,,
Sol-29931,,,,,,,
Sol-29932,,,,,,,
Sol-29933,,,,,,,
Sol-29934,,,,,,,
Sol-29935,,,,,,,
Sol-29936,,,,,,,
Sol-29937,,,,,,,
Sol-29938,,,,,,,
Sol-29939,,,,,,,
Sol-29940,,,,,,,
Sol-29941,,,,,,,
Sol-29942,,,,,,,
Sol-29943,,,,,,,
Sol-29944,,,,,,,
Sol-29945,,,,,,,
Sol-29946,,,,,,,
Sol-29947,,,,,,,
Sol-29948,,,,,,,
Sol-29949,,,,,,,
Sol-29950,,,,,,,
Sol-29951,,,,,,,
Sol-29952,,,,,,,
Sol-29953,,,,,,,
Sol-29954,,,,,,,
Sol-29955,,,,,,,
Sol-29956,,,,,,,
Sol-29957,,,,,,,
Sol-29958,,,,,,,
Sol-29959,,,,,,,
Sol-29960,,,,,,,
Sol-29961,,,,,,,
Sol-29962,,,,,,,
Sol-29963,,,,,,,
Sol-29964,,,,,,,
Sol-29965,,,,,,,
Sol-29966,,,,,,,
Sol-29967,,,,,,,
Sol-29968,,,,,,,
Sol-29969,,,,,,,
Sol-29970,,,,,,,
Sol-29971,,,,,,,
Sol-29972,,,,,,,
Sol-29973,,,,,,,
Sol-29974,,,,,,,
Sol-29975,,,,,,,
Sol-29976,,,,,,,
Sol-29977,,,,,,,
Sol-29978,,,,,,,
Sol-29979,,,,,,,
Sol-29980,,,,,,,
Sol-29981,,,,,,,
Sol-29982,,,,,,,
Sol-29983,,,,,,,
Sol-29984,,,,,,,
Sol-29985,,,,,,,
Sol-29986,,,,,,,
Sol-29987,,,,,,,
Sol-29988,,,,,,,
Sol-29989,,,,,,,
Sol-29990,,,,,,,
Sol-29991,,,,,,,
Sol-29992,,,,,,,
Sol-29993,,,,,,,
Sol-29994,,,,,,,
Sol-29995,,,,,,,
Sol-29996,,,,,,,
Sol-29997,,,,,,,
Sol-29998,,,,,,,
Sol-29999,,,,,,,
Sol-30000,,,,,,,
Sol-30001,,,,,,,
Sol-30002,,,,,,,
Sol-30003,,,,,,,
Sol-30004,,,,,,,
Sol-30005,,,,,,,
Sol-30006,,,,,,,
Sol-30007,,,,,,,
Sol-30008,,,,,,,
Sol-30009,,,,,,,
Sol-30010,,,,,,,
Sol-30011,,,,,,,
Sol-30012,,,,,,,
Sol-30013,,,,,,,
Sol-30014,,,,,,,
Sol-30015,,,,,,,
Sol-30016,,,,,,,
Sol-30017,,,,,,,
Sol-30018,,,,,,,
Sol-30019,,,,,,,
Sol-30020,,,,,,,
Sol-30021,,,,,,,
Sol-30022,,,,,,,
Sol-30023,,,,,,,
Sol-30024,,,,,,,
Sol-30025,,,,,,,
Sol-30026,,,,,,,
Sol-30027,,,,,,,
Sol-30028,,,,,,,
Sol-30029,,,,,,,
Sol-30030,,,,,,,
Sol-30031,,,,,,,
Sol-30032,,,,,,,
Sol-30033,,,,,,,
Sol-30034,,,,,,,
Sol-30035,,,,,,,
Sol-30036,,,,,,,
Sol-30037,,,,,,,
Sol-30038,,,,,,,
Sol-30039,,,,,,,
Sol-30040,,,,,,,
Sol-30041,,,,,,,
Sol-30042,,,,,,,
Sol-30043,,,,,,,
Sol-30044,,,,,,,
Sol-30045,,,,,,,
Sol-30046,,,,,,,
Sol-30047,,,,,,,
Sol-30048,,,,,,,
Sol-30049,,,,,,,
Sol-30050,,,,,,,
Sol-30051,,,,,,,
Sol-30052,,,,,,,
Sol-30053,,,,,,,
Sol-30054,,,,,,,
Sol-30055,,,,,,,
Sol-30056,,,,,,,
Sol-30057,,,,,,,
Sol-30058,,,,,,,
Sol-30059,,,,,,,
Sol-30060,,,,,,,
Sol-30061,,,,,,,
Sol-30062,,,,,,,
Sol-30063,,,,,,,
Sol-30064,,,,,,,
Sol-30065,,,,,,,
Sol-30066,,,,,,,
Sol-30067,,,,,,,
Sol-30068,,,,,,,
Sol-30069,,,,,,,
Sol-30070,,,,,,,
Sol-30071,,,,,,,
Sol-30072,,,,,,,
Sol-30073,,,,,,,
Sol-30074,,,,,,,
Sol-30075,,,,,,,
Sol-30076,,,,,,,
Sol-30077,,,,,,,
Sol-30078,,,,,,,
Sol-30079,,,,,,,
Sol-30080,,,,,,,
Sol-30081,,,,,,,
Sol-30082,,,,,,,
Sol-30083,,,,,,,
Sol-30084,,,,,,,
Sol-30085,,,,,,,
Sol-30086,,,,,,,
Sol-30087,,,,,,,
Sol-30088,,,,,,,
Sol-30089,,,,,,,
Sol-30090,,,,,,,
Sol-30091,,,,,,,
Sol-30092,,,,,,,
Sol-30093,,,,,,,
Sol-30094,,,,,,,
Sol-30095,,,,,,,
Sol-30096,,,,,,,
Sol-30097,,,,,,,
Sol-30098,,,,,,,
Sol-30099,,,,,,,
Sol-30100,,,,,,,
Sol-30101,,,,,,,
Sol-30102,,,,,,,
Sol-30103,,,,,,,
Sol-30104,,,,,,,
Sol-30105,,,,,,,
Sol-30106,,,,,,,
Sol-30107,,,,,,,
Sol-30108,,,,,,,
Sol-30109,,,,,,,
Sol-30110,,,,,,,
Sol-30111,,,,,,,
Sol-30112,,,,,,,
Sol-30113,,,,,,,
Sol-30114,,,,,,,
Sol-30115,,,,,,,
Sol-30116,,,,,,,
Sol-30117,,,,,,,
Sol-30118,,,,,,,
Sol-30119,,,,,,,
Sol-30120,,,,,,,
Sol-30121,,,,,,,
Sol-30122,,,,,,,
Sol-30123,,,,,,,
Sol-30124,,,,,,,
Sol-30125,,,,,,,
Sol-30126,,,,,,,
Sol-30127,,,,,,,
Sol-30128,,,,,,,
Sol-30129,,,,,,,
Sol-30130,,,,,,,
Sol-30131,,,,,,,
Sol-30132,,,,,,,
Sol-30133,,,,,,,
Sol-30134,,,,,,,
Sol-30135,,,,,,,
Sol-30136,,,,,,,
Sol-30137,,,,,,,
Sol-30138,,,,,,,
Sol-30139,,,,,,,
Sol-30140,,,,,,,
Sol-30141,,,,,,,
Sol-30142,,,,,,,
Sol-30143,,,,,,,
Sol-30144,,,,,,,
Sol-30145,,,,,,,
Sol-30146,,,,,,,
Sol-30147,,,,,,,
Sol-30148,,,,,,,
Sol-30149,,,,,,,
Sol-30150,,,,,,,
Sol-30151,,,,,,,
Sol-30152,,,,,,,
Sol-30153,,,,,,,
Sol-30154,,,,,,,
Sol-30155,,,,,,,
Sol-30156,,,,,,,
Sol-30157,,,,,,,
Sol-30158,,,,,,,
Sol-30159,,,,,,,
Sol-30160,,,,,,,
Sol-30161,,,,,,,
Sol-30162,,,,,,,
Sol-30163,,,,,,,
Sol-30164,,,,,,,
Sol-30165,,,,,,,
Sol-30166,,,,,,,
Sol-30167,,,,,,,
Sol-30168,,,,,,,
Sol-30169,,,,,,,
Sol-30170,,,,,,,
Sol-30171,,,,,,,
Sol-30172,,,,,,,
Sol-30173,,,,,,,
Sol-30174,,,,,,,
Sol-30175,,,,,,,
Sol-30176,,,,,,,
Sol-30177,,,,,,,
Sol-30178,,,,,,,
Sol-30179,,,,,,,
Sol-30180,,,,,,,
Sol-30181,,,,,,,
Sol-30182,,,,,,,
Sol-30183,,,,,,,
Sol-30184,,,,,,,
Sol-30185,,,,,,,
Sol-30186,,,,,,,
Sol-30187,,,,,,,
Sol-30188,,,,,,,
Sol-30189,,,,,,,
Sol-30190,,,,,,,
Sol-30191,,,,,,,
Sol-30192,,,,,,,
Sol-30193,,,,,,,
Sol-30194,,,,,,,
Sol-30195,,,,,,,
Sol-30196,,,,,,,
Sol-30197,,,,,,,
Sol-30198,,,,,,,
Sol-30199,,,,,,,
Sol-30200,,,,,,,
Sol-30201,,,,,,,
Sol-30202,,,,,,,
Sol-30203,,,,,,,
Sol-30204,,,,,,,
Sol-30205,,,,,,,
Sol-30206,,,,,,,
Sol-30207,,,,,,,
Sol-30208,,,,,,,
Sol-30209,,,,,,,
Sol-30210,,,,,,,
Sol-30211,,,,,,,
Sol-30212,,,,,,,
Sol-30213,,,,,,,
Sol-30214,,,,,,,
Sol-30215,,,,,,,
Sol-30216,,,,,,,
Sol-30217,,,,,,,
Sol-30218,,,,,,,
Sol-30219,,,,,,,
Sol-30220,,,,,,,
Sol-30221,,,,,,,
Sol-30222,,,,,,,
Sol-30223,,,,,,,
Sol-30224,,,,,,,
Sol-30225,,,,,,,
Sol-30226,,,,,,,
Sol-30227,,,,,,,
Sol-30228,,,,,,,
Sol-30229,,,,,,,
Sol-30230,,,,,,,
Sol-30231,,,,,,,
Sol-30232,,,,,,,
Sol-30233,,,,,,,
Sol-30234,,,,,,,
Sol-30235,,,,,,,
Sol-30236,,,,,,,
Sol-30237,,,,,,,
Sol-30238,,,,,,,
Sol-30239,,,,,,,
Sol-30240,,,,,,,
Sol-30241,,,,,,,
Sol-30242,,,,,,,
Sol-30243,,,,,,,
Sol-30244,,,,,,,
Sol-30245,,,,,,,
Sol-30246,,,,,,,
Sol-30247,,,,,,,
Sol-30248,,,,,,,
Sol-30249,,,,,,,
Sol-30250,,,,,,,
Sol-30251,,,,,,,
Sol-30252,,,,,,,
Sol-30253,,,,,,,
Sol-30254,,,,,,,
Sol-30255,,,,,,,
Sol-30256,,,,,,,
Sol-30257,,,,,,,
Sol-30258,,,,,,,
Sol-30259,,,,,,,
Sol-30260,,,,,,,
Sol-30261,,,,,,,
Sol-30262,,,,,,,
Sol-30263,,,,,,,
Sol-30264,,,,,,,
Sol-30265,,,,,,,
Sol-30266,,,,,,,
Sol-30267,,,,,,,
Sol-30268,,,,,,,
Sol-30269,,,,,,,
Sol-30270,,,,,,,
Sol-30271,,,,,,,
Sol-30272,,,,,,,
Sol-30273,,,,,,,
Sol-30274,,,,,,,
Sol-30275,,,,,,,
Sol-30276,,,,,,,
Sol-30277,,,,,,,
Sol-30278,,,,,,,
Sol-30279,,,,,,,
Sol-30280,,,,,,,
Sol-30281,,,,,,,
Sol-30282,,,,,,,
Sol-30283,,,,,,,
Sol-30284,,,,,,,
Sol-30285,,,,,,,
Sol-30286,,,,,,,
Sol-30287,,,,,,,
Sol-30288,,,,,,,
Sol-30289,,,,,,,
Sol-30290,,,,,,,
Sol-30291,,,,,,,
Sol-30292,,,,,,,
Sol-30293,,,,,,,
Sol-30294,,,,,,,
Sol-30295,,,,,,,
Sol-30296,,,,,,,
Sol-30297,,,,,,,
Sol-30298,,,,,,,
Sol-30299,,,,,,,
Sol-30300,,,,,,,
Sol-30301,,,,,,,
Sol-30302,,,,,,,
Sol-30303,,,,,,,
Sol-30304,,,,,,,
Sol-30305,,,,,,,
Sol-30306,,,,,,,
Sol-30307,,,,,,,
Sol-30308,,,,,,,
Sol-30309,,,,,,,
Sol-30310,,,,,,,
Sol-30311,,,,,,,
Sol-30312,,,,,,,
Sol-30313,,,,,,,
Sol-30314,,,,,,,
Sol-30315,,,,,,,
Sol-30316,,,,,,,
Sol-30317,,,,,,,
Sol-30318,,,,,,,
Sol-30319,,,,,,,
Sol-30320,,,,,,,
Sol-30321,,,,,,,
Sol-30322,,,,,,,
Sol-30323,,,,,,,
Sol-30324,,,,,,,
Sol-30325,,,,,,,
Sol-30326,,,,,,,
Sol-30327,,,,,,,
Sol-30328,,,,,,,
Sol-30329,,,,,,,
Sol-30330,,,,,,,
Sol-30331,,,,,,,
Sol-30332,,,,,,,
Sol-30333,,,,,,,
Sol-30334,,,,,,,
Sol-30335,,,,,,,
Sol-30336,,,,,,,
Sol-30337,,,,,,,
Sol-30338,,,,,,,
Sol-30339,,,,,,,
Sol-30340,,,,,,,
Sol-30341,,,,,,,
Sol-30342,,,,,,,
Sol-30343,,,,,,,
Sol-30344,,,,,,,
Sol-30345,,,,,,,
Sol-30346,,,,,,,
Sol-30347,,,,,,,
Sol-30348,,,,,,,
Sol-30349,,,,,,,
Sol-30350,,,,,,,
Sol-30351,,,,,,,
Sol-30352,,,,,,,
Sol-30353,,,,,,,
Sol-30354,,,,,,,
Sol-30355,,,,,,,
Sol-30356,,,,,,,
Sol-30357,,,,,,,
Sol-30358,,,,,,,
Sol-30359,,,,,,,
Sol-30360,,,,,,,
Sol-30361,,,,,,,
Sol-30362,,,,,,,
Sol-30363,,,,,,,
Sol-30364,,,,,,,
Sol-30365,,,,,,,
Sol-30366,,,,,,,
Sol-30367,,,,,,,
Sol-30368,,,,,,,
Sol-30369,,,,,,,
Sol-30370,,,,,,,
Sol-30371,,,,,,,
Sol-30372,,,,,,,
Sol-30373,,,,,,,
Sol-30374,,,,,,,
Sol-30375,,,,,,,
Sol-30376,,,,,,,
Sol-30377,,,,,,,
Sol-30378,,,,,,,
Sol-30379,,,,,,,
Sol-30380,,,,,,,
Sol-30381,,,,,,,
Sol-30382,,,,,,,
Sol-30383,,,,,,,
Sol-30384,,,,,,,
Sol-30385,,,,,,,
Sol-30386,,,,,,,
Sol-30387,,,,,,,
Sol-30388,,,,,,,
Sol-30389,,,,,,,
Sol-30390,,,,,,,
Sol-30391,,,,,,,
Sol-30392,,,,,,,
Sol-30393,,,,,,,
Sol-30394,,,,,,,
Sol-30395,,,,,,,
Sol-30396,,,,,,,
Sol-30397,,,,,,,
Sol-30398,,,,,,,
Sol-30399,,,,,,,
Sol-30400,,,,,,,
Sol-30401,,,,,,,
Sol-30402,,,,,,,
Sol-30403,,,,,,,
Sol-30404,,,,,,,
Sol-30405,,,,,,,
Sol-30406,,,,,,,
Sol-30407,,,,,,,
Sol-30408,,,,,,,
Sol-30409,,,,,,,
Sol-30410,,,,,,,
Sol-30411,,,,,,,
Sol-30412,,,,,,,
Sol-30413,,,,,,,
Sol-30414,,,,,,,
Sol-30415,,,,,,,
Sol-30416,,,,,,,
Sol-30417,,,,,,,
Sol-30418,,,,,,,
Sol-30419,,,,,,,
Sol-30420,,,,,,,
Sol-30421,,,,,,,
Sol-30422,,,,,,,
Sol-30423,,,,,,,
Sol-30424,,,,,,,
Sol-30425,,,,,,,
Sol-30426,,,,,,,
Sol-30427,,,,,,,
Sol-30428,,,,,,,
Sol-30429,,,,,,,
Sol-30430,,,,,,,
Sol-30431,,,,,,,
Sol-30432,,,,,,,
Sol-30433,,,,,,,
Sol-30434,,,,,,,
Sol-30435,,,,,,,
Sol-30436,,,,,,,
Sol-30437,,,,,,,
Sol-30438,,,,,,,
Sol-30439,,,,,,,
Sol-30440,,,,,,,
Sol-30441,,,,,,,
Sol-30442,,,,,,,
Sol-30443,,,,,,,
Sol-30444,,,,,,,
Sol-30445,,,,,,,
Sol-30446,,,,,,,
Sol-30447,,,,,,,
Sol-30448,,,,,,,
Sol-30449,,,,,,,
Sol-30450,,,,,,,
Sol-30451,,,,,,,
Sol-30452,,,,,,,
Sol-30453,,,,,,,
Sol-30454,,,,,,,
Sol-30455,,,,,,,
Sol-30456,,,,,,,
Sol-30457,,,,,,,
Sol-30458,,,,,,,
Sol-30459,,,,,,,
Sol-30460,,,,,,,
Sol-30461,,,,,,,
Sol-30462,,,,,,,
Sol-30463,,,,,,,
Sol-30464,,,,,,,
Sol-30465,,,,,,,
Sol-30466,,,,,,,
Sol-30467,,,,,,,
Sol-30468,,,,,,,
Sol-30469,,,,,,,
Sol-30470,,,,,,,
Sol-30471,,,,,,,
Sol-30472,,,,,,,
Sol-30473,,,,,,,
Sol-30474,,,,,,,
Sol-30475,,,,,,,
Sol-30476,,,,,,,
Sol-30477,,,,,,,
Sol-30478,,,,,,,
Sol-30479,,,,,,,
Sol-30480,,,,,,,
Sol-30481,,,,,,,
Sol-30482,,,,,,,
Sol-30483,,,,,,,
Sol-30484,,,,,,,
Sol-30485,,,,,,,
Sol-30486,,,,,,,
Sol-30487,,,,,,,
Sol-30488,,,,,,,
Sol-30489,,,,,,,
Sol-30490,,,,,,,
Sol-30491,,,,,,,
Sol-30492,,,,,,,
Sol-30493,,,,,,,
Sol-30494,,,,,,,
Sol-30495,,,,,,,
Sol-30496,,,,,,,
Sol-30497,,,,,,,
Sol-30498,,,,,,,
Sol-30499,,,,,,,
Sol-30500,,,,,,,
Sol-30501,,,,,,,
Sol-30502,,,,,,,
Sol-30503,,,,,,,
Sol-30504,,,,,,,
Sol-30505,,,,,,,
Sol-30506,,,,,,,
Sol-30507,,,,,,,
Sol-30508,,,,,,,
Sol-30509,,,,,,,
Sol-30510,,,,,,,
Sol-30511,,,,,,,
Sol-30512,,,,,,,
Sol-30513,,,,,,,
Sol-30514,,,,,,,
Sol-30515,,,,,,,
Sol-30516,,,,,,,
Sol-30517,,,,,,,
Sol-30518,,,,,,,
Sol-30519,,,,,,,
Sol-30520,,,,,,,
Sol-30521,,,,,,,
Sol-30522,,,,,,,
Sol-30523,,,,,,,
Sol-30524,,,,,,,
Sol-30525,,,,,,,
Sol-30526,,,,,,,
Sol-30527,,,,,,,
Sol-30528,,,,,,,
Sol-30529,,,,,,,
Sol-30530,,,,,,,
Sol-30531,,,,,,,
Sol-30532,,,,,,,
Sol-30533,,,,,,,
Sol-30534,,,,,,,
Sol-30535,,,,,,,
Sol-30536,,,,,,,
Sol-30537,,,,,,,
Sol-30538,,,,,,,
Sol-30539,,,,,,,
Sol-30540,,,,,,,
Sol-30541,,,,,,,
Sol-30542,,,,,,,
Sol-30543,,,,,,,
Sol-30544,,,,,,,
Sol-30545,,,,,,,
Sol-30546,,,,,,,
Sol-30547,,,,,,,
Sol-30548,,,,,,,
Sol-30549,,,,,,,
Sol-30550,,,,,,,
Sol-30551,,,,,,,
Sol-30552,,,,,,,
Sol-30553,,,,,,,
Sol-30554,,,,,,,
Sol-30555,,,,,,,
Sol-30556,,,,,,,
Sol-30557,,,,,,,
Sol-30558,,,,,,,
Sol-30559,,,,,,,
Sol-30560,,,,,,,
Sol-30561,,,,,,,
Sol-30562,,,,,,,
Sol-30563,,,,,,,
Sol-30564,,,,,,,
Sol-30565,,,,,,,
Sol-30566,,,,,,,
Sol-30567,,,,,,,
Sol-30568,,,,,,,
Sol-30569,,,,,,,
Sol-30570,,,,,,,
Sol-30571,,,,,,,
Sol-30572,,,,,,,
Sol-30573,,,,,,,
Sol-30574,,,,,,,
Sol-30575,,,,,,,
Sol-30576,,,,,,,
Sol-30577,,,,,,,
Sol-30578,,,,,,,
Sol-30579,,,,,,,
Sol-30580,,,,,,,
Sol-30581,,,,,,,
Sol-30582,,,,,,,
Sol-30583,,,,,,,
Sol-30584,,,,,,,
Sol-30585,,,,,,,
Sol-30586,,,,,,,
Sol-30587,,,,,,,
Sol-30588,,,,,,,
Sol-30589,,,,,,,
Sol-30590,,,,,,,
Sol-30591,,,,,,,
Sol-30592,,,,,,,
Sol-30593,,,,,,,
Sol-30594,,,,,,,
Sol-30595,,,,,,,
Sol-30596,,,,,,,
Sol-30597,,,,,,,
Sol-30598,,,,,,,
Sol-30599,,,,,,,
Sol-30600,,,,,,,
Sol-30601,,,,,,,
Sol-30602,,,,,,,
Sol-30603,,,,,,,
Sol-30604,,,,,,,
Sol-30605,,,,,,,
Sol-30606,,,,,,,
Sol-30607,,,,,,,
Sol-30608,,,,,,,
Sol-30609,,,,,,,
Sol-30610,,,,,,,
Sol-30611,,,,,,,
Sol-30612,,,,,,,
Sol-30613,,,,,,,
Sol-30614,,,,,,,
Sol-30615,,,,,,,
Sol-30616,,,,,,,
Sol-30617,,,,,,,
Sol-30618,,,,,,,
Sol-30619,,,,,,,
Sol-30620,,,,,,,
Sol-30621,,,,,,,
Sol-30622,,,,,,,
Sol-30623,,,,,,,
Sol-30624,,,,,,,
Sol-30625,,,,,,,
Sol-30626,,,,,,,
Sol-30627,,,,,,,
Sol-30628,,,,,,,
Sol-30629,,,,,,,
Sol-30630,,,,,,,
Sol-30631,,,,,,,
Sol-30632,,,,,,,
Sol-30633,,,,,,,
Sol-30634,,,,,,,
Sol-30635,,,,,,,
Sol-30636,,,,,,,
Sol-30637,,,,,,,
Sol-30638,,,,,,,
Sol-30639,,,,,,,
Sol-30640,,,,,,,
Sol-30641,,,,,,,
Sol-30642,,,,,,,
Sol-30643,,,,,,,
Sol-30644,,,,,,,
Sol-30645,,,,,,,
Sol-30646,,,,,,,
Sol-30647,,,,,,,
Sol-30648,,,,,,,
Sol-30649,,,,,,,
Sol-30650,,,,,,,
Sol-30651,,,,,,,
Sol-30652,,,,,,,
Sol-30653,,,,,,,
Sol-30654,,,,,,,
Sol-30655,,,,,,,
Sol-30656,,,,,,,
Sol-30657,,,,,,,
Sol-30658,,,,,,,
Sol-30659,,,,,,,
Sol-30660,,,,,,,
Sol-30661,,,,,,,
Sol-30662,,,,,,,
Sol-30663,,,,,,,
Sol-30664,,,,,,,
Sol-30665,,,,,,,
Sol-30666,,,,,,,
Sol-30667,,,,,,,
Sol-30668,,,,,,,
Sol-30669,,,,,,,
Sol-30670,,,,,,,
Sol-30671,,,,,,,
Sol-30672,,,,,,,
Sol-30673,,,,,,,
Sol-30674,,,,,,,
Sol-30675,,,,,,,
Sol-30676,,,,,,,
Sol-30677,,,,,,,
Sol-30678,,,,,,,
Sol-30679,,,,,,,
Sol-30680,,,,,,,
Sol-30681,,,,,,,
Sol-30682,,,,,,,
Sol-30683,,,,,,,
Sol-30684,,,,,,,
Sol-30685,,,,,,,
Sol-30686,,,,,,,
Sol-30687,,,,,,,
Sol-30688,,,,,,,
Sol-30689,,,,,,,
Sol-30690,,,,,,,
Sol-30691,,,,,,,
Sol-30692,,,,,,,
Sol-30693,,,,,,,
Sol-30694,,,,,,,
Sol-30695,,,,,,,
Sol-30696,,,,,,,
Sol-30697,,,,,,,
Sol-30698,,,,,,,
Sol-30699,,,,,,,
Sol-30700,,,,,,,
Sol-30701,,,,,,,
Sol-30702,,,,,,,
Sol-30703,,,,,,,
Sol-30704,,,,,,,
Sol-30705,,,,,,,
Sol-30706,,,,,,,
Sol-30707,,,,,,,
Sol-30708,,,,,,,
Sol-30709,,,,,,,
Sol-30710,,,,,,,
Sol-30711,,,,,,,
Sol-30712,,,,,,,
Sol-30713,,,,,,,
Sol-30714,,,,,,,
Sol-30715,,,,,,,
Sol-30716,,,,,,,
Sol-30717,,,,,,,
Sol-30718,,,,,,,
Sol-30719,,,,,,,
Sol-30720,,,,,,,
Sol-30721,,,,,,,
Sol-30722,,,,,,,
Sol-30723,,,,,,,
Sol-30724,,,,,,,
Sol-30725,,,,,,,
Sol-30726,,,,,,,
Sol-30727,,,,,,,
Sol-30728,,,,,,,
Sol-30729,,,,,,,
Sol-30730,,,,,,,
Sol-30731,,,,,,,
Sol-30732,,,,,,,
Sol-30733,,,,,,,
Sol-30734,,,,,,,
Sol-30735,,,,,,,
Sol-30736,,,,,,,
Sol-30737,,,,,,,
Sol-30738,,,,,,,
Sol-30739,,,,,,,
Sol-30740,,,,,,,
Sol-30741,,,,,,,
Sol-30742,,,,,,,
Sol-30743,,,,,,,
Sol-30744,,,,,,,
Sol-30745,,,,,,,
Sol-30746,,,,,,,
Sol-30747,,,,,,,
Sol-30748,,,,,,,
Sol-30749,,,,,,,
Sol-30750,,,,,,,
Sol-30751,,,,,,,
Sol-30752,,,,,,,
Sol-30753,,,,,,,
Sol-30754,,,,,,,
Sol-30755,,,,,,,
Sol-30756,,,,,,,
Sol-30757,,,,,,,
Sol-30758,,,,,,,
Sol-30759,,,,,,,
Sol-30760,,,,,,,
Sol-30761,,,,,,,
Sol-30762,,,,,,,
Sol-30763,,,,,,,
Sol-30764,,,,,,,
Sol-30765,,,,,,,
Sol-30766,,,,,,,
Sol-30767,,,,,,,
Sol-30768,,,,,,,
Sol-30769,,,,,,,
Sol-30770,,,,,,,
Sol-30771,,,,,,,
Sol-30772,,,,,,,
Sol-30773,,,,,,,
Sol-30774,,,,,,,
Sol-30775,,,,,,,
Sol-30776,,,,,,,
Sol-30777,,,,,,,
Sol-30778,,,,,,,
Sol-30779,,,,,,,
Sol-30780,,,,,,,
Sol-30781,,,,,,,
Sol-30782,,,,,,,
Sol-30783,,,,,,,
Sol-30784,,,,,,,
Sol-30785,,,,,,,
Sol-30786,,,,,,,
Sol-30787,,,,,,,
Sol-30788,,,,,,,
Sol-30789,,,,,,,
Sol-30790,,,,,,,
Sol-30791,,,,,,,
Sol-30792,,,,,,,
Sol-30793,,,,,,,
Sol-30794,,,,,,,
Sol-30795,,,,,,,
Sol-30796,,,,,,,
Sol-30797,,,,,,,
Sol-30798,,,,,,,
Sol-30799,,,,,,,
Sol-30800,,,,,,,
Sol-30801,,,,,,,
Sol-30802,,,,,,,
Sol-30803,,,,,,,
Sol-30804,,,,,,,
Sol-30805,,,,,,,
Sol-30806,,,,,,,
Sol-30807,,,,,,,
Sol-30808,,,,,,,
Sol-30809,,,,,,,
Sol-30810,,,,,,,
Sol-30811,,,,,,,
Sol-30812,,,,,,,
Sol-30813,,,,,,,
Sol-30814,,,,,,,
Sol-30815,,,,,,,
Sol-30816,,,,,,,
Sol-30817,,,,,,,
Sol-30818,,,,,,,
Sol-30819,,,,,,,
Sol-30820,,,,,,,
Sol-30821,,,,,,,
Sol-30822,,,,,,,
Sol-30823,,,,,,,
Sol-30824,,,,,,,
Sol-30825,,,,,,,
Sol-30826,,,,,,,
Sol-30827,,,,,,,
Sol-30828,,,,,,,
Sol-30829,,,,,,,
Sol-30830,,,,,,,
Sol-30831,,,,,,,
Sol-30832,,,,,,,
Sol-30833,,,,,,,
Sol-30834,,,,,,,
Sol-30835,,,,,,,
Sol-30836,,,,,,,
Sol-30837,,,,,,,
Sol-30838,,,,,,,
Sol-30839,,,,,,,
Sol-30840,,,,,,,
Sol-30841,,,,,,,
Sol-30842,,,,,,,
Sol-30843,,,,,,,
Sol-30844,,,,,,,
Sol-30845,,,,,,,
Sol-30846,,,,,,,
Sol-30847,,,,,,,
Sol-30848,,,,,,,
Sol-30849,,,,,,,
Sol-30850,,,,,,,
Sol-30851,,,,,,,
Sol-30852,,,,,,,
Sol-30853,,,,,,,
Sol-30854,,,,,,,
Sol-30855,,,,,,,
Sol-30856,,,,,,,
Sol-30857,,,,,,,
Sol-30858,,,,,,,
Sol-30859,,,,,,,
Sol-30860,,,,,,,
Sol-30861,,,,,,,
Sol-30862,,,,,,,
Sol-30863,,,,,,,
Sol-30864,,,,,,,
Sol-30865,,,,,,,
Sol-30866,,,,,,,
Sol-30867,,,,,,,
Sol-30868,,,,,,,
Sol-30869,,,,,,,
Sol-30870,,,,,,,
Sol-30871,,,,,,,
Sol-30872,,,,,,,
Sol-30873,,,,,,,
Sol-30874,,,,,,,
Sol-30875,,,,,,,
Sol-30876,,,,,,,
Sol-30877,,,,,,,
Sol-30878,,,,,,,
Sol-30879,,,,,,,
Sol-30880,,,,,,,
Sol-30881,,,,,,,
Sol-30882,,,,,,,
Sol-30883,,,,,,,
Sol-30884,,,,,,,
Sol-30885,,,,,,,
Sol-30886,,,,,,,
Sol-30887,,,,,,,
Sol-30888,,,,,,,
Sol-30889,,,,,,,
Sol-30890,,,,,,,
Sol-30891,,,,,,,
Sol-30892,,,,,,,
Sol-30893,,,,,,,
Sol-30894,,,,,,,
Sol-30895,,,,,,,
Sol-30896,,,,,,,
Sol-30897,,,,,,,
Sol-30898,,,,,,,
Sol-30899,,,,,,,
Sol-30900,,,,,,,
Sol-30901,,,,,,,
Sol-30902,,,,,,,
Sol-30903,,,,,,,
Sol-30904,,,,,,,
Sol-30905,,,,,,,
Sol-30906,,,,,,,
Sol-30907,,,,,,,
Sol-30908,,,,,,,
Sol-30909,,,,,,,
Sol-30910,,,,,,,
Sol-30911,,,,,,,
Sol-30912,,,,,,,
Sol-30913,,,,,,,
Sol-30914,,,,,,,
Sol-30915,,,,,,,
Sol-30916,,,,,,,
Sol-30917,,,,,,,
Sol-30918,,,,,,,
Sol-30919,,,,,,,
Sol-30920,,,,,,,
Sol-30921,,,,,,,
Sol-30922,,,,,,,
Sol-30923,,,,,,,
Sol-30924,,,,,,,
Sol-30925,,,,,,,
Sol-30926,,,,,,,
Sol-30927,,,,,,,
Sol-30928,,,,,,,
Sol-30929,,,,,,,
Sol-30930,,,,,,,
Sol-30931,,,,,,,
Sol-30932,,,,,,,
Sol-30933,,,,,,,
Sol-30934,,,,,,,
Sol-30935,,,,,,,
Sol-30936,,,,,,,
Sol-30937,,,,,,,
Sol-30938,,,,,,,
Sol-30939,,,,,,,
Sol-30940,,,,,,,
Sol-30941,,,,,,,
Sol-30942,,,,,,,
Sol-30943,,,,,,,
Sol-30944,,,,,,,
Sol-30945,,,,,,,
Sol-30946,,,,,,,
Sol-30947,,,,,,,
Sol-30948,,,,,,,
Sol-30949,,,,,,,
Sol-30950,,,,,,,
Sol-30951,,,,,,,
Sol-30952,,,,,,,
Sol-30953,,,,,,,
Sol-30954,,,,,,,
Sol-30955,,,,,,,
Sol-30956,,,,,,,
Sol-30957,,,,,,,
Sol-30958,,,,,,,
Sol-30959,,,,,,,
Sol-30960,,,,,,,
Sol-30961,,,,,,,
Sol-30962,,,,,,,
Sol-30963,,,,,,,
Sol-30964,,,,,,,
Sol-30965,,,,,,,
Sol-30966,,,,,,,
Sol-30967,,,,,,,
Sol-30968,,,,,,,
Sol-30969,,,,,,,
Sol-30970,,,,,,,
Sol-30971,,,,,,,
Sol-30972,,,,,,,
Sol-30973,,,,,,,
Sol-30974,,,,,,,
Sol-30975,,,,,,,
Sol-30976,,,,,,,
Sol-30977,,,,,,,
Sol-30978,,,,,,,
Sol-30979,,,,,,,
Sol-30980,,,,,,,
Sol-30981,,,,,,,
Sol-30982,,,,,,,
Sol-30983,,,,,,,
Sol-30984,,,,,,,
Sol-30985,,,,,,,
Sol-30986,,,,,,,
Sol-30987,,,,,,,
Sol-30988,,,,,,,
Sol-30989,,,,,,,
Sol-30990,,,,,,,
Sol-30991,,,,,,,
Sol-30992,,,,,,,
Sol-30993,,,,,,,
Sol-30994,,,,,,,
Sol-30995,,,,,,,
Sol-30996,,,,,,,
Sol-30997,,,,,,,
Sol-30998,,,,,,,
Sol-30999,,,,,,,
Sol-31000,,,,,,,
Sol-31001,,,,,,,
Sol-31002,,,,,,,
Sol-31003,,,,,,,
Sol-31004,,,,,,,
Sol-31005,,,,,,,
Sol-31006,,,,,,,
Sol-31007,,,,,,,
Sol-31008,,,,,,,
Sol-31009,,,,,,,
Sol-31010,,,,,,,
Sol-31011,,,,,,,
Sol-31012,,,,,,,
Sol-31013,,,,,,,
Sol-31014,,,,,,,
Sol-31015,,,,,,,
Sol-31016,,,,,,,
Sol-31017,,,,,,,
Sol-31018,,,,,,,
Sol-31019,,,,,,,
Sol-31020,,,,,,,
Sol-31021,,,,,,,
Sol-31022,,,,,,,
Sol-31023,,,,,,,
Sol-31024,,,,,,,
Sol-31025,,,,,,,
Sol-31026,,,,,,,
Sol-31027,,,,,,,
Sol-31028,,,,,,,
Sol-31029,,,,,,,
Sol-31030,,,,,,,
Sol-31031,,,,,,,
Sol-31032,,,,,,,
Sol-31033,,,,,,,
Sol-31034,,,,,,,
Sol-31035,,,,,,,
Sol-31036,,,,,,,
Sol-31037,,,,,,,
Sol-31038,,,,,,,
Sol-31039,,,,,,,
Sol-31040,,,,,,,
Sol-31041,,,,,,,
Sol-31042,,,,,,,
Sol-31043,,,,,,,
Sol-31044,,,,,,,
Sol-31045,,,,,,,
Sol-31046,,,,,,,
Sol-31047,,,,,,,
Sol-31048,,,,,,,
Sol-31049,,,,,,,
Sol-31050,,,,,,,
Sol-31051,,,,,,,
Sol-31052,,,,,,,
Sol-31053,,,,,,,
Sol-31054,,,,,,,
Sol-31055,,,,,,,
Sol-31056,,,,,,,
Sol-31057,,,,,,,
Sol-31058,,,,,,,
Sol-31059,,,,,,,
Sol-31060,,,,,,,
Sol-31061,,,,,,,
Sol-31062,,,,,,,
Sol-31063,,,,,,,
Sol-31064,,,,,,,
Sol-31065,,,,,,,
Sol-31066,,,,,,,
Sol-31067,,,,,,,
Sol-31068,,,,,,,
Sol-31069,,,,,,,
Sol-31070,,,,,,,
Sol-31071,,,,,,,
Sol-31072,,,,,,,
Sol-31073,,,,,,,
Sol-31074,,,,,,,
Sol-31075,,,,,,,
Sol-31076,,,,,,,
Sol-31077,,,,,,,
Sol-31078,,,,,,,
Sol-31079,,,,,,,
Sol-31080,,,,,,,
Sol-31081,,,,,,,
Sol-31082,,,,,,,
Sol-31083,,,,,,,
Sol-31084,,,,,,,
Sol-31085,,,,,,,
Sol-31086,,,,,,,
Sol-31087,,,,,,,
Sol-31088,,,,,,,
Sol-31089,,,,,,,
Sol-31090,,,,,,,
Sol-31091,,,,,,,
Sol-31092,,,,,,,
Sol-31093,,,,,,,
Sol-31094,,,,,,,
Sol-31095,,,,,,,
Sol-31096,,,,,,,
Sol-31097,,,,,,,
Sol-31098,,,,,,,
Sol-31099,,,,,,,
Sol-31100,,,,,,,
Sol-31101,,,,,,,
Sol-31102,,,,,,,
Sol-31103,,,,,,,
Sol-31104,,,,,,,
Sol-31105,,,,,,,
Sol-31106,,,,,,,
Sol-31107,,,,,,,
Sol-31108,,,,,,,
Sol-31109,,,,,,,
Sol-31110,,,,,,,
Sol-31111,,,,,,,
Sol-31112,,,,,,,
Sol-31113,,,,,,,
Sol-31114,,,,,,,
Sol-31115,,,,,,,
Sol-31116,,,,,,,
Sol-31117,,,,,,,
Sol-31118,,,,,,,
Sol-31119,,,,,,,
Sol-31120,,,,,,,
Sol-31121,,,,,,,
Sol-31122,,,,,,,
Sol-31123,,,,,,,
Sol-31124,,,,,,,
Sol-31125,,,,,,,
Sol-31126,,,,,,,
Sol-31127,,,,,,,
Sol-31128,,,,,,,
Sol-31129,,,,,,,
Sol-31130,,,,,,,
Sol-31131,,,,,,,
Sol-31132,,,,,,,
Sol-31133,,,,,,,
Sol-31134,,,,,,,
Sol-31135,,,,,,,
Sol-31136,,,,,,,
Sol-31137,,,,,,,
Sol-31138,,,,,,,
Sol-31139,,,,,,,
Sol-31140,,,,,,,
Sol-31141,,,,,,,
Sol-31142,,,,,,,
Sol-31143,,,,,,,
Sol-31144,,,,,,,
Sol-31145,,,,,,,
Sol-31146,,,,,,,
Sol-31147,,,,,,,
Sol-31148,,,,,,,
Sol-31149,,,,,,,
Sol-31150,,,,,,,
Sol-31151,,,,,,,
Sol-31152,,,,,,,
Sol-31153,,,,,,,
Sol-31154,,,,,,,
Sol-31155,,,,,,,
Sol-31156,,,,,,,
Sol-31157,,,,,,,
Sol-31158,,,,,,,
Sol-31159,,,,,,,
Sol-31160,,,,,,,
Sol-31161,,,,,,,
Sol-31162,,,,,,,
Sol-31163,,,,,,,
Sol-31164,,,,,,,
Sol-31165,,,,,,,
Sol-31166,,,,,,,
Sol-31167,,,,,,,
Sol-31168,,,,,,,
Sol-31169,,,,,,,
Sol-31170,,,,,,,
Sol-31171,,,,,,,
Sol-31172,,,,,,,
Sol-31173,,,,,,,
Sol-31174,,,,,,,
Sol-31175,,,,,,,
Sol-31176,,,,,,,
Sol-31177,,,,,,,
Sol-31178,,,,,,,
Sol-31179,,,,,,,
Sol-31180,,,,,,,
Sol-31181,,,,,,,
Sol-31182,,,,,,,
Sol-31183,,,,,,,
Sol-31184,,,,,,,
Sol-31185,,,,,,,
Sol-31186,,,,,,,
Sol-31187,,,,,,,
Sol-31188,,,,,,,
Sol-31189,,,,,,,
Sol-31190,,,,,,,
Sol-31191,,,,,,,
Sol-31192,,,,,,,
Sol-31193,,,,,,,
Sol-31194,,,,,,,
Sol-31195,,,,,,,
Sol-31196,,,,,,,
Sol-31197,,,,,,,
Sol-31198,,,,,,,
Sol-31199,,,,,,,
Sol-31200,,,,,,,
Sol-31201,,,,,,,
Sol-31202,,,,,,,
Sol-31203,,,,,,,
Sol-31204,,,,,,,
Sol-31205,,,,,,,
Sol-31206,,,,,,,
Sol-31207,,,,,,,
Sol-31208,,,,,,,
Sol-31209,,,,,,,
Sol-31210,,,,,,,
Sol-31211,,,,,,,
Sol-31212,,,,,,,
Sol-31213,,,,,,,
Sol-31214,,,,,,,
Sol-31215,,,,,,,
Sol-31216,,,,,,,
Sol-31217,,,,,,,
Sol-31218,,,,,,,
Sol-31219,,,,,,,
Sol-31220,,,,,,,
Sol-31221,,,,,,,
Sol-31222,,,,,,,
Sol-31223,,,,,,,
Sol-31224,,,,,,,
Sol-31225,,,,,,,
Sol-31226,,,,,,,
Sol-31227,,,,,,,
Sol-31228,,,,,,,
Sol-31229,,,,,,,
Sol-31230,,,,,,,
Sol-31231,,,,,,,
Sol-31232,,,,,,,
Sol-31233,,,,,,,
Sol-31234,,,,,,,
Sol-31235,,,,,,,
Sol-31236,,,,,,,
Sol-31237,,,,,,,
Sol-31238,,,,,,,
Sol-31239,,,,,,,
Sol-31240,,,,,,,
Sol-31241,,,,,,,
Sol-31242,,,,,,,
Sol-31243,,,,,,,
Sol-31244,,,,,,,
Sol-31245,,,,,,,
Sol-31246,,,,,,,
Sol-31247,,,,,,,
Sol-31248,,,,,,,
Sol-31249,,,,,,,
Sol-31250,,,,,,,
Sol-31251,,,,,,,
Sol-31252,,,,,,,
Sol-31253,,,,,,,
Sol-31254,,,,,,,
Sol-31255,,,,,,,
Sol-31256,,,,,,,
Sol-31257,,,,,,,
Sol-31258,,,,,,,
Sol-31259,,,,,,,
Sol-31260,,,,,,,
Sol-31261,,,,,,,
Sol-31262,,,,,,,
Sol-31263,,,,,,,
Sol-31264,,,,,,,
Sol-31265,,,,,,,
Sol-31266,,,,,,,
Sol-31267,,,,,,,
Sol-31268,,,,,,,
Sol-31269,,,,,,,
Sol-31270,,,,,,,
Sol-31271,,,,,,,
Sol-31272,,,,,,,
Sol-31273,,,,,,,
Sol-31274,,,,,,,
Sol-31275,,,,,,,
Sol-31276,,,,,,,
Sol-31277,,,,,,,
Sol-31278,,,,,,,
Sol-31279,,,,,,,
Sol-31280,,,,,,,
Sol-31281,,,,,,,
Sol-31282,,,,,,,
Sol-31283,,,,,,,
Sol-31284,,,,,,,
Sol-31285,,,,,,,
Sol-31286,,,,,,,
Sol-31287,,,,,,,
Sol-31288,,,,,,,
Sol-31289,,,,,,,
Sol-31290,,,,,,,
Sol-31291,,,,,,,
Sol-31292,,,,,,,
Sol-31293,,,,,,,
Sol-31294,,,,,,,
Sol-31295,,,,,,,
Sol-31296,,,,,,,
Sol-31297,,,,,,,
Sol-31298,,,,,,,
Sol-31299,,,,,,,
Sol-31300,,,,,,,
Sol-31301,,,,,,,
Sol-31302,,,,,,,
Sol-31303,,,,,,,
Sol-31304,,,,,,,
Sol-31305,,,,,,,
Sol-31306,,,,,,,
Sol-31307,,,,,,,
Sol-31308,,,,,,,
Sol-31309,,,,,,,
Sol-31310,,,,,,,
Sol-31311,,,,,,,
Sol-31312,,,,,,,
Sol-31313,,,,,,,
Sol-31314,,,,,,,
Sol-31315,,,,,,,
Sol-31316,,,,,,,
Sol-31317,,,,,,,
Sol-31318,,,,,,,
Sol-31319,,,,,,,
Sol-31320,,,,,,,
Sol-31321,,,,,,,
Sol-31322,,,,,,,
Sol-31323,,,,,,,
Sol-31324,,,,,,,
Sol-31325,,,,,,,
Sol-31326,,,,,,,
Sol-31327,,,,,,,
Sol-31328,,,,,,,
Sol-31329,,,,,,,
Sol-31330,,,,,,,
Sol-31331,,,,,,,
Sol-31332,,,,,,,
Sol-31333,,,,,,,
Sol-31334,,,,,,,
Sol-31335,,,,,,,
Sol-31336,,,,,,,
Sol-31337,,,,,,,
Sol-31338,,,,,,,
Sol-31339,,,,,,,
Sol-31340,,,,,,,
Sol-31341,,,,,,,
Sol-31342,,,,,,,
Sol-31343,,,,,,,
Sol-31344,,,,,,,
Sol-31345,,,,,,,
Sol-31346,,,,,,,
Sol-31347,,,,,,,
Sol-31348,,,,,,,
Sol-31349,,,,,,,
Sol-31350,,,,,,,
Sol-31351,,,,,,,
Sol-31352,,,,,,,
Sol-31353,,,,,,,
Sol-31354,,,,,,,
Sol-31355,,,,,,,
Sol-31356,,,,,,,
Sol-31357,,,,,,,
Sol-31358,,,,,,,
Sol-31359,,,,,,,
Sol-31360,,,,,,,
Sol-31361,,,,,,,
Sol-31362,,,,,,,
Sol-31363,,,,,,,
Sol-31364,,,,,,,
Sol-31365,,,,,,,
Sol-31366,,,,,,,
Sol-31367,,,,,,,
Sol-31368,,,,,,,
Sol-31369,,,,,,,
Sol-31370,,,,,,,
Sol-31371,,,,,,,
Sol-31372,,,,,,,
Sol-31373,,,,,,,
Sol-31374,,,,,,,
Sol-31375,,,,,,,
Sol-31376,,,,,,,
Sol-31377,,,,,,,
Sol-31378,,,,,,,
Sol-31379,,,,,,,
Sol-31380,,,,,,,
Sol-31381,,,,,,,
Sol-31382,,,,,,,
Sol-31383,,,,,,,
Sol-31384,,,,,,,
Sol-31385,,,,,,,
Sol-31386,,,,,,,
Sol-31387,,,,,,,
Sol-31388,,,,,,,
Sol-31389,,,,,,,
Sol-31390,,,,,,,
Sol-31391,,,,,,,
Sol-31392,,,,,,,
Sol-31393,,,,,,,
Sol-31394,,,,,,,
Sol-31395,,,,,,,
Sol-31396,,,,,,,
Sol-31397,,,,,,,
Sol-31398,,,,,,,
Sol-31399,,,,,,,
Sol-31400,,,,,,,
Sol-31401,,,,,,,
Sol-31402,,,,,,,
Sol-31403,,,,,,,
Sol-31404,,,,,,,
Sol-31405,,,,,,,
Sol-31406,,,,,,,
Sol-31407,,,,,,,
Sol-31408,,,,,,,
Sol-31409,,,,,,,
Sol-31410,,,,,,,
Sol-31411,,,,,,,
Sol-31412,,,,,,,
Sol-31413,,,,,,,
Sol-31414,,,,,,,
Sol-31415,,,,,,,
Sol-31416,,,,,,,
Sol-31417,,,,,,,
Sol-31418,,,,,,,
Sol-31419,,,,,,,
Sol-31420,,,,,,,
Sol-31421,,,,,,,
Sol-31422,,,,,,,
Sol-31423,,,,,,,
Sol-31424,,,,,,,
Sol-31425,,,,,,,
Sol-31426,,,,,,,
Sol-31427,,,,,,,
Sol-31428,,,,,,,
Sol-31429,,,,,,,
Sol-31430,,,,,,,
Sol-31431,,,,,,,
Sol-31432,,,,,,,
Sol-31433,,,,,,,
Sol-31434,,,,,,,
Sol-31435,,,,,,,
Sol-31436,,,,,,,
Sol-31437,,,,,,,
Sol-31438,,,,,,,
Sol-31439,,,,,,,
Sol-31440,,,,,,,
Sol-31441,,,,,,,
Sol-31442,,,,,,,
Sol-31443,,,,,,,
Sol-31444,,,,,,,
Sol-31445,,,,,,,
Sol-31446,,,,,,,
Sol-31447,,,,,,,
Sol-31448,,,,,,,
Sol-31449,,,,,,,
Sol-31450,,,,,,,
Sol-31451,,,,,,,
Sol-31452,,,,,,,
Sol-31453,,,,,,,
Sol-31454,,,,,,,
Sol-31455,,,,,,,
Sol-31456,,,,,,,
Sol-31457,,,,,,,
Sol-31458,,,,,,,
Sol-31459,,,,,,,
Sol-31460,,,,,,,
Sol-31461,,,,,,,
Sol-31462,,,,,,,
Sol-31463,,,,,,,
Sol-31464,,,,,,,
Sol-31465,,,,,,,
Sol-31466,,,,,,,
Sol-31467,,,,,,,
Sol-31468,,,,,,,
Sol-31469,,,,,,,
Sol-31470,,,,,,,
Sol-31471,,,,,,,
Sol-31472,,,,,,,
Sol-31473,,,,,,,
Sol-31474,,,,,,,
Sol-31475,,,,,,,
Sol-31476,,,,,,,
Sol-31477,,,,,,,
Sol-31478,,,,,,,
Sol-31479,,,,,,,
Sol-31480,,,,,,,
Sol-31481,,,,,,,
Sol-31482,,,,,,,
Sol-31483,,,,,,,
Sol-31484,,,,,,,
Sol-31485,,,,,,,
Sol-31486,,,,,,,
Sol-31487,,,,,,,
Sol-31488,,,,,,,
Sol-31489,,,,,,,
Sol-31490,,,,,,,
Sol-31491,,,,,,,
Sol-31492,,,,,,,
Sol-31493,,,,,,,
Sol-31494,,,,,,,
Sol-31495,,,,,,,
Sol-31496,,,,,,,
Sol-31497,,,,,,,
Sol-31498,,,,,,,
Sol-31499,,,,,,,
Sol-31500,,,,,,,
Sol-31501,,,,,,,
Sol-31502,,,,,,,
Sol-31503,,,,,,,
Sol-31504,,,,,,,
Sol-31505,,,,,,,
Sol-31506,,,,,,,
Sol-31507,,,,,,,
Sol-31508,,,,,,,
Sol-31509,,,,,,,
Sol-31510,,,,,,,
Sol-31511,,,,,,,
Sol-31512,,,,,,,
Sol-31513,,,,,,,
Sol-31514,,,,,,,
Sol-31515,,,,,,,
Sol-31516,,,,,,,
Sol-31517,,,,,,,
Sol-31518,,,,,,,
Sol-31519,,,,,,,
Sol-31520,,,,,,,
Sol-31521,,,,,,,
Sol-31522,,,,,,,
Sol-31523,,,,,,,
Sol-31524,,,,,,,
Sol-31525,,,,,,,
Sol-31526,,,,,,,
Sol-31527,,,,,,,
Sol-31528,,,,,,,
Sol-31529,,,,,,,
Sol-31530,,,,,,,
Sol-31531,,,,,,,
Sol-31532,,,,,,,
Sol-31533,,,,,,,
Sol-31534,,,,,,,
Sol-31535,,,,,,,
Sol-31536,,,,,,,
Sol-31537,,,,,,,
Sol-31538,,,,,,,
Sol-31539,,,,,,,
Sol-31540,,,,,,,
Sol-31541,,,,,,,
Sol-31542,,,,,,,
Sol-31543,,,,,,,
Sol-31544,,,,,,,
Sol-31545,,,,,,,
Sol-31546,,,,,,,
Sol-31547,,,,,,,
Sol-31548,,,,,,,
Sol-31549,,,,,,,
Sol-31550,,,,,,,
Sol-31551,,,,,,,
Sol-31552,,,,,,,
Sol-31553,,,,,,,
Sol-31554,,,,,,,
Sol-31555,,,,,,,
Sol-31556,,,,,,,
Sol-31557,,,,,,,
Sol-31558,,,,,,,
Sol-31559,,,,,,,
Sol-31560,,,,,,,
Sol-31561,,,,,,,
Sol-31562,,,,,,,
Sol-31563,,,,,,,
Sol-31564,,,,,,,
Sol-31565,,,,,,,
Sol-31566,,,,,,,
Sol-31567,,,,,,,
Sol-31568,,,,,,,
Sol-31569,,,,,,,
Sol-31570,,,,,,,
Sol-31571,,,,,,,
Sol-31572,,,,,,,
Sol-31573,,,,,,,
Sol-31574,,,,,,,
Sol-31575,,,,,,,
Sol-31576,,,,,,,
Sol-31577,,,,,,,
Sol-31578,,,,,,,
Sol-31579,,,,,,,
Sol-31580,,,,,,,
Sol-31581,,,,,,,
Sol-31582,,,,,,,
Sol-31583,,,,,,,
Sol-31584,,,,,,,
Sol-31585,,,,,,,
Sol-31586,,,,,,,
Sol-31587,,,,,,,
Sol-31588,,,,,,,
Sol-31589,,,,,,,
Sol-31590,,,,,,,
Sol-31591,,,,,,,
Sol-31592,,,,,,,
Sol-31593,,,,,,,
Sol-31594,,,,,,,
Sol-31595,,,,,,,
Sol-31596,,,,,,,
Sol-31597,,,,,,,
Sol-31598,,,,,,,
Sol-31599,,,,,,,
Sol-31600,,,,,,,
Sol-31601,,,,,,,
Sol-31602,,,,,,,
Sol-31603,,,,,,,
Sol-31604,,,,,,,
Sol-31605,,,,,,,
Sol-31606,,,,,,,
Sol-31607,,,,,,,
Sol-31608,,,,,,,
Sol-31609,,,,,,,
Sol-31610,,,,,,,
Sol-31611,,,,,,,
Sol-31612,,,,,,,
Sol-31613,,,,,,,
Sol-31614,,,,,,,
Sol-31615,,,,,,,
Sol-31616,,,,,,,
Sol-31617,,,,,,,
Sol-31618,,,,,,,
Sol-31619,,,,,,,
Sol-31620,,,,,,,
Sol-31621,,,,,,,
Sol-31622,,,,,,,
Sol-31623,,,,,,,
Sol-31624,,,,,,,
Sol-31625,,,,,,,
Sol-31626,,,,,,,
Sol-31627,,,,,,,
Sol-31628,,,,,,,
Sol-31629,,,,,,,
Sol-31630,,,,,,,
Sol-31631,,,,,,,
Sol-31632,,,,,,,
Sol-31633,,,,,,,
Sol-31634,,,,,,,
Sol-31635,,,,,,,
Sol-31636,,,,,,,
Sol-31637,,,,,,,
Sol-31638,,,,,,,
Sol-31639,,,,,,,
Sol-31640,,,,,,,
Sol-31641,,,,,,,
Sol-31642,,,,,,,
Sol-31643,,,,,,,
Sol-31644,,,,,,,
Sol-31645,,,,,,,
Sol-31646,,,,,,,
Sol-31647,,,,,,,
Sol-31648,,,,,,,
Sol-31649,,,,,,,
Sol-31650,,,,,,,
Sol-31651,,,,,,,
Sol-31652,,,,,,,
Sol-31653,,,,,,,
Sol-31654,,,,,,,
Sol-31655,,,,,,,
Sol-31656,,,,,,,
Sol-31657,,,,,,,
Sol-31658,,,,,,,
Sol-31659,,,,,,,
Sol-31660,,,,,,,
Sol-31661,,,,,,,
Sol-31662,,,,,,,
Sol-31663,,,,,,,
Sol-31664,,,,,,,
Sol-31665,,,,,,,
Sol-31666,,,,,,,
Sol-31667,,,,,,,
Sol-31668,,,,,,,
Sol-31669,,,,,,,
Sol-31670,,,,,,,
Sol-31671,,,,,,,
Sol-31672,,,,,,,
Sol-31673,,,,,,,
Sol-31674,,,,,,,
Sol-31675,,,,,,,
Sol-31676,,,,,,,
Sol-31677,,,,,,,
Sol-31678,,,,,,,
Sol-31679,,,,,,,
Sol-31680,,,,,,,
Sol-31681,,,,,,,
Sol-31682,,,,,,,
Sol-31683,,,,,,,
Sol-31684,,,,,,,
Sol-31685,,,,,,,
Sol-31686,,,,,,,
Sol-31687,,,,,,,
Sol-31688,,,,,,,
Sol-31689,,,,,,,
Sol-31690,,,,,,,
Sol-31691,,,,,,,
Sol-31692,,,,,,,
Sol-31693,,,,,,,
Sol-31694,,,,,,,
Sol-31695,,,,,,,
Sol-31696,,,,,,,
Sol-31697,,,,,,,
Sol-31698,,,,,,,
Sol-31699,,,,,,,
Sol-31700,,,,,,,
Sol-31701,,,,,,,
Sol-31702,,,,,,,
Sol-31703,,,,,,,
Sol-31704,,,,,,,
Sol-31705,,,,,,,
Sol-31706,,,,,,,
Sol-31707,,,,,,,
Sol-31708,,,,,,,
Sol-31709,,,,,,,
Sol-31710,,,,,,,
Sol-31711,,,,,,,
Sol-31712,,,,,,,
Sol-31713,,,,,,,
Sol-31714,,,,,,,
Sol-31715,,,,,,,
Sol-31716,,,,,,,
Sol-31717,,,,,,,
Sol-31718,,,,,,,
Sol-31719,,,,,,,
Sol-31720,,,,,,,
Sol-31721,,,,,,,
Sol-31722,,,,,,,
Sol-31723,,,,,,,
Sol-31724,,,,,,,
Sol-31725,,,,,,,
Sol-31726,,,,,,,
Sol-31727,,,,,,,
Sol-31728,,,,,,,
Sol-31729,,,,,,,
Sol-31730,,,,,,,
Sol-31731,,,,,,,
Sol-31732,,,,,,,
Sol-31733,,,,,,,
Sol-31734,,,,,,,
Sol-31735,,,,,,,
Sol-31736,,,,,,,
Sol-31737,,,,,,,
Sol-31738,,,,,,,
Sol-31739,,,,,,,
Sol-31740,,,,,,,
Sol-31741,,,,,,,
Sol-31742,,,,,,,
Sol-31743,,,,,,,
Sol-31744,,,,,,,
Sol-31745,,,,,,,
Sol-31746,,,,,,,
Sol-31747,,,,,,,
Sol-31748,,,,,,,
Sol-31749,,,,,,,
Sol-31750,,,,,,,
Sol-31751,,,,,,,
Sol-31752,,,,,,,
Sol-31753,,,,,,,
Sol-31754,,,,,,,
Sol-31755,,,,,,,
Sol-31756,,,,,,,
Sol-31757,,,,,,,
Sol-31758,,,,,,,
Sol-31759,,,,,,,
Sol-31760,,,,,,,
Sol-31761,,,,,,,
Sol-31762,,,,,,,
Sol-31763,,,,,,,
Sol-31764,,,,,,,
Sol-31765,,,,,,,
Sol-31766,,,,,,,
Sol-31767,,,,,,,
Sol-31768,,,,,,,
Sol-31769,,,,,,,
Sol-31770,,,,,,,
Sol-31771,,,,,,,
Sol-31772,,,,,,,
Sol-31773,,,,,,,
Sol-31774,,,,,,,
Sol-31775,,,,,,,
Sol-31776,,,,,,,
Sol-31777,,,,,,,
Sol-31778,,,,,,,
Sol-31779,,,,,,,
Sol-31780,,,,,,,
Sol-31781,,,,,,,
Sol-31782,,,,,,,
Sol-31783,,,,,,,
Sol-31784,,,,,,,
Sol-31785,,,,,,,
Sol-31786,,,,,,,
Sol-31787,,,,,,,
Sol-31788,,,,,,,
Sol-31789,,,,,,,
Sol-31790,,,,,,,
Sol-31791,,,,,,,
Sol-31792,,,,,,,
Sol-31793,,,,,,,
Sol-31794,,,,,,,
Sol-31795,,,,,,,
Sol-31796,,,,,,,
Sol-31797,,,,,,,
Sol-31798,,,,,,,
Sol-31799,,,,,,,
Sol-31800,,,,,,,
Sol-31801,,,,,,,
Sol-31802,,,,,,,
Sol-31803,,,,,,,
Sol-31804,,,,,,,
Sol-31805,,,,,,,
Sol-31806,,,,,,,
Sol-31807,,,,,,,
Sol-31808,,,,,,,
Sol-31809,,,,,,,
Sol-31810,,,,,,,
Sol-31811,,,,,,,
Sol-31812,,,,,,,
Sol-31813,,,,,,,
Sol-31814,,,,,,,
Sol-31815,,,,,,,
Sol-31816,,,,,,,
Sol-31817,,,,,,,
Sol-31818,,,,,,,
Sol-31819,,,,,,,
Sol-31820,,,,,,,
Sol-31821,,,,,,,
Sol-31822,,,,,,,
Sol-31823,,,,,,,
Sol-31824,,,,,,,
Sol-31825,,,,,,,
Sol-31826,,,,,,,
Sol-31827,,,,,,,
Sol-31828,,,,,,,
Sol-31829,,,,,,,
Sol-31830,,,,,,,
Sol-31831,,,,,,,
Sol-31832,,,,,,,
Sol-31833,,,,,,,
Sol-31834,,,,,,,
Sol-31835,,,,,,,
Sol-31836,,,,,,,
Sol-31837,,,,,,,
Sol-31838,,,,,,,
Sol-31839,,,,,,,
Sol-31840,,,,,,,
Sol-31841,,,,,,,
Sol-31842,,,,,,,
Sol-31843,,,,,,,
Sol-31844,,,,,,,
Sol-31845,,,,,,,
Sol-31846,,,,,,,
Sol-31847,,,,,,,
Sol-31848,,,,,,,
Sol-31849,,,,,,,
Sol-31850,,,,,,,
Sol-31851,,,,,,,
Sol-31852,,,,,,,
Sol-31853,,,,,,,
Sol-31854,,,,,,,
Sol-31855,,,,,,,
Sol-31856,,,,,,,
Sol-31857,,,,,,,
Sol-31858,,,,,,,
Sol-31859,,,,,,,
Sol-31860,,,,,,,
Sol-31861,,,,,,,
Sol-31862,,,,,,,
Sol-31863,,,,,,,
Sol-31864,,,,,,,
Sol-31865,,,,,,,
Sol-31866,,,,,,,
Sol-31867,,,,,,,
Sol-31868,,,,,,,
Sol-31869,,,,,,,
Sol-31870,,,,,,,
Sol-31871,,,,,,,
Sol-31872,,,,,,,
Sol-31873,,,,,,,
Sol-31874,,,,,,,
Sol-31875,,,,,,,
Sol-31876,,,,,,,
Sol-31877,,,,,,,
Sol-31878,,,,,,,
Sol-31879,,,,,,,
Sol-31880,,,,,,,
Sol-31881,,,,,,,
Sol-31882,,,,,,,
Sol-31883,,,,,,,
Sol-31884,,,,,,,
Sol-31885,,,,,,,
Sol-31886,,,,,,,
Sol-31887,,,,,,,
Sol-31888,,,,,,,
Sol-31889,,,,,,,
Sol-31890,,,,,,,
Sol-31891,,,,,,,
Sol-31892,,,,,,,
Sol-31893,,,,,,,
Sol-31894,,,,,,,
Sol-31895,,,,,,,
Sol-31896,,,,,,,
Sol-31897,,,,,,,
Sol-31898,,,,,,,
Sol-31899,,,,,,,
Sol-31900,,,,,,,
Sol-31901,,,,,,,
Sol-31902,,,,,,,
Sol-31903,,,,,,,
Sol-31904,,,,,,,
Sol-31905,,,,,,,
Sol-31906,,,,,,,
Sol-31907,,,,,,,
Sol-31908,,,,,,,
Sol-31909,,,,,,,
Sol-31910,,,,,,,
Sol-31911,,,,,,,
Sol-31912,,,,,,,
Sol-31913,,,,,,,
Sol-31914,,,,,,,
Sol-31915,,,,,,,
Sol-31916,,,,,,,
Sol-31917,,,,,,,
Sol-31918,,,,,,,
Sol-31919,,,,,,,
Sol-31920,,,,,,,
Sol-31921,,,,,,,
Sol-31922,,,,,,,
Sol-31923,,,,,,,
Sol-31924,,,,,,,
Sol-31925,,,,,,,
Sol-31926,,,,,,,
Sol-31927,,,,,,,
Sol-31928,,,,,,,
Sol-31929,,,,,,,
Sol-31930,,,,,,,
Sol-31931,,,,,,,
Sol-31932,,,,,,,
Sol-31933,,,,,,,
Sol-31934,,,,,,,
Sol-31935,,,,,,,
Sol-31936,,,,,,,
Sol-31937,,,,,,,
Sol-31938,,,,,,,
Sol-31939,,,,,,,
Sol-31940,,,,,,,
Sol-31941,,,,,,,
Sol-31942,,,,,,,
Sol-31943,,,,,,,
Sol-31944,,,,,,,
Sol-31945,,,,,,,
Sol-31946,,,,,,,
Sol-31947,,,,,,,
Sol-31948,,,,,,,
Sol-31949,,,,,,,
Sol-31950,,,,,,,
Sol-31951,,,,,,,
Sol-31952,,,,,,,
Sol-31953,,,,,,,
Sol-31954,,,,,,,
Sol-31955,,,,,,,
Sol-31956,,,,,,,
Sol-31957,,,,,,,
Sol-31958,,,,,,,
Sol-31959,,,,,,,
Sol-31960,,,,,,,
Sol-31961,,,,,,,
Sol-31962,,,,,,,
Sol-31963,,,,,,,
Sol-31964,,,,,,,
Sol-31965,,,,,,,
Sol-31966,,,,,,,
Sol-31967,,,,,,,
Sol-31968,,,,,,,
Sol-31969,,,,,,,
Sol-31970,,,,,,,
Sol-31971,,,,,,,
Sol-31972,,,,,,,
Sol-31973,,,,,,,
Sol-31974,,,,,,,
Sol-31975,,,,,,,
Sol-31976,,,,,,,
Sol-31977,,,,,,,
Sol-31978,,,,,,,
Sol-31979,,,,,,,
Sol-31980,,,,,,,
Sol-31981,,,,,,,
Sol-31982,,,,,,,
Sol-31983,,,,,,,
Sol-31984,,,,,,,
Sol-31985,,,,,,,
Sol-31986,,,,,,,
Sol-31987,,,,,,,
Sol-31988,,,,,,,
Sol-31989,,,,,,,
Sol-31990,,,,,,,
Sol-31991,,,,,,,
Sol-31992,,,,,,,
Sol-31993,,,,,,,
Sol-31994,,,,,,,
Sol-31995,,,,,,,
Sol-31996,,,,,,,
Sol-31997,,,,,,,
Sol-31998,,,,,,,
Sol-31999,,,,,,,
Sol-32000,,,,,,,
Sol-32001,,,,,,,
Sol-32002,,,,,,,
Sol-32003,,,,,,,
Sol-32004,,,,,,,
Sol-32005,,,,,,,
Sol-32006,,,,,,,
Sol-32007,,,,,,,
Sol-32008,,,,,,,
Sol-32009,,,,,,,
Sol-32010,,,,,,,
Sol-32011,,,,,,,
Sol-32012,,,,,,,
Sol-32013,,,,,,,
Sol-32014,,,,,,,
Sol-32015,,,,,,,
Sol-32016,,,,,,,
Sol-32017,,,,,,,
Sol-32018,,,,,,,
Sol-32019,,,,,,,
Sol-32020,,,,,,,
Sol-32021,,,,,,,
Sol-32022,,,,,,,
Sol-32023,,,,,,,
Sol-32024,,,,,,,
Sol-32025,,,,,,,
Sol-32026,,,,,,,
Sol-32027,,,,,,,
Sol-32028,,,,,,,
Sol-32029,,,,,,,
Sol-32030,,,,,,,
Sol-32031,,,,,,,
Sol-32032,,,,,,,
Sol-32033,,,,,,,
Sol-32034,,,,,,,
Sol-32035,,,,,,,
Sol-32036,,,,,,,
Sol-32037,,,,,,,
Sol-32038,,,,,,,
Sol-32039,,,,,,,
Sol-32040,,,,,,,
Sol-32041,,,,,,,
Sol-32042,,,,,,,
Sol-32043,,,,,,,
Sol-32044,,,,,,,
Sol-32045,,,,,,,
Sol-32046,,,,,,,
Sol-32047,,,,,,,
Sol-32048,,,,,,,
Sol-32049,,,,,,,
Sol-32050,,,,,,,
Sol-32051,,,,,,,
Sol-32052,,,,,,,
Sol-32053,,,,,,,
Sol-32054,,,,,,,
Sol-32055,,,,,,,
Sol-32056,,,,,,,
Sol-32057,,,,,,,
Sol-32058,,,,,,,
Sol-32059,,,,,,,
Sol-32060,,,,,,,
Sol-32061,,,,,,,
Sol-32062,,,,,,,
Sol-32063,,,,,,,
Sol-32064,,,,,,,
Sol-32065,,,,,,,
Sol-32066,,,,,,,
Sol-32067,,,,,,,
Sol-32068,,,,,,,
Sol-32069,,,,,,,
Sol-32070,,,,,,,
Sol-32071,,,,,,,
Sol-32072,,,,,,,
Sol-32073,,,,,,,
Sol-32074,,,,,,,
Sol-32075,,,,,,,
Sol-32076,,,,,,,
Sol-32077,,,,,,,
Sol-32078,,,,,,,
Sol-32079,,,,,,,
Sol-32080,,,,,,,
Sol-32081,,,,,,,
Sol-32082,,,,,,,
Sol-32083,,,,,,,
Sol-32084,,,,,,,
Sol-32085,,,,,,,
Sol-32086,,,,,,,
Sol-32087,,,,,,,
Sol-32088,,,,,,,
Sol-32089,,,,,,,
Sol-32090,,,,,,,
Sol-32091,,,,,,,
Sol-32092,,,,,,,
Sol-32093,,,,,,,
Sol-32094,,,,,,,
Sol-32095,,,,,,,
Sol-32096,,,,,,,
Sol-32097,,,,,,,
Sol-32098,,,,,,,
Sol-32099,,,,,,,
Sol-32100,,,,,,,
Sol-32101,,,,,,,
Sol-32102,,,,,,,
Sol-32103,,,,,,,
Sol-32104,,,,,,,
Sol-32105,,,,,,,
Sol-32106,,,,,,,
Sol-32107,,,,,,,
Sol-32108,,,,,,,
Sol-32109,,,,,,,
Sol-32110,,,,,,,
Sol-32111,,,,,,,
Sol-32112,,,,,,,
Sol-32113,,,,,,,
Sol-32114,,,,,,,
Sol-32115,,,,,,,
Sol-32116,,,,,,,
Sol-32117,,,,,,,
Sol-32118,,,,,,,
Sol-32119,,,,,,,
Sol-32120,,,,,,,
Sol-32121,,,,,,,
Sol-32122,,,,,,,
Sol-32123,,,,,,,
Sol-32124,,,,,,,
Sol-32125,,,,,,,
Sol-32126,,,,,,,
Sol-32127,,,,,,,
Sol-32128,,,,,,,
Sol-32129,,,,,,,
Sol-32130,,,,,,,
Sol-32131,,,,,,,
Sol-32132,,,,,,,
Sol-32133,,,,,,,
Sol-32134,,,,,,,
Sol-32135,,,,,,,
Sol-32136,,,,,,,
Sol-32137,,,,,,,
Sol-32138,,,,,,,
Sol-32139,,,,,,,
Sol-32140,,,,,,,
Sol-32141,,,,,,,
Sol-32142,,,,,,,
Sol-32143,,,,,,,
Sol-32144,,,,,,,
Sol-32145,,,,,,,
Sol-32146,,,,,,,
Sol-32147,,,,,,,
Sol-32148,,,,,,,
Sol-32149,,,,,,,
Sol-32150,,,,,,,
Sol-32151,,,,,,,
Sol-32152,,,,,,,
Sol-32153,,,,,,,
Sol-32154,,,,,,,
Sol-32155,,,,,,,
Sol-32156,,,,,,,
Sol-32157,,,,,,,
Sol-32158,,,,,,,
Sol-32159,,,,,,,
Sol-32160,,,,,,,
Sol-32161,,,,,,,
Sol-32162,,,,,,,
Sol-32163,,,,,,,
Sol-32164,,,,,,,
Sol-32165,,,,,,,
Sol-32166,,,,,,,
Sol-32167,,,,,,,
Sol-32168,,,,,,,
Sol-32169,,,,,,,
Sol-32170,,,,,,,
Sol-32171,,,,,,,
Sol-32172,,,,,,,
Sol-32173,,,,,,,
Sol-32174,,,,,,,
Sol-32175,,,,,,,
Sol-32176,,,,,,,
Sol-32177,,,,,,,
Sol-32178,,,,,,,
Sol-32179,,,,,,,
Sol-32180,,,,,,,
Sol-32181,,,,,,,
Sol-32182,,,,,,,
Sol-32183,,,,,,,
Sol-32184,,,,,,,
Sol-32185,,,,,,,
Sol-32186,,,,,,,
Sol-32187,,,,,,,
Sol-32188,,,,,,,
Sol-32189,,,,,,,
Sol-32190,,,,,,,
Sol-32191,,,,,,,
Sol-32192,,,,,,,
Sol-32193,,,,,,,
Sol-32194,,,,,,,
Sol-32195,,,,,,,
Sol-32196,,,,,,,
Sol-32197,,,,,,,
Sol-32198,,,,,,,
Sol-32199,,,,,,,
Sol-32200,,,,,,,
Sol-32201,,,,,,,
Sol-32202,,,,,,,
Sol-32203,,,,,,,
Sol-32204,,,,,,,
Sol-32205,,,,,,,
Sol-32206,,,,,,,
Sol-32207,,,,,,,
Sol-32208,,,,,,,
Sol-32209,,,,,,,
Sol-32210,,,,,,,
Sol-32211,,,,,,,
Sol-32212,,,,,,,
Sol-32213,,,,,,,
Sol-32214,,,,,,,
Sol-32215,,,,,,,
Sol-32216,,,,,,,
Sol-32217,,,,,,,
Sol-32218,,,,,,,
Sol-32219,,,,,,,
Sol-32220,,,,,,,
Sol-32221,,,,,,,
Sol-32222,,,,,,,
Sol-32223,,,,,,,
Sol-32224,,,,,,,
Sol-32225,,,,,,,
Sol-32226,,,,,,,
Sol-32227,,,,,,,
Sol-32228,,,,,,,
Sol-32229,,,,,,,
Sol-32230,,,,,,,
Sol-32231,,,,,,,
Sol-32232,,,,,,,
Sol-32233,,,,,,,
Sol-32234,,,,,,,
Sol-32235,,,,,,,
Sol-32236,,,,,,,
Sol-32237,,,,,,,
Sol-32238,,,,,,,
Sol-32239,,,,,,,
Sol-32240,,,,,,,
Sol-32241,,,,,,,
Sol-32242,,,,,,,
Sol-32243,,,,,,,
Sol-32244,,,,,,,
Sol-32245,,,,,,,
Sol-32246,,,,,,,
Sol-32247,,,,,,,
Sol-32248,,,,,,,
Sol-32249,,,,,,,
Sol-32250,,,,,,,
Sol-32251,,,,,,,
Sol-32252,,,,,,,
Sol-32253,,,,,,,
Sol-32254,,,,,,,
Sol-32255,,,,,,,
Sol-32256,,,,,,,
Sol-32257,,,,,,,
Sol-32258,,,,,,,
Sol-32259,,,,,,,
Sol-32260,,,,,,,
Sol-32261,,,,,,,
Sol-32262,,,,,,,
Sol-32263,,,,,,,
Sol-32264,,,,,,,
Sol-32265,,,,,,,
Sol-32266,,,,,,,
Sol-32267,,,,,,,
Sol-32268,,,,,,,
Sol-32269,,,,,,,
Sol-32270,,,,,,,
Sol-32271,,,,,,,
Sol-32272,,,,,,,
Sol-32273,,,,,,,
Sol-32274,,,,,,,
Sol-32275,,,,,,,
Sol-32276,,,,,,,
Sol-32277,,,,,,,
Sol-32278,,,,,,,
Sol-32279,,,,,,,
Sol-32280,,,,,,,
Sol-32281,,,,,,,
Sol-32282,,,,,,,
Sol-32283,,,,,,,
Sol-32284,,,,,,,
Sol-32285,,,,,,,
Sol-32286,,,,,,,
Sol-32287,,,,,,,
Sol-32288,,,,,,,
Sol-32289,,,,,,,
Sol-32290,,,,,,,
Sol-32291,,,,,,,
Sol-32292,,,,,,,
Sol-32293,,,,,,,
Sol-32294,,,,,,,
Sol-32295,,,,,,,
Sol-32296,,,,,,,
Sol-32297,,,,,,,
Sol-32298,,,,,,,
Sol-32299,,,,,,,
Sol-32300,,,,,,,
Sol-32301,,,,,,,
Sol-32302,,,,,,,
Sol-32303,,,,,,,
Sol-32304,,,,,,,
Sol-32305,,,,,,,
Sol-32306,,,,,,,
Sol-32307,,,,,,,
Sol-32308,,,,,,,
Sol-32309,,,,,,,
Sol-32310,,,,,,,
Sol-32311,,,,,,,
Sol-32312,,,,,,,
Sol-32313,,,,,,,
Sol-32314,,,,,,,
Sol-32315,,,,,,,
Sol-32316,,,,,,,
Sol-32317,,,,,,,
Sol-32318,,,,,,,
Sol-32319,,,,,,,
Sol-32320,,,,,,,
Sol-32321,,,,,,,
Sol-32322,,,,,,,
Sol-32323,,,,,,,
Sol-32324,,,,,,,
Sol-32325,,,,,,,
Sol-32326,,,,,,,
Sol-32327,,,,,,,
Sol-32328,,,,,,,
Sol-32329,,,,,,,
Sol-32330,,,,,,,
Sol-32331,,,,,,,
Sol-32332,,,,,,,
Sol-32333,,,,,,,
Sol-32334,,,,,,,
Sol-32335,,,,,,,
Sol-32336,,,,,,,
Sol-32337,,,,,,,
Sol-32338,,,,,,,
Sol-32339,,,,,,,
Sol-32340,,,,,,,
Sol-32341,,,,,,,
Sol-32342,,,,,,,
Sol-32343,,,,,,,
Sol-32344,,,,,,,
Sol-32345,,,,,,,
Sol-32346,,,,,,,
Sol-32347,,,,,,,
Sol-32348,,,,,,,
Sol-32349,,,,,,,
Sol-32350,,,,,,,
Sol-32351,,,,,,,
Sol-32352,,,,,,,
Sol-32353,,,,,,,
Sol-32354,,,,,,,
Sol-32355,,,,,,,
Sol-32356,,,,,,,
Sol-32357,,,,,,,
Sol-32358,,,,,,,
Sol-32359,,,,,,,
Sol-32360,,,,,,,
Sol-32361,,,,,,,
Sol-32362,,,,,,,
Sol-32363,,,,,,,
Sol-32364,,,,,,,
Sol-32365,,,,,,,
Sol-32366,,,,,,,
Sol-32367,,,,,,,
Sol-32368,,,,,,,
Sol-32369,,,,,,,
Sol-32370,,,,,,,
Sol-32371,,,,,,,
Sol-32372,,,,,,,
Sol-32373,,,,,,,
Sol-32374,,,,,,,
Sol-32375,,,,,,,
Sol-32376,,,,,,,
Sol-32377,,,,,,,
Sol-32378,,,,,,,
Sol-32379,,,,,,,
Sol-32380,,,,,,,
Sol-32381,,,,,,,
Sol-32382,,,,,,,
Sol-32383,,,,,,,
Sol-32384,,,,,,,
Sol-32385,,,,,,,
Sol-32386,,,,,,,
Sol-32387,,,,,,,
Sol-32388,,,,,,,
Sol-32389,,,,,,,
Sol-32390,,,,,,,
Sol-32391,,,,,,,
Sol-32392,,,,,,,
Sol-32393,,,,,,,
Sol-32394,,,,,,,
Sol-32395,,,,,,,
Sol-32396,,,,,,,
Sol-32397,,,,,,,
Sol-32398,,,,,,,
Sol-32399,,,,,,,
Sol-32400,,,,,,,
Sol-32401,,,,,,,
Sol-32402,,,,,,,
Sol-32403,,,,,,,
Sol-32404,,,,,,,
Sol-32405,,,,,,,
Sol-32406,,,,,,,
Sol-32407,,,,,,,
Sol-32408,,,,,,,
Sol-32409,,,,,,,
Sol-32410,,,,,,,
Sol-32411,,,,,,,
Sol-32412,,,,,,,
Sol-32413,,,,,,,
Sol-32414,,,,,,,
Sol-32415,,,,,,,
Sol-32416,,,,,,,
Sol-32417,,,,,,,
Sol-32418,,,,,,,
Sol-32419,,,,,,,
Sol-32420,,,,,,,
Sol-32421,,,,,,,
Sol-32422,,,,,,,
Sol-32423,,,,,,,
Sol-32424,,,,,,,
Sol-32425,,,,,,,
Sol-32426,,,,,,,
Sol-32427,,,,,,,
Sol-32428,,,,,,,
Sol-32429,,,,,,,
Sol-32430,,,,,,,
Sol-32431,,,,,,,
Sol-32432,,,,,,,
Sol-32433,,,,,,,
Sol-32434,,,,,,,
Sol-32435,,,,,,,
Sol-32436,,,,,,,
Sol-32437,,,,,,,
Sol-32438,,,,,,,
Sol-32439,,,,,,,
Sol-32440,,,,,,,
Sol-32441,,,,,,,
Sol-32442,,,,,,,
Sol-32443,,,,,,,
Sol-32444,,,,,,,
Sol-32445,,,,,,,
Sol-32446,,,,,,,
Sol-32447,,,,,,,
Sol-32448,,,,,,,
Sol-32449,,,,,,,
Sol-32450,,,,,,,
Sol-32451,,,,,,,
Sol-32452,,,,,,,
Sol-32453,,,,,,,
Sol-32454,,,,,,,
Sol-32455,,,,,,,
Sol-32456,,,,,,,
Sol-32457,,,,,,,
Sol-32458,,,,,,,
Sol-32459,,,,,,,
Sol-32460,,,,,,,
Sol-32461,,,,,,,
Sol-32462,,,,,,,
Sol-32463,,,,,,,
Sol-32464,,,,,,,
Sol-32465,,,,,,,
Sol-32466,,,,,,,
Sol-32467,,,,,,,
Sol-32468,,,,,,,
Sol-32469,,,,,,,
Sol-32470,,,,,,,
Sol-32471,,,,,,,
Sol-32472,,,,,,,
Sol-32473,,,,,,,
Sol-32474,,,,,,,
Sol-32475,,,,,,,
Sol-32476,,,,,,,
Sol-32477,,,,,,,
Sol-32478,,,,,,,
Sol-32479,,,,,,,
Sol-32480,,,,,,,
Sol-32481,,,,,,,
Sol-32482,,,,,,,
Sol-32483,,,,,,,
Sol-32484,,,,,,,
Sol-32485,,,,,,,
Sol-32486,,,,,,,
Sol-32487,,,,,,,
Sol-32488,,,,,,,
Sol-32489,,,,,,,
Sol-32490,,,,,,,
Sol-32491,,,,,,,
Sol-32492,,,,,,,
Sol-32493,,,,,,,
Sol-32494,,,,,,,
Sol-32495,,,,,,,
Sol-32496,,,,,,,
Sol-32497,,,,,,,
Sol-32498,,,,,,,
Sol-32499,,,,,,,
Sol-32500,,,,,,,
Sol-32501,,,,,,,
Sol-32502,,,,,,,
Sol-32503,,,,,,,
Sol-32504,,,,,,,
Sol-32505,,,,,,,
Sol-32506,,,,,,,
Sol-32507,,,,,,,
Sol-32508,,,,,,,
Sol-32509,,,,,,,
Sol-32510,,,,,,,
Sol-32511,,,,,,,
Sol-32512,,,,,,,
Sol-32513,,,,,,,
Sol-32514,,,,,,,
Sol-32515,,,,,,,
Sol-32516,,,,,,,
Sol-32517,,,,,,,
Sol-32518,,,,,,,
Sol-32519,,,,,,,
Sol-32520,,,,,,,
Sol-32521,,,,,,,
Sol-32522,,,,,,,
Sol-32523,,,,,,,
Sol-32524,,,,,,,
Sol-32525,,,,,,,
Sol-32526,,,,,,,
Sol-32527,,,,,,,
Sol-32528,,,,,,,
Sol-32529,,,,,,,
Sol-32530,,,,,,,
Sol-32531,,,,,,,
Sol-32532,,,,,,,
Sol-32533,,,,,,,
Sol-32534,,,,,,,
Sol-32535,,,,,,,
Sol-32536,,,,,,,
Sol-32537,,,,,,,
Sol-32538,,,,,,,
Sol-32539,,,,,,,
Sol-32540,,,,,,,
Sol-32541,,,,,,,
Sol-32542,,,,,,,
Sol-32543,,,,,,,
Sol-32544,,,,,,,
Sol-32545,,,,,,,
Sol-32546,,,,,,,
Sol-32547,,,,,,,
Sol-32548,,,,,,,
Sol-32549,,,,,,,
Sol-32550,,,,,,,
Sol-32551,,,,,,,
Sol-32552,,,,,,,
Sol-32553,,,,,,,
Sol-32554,,,,,,,
Sol-32555,,,,,,,
Sol-32556,,,,,,,
Sol-32557,,,,,,,
Sol-32558,,,,,,,
Sol-32559,,,,,,,
Sol-32560,,,,,,,
Sol-32561,,,,,,,
Sol-32562,,,,,,,
Sol-32563,,,,,,,
Sol-32564,,,,,,,
Sol-32565,,,,,,,
Sol-32566,,,,,,,
Sol-32567,,,,,,,
Sol-32568,,,,,,,
Sol-32569,,,,,,,
Sol-32570,,,,,,,
Sol-32571,,,,,,,
Sol-32572,,,,,,,
Sol-32573,,,,,,,
Sol-32574,,,,,,,
Sol-32575,,,,,,,
Sol-32576,,,,,,,
Sol-32577,,,,,,,
Sol-32578,,,,,,,
Sol-32579,,,,,,,
Sol-32580,,,,,,,
Sol-32581,,,,,,,
Sol-32582,,,,,,,
Sol-32583,,,,,,,
Sol-32584,,,,,,,
Sol-32585,,,,,,,
Sol-32586,,,,,,,
Sol-32587,,,,,,,
Sol-32588,,,,,,,
Sol-32589,,,,,,,
Sol-32590,,,,,,,
Sol-32591,,,,,,,
Sol-32592,,,,,,,
Sol-32593,,,,,,,
Sol-32594,,,,,,,
Sol-32595,,,,,,,
Sol-32596,,,,,,,
Sol-32597,,,,,,,
Sol-32598,,,,,,,
Sol-32599,,,,,,,
Sol-32600,,,,,,,
Sol-32601,,,,,,,
Sol-32602,,,,,,,
Sol-32603,,,,,,,
Sol-32604,,,,,,,
Sol-32605,,,,,,,
Sol-32606,,,,,,,
Sol-32607,,,,,,,
Sol-32608,,,,,,,
Sol-32609,,,,,,,
Sol-32610,,,,,,,
Sol-32611,,,,,,,
Sol-32612,,,,,,,
Sol-32613,,,,,,,
Sol-32614,,,,,,,
Sol-32615,,,,,,,
Sol-32616,,,,,,,
Sol-32617,,,,,,,
Sol-32618,,,,,,,
Sol-32619,,,,,,,
Sol-32620,,,,,,,
Sol-32621,,,,,,,
Sol-32622,,,,,,,
Sol-32623,,,,,,,
Sol-32624,,,,,,,
Sol-32625,,,,,,,
Sol-32626,,,,,,,
Sol-32627,,,,,,,
Sol-32628,,,,,,,
Sol-32629,,,,,,,
Sol-32630,,,,,,,
Sol-32631,,,,,,,
Sol-32632,,,,,,,
Sol-32633,,,,,,,
Sol-32634,,,,,,,
Sol-32635,,,,,,,
Sol-32636,,,,,,,
Sol-32637,,,,,,,
Sol-32638,,,,,,,
Sol-32639,,,,,,,
Sol-32640,,,,,,,
Sol-32641,,,,,,,
Sol-32642,,,,,,,
Sol-32643,,,,,,,
Sol-32644,,,,,,,
Sol-32645,,,,,,,
Sol-32646,,,,,,,
Sol-32647,,,,,,,
Sol-32648,,,,,,,
Sol-32649,,,,,,,
Sol-32650,,,,,,,
Sol-32651,,,,,,,
Sol-32652,,,,,,,
Sol-32653,,,,,,,
Sol-32654,,,,,,,
Sol-32655,,,,,,,
Sol-32656,,,,,,,
Sol-32657,,,,,,,
Sol-32658,,,,,,,
Sol-32659,,,,,,,
Sol-32660,,,,,,,
Sol-32661,,,,,,,
Sol-32662,,,,,,,
Sol-32663,,,,,,,
Sol-32664,,,,,,,
Sol-32665,,,,,,,
Sol-32666,,,,,,,
Sol-32667,,,,,,,
Sol-32668,,,,,,,
Sol-32669,,,,,,,
Sol-32670,,,,,,,
Sol-32671,,,,,,,
Sol-32672,,,,,,,
Sol-32673,,,,,,,
Sol-32674,,,,,,,
Sol-32675,,,,,,,
Sol-32676,,,,,,,
Sol-32677,,,,,,,
Sol-32678,,,,,,,
Sol-32679,,,,,,,
Sol-32680,,,,,,,
Sol-32681,,,,,,,
Sol-32682,,,,,,,
Sol-32683,,,,,,,
Sol-32684,,,,,,,
Sol-32685,,,,,,,
Sol-32686,,,,,,,
Sol-32687,,,,,,,
Sol-32688,,,,,,,
Sol-32689,,,,,,,
Sol-32690,,,,,,,
Sol-32691,,,,,,,
Sol-32692,,,,,,,
Sol-32693,,,,,,,
Sol-32694,,,,,,,
Sol-32695,,,,,,,
Sol-32696,,,,,,,
Sol-32697,,,,,,,
Sol-32698,,,,,,,
Sol-32699,,,,,,,
Sol-32700,,,,,,,
Sol-32701,,,,,,,
Sol-32702,,,,,,,
Sol-32703,,,,,,,
Sol-32704,,,,,,,
Sol-32705,,,,,,,
Sol-32706,,,,,,,
Sol-32707,,,,,,,
Sol-32708,,,,,,,
Sol-32709,,,,,,,
Sol-32710,,,,,,,
Sol-32711,,,,,,,
Sol-32712,,,,,,,
Sol-32713,,,,,,,
Sol-32714,,,,,,,
Sol-32715,,,,,,,
Sol-32716,,,,,,,
Sol-32717,,,,,,,
Sol-32718,,,,,,,
Sol-32719,,,,,,,
Sol-32720,,,,,,,
Sol-32721,,,,,,,
Sol-32722,,,,,,,
Sol-32723,,,,,,,
Sol-32724,,,,,,,
Sol-32725,,,,,,,
Sol-32726,,,,,,,
Sol-32727,,,,,,,
Sol-32728,,,,,,,
Sol-32729,,,,,,,
Sol-32730,,,,,,,
Sol-32731,,,,,,,
Sol-32732,,,,,,,
Sol-32733,,,,,,,
Sol-32734,,,,,,,
Sol-32735,,,,,,,
Sol-32736,,,,,,,
Sol-32737,,,,,,,
Sol-32738,,,,,,,
Sol-32739,,,,,,,
Sol-32740,,,,,,,
Sol-32741,,,,,,,
Sol-32742,,,,,,,
Sol-32743,,,,,,,
Sol-32744,,,,,,,
Sol-32745,,,,,,,
Sol-32746,,,,,,,
Sol-32747,,,,,,,
Sol-32748,,,,,,,
Sol-32749,,,,,,,
Sol-32750,,,,,,,
Sol-32751,,,,,,,
Sol-32752,,,,,,,
Sol-32753,,,,,,,
Sol-32754,,,,,,,
Sol-32755,,,,,,,
Sol-32756,,,,,,,
Sol-32757,,,,,,,
Sol-32758,,,,,,,
Sol-32759,,,,,,,
Sol-32760,,,,,,,
Sol-32761,,,,,,,
Sol-32762,,,,,,,
Sol-32763,,,,,,,
Sol-32764,,,,,,,
Sol-32765,,,,,,,
Sol-32766,,,,,,,
Sol-32767,,,,,,,
Sol-32768,,,,,,,
Sol-32769,,,,,,,
Sol-32770,,,,,,,
Sol-32771,,,,,,,
Sol-32772,,,,,,,
Sol-32773,,,,,,,
Sol-32774,,,,,,,
Sol-32775,,,,,,,
Sol-32776,,,,,,,
Sol-32777,,,,,,,
Sol-32778,,,,,,,
Sol-32779,,,,,,,
Sol-32780,,,,,,,
Sol-32781,,,,,,,
Sol-32782,,,,,,,
Sol-32783,,,,,,,
Sol-32784,,,,,,,
Sol-32785,,,,,,,
Sol-32786,,,,,,,
Sol-32787,,,,,,,
Sol-32788,,,,,,,
Sol-32789,,,,,,,
Sol-32790,,,,,,,
Sol-32791,,,,,,,
Sol-32792,,,,,,,
Sol-32793,,,,,,,
Sol-32794,,,,,,,
Sol-32795,,,,,,,
Sol-32796,,,,,,,
Sol-32797,,,,,,,
Sol-32798,,,,,,,
Sol-32799,,,,,,,
Sol-32800,,,,,,,
Sol-32801,,,,,,,
Sol-32802,,,,,,,
Sol-32803,,,,,,,
Sol-32804,,,,,,,
Sol-32805,,,,,,,
Sol-32806,,,,,,,
Sol-32807,,,,,,,
Sol-32808,,,,,,,
Sol-32809,,,,,,,
Sol-32810,,,,,,,
Sol-32811,,,,,,,
Sol-32812,,,,,,,
Sol-32813,,,,,,,
Sol-32814,,,,,,,
Sol-32815,,,,,,,
Sol-32816,,,,,,,
Sol-32817,,,,,,,
Sol-32818,,,,,,,
Sol-32819,,,,,,,
Sol-32820,,,,,,,
Sol-32821,,,,,,,
Sol-32822,,,,,,,
Sol-32823,,,,,,,
Sol-32824,,,,,,,
Sol-32825,,,,,,,
Sol-32826,,,,,,,
Sol-32827,,,,,,,
Sol-32828,,,,,,,
Sol-32829,,,,,,,
Sol-32830,,,,,,,
Sol-32831,,,,,,,
Sol-32832,,,,,,,
Sol-32833,,,,,,,
Sol-32834,,,,,,,
Sol-32835,,,,,,,
Sol-32836,,,,,,,
Sol-32837,,,,,,,
Sol-32838,,,,,,,
Sol-32839,,,,,,,
Sol-32840,,,,,,,
Sol-32841,,,,,,,
Sol-32842,,,,,,,
Sol-32843,,,,,,,
Sol-32844,,,,,,,
Sol-32845,,,,,,,
Sol-32846,,,,,,,
Sol-32847,,,,,,,
Sol-32848,,,,,,,
Sol-32849,,,,,,,
Sol-32850,,,,,,,
Sol-32851,,,,,,,
Sol-32852,,,,,,,
Sol-32853,,,,,,,
Sol-32854,,,,,,,
Sol-32855,,,,,,,
Sol-32856,,,,,,,
Sol-32857,,,,,,,
Sol-32858,,,,,,,
Sol-32859,,,,,,,
Sol-32860,,,,,,,
Sol-32861,,,,,,,
Sol-32862,,,,,,,
Sol-32863,,,,,,,
Sol-32864,,,,,,,
Sol-32865,,,,,,,
Sol-32866,,,,,,,
Sol-32867,,,,,,,
Sol-32868,,,,,,,
Sol-32869,,,,,,,
Sol-32870,,,,,,,
Sol-32871,,,,,,,
Sol-32872,,,,,,,
Sol-32873,,,,,,,
Sol-32874,,,,,,,
Sol-32875,,,,,,,
Sol-32876,,,,,,,
Sol-32877,,,,,,,
Sol-32878,,,,,,,
Sol-32879,,,,,,,
Sol-32880,,,,,,,
Sol-32881,,,,,,,
Sol-32882,,,,,,,
Sol-32883,,,,,,,
Sol-32884,,,,,,,
Sol-32885,,,,,,,
Sol-32886,,,,,,,
Sol-32887,,,,,,,
Sol-32888,,,,,,,
Sol-32889,,,,,,,
Sol-32890,,,,,,,
Sol-32891,,,,,,,
Sol-32892,,,,,,,
Sol-32893,,,,,,,
Sol-32894,,,,,,,
Sol-32895,,,,,,,
Sol-32896,,,,,,,
Sol-32897,,,,,,,
Sol-32898,,,,,,,
Sol-32899,,,,,,,
Sol-32900,,,,,,,
Sol-32901,,,,,,,
Sol-32902,,,,,,,
Sol-32903,,,,,,,
Sol-32904,,,,,,,
Sol-32905,,,,,,,
Sol-32906,,,,,,,
Sol-32907,,,,,,,
Sol-32908,,,,,,,
Sol-32909,,,,,,,
Sol-32910,,,,,,,
Sol-32911,,,,,,,
Sol-32912,,,,,,,
Sol-32913,,,,,,,
Sol-32914,,,,,,,
Sol-32915,,,,,,,
Sol-32916,,,,,,,
Sol-32917,,,,,,,
Sol-32918,,,,,,,
Sol-32919,,,,,,,
Sol-32920,,,,,,,
Sol-32921,,,,,,,
Sol-32922,,,,,,,
Sol-32923,,,,,,,
Sol-32924,,,,,,,
Sol-32925,,,,,,,
Sol-32926,,,,,,,
Sol-32927,,,,,,,
Sol-32928,,,,,,,
Sol-32929,,,,,,,
Sol-32930,,,,,,,
Sol-32931,,,,,,,
Sol-32932,,,,,,,
Sol-32933,,,,,,,
Sol-32934,,,,,,,
Sol-32935,,,,,,,
Sol-32936,,,,,,,
Sol-32937,,,,,,,
Sol-32938,,,,,,,
Sol-32939,,,,,,,
Sol-32940,,,,,,,
Sol-32941,,,,,,,
Sol-32942,,,,,,,
Sol-32943,,,,,,,
Sol-32944,,,,,,,
Sol-32945,,,,,,,
Sol-32946,,,,,,,
Sol-32947,,,,,,,
Sol-32948,,,,,,,
Sol-32949,,,,,,,
Sol-32950,,,,,,,
Sol-32951,,,,,,,
Sol-32952,,,,,,,
Sol-32953,,,,,,,
Sol-32954,,,,,,,
Sol-32955,,,,,,,
Sol-32956,,,,,,,
Sol-32957,,,,,,,
Sol-32958,,,,,,,
Sol-32959,,,,,,,
Sol-32960,,,,,,,
Sol-32961,,,,,,,
Sol-32962,,,,,,,
Sol-32963,,,,,,,
Sol-32964,,,,,,,
Sol-32965,,,,,,,
Sol-32966,,,,,,,
Sol-32967,,,,,,,
Sol-32968,,,,,,,
Sol-32969,,,,,,,
Sol-32970,,,,,,,
Sol-32971,,,,,,,
Sol-32972,,,,,,,
Sol-32973,,,,,,,
Sol-32974,,,,,,,
Sol-32975,,,,,,,
Sol-32976,,,,,,,
Sol-32977,,,,,,,
Sol-32978,,,,,,,
Sol-32979,,,,,,,
Sol-32980,,,,,,,
Sol-32981,,,,,,,
Sol-32982,,,,,,,
Sol-32983,,,,,,,
Sol-32984,,,,,,,
Sol-32985,,,,,,,
Sol-32986,,,,,,,
Sol-32987,,,,,,,
Sol-32988,,,,,,,
Sol-32989,,,,,,,
Sol-32990,,,,,,,
Sol-32991,,,,,,,
Sol-32992,,,,,,,
Sol-32993,,,,,,,
Sol-32994,,,,,,,
Sol-32995,,,,,,,
Sol-32996,,,,,,,
Sol-32997,,,,,,,
Sol-32998,,,,,,,
Sol-32999,,,,,,,
Sol-33000,,,,,,,
Sol-33001,,,,,,,
Sol-33002,,,,,,,
Sol-33003,,,,,,,
Sol-33004,,,,,,,
Sol-33005,,,,,,,
Sol-33006,,,,,,,
Sol-33007,,,,,,,
Sol-33008,,,,,,,
Sol-33009,,,,,,,
Sol-33010,,,,,,,
Sol-33011,,,,,,,
Sol-33012,,,,,,,
Sol-33013,,,,,,,
Sol-33014,,,,,,,
Sol-33015,,,,,,,
Sol-33016,,,,,,,
Sol-33017,,,,,,,
Sol-33018,,,,,,,
Sol-33019,,,,,,,
Sol-33020,,,,,,,
Sol-33021,,,,,,,
Sol-33022,,,,,,,
Sol-33023,,,,,,,
Sol-33024,,,,,,,
Sol-33025,,,,,,,
Sol-33026,,,,,,,
Sol-33027,,,,,,,
Sol-33028,,,,,,,
Sol-33029,,,,,,,
Sol-33030,,,,,,,
Sol-33031,,,,,,,
Sol-33032,,,,,,,
Sol-33033,,,,,,,
Sol-33034,,,,,,,
Sol-33035,,,,,,,
Sol-33036,,,,,,,
Sol-33037,,,,,,,
Sol-33038,,,,,,,
Sol-33039,,,,,,,
Sol-33040,,,,,,,
Sol-33041,,,,,,,
Sol-33042,,,,,,,
Sol-33043,,,,,,,
Sol-33044,,,,,,,
Sol-33045,,,,,,,
Sol-33046,,,,,,,
Sol-33047,,,,,,,
Sol-33048,,,,,,,
Sol-33049,,,,,,,
Sol-33050,,,,,,,
Sol-33051,,,,,,,
Sol-33052,,,,,,,
Sol-33053,,,,,,,
Sol-33054,,,,,,,
Sol-33055,,,,,,,
Sol-33056,,,,,,,
Sol-33057,,,,,,,
Sol-33058,,,,,,,
Sol-33059,,,,,,,
Sol-33060,,,,,,,
Sol-33061,,,,,,,
Sol-33062,,,,,,,
Sol-33063,,,,,,,
Sol-33064,,,,,,,
Sol-33065,,,,,,,
Sol-33066,,,,,,,
Sol-33067,,,,,,,
Sol-33068,,,,,,,
Sol-33069,,,,,,,
Sol-33070,,,,,,,
Sol-33071,,,,,,,
Sol-33072,,,,,,,
Sol-33073,,,,,,,
Sol-33074,,,,,,,
Sol-33075,,,,,,,
Sol-33076,,,,,,,
Sol-33077,,,,,,,
Sol-33078,,,,,,,
Sol-33079,,,,,,,
Sol-33080,,,,,,,
Sol-33081,,,,,,,
Sol-33082,,,,,,,
Sol-33083,,,,,,,
Sol-33084,,,,,,,
Sol-33085,,,,,,,
Sol-33086,,,,,,,
Sol-33087,,,,,,,
Sol-33088,,,,,,,
Sol-33089,,,,,,,
Sol-33090,,,,,,,
Sol-33091,,,,,,,
Sol-33092,,,,,,,
Sol-33093,,,,,,,
Sol-33094,,,,,,,
Sol-33095,,,,,,,
Sol-33096,,,,,,,
Sol-33097,,,,,,,
Sol-33098,,,,,,,
Sol-33099,,,,,,,
Sol-33100,,,,,,,
Sol-33101,,,,,,,
Sol-33102,,,,,,,
Sol-33103,,,,,,,
Sol-33104,,,,,,,
Sol-33105,,,,,,,
Sol-33106,,,,,,,
Sol-33107,,,,,,,
Sol-33108,,,,,,,
Sol-33109,,,,,,,
Sol-33110,,,,,,,
Sol-33111,,,,,,,
Sol-33112,,,,,,,
Sol-33113,,,,,,,
Sol-33114,,,,,,,
Sol-33115,,,,,,,
Sol-33116,,,,,,,
Sol-33117,,,,,,,
Sol-33118,,,,,,,
Sol-33119,,,,,,,
Sol-33120,,,,,,,
Sol-33121,,,,,,,
Sol-33122,,,,,,,
Sol-33123,,,,,,,
Sol-33124,,,,,,,
Sol-33125,,,,,,,
Sol-33126,,,,,,,
Sol-33127,,,,,,,
Sol-33128,,,,,,,
Sol-33129,,,,,,,
Sol-33130,,,,,,,
Sol-33131,,,,,,,
Sol-33132,,,,,,,
Sol-33133,,,,,,,
Sol-33134,,,,,,,
Sol-33135,,,,,,,
Sol-33136,,,,,,,
Sol-33137,,,,,,,
Sol-33138,,,,,,,
Sol-33139,,,,,,,
Sol-33140,,,,,,,
Sol-33141,,,,,,,
Sol-33142,,,,,,,
Sol-33143,,,,,,,
Sol-33144,,,,,,,
Sol-33145,,,,,,,
Sol-33146,,,,,,,
Sol-33147,,,,,,,
Sol-33148,,,,,,,
Sol-33149,,,,,,,
Sol-33150,,,,,,,
Sol-33151,,,,,,,
Sol-33152,,,,,,,
Sol-33153,,,,,,,
Sol-33154,,,,,,,
Sol-33155,,,,,,,
Sol-33156,,,,,,,
Sol-33157,,,,,,,
Sol-33158,,,,,,,
Sol-33159,,,,,,,
Sol-33160,,,,,,,
Sol-33161,,,,,,,
Sol-33162,,,,,,,
Sol-33163,,,,,,,
Sol-33164,,,,,,,
Sol-33165,,,,,,,
Sol-33166,,,,,,,
Sol-33167,,,,,,,
Sol-33168,,,,,,,
Sol-33169,,,,,,,
Sol-33170,,,,,,,
Sol-33171,,,,,,,
Sol-33172,,,,,,,
Sol-33173,,,,,,,
Sol-33174,,,,,,,
Sol-33175,,,,,,,
Sol-33176,,,,,,,
Sol-33177,,,,,,,
Sol-33178,,,,,,,
Sol-33179,,,,,,,
Sol-33180,,,,,,,
Sol-33181,,,,,,,
Sol-33182,,,,,,,
Sol-33183,,,,,,,
Sol-33184,,,,,,,
Sol-33185,,,,,,,
Sol-33186,,,,,,,
Sol-33187,,,,,,,
Sol-33188,,,,,,,
Sol-33189,,,,,,,
Sol-33190,,,,,,,
Sol-33191,,,,,,,
Sol-33192,,,,,,,
Sol-33193,,,,,,,
Sol-33194,,,,,,,
Sol-33195,,,,,,,
Sol-33196,,,,,,,
Sol-33197,,,,,,,
Sol-33198,,,,,,,
Sol-33199,,,,,,,
Sol-33200,,,,,,,
Sol-33201,,,,,,,
Sol-33202,,,,,,,
Sol-33203,,,,,,,
Sol-33204,,,,,,,
Sol-33205,,,,,,,
Sol-33206,,,,,,,
Sol-33207,,,,,,,
Sol-33208,,,,,,,
Sol-33209,,,,,,,
Sol-33210,,,,,,,
Sol-33211,,,,,,,
Sol-33212,,,,,,,
Sol-33213,,,,,,,
Sol-33214,,,,,,,
Sol-33215,,,,,,,
Sol-33216,,,,,,,
Sol-33217,,,,,,,
Sol-33218,,,,,,,
Sol-33219,,,,,,,
Sol-33220,,,,,,,
Sol-33221,,,,,,,
Sol-33222,,,,,,,
Sol-33223,,,,,,,
Sol-33224,,,,,,,
Sol-33225,,,,,,,
Sol-33226,,,,,,,
Sol-33227,,,,,,,
Sol-33228,,,,,,,
Sol-33229,,,,,,,
Sol-33230,,,,,,,
Sol-33231,,,,,,,
Sol-33232,,,,,,,
Sol-33233,,,,,,,
Sol-33234,,,,,,,
Sol-33235,,,,,,,
Sol-33236,,,,,,,
Sol-33237,,,,,,,
Sol-33238,,,,,,,
Sol-33239,,,,,,,
Sol-33240,,,,,,,
Sol-33241,,,,,,,
Sol-33242,,,,,,,
Sol-33243,,,,,,,
Sol-33244,,,,,,,
Sol-33245,,,,,,,
Sol-33246,,,,,,,
Sol-33247,,,,,,,
Sol-33248,,,,,,,
Sol-33249,,,,,,,
Sol-33250,,,,,,,
Sol-33251,,,,,,,
Sol-33252,,,,,,,
Sol-33253,,,,,,,
Sol-33254,,,,,,,
Sol-33255,,,,,,,
Sol-33256,,,,,,,
Sol-33257,,,,,,,
Sol-33258,,,,,,,
Sol-33259,,,,,,,
Sol-33260,,,,,,,
Sol-33261,,,,,,,
Sol-33262,,,,,,,
Sol-33263,,,,,,,
Sol-33264,,,,,,,
Sol-33265,,,,,,,
Sol-33266,,,,,,,
Sol-33267,,,,,,,
Sol-33268,,,,,,,
Sol-33269,,,,,,,
Sol-33270,,,,,,,
Sol-33271,,,,,,,
Sol-33272,,,,,,,
Sol-33273,,,,,,,
Sol-33274,,,,,,,
Sol-33275,,,,,,,
Sol-33276,,,,,,,
Sol-33277,,,,,,,
Sol-33278,,,,,,,
Sol-33279,,,,,,,
Sol-33280,,,,,,,
Sol-33281,,,,,,,
Sol-33282,,,,,,,
Sol-33283,,,,,,,
Sol-33284,,,,,,,
Sol-33285,,,,,,,
Sol-33286,,,,,,,
Sol-33287,,,,,,,
Sol-33288,,,,,,,
Sol-33289,,,,,,,
Sol-33290,,,,,,,
Sol-33291,,,,,,,
Sol-33292,,,,,,,
Sol-33293,,,,,,,
Sol-33294,,,,,,,
Sol-33295,,,,,,,
Sol-33296,,,,,,,
Sol-33297,,,,,,,
Sol-33298,,,,,,,
Sol-33299,,,,,,,
Sol-33300,,,,,,,
Sol-33301,,,,,,,
Sol-33302,,,,,,,
Sol-33303,,,,,,,
Sol-33304,,,,,,,
Sol-33305,,,,,,,
Sol-33306,,,,,,,
Sol-33307,,,,,,,
Sol-33308,,,,,,,
Sol-33309,,,,,,,
Sol-33310,,,,,,,
Sol-33311,,,,,,,
Sol-33312,,,,,,,
Sol-33313,,,,,,,
Sol-33314,,,,,,,
Sol-33315,,,,,,,
Sol-33316,,,,,,,
Sol-33317,,,,,,,
Sol-33318,,,,,,,
Sol-33319,,,,,,,
Sol-33320,,,,,,,
Sol-33321,,,,,,,
Sol-33322,,,,,,,
Sol-33323,,,,,,,
Sol-33324,,,,,,,
Sol-33325,,,,,,,
Sol-33326,,,,,,,
Sol-33327,,,,,,,
Sol-33328,,,,,,,
Sol-33329,,,,,,,
Sol-33330,,,,,,,
Sol-33331,,,,,,,
Sol-33332,,,,,,,
Sol-33333,,,,,,,
Sol-33334,,,,,,,
Sol-33335,,,,,,,
Sol-33336,,,,,,,
Sol-33337,,,,,,,
Sol-33338,,,,,,,
Sol-33339,,,,,,,
Sol-33340,,,,,,,
Sol-33341,,,,,,,
Sol-33342,,,,,,,
Sol-33343,,,,,,,
Sol-33344,,,,,,,
Sol-33345,,,,,,,
Sol-33346,,,,,,,
Sol-33347,,,,,,,
Sol-33348,,,,,,,
Sol-33349,,,,,,,
Sol-33350,,,,,,,
Sol-33351,,,,,,,
Sol-33352,,,,,,,
Sol-33353,,,,,,,
Sol-33354,,,,,,,
Sol-33355,,,,,,,
Sol-33356,,,,,,,
Sol-33357,,,,,,,
Sol-33358,,,,,,,
Sol-33359,,,,,,,
Sol-33360,,,,,,,
Sol-33361,,,,,,,
Sol-33362,,,,,,,
Sol-33363,,,,,,,
Sol-33364,,,,,,,
Sol-33365,,,,,,,
Sol-33366,,,,,,,
Sol-33367,,,,,,,
Sol-33368,,,,,,,
Sol-33369,,,,,,,
Sol-33370,,,,,,,
Sol-33371,,,,,,,
Sol-33372,,,,,,,
Sol-33373,,,,,,,
Sol-33374,,,,,,,
Sol-33375,,,,,,,
Sol-33376,,,,,,,
Sol-33377,,,,,,,
Sol-33378,,,,,,,
Sol-33379,,,,,,,
Sol-33380,,,,,,,
Sol-33381,,,,,,,
Sol-33382,,,,,,,
Sol-33383,,,,,,,
Sol-33384,,,,,,,
Sol-33385,,,,,,,
Sol-33386,,,,,,,
Sol-33387,,,,,,,
Sol-33388,,,,,,,
Sol-33389,,,,,,,
Sol-33390,,,,,,,
Sol-33391,,,,,,,
Sol-33392,,,,,,,
Sol-33393,,,,,,,
Sol-33394,,,,,,,
Sol-33395,,,,,,,
Sol-33396,,,,,,,
Sol-33397,,,,,,,
Sol-33398,,,,,,,
Sol-33399,,,,,,,
Sol-33400,,,,,,,
Sol-33401,,,,,,,
Sol-33402,,,,,,,
Sol-33403,,,,,,,
Sol-33404,,,,,,,
Sol-33405,,,,,,,
Sol-33406,,,,,,,
Sol-33407,,,,,,,
Sol-33408,,,,,,,
Sol-33409,,,,,,,
Sol-33410,,,,,,,
Sol-33411,,,,,,,
Sol-33412,,,,,,,
Sol-33413,,,,,,,
Sol-33414,,,,,,,
Sol-33415,,,,,,,
Sol-33416,,,,,,,
Sol-33417,,,,,,,
Sol-33418,,,,,,,
Sol-33419,,,,,,,
Sol-33420,,,,,,,
Sol-33421,,,,,,,
Sol-33422,,,,,,,
Sol-33423,,,,,,,
Sol-33424,,,,,,,
Sol-33425,,,,,,,
Sol-33426,,,,,,,
Sol-33427,,,,,,,
Sol-33428,,,,,,,
Sol-33429,,,,,,,
Sol-33430,,,,,,,
Sol-33431,,,,,,,
Sol-33432,,,,,,,
Sol-33433,,,,,,,
Sol-33434,,,,,,,
Sol-33435,,,,,,,
Sol-33436,,,,,,,
Sol-33437,,,,,,,
Sol-33438,,,,,,,
Sol-33439,,,,,,,
Sol-33440,,,,,,,
Sol-33441,,,,,,,
Sol-33442,,,,,,,
Sol-33443,,,,,,,
Sol-33444,,,,,,,
Sol-33445,,,,,,,
Sol-33446,,,,,,,
Sol-33447,,,,,,,
Sol-33448,,,,,,,
Sol-33449,,,,,,,
Sol-33450,,,,,,,
Sol-33451,,,,,,,
Sol-33452,,,,,,,
Sol-33453,,,,,,,
Sol-33454,,,,,,,
Sol-33455,,,,,,,
Sol-33456,,,,,,,
Sol-33457,,,,,,,
Sol-33458,,,,,,,
Sol-33459,,,,,,,
Sol-33460,,,,,,,
Sol-33461,,,,,,,
Sol-33462,,,,,,,
Sol-33463,,,,,,,
Sol-33464,,,,,,,
Sol-33465,,,,,,,
Sol-33466,,,,,,,
Sol-33467,,,,,,,
Sol-33468,,,,,,,
Sol-33469,,,,,,,
Sol-33470,,,,,,,
Sol-33471,,,,,,,
Sol-33472,,,,,,,
Sol-33473,,,,,,,
Sol-33474,,,,,,,
Sol-33475,,,,,,,
Sol-33476,,,,,,,
Sol-33477,,,,,,,
Sol-33478,,,,,,,
Sol-33479,,,,,,,
Sol-33480,,,,,,,
Sol-33481,,,,,,,
Sol-33482,,,,,,,
Sol-33483,,,,,,,
Sol-33484,,,,,,,
Sol-33485,,,,,,,
Sol-33486,,,,,,,
Sol-33487,,,,,,,
Sol-33488,,,,,,,
Sol-33489,,,,,,,
Sol-33490,,,,,,,
Sol-33491,,,,,,,
Sol-33492,,,,,,,
Sol-33493,,,,,,,
Sol-33494,,,,,,,
Sol-33495,,,,,,,
Sol-33496,,,,,,,
Sol-33497,,,,,,,
Sol-33498,,,,,,,
Sol-33499,,,,,,,
Sol-33500,,,,,,,
Sol-33501,,,,,,,
Sol-33502,,,,,,,
Sol-33503,,,,,,,
Sol-33504,,,,,,,
Sol-33505,,,,,,,
Sol-33506,,,,,,,
Sol-33507,,,,,,,
Sol-33508,,,,,,,
Sol-33509,,,,,,,
Sol-33510,,,,,,,
Sol-33511,,,,,,,
Sol-33512,,,,,,,
Sol-33513,,,,,,,
Sol-33514,,,,,,,
Sol-33515,,,,,,,
Sol-33516,,,,,,,
Sol-33517,,,,,,,
Sol-33518,,,,,,,
Sol-33519,,,,,,,
Sol-33520,,,,,,,
Sol-33521,,,,,,,
Sol-33522,,,,,,,
Sol-33523,,,,,,,
Sol-33524,,,,,,,
Sol-33525,,,,,,,
Sol-33526,,,,,,,
Sol-33527,,,,,,,
Sol-33528,,,,,,,
Sol-33529,,,,,,,
Sol-33530,,,,,,,
Sol-33531,,,,,,,
Sol-33532,,,,,,,
Sol-33533,,,,,,,
Sol-33534,,,,,,,
Sol-33535,,,,,,,
Sol-33536,,,,,,,
Sol-33537,,,,,,,
Sol-33538,,,,,,,
Sol-33539,,,,,,,
Sol-33540,,,,,,,
Sol-33541,,,,,,,
Sol-33542,,,,,,,
Sol-33543,,,,,,,
Sol-33544,,,,,,,
Sol-33545,,,,,,,
Sol-33546,,,,,,,
Sol-33547,,,,,,,
Sol-33548,,,,,,,
Sol-33549,,,,,,,
Sol-33550,,,,,,,
Sol-33551,,,,,,,
Sol-33552,,,,,,,
Sol-33553,,,,,,,
Sol-33554,,,,,,,
Sol-33555,,,,,,,
Sol-33556,,,,,,,
Sol-33557,,,,,,,
Sol-33558,,,,,,,
Sol-33559,,,,,,,
Sol-33560,,,,,,,
Sol-33561,,,,,,,
Sol-33562,,,,,,,
Sol-33563,,,,,,,
Sol-33564,,,,,,,
Sol-33565,,,,,,,
Sol-33566,,,,,,,
Sol-33567,,,,,,,
Sol-33568,,,,,,,
Sol-33569,,,,,,,
Sol-33570,,,,,,,
Sol-33571,,,,,,,
Sol-33572,,,,,,,
Sol-33573,,,,,,,
Sol-33574,,,,,,,
Sol-33575,,,,,,,
Sol-33576,,,,,,,
Sol-33577,,,,,,,
Sol-33578,,,,,,,
Sol-33579,,,,,,,
Sol-33580,,,,,,,
Sol-33581,,,,,,,
Sol-33582,,,,,,,
Sol-33583,,,,,,,
Sol-33584,,,,,,,
Sol-33585,,,,,,,
Sol-33586,,,,,,,
Sol-33587,,,,,,,
Sol-33588,,,,,,,
Sol-33589,,,,,,,
Sol-33590,,,,,,,
Sol-33591,,,,,,,
Sol-33592,,,,,,,
Sol-33593,,,,,,,
Sol-33594,,,,,,,
Sol-33595,,,,,,,
Sol-33596,,,,,,,
Sol-33597,,,,,,,
Sol-33598,,,,,,,
Sol-33599,,,,,,,
Sol-33600,,,,,,,
Sol-33601,,,,,,,
Sol-33602,,,,,,,
Sol-33603,,,,,,,
Sol-33604,,,,,,,
Sol-33605,,,,,,,
Sol-33606,,,,,,,
Sol-33607,,,,,,,
Sol-33608,,,,,,,
Sol-33609,,,,,,,
Sol-33610,,,,,,,
Sol-33611,,,,,,,
Sol-33612,,,,,,,
Sol-33613,,,,,,,
Sol-33614,,,,,,,
Sol-33615,,,,,,,
Sol-33616,,,,,,,
Sol-33617,,,,,,,
Sol-33618,,,,,,,
Sol-33619,,,,,,,
Sol-33620,,,,,,,
Sol-33621,,,,,,,
Sol-33622,,,,,,,
Sol-33623,,,,,,,
Sol-33624,,,,,,,
Sol-33625,,,,,,,
Sol-33626,,,,,,,
Sol-33627,,,,,,,
Sol-33628,,,,,,,
Sol-33629,,,,,,,
Sol-33630,,,,,,,
Sol-33631,,,,,,,
Sol-33632,,,,,,,
Sol-33633,,,,,,,
Sol-33634,,,,,,,
Sol-33635,,,,,,,
Sol-33636,,,,,,,
Sol-33637,,,,,,,
Sol-33638,,,,,,,
Sol-33639,,,,,,,
Sol-33640,,,,,,,
Sol-33641,,,,,,,
Sol-33642,,,,,,,
Sol-33643,,,,,,,
Sol-33644,,,,,,,
Sol-33645,,,,,,,
Sol-33646,,,,,,,
Sol-33647,,,,,,,
Sol-33648,,,,,,,
Sol-33649,,,,,,,
Sol-33650,,,,,,,
Sol-33651,,,,,,,
Sol-33652,,,,,,,
Sol-33653,,,,,,,
Sol-33654,,,,,,,
Sol-33655,,,,,,,
Sol-33656,,,,,,,
Sol-33657,,,,,,,
Sol-33658,,,,,,,
Sol-33659,,,,,,,
Sol-33660,,,,,,,
Sol-33661,,,,,,,
Sol-33662,,,,,,,
Sol-33663,,,,,,,
Sol-33664,,,,,,,
Sol-33665,,,,,,,
Sol-33666,,,,,,,
Sol-33667,,,,,,,
Sol-33668,,,,,,,
Sol-33669,,,,,,,
Sol-33670,,,,,,,
Sol-33671,,,,,,,
Sol-33672,,,,,,,
Sol-33673,,,,,,,
Sol-33674,,,,,,,
Sol-33675,,,,,,,
Sol-33676,,,,,,,
Sol-33677,,,,,,,
Sol-33678,,,,,,,
Sol-33679,,,,,,,
Sol-33680,,,,,,,
Sol-33681,,,,,,,
Sol-33682,,,,,,,
Sol-33683,,,,,,,
Sol-33684,,,,,,,
Sol-33685,,,,,,,
Sol-33686,,,,,,,
Sol-33687,,,,,,,
Sol-33688,,,,,,,
Sol-33689,,,,,,,
Sol-33690,,,,,,,
Sol-33691,,,,,,,
Sol-33692,,,,,,,
Sol-33693,,,,,,,
Sol-33694,,,,,,,
Sol-33695,,,,,,,
Sol-33696,,,,,,,
Sol-33697,,,,,,,
Sol-33698,,,,,,,
Sol-33699,,,,,,,
Sol-33700,,,,,,,
Sol-33701,,,,,,,
Sol-33702,,,,,,,
Sol-33703,,,,,,,
Sol-33704,,,,,,,
Sol-33705,,,,,,,
Sol-33706,,,,,,,
Sol-33707,,,,,,,
Sol-33708,,,,,,,
Sol-33709,,,,,,,
Sol-33710,,,,,,,
Sol-33711,,,,,,,
Sol-33712,,,,,,,
Sol-33713,,,,,,,
Sol-33714,,,,,,,
Sol-33715,,,,,,,
Sol-33716,,,,,,,
Sol-33717,,,,,,,
Sol-33718,,,,,,,
Sol-33719,,,,,,,
Sol-33720,,,,,,,
Sol-33721,,,,,,,
Sol-33722,,,,,,,
Sol-33723,,,,,,,
Sol-33724,,,,,,,
Sol-33725,,,,,,,
Sol-33726,,,,,,,
Sol-33727,,,,,,,
Sol-33728,,,,,,,
Sol-33729,,,,,,,
Sol-33730,,,,,,,
Sol-33731,,,,,,,
Sol-33732,,,,,,,
Sol-33733,,,,,,,
Sol-33734,,,,,,,
Sol-33735,,,,,,,
Sol-33736,,,,,,,
Sol-33737,,,,,,,
Sol-33738,,,,,,,
Sol-33739,,,,,,,
Sol-33740,,,,,,,
Sol-33741,,,,,,,
Sol-33742,,,,,,,
Sol-33743,,,,,,,
Sol-33744,,,,,,,
Sol-33745,,,,,,,
Sol-33746,,,,,,,
Sol-33747,,,,,,,
Sol-33748,,,,,,,
Sol-33749,,,,,,,
Sol-33750,,,,,,,
Sol-33751,,,,,,,
Sol-33752,,,,,,,
Sol-33753,,,,,,,
Sol-33754,,,,,,,
Sol-33755,,,,,,,
Sol-33756,,,,,,,
Sol-33757,,,,,,,
Sol-33758,,,,,,,
Sol-33759,,,,,,,
Sol-33760,,,,,,,
Sol-33761,,,,,,,
Sol-33762,,,,,,,
Sol-33763,,,,,,,
Sol-33764,,,,,,,
Sol-33765,,,,,,,
Sol-33766,,,,,,,
Sol-33767,,,,,,,
Sol-33768,,,,,,,
Sol-33769,,,,,,,
Sol-33770,,,,,,,
Sol-33771,,,,,,,
Sol-33772,,,,,,,
Sol-33773,,,,,,,
Sol-33774,,,,,,,
Sol-33775,,,,,,,
Sol-33776,,,,,,,
Sol-33777,,,,,,,
Sol-33778,,,,,,,
Sol-33779,,,,,,,
Sol-33780,,,,,,,
Sol-33781,,,,,,,
Sol-33782,,,,,,,
Sol-33783,,,,,,,
Sol-33784,,,,,,,
Sol-33785,,,,,,,
Sol-33786,,,,,,,
Sol-33787,,,,,,,
Sol-33788,,,,,,,
Sol-33789,,,,,,,
Sol-33790,,,,,,,
Sol-33791,,,,,,,
Sol-33792,,,,,,,
Sol-33793,,,,,,,
Sol-33794,,,,,,,
Sol-33795,,,,,,,
Sol-33796,,,,,,,
Sol-33797,,,,,,,
Sol-33798,,,,,,,
Sol-33799,,,,,,,
Sol-33800,,,,,,,
Sol-33801,,,,,,,
Sol-33802,,,,,,,
Sol-33803,,,,,,,
Sol-33804,,,,,,,
Sol-33805,,,,,,,
Sol-33806,,,,,,,
Sol-33807,,,,,,,
Sol-33808,,,,,,,
Sol-33809,,,,,,,
Sol-33810,,,,,,,
Sol-33811,,,,,,,
Sol-33812,,,,,,,
Sol-33813,,,,,,,
Sol-33814,,,,,,,
Sol-33815,,,,,,,
Sol-33816,,,,,,,
Sol-33817,,,,,,,
Sol-33818,,,,,,,
Sol-33819,,,,,,,
Sol-33820,,,,,,,
Sol-33821,,,,,,,
Sol-33822,,,,,,,
Sol-33823,,,,,,,
Sol-33824,,,,,,,
Sol-33825,,,,,,,
Sol-33826,,,,,,,
Sol-33827,,,,,,,
Sol-33828,,,,,,,
Sol-33829,,,,,,,
Sol-33830,,,,,,,
Sol-33831,,,,,,,
Sol-33832,,,,,,,
Sol-33833,,,,,,,
Sol-33834,,,,,,,
Sol-33835,,,,,,,
Sol-33836,,,,,,,
Sol-33837,,,,,,,
Sol-33838,,,,,,,
Sol-33839,,,,,,,
Sol-33840,,,,,,,
Sol-33841,,,,,,,
Sol-33842,,,,,,,
Sol-33843,,,,,,,
Sol-33844,,,,,,,
Sol-33845,,,,,,,
Sol-33846,,,,,,,
Sol-33847,,,,,,,
Sol-33848,,,,,,,
Sol-33849,,,,,,,
Sol-33850,,,,,,,
Sol-33851,,,,,,,
Sol-33852,,,,,,,
Sol-33853,,,,,,,
Sol-33854,,,,,,,
Sol-33855,,,,,,,
Sol-33856,,,,,,,
Sol-33857,,,,,,,
Sol-33858,,,,,,,
Sol-33859,,,,,,,
Sol-33860,,,,,,,
Sol-33861,,,,,,,
Sol-33862,,,,,,,
Sol-33863,,,,,,,
Sol-33864,,,,,,,
Sol-33865,,,,,,,
Sol-33866,,,,,,,
Sol-33867,,,,,,,
Sol-33868,,,,,,,
Sol-33869,,,,,,,
Sol-33870,,,,,,,
Sol-33871,,,,,,,
Sol-33872,,,,,,,
Sol-33873,,,,,,,
Sol-33874,,,,,,,
Sol-33875,,,,,,,
Sol-33876,,,,,,,
Sol-33877,,,,,,,
Sol-33878,,,,,,,
Sol-33879,,,,,,,
Sol-33880,,,,,,,
Sol-33881,,,,,,,
Sol-33882,,,,,,,
Sol-33883,,,,,,,
Sol-33884,,,,,,,
Sol-33885,,,,,,,
Sol-33886,,,,,,,
Sol-33887,,,,,,,
Sol-33888,,,,,,,
Sol-33889,,,,,,,
Sol-33890,,,,,,,
Sol-33891,,,,,,,
Sol-33892,,,,,,,
Sol-33893,,,,,,,
Sol-33894,,,,,,,
Sol-33895,,,,,,,
Sol-33896,,,,,,,
Sol-33897,,,,,,,
Sol-33898,,,,,,,
Sol-33899,,,,,,,
Sol-33900,,,,,,,
Sol-33901,,,,,,,
Sol-33902,,,,,,,
Sol-33903,,,,,,,
Sol-33904,,,,,,,
Sol-33905,,,,,,,
Sol-33906,,,,,,,
Sol-33907,,,,,,,
Sol-33908,,,,,,,
Sol-33909,,,,,,,
Sol-33910,,,,,,,
Sol-33911,,,,,,,
Sol-33912,,,,,,,
Sol-33913,,,,,,,
Sol-33914,,,,,,,
Sol-33915,,,,,,,
Sol-33916,,,,,,,
Sol-33917,,,,,,,
Sol-33918,,,,,,,
Sol-33919,,,,,,,
Sol-33920,,,,,,,
Sol-33921,,,,,,,
Sol-33922,,,,,,,
Sol-33923,,,,,,,
Sol-33924,,,,,,,
Sol-33925,,,,,,,
Sol-33926,,,,,,,
Sol-33927,,,,,,,
Sol-33928,,,,,,,
Sol-33929,,,,,,,
Sol-33930,,,,,,,
Sol-33931,,,,,,,
Sol-33932,,,,,,,
Sol-33933,,,,,,,
Sol-33934,,,,,,,
Sol-33935,,,,,,,
Sol-33936,,,,,,,
Sol-33937,,,,,,,
Sol-33938,,,,,,,
Sol-33939,,,,,,,
Sol-33940,,,,,,,
Sol-33941,,,,,,,
Sol-33942,,,,,,,
Sol-33943,,,,,,,
Sol-33944,,,,,,,
Sol-33945,,,,,,,
Sol-33946,,,,,,,
Sol-33947,,,,,,,
Sol-33948,,,,,,,
Sol-33949,,,,,,,
Sol-33950,,,,,,,
Sol-33951,,,,,,,
Sol-33952,,,,,,,
Sol-33953,,,,,,,
Sol-33954,,,,,,,
Sol-33955,,,,,,,
Sol-33956,,,,,,,
Sol-33957,,,,,,,
Sol-33958,,,,,,,
Sol-33959,,,,,,,
Sol-33960,,,,,,,
Sol-33961,,,,,,,
Sol-33962,,,,,,,
Sol-33963,,,,,,,
Sol-33964,,,,,,,
Sol-33965,,,,,,,
Sol-33966,,,,,,,
Sol-33967,,,,,,,
Sol-33968,,,,,,,
Sol-33969,,,,,,,
Sol-33970,,,,,,,
Sol-33971,,,,,,,
Sol-33972,,,,,,,
Sol-33973,,,,,,,
Sol-33974,,,,,,,
Sol-33975,,,,,,,
Sol-33976,,,,,,,
Sol-33977,,,,,,,
Sol-33978,,,,,,,
Sol-33979,,,,,,,
Sol-33980,,,,,,,
Sol-33981,,,,,,,
Sol-33982,,,,,,,
Sol-33983,,,,,,,
Sol-33984,,,,,,,
Sol-33985,,,,,,,
Sol-33986,,,,,,,
Sol-33987,,,,,,,
Sol-33988,,,,,,,
Sol-33989,,,,,,,
Sol-33990,,,,,,,
Sol-33991,,,,,,,
Sol-33992,,,,,,,
Sol-33993,,,,,,,
Sol-33994,,,,,,,
Sol-33995,,,,,,,
Sol-33996,,,,,,,
Sol-33997,,,,,,,
Sol-33998,,,,,,,
Sol-33999,,,,,,,
Sol-34000,,,,,,,
Sol-34001,,,,,,,
Sol-34002,,,,,,,
Sol-34003,,,,,,,
Sol-34004,,,,,,,
Sol-34005,,,,,,,
Sol-34006,,,,,,,
Sol-34007,,,,,,,
Sol-34008,,,,,,,
Sol-34009,,,,,,,
Sol-34010,,,,,,,
Sol-34011,,,,,,,
Sol-34012,,,,,,,
Sol-34013,,,,,,,
Sol-34014,,,,,,,
Sol-34015,,,,,,,
Sol-34016,,,,,,,
Sol-34017,,,,,,,
Sol-34018,,,,,,,
Sol-34019,,,,,,,
Sol-34020,,,,,,,
Sol-34021,,,,,,,
Sol-34022,,,,,,,
Sol-34023,,,,,,,
Sol-34024,,,,,,,
Sol-34025,,,,,,,
Sol-34026,,,,,,,
Sol-34027,,,,,,,
Sol-34028,,,,,,,
Sol-34029,,,,,,,
Sol-34030,,,,,,,
Sol-34031,,,,,,,
Sol-34032,,,,,,,
Sol-34033,,,,,,,
Sol-34034,,,,,,,
Sol-34035,,,,,,,
Sol-34036,,,,,,,
Sol-34037,,,,,,,
Sol-34038,,,,,,,
Sol-34039,,,,,,,
Sol-34040,,,,,,,
Sol-34041,,,,,,,
Sol-34042,,,,,,,
Sol-34043,,,,,,,
Sol-34044,,,,,,,
Sol-34045,,,,,,,
Sol-34046,,,,,,,
Sol-34047,,,,,,,
Sol-34048,,,,,,,
Sol-34049,,,,,,,
Sol-34050,,,,,,,
Sol-34051,,,,,,,
Sol-34052,,,,,,,
Sol-34053,,,,,,,
Sol-34054,,,,,,,
Sol-34055,,,,,,,
Sol-34056,,,,,,,
Sol-34057,,,,,,,
Sol-34058,,,,,,,
Sol-34059,,,,,,,
Sol-34060,,,,,,,
Sol-34061,,,,,,,
Sol-34062,,,,,,,
Sol-34063,,,,,,,
Sol-34064,,,,,,,
Sol-34065,,,,,,,
Sol-34066,,,,,,,
Sol-34067,,,,,,,
Sol-34068,,,,,,,
Sol-34069,,,,,,,
Sol-34070,,,,,,,
Sol-34071,,,,,,,
Sol-34072,,,,,,,
Sol-34073,,,,,,,
Sol-34074,,,,,,,
Sol-34075,,,,,,,
Sol-34076,,,,,,,
Sol-34077,,,,,,,
Sol-34078,,,,,,,
Sol-34079,,,,,,,
Sol-34080,,,,,,,
Sol-34081,,,,,,,
Sol-34082,,,,,,,
Sol-34083,,,,,,,
Sol-34084,,,,,,,
Sol-34085,,,,,,,
Sol-34086,,,,,,,
Sol-34087,,,,,,,
Sol-34088,,,,,,,
Sol-34089,,,,,,,
Sol-34090,,,,,,,
Sol-34091,,,,,,,
Sol-34092,,,,,,,
Sol-34093,,,,,,,
Sol-34094,,,,,,,
Sol-34095,,,,,,,
Sol-34096,,,,,,,
Sol-34097,,,,,,,
Sol-34098,,,,,,,
Sol-34099,,,,,,,
Sol-34100,,,,,,,
Sol-34101,,,,,,,
Sol-34102,,,,,,,
Sol-34103,,,,,,,
Sol-34104,,,,,,,
Sol-34105,,,,,,,
Sol-34106,,,,,,,
Sol-34107,,,,,,,
Sol-34108,,,,,,,
Sol-34109,,,,,,,
Sol-34110,,,,,,,
Sol-34111,,,,,,,
Sol-34112,,,,,,,
Sol-34113,,,,,,,
Sol-34114,,,,,,,
Sol-34115,,,,,,,
Sol-34116,,,,,,,
Sol-34117,,,,,,,
Sol-34118,,,,,,,
Sol-34119,,,,,,,
Sol-34120,,,,,,,
Sol-34121,,,,,,,
Sol-34122,,,,,,,
Sol-34123,,,,,,,
Sol-34124,,,,,,,
Sol-34125,,,,,,,
Sol-34126,,,,,,,
Sol-34127,,,,,,,
Sol-34128,,,,,,,
Sol-34129,,,,,,,
Sol-34130,,,,,,,
Sol-34131,,,,,,,
Sol-34132,,,,,,,
Sol-34133,,,,,,,
Sol-34134,,,,,,,
Sol-34135,,,,,,,
Sol-34136,,,,,,,
Sol-34137,,,,,,,
Sol-34138,,,,,,,
Sol-34139,,,,,,,
Sol-34140,,,,,,,
Sol-34141,,,,,,,
Sol-34142,,,,,,,
Sol-34143,,,,,,,
Sol-34144,,,,,,,
Sol-34145,,,,,,,
Sol-34146,,,,,,,
Sol-34147,,,,,,,
Sol-34148,,,,,,,
Sol-34149,,,,,,,
Sol-34150,,,,,,,
Sol-34151,,,,,,,
Sol-34152,,,,,,,
Sol-34153,,,,,,,
Sol-34154,,,,,,,
Sol-34155,,,,,,,
Sol-34156,,,,,,,
Sol-34157,,,,,,,
Sol-34158,,,,,,,
Sol-34159,,,,,,,
Sol-34160,,,,,,,
Sol-34161,,,,,,,
Sol-34162,,,,,,,
Sol-34163,,,,,,,
Sol-34164,,,,,,,
Sol-34165,,,,,,,
Sol-34166,,,,,,,
Sol-34167,,,,,,,
Sol-34168,,,,,,,
Sol-34169,,,,,,,
Sol-34170,,,,,,,
Sol-34171,,,,,,,
Sol-34172,,,,,,,
Sol-34173,,,,,,,
Sol-34174,,,,,,,
Sol-34175,,,,,,,
Sol-34176,,,,,,,
Sol-34177,,,,,,,
Sol-34178,,,,,,,
Sol-34179,,,,,,,
Sol-34180,,,,,,,
Sol-34181,,,,,,,
Sol-34182,,,,,,,
Sol-34183,,,,,,,
Sol-34184,,,,,,,
Sol-34185,,,,,,,
Sol-34186,,,,,,,
Sol-34187,,,,,,,
Sol-34188,,,,,,,
Sol-34189,,,,,,,
Sol-34190,,,,,,,
Sol-34191,,,,,,,
Sol-34192,,,,,,,
Sol-34193,,,,,,,
Sol-34194,,,,,,,
Sol-34195,,,,,,,
Sol-34196,,,,,,,
Sol-34197,,,,,,,
Sol-34198,,,,,,,
Sol-34199,,,,,,,
Sol-34200,,,,,,,
Sol-34201,,,,,,,
Sol-34202,,,,,,,
Sol-34203,,,,,,,
Sol-34204,,,,,,,
Sol-34205,,,,,,,
Sol-34206,,,,,,,
Sol-34207,,,,,,,
Sol-34208,,,,,,,
Sol-34209,,,,,,,
Sol-34210,,,,,,,
Sol-34211,,,,,,,
Sol-34212,,,,,,,
Sol-34213,,,,,,,
Sol-34214,,,,,,,
Sol-34215,,,,,,,
Sol-34216,,,,,,,
Sol-34217,,,,,,,
Sol-34218,,,,,,,
Sol-34219,,,,,,,
Sol-34220,,,,,,,
Sol-34221,,,,,,,
Sol-34222,,,,,,,
Sol-34223,,,,,,,
Sol-34224,,,,,,,
Sol-34225,,,,,,,
Sol-34226,,,,,,,
Sol-34227,,,,,,,
Sol-34228,,,,,,,
Sol-34229,,,,,,,
Sol-34230,,,,,,,
Sol-34231,,,,,,,
Sol-34232,,,,,,,
Sol-34233,,,,,,,
Sol-34234,,,,,,,
Sol-34235,,,,,,,
Sol-34236,,,,,,,
Sol-34237,,,,,,,
Sol-34238,,,,,,,
Sol-34239,,,,,,,
Sol-34240,,,,,,,
Sol-34241,,,,,,,
Sol-34242,,,,,,,
Sol-34243,,,,,,,
Sol-34244,,,,,,,
Sol-34245,,,,,,,
Sol-34246,,,,,,,
Sol-34247,,,,,,,
Sol-34248,,,,,,,
Sol-34249,,,,,,,
Sol-34250,,,,,,,
Sol-34251,,,,,,,
Sol-34252,,,,,,,
Sol-34253,,,,,,,
Sol-34254,,,,,,,
Sol-34255,,,,,,,
Sol-34256,,,,,,,
Sol-34257,,,,,,,
Sol-34258,,,,,,,
Sol-34259,,,,,,,
Sol-34260,,,,,,,
Sol-34261,,,,,,,
Sol-34262,,,,,,,
Sol-34263,,,,,,,
Sol-34264,,,,,,,
Sol-34265,,,,,,,
Sol-34266,,,,,,,
Sol-34267,,,,,,,
Sol-34268,,,,,,,
Sol-34269,,,,,,,
Sol-34270,,,,,,,
Sol-34271,,,,,,,
Sol-34272,,,,,,,
Sol-34273,,,,,,,
Sol-34274,,,,,,,
Sol-34275,,,,,,,
Sol-34276,,,,,,,
Sol-34277,,,,,,,
Sol-34278,,,,,,,
Sol-34279,,,,,,,
Sol-34280,,,,,,,
Sol-34281,,,,,,,
Sol-34282,,,,,,,
Sol-34283,,,,,,,
Sol-34284,,,,,,,
Sol-34285,,,,,,,
Sol-34286,,,,,,,
Sol-34287,,,,,,,
Sol-34288,,,,,,,
Sol-34289,,,,,,,
Sol-34290,,,,,,,
Sol-34291,,,,,,,
Sol-34292,,,,,,,
Sol-34293,,,,,,,
Sol-34294,,,,,,,
Sol-34295,,,,,,,
Sol-34296,,,,,,,
Sol-34297,,,,,,,
Sol-34298,,,,,,,
Sol-34299,,,,,,,
Sol-34300,,,,,,,
Sol-34301,,,,,,,
Sol-34302,,,,,,,
Sol-34303,,,,,,,
Sol-34304,,,,,,,
Sol-34305,,,,,,,
Sol-34306,,,,,,,
Sol-34307,,,,,,,
Sol-34308,,,,,,,
Sol-34309,,,,,,,
Sol-34310,,,,,,,
Sol-34311,,,,,,,
Sol-34312,,,,,,,
Sol-34313,,,,,,,
Sol-34314,,,,,,,
Sol-34315,,,,,,,
Sol-34316,,,,,,,
Sol-34317,,,,,,,
Sol-34318,,,,,,,
Sol-34319,,,,,,,
Sol-34320,,,,,,,
Sol-34321,,,,,,,
Sol-34322,,,,,,,
Sol-34323,,,,,,,
Sol-34324,,,,,,,
Sol-34325,,,,,,,
Sol-34326,,,,,,,
Sol-34327,,,,,,,
Sol-34328,,,,,,,
Sol-34329,,,,,,,
Sol-34330,,,,,,,
Sol-34331,,,,,,,
Sol-34332,,,,,,,
Sol-34333,,,,,,,
Sol-34334,,,,,,,
Sol-34335,,,,,,,
Sol-34336,,,,,,,
Sol-34337,,,,,,,
Sol-34338,,,,,,,
Sol-34339,,,,,,,
Sol-34340,,,,,,,
Sol-34341,,,,,,,
Sol-34342,,,,,,,
Sol-34343,,,,,,,
Sol-34344,,,,,,,
Sol-34345,,,,,,,
Sol-34346,,,,,,,
Sol-34347,,,,,,,
Sol-34348,,,,,,,
Sol-34349,,,,,,,
Sol-34350,,,,,,,
Sol-34351,,,,,,,
Sol-34352,,,,,,,
Sol-34353,,,,,,,
Sol-34354,,,,,,,
Sol-34355,,,,,,,
Sol-34356,,,,,,,
Sol-34357,,,,,,,
Sol-34358,,,,,,,
Sol-34359,,,,,,,
Sol-34360,,,,,,,
Sol-34361,,,,,,,
Sol-34362,,,,,,,
Sol-34363,,,,,,,
Sol-34364,,,,,,,
Sol-34365,,,,,,,
Sol-34366,,,,,,,
Sol-34367,,,,,,,
Sol-34368,,,,,,,
Sol-34369,,,,,,,
Sol-34370,,,,,,,
Sol-34371,,,,,,,
Sol-34372,,,,,,,
Sol-34373,,,,,,,
Sol-34374,,,,,,,
Sol-34375,,,,,,,
Sol-34376,,,,,,,
Sol-34377,,,,,,,
Sol-34378,,,,,,,
Sol-34379,,,,,,,
Sol-34380,,,,,,,
Sol-34381,,,,,,,
Sol-34382,,,,,,,
Sol-34383,,,,,,,
Sol-34384,,,,,,,
Sol-34385,,,,,,,
Sol-34386,,,,,,,
Sol-34387,,,,,,,
Sol-34388,,,,,,,
Sol-34389,,,,,,,
Sol-34390,,,,,,,
Sol-34391,,,,,,,
Sol-34392,,,,,,,
Sol-34393,,,,,,,
Sol-34394,,,,,,,
Sol-34395,,,,,,,
Sol-34396,,,,,,,
Sol-34397,,,,,,,
Sol-34398,,,,,,,
Sol-34399,,,,,,,
Sol-34400,,,,,,,
Sol-34401,,,,,,,
Sol-34402,,,,,,,
Sol-34403,,,,,,,
Sol-34404,,,,,,,
Sol-34405,,,,,,,
Sol-34406,,,,,,,
Sol-34407,,,,,,,
Sol-34408,,,,,,,
Sol-34409,,,,,,,
Sol-34410,,,,,,,
Sol-34411,,,,,,,
Sol-34412,,,,,,,
Sol-34413,,,,,,,
Sol-34414,,,,,,,
Sol-34415,,,,,,,
Sol-34416,,,,,,,
Sol-34417,,,,,,,
Sol-34418,,,,,,,
Sol-34419,,,,,,,
Sol-34420,,,,,,,
Sol-34421,,,,,,,
Sol-34422,,,,,,,
Sol-34423,,,,,,,
Sol-34424,,,,,,,
Sol-34425,,,,,,,
Sol-34426,,,,,,,
Sol-34427,,,,,,,
Sol-34428,,,,,,,
Sol-34429,,,,,,,
Sol-34430,,,,,,,
Sol-34431,,,,,,,
Sol-34432,,,,,,,
Sol-34433,,,,,,,
Sol-34434,,,,,,,
Sol-34435,,,,,,,
Sol-34436,,,,,,,
Sol-34437,,,,,,,
Sol-34438,,,,,,,
Sol-34439,,,,,,,
Sol-34440,,,,,,,
Sol-34441,,,,,,,
Sol-34442,,,,,,,
Sol-34443,,,,,,,
Sol-34444,,,,,,,
Sol-34445,,,,,,,
Sol-34446,,,,,,,
Sol-34447,,,,,,,
Sol-34448,,,,,,,
Sol-34449,,,,,,,
Sol-34450,,,,,,,
Sol-34451,,,,,,,
Sol-34452,,,,,,,
Sol-34453,,,,,,,
Sol-34454,,,,,,,
Sol-34455,,,,,,,
Sol-34456,,,,,,,
Sol-34457,,,,,,,
Sol-34458,,,,,,,
Sol-34459,,,,,,,
Sol-34460,,,,,,,
Sol-34461,,,,,,,
Sol-34462,,,,,,,
Sol-34463,,,,,,,
Sol-34464,,,,,,,
Sol-34465,,,,,,,
Sol-34466,,,,,,,
Sol-34467,,,,,,,
Sol-34468,,,,,,,
Sol-34469,,,,,,,
Sol-34470,,,,,,,
Sol-34471,,,,,,,
Sol-34472,,,,,,,
Sol-34473,,,,,,,
Sol-34474,,,,,,,
Sol-34475,,,,,,,
Sol-34476,,,,,,,
Sol-34477,,,,,,,
Sol-34478,,,,,,,
Sol-34479,,,,,,,
Sol-34480,,,,,,,
Sol-34481,,,,,,,
Sol-34482,,,,,,,
Sol-34483,,,,,,,
Sol-34484,,,,,,,
Sol-34485,,,,,,,
Sol-34486,,,,,,,
Sol-34487,,,,,,,
Sol-34488,,,,,,,
Sol-34489,,,,,,,
Sol-34490,,,,,,,
Sol-34491,,,,,,,
Sol-34492,,,,,,,
Sol-34493,,,,,,,
Sol-34494,,,,,,,
Sol-34495,,,,,,,
Sol-34496,,,,,,,
Sol-34497,,,,,,,
Sol-34498,,,,,,,
Sol-34499,,,,,,,
Sol-34500,,,,,,,
Sol-34501,,,,,,,
Sol-34502,,,,,,,
Sol-34503,,,,,,,
Sol-34504,,,,,,,
Sol-34505,,,,,,,
Sol-34506,,,,,,,
Sol-34507,,,,,,,
Sol-34508,,,,,,,
Sol-34509,,,,,,,
Sol-34510,,,,,,,
Sol-34511,,,,,,,
Sol-34512,,,,,,,
Sol-34513,,,,,,,
Sol-34514,,,,,,,
Sol-34515,,,,,,,
Sol-34516,,,,,,,
Sol-34517,,,,,,,
Sol-34518,,,,,,,
Sol-34519,,,,,,,
Sol-34520,,,,,,,
Sol-34521,,,,,,,
Sol-34522,,,,,,,
Sol-34523,,,,,,,
Sol-34524,,,,,,,
Sol-34525,,,,,,,
Sol-34526,,,,,,,
Sol-34527,,,,,,,
Sol-34528,,,,,,,
Sol-34529,,,,,,,
Sol-34530,,,,,,,
Sol-34531,,,,,,,
Sol-34532,,,,,,,
Sol-34533,,,,,,,
Sol-34534,,,,,,,
Sol-34535,,,,,,,
Sol-34536,,,,,,,
Sol-34537,,,,,,,
Sol-34538,,,,,,,
Sol-34539,,,,,,,
Sol-34540,,,,,,,
Sol-34541,,,,,,,
Sol-34542,,,,,,,
Sol-34543,,,,,,,
Sol-34544,,,,,,,
Sol-34545,,,,,,,
Sol-34546,,,,,,,
Sol-34547,,,,,,,
Sol-34548,,,,,,,
Sol-34549,,,,,,,
Sol-34550,,,,,,,
Sol-34551,,,,,,,
Sol-34552,,,,,,,
Sol-34553,,,,,,,
Sol-34554,,,,,,,
Sol-34555,,,,,,,
Sol-34556,,,,,,,
Sol-34557,,,,,,,
Sol-34558,,,,,,,
Sol-34559,,,,,,,
Sol-34560,,,,,,,
Sol-34561,,,,,,,
Sol-34562,,,,,,,
Sol-34563,,,,,,,
Sol-34564,,,,,,,
Sol-34565,,,,,,,
Sol-34566,,,,,,,
Sol-34567,,,,,,,
Sol-34568,,,,,,,
Sol-34569,,,,,,,
Sol-34570,,,,,,,
Sol-34571,,,,,,,
Sol-34572,,,,,,,
Sol-34573,,,,,,,
Sol-34574,,,,,,,
Sol-34575,,,,,,,
Sol-34576,,,,,,,
Sol-34577,,,,,,,
Sol-34578,,,,,,,
Sol-34579,,,,,,,
Sol-34580,,,,,,,
Sol-34581,,,,,,,
Sol-34582,,,,,,,
Sol-34583,,,,,,,
Sol-34584,,,,,,,
Sol-34585,,,,,,,
Sol-34586,,,,,,,
Sol-34587,,,,,,,
Sol-34588,,,,,,,
Sol-34589,,,,,,,
Sol-34590,,,,,,,
Sol-34591,,,,,,,
Sol-34592,,,,,,,
Sol-34593,,,,,,,
Sol-34594,,,,,,,
Sol-34595,,,,,,,
Sol-34596,,,,,,,
Sol-34597,,,,,,,
Sol-34598,,,,,,,
Sol-34599,,,,,,,
Sol-34600,,,,,,,
Sol-34601,,,,,,,
Sol-34602,,,,,,,
Sol-34603,,,,,,,
Sol-34604,,,,,,,
Sol-34605,,,,,,,
Sol-34606,,,,,,,
Sol-34607,,,,,,,
Sol-34608,,,,,,,
Sol-34609,,,,,,,
Sol-34610,,,,,,,
Sol-34611,,,,,,,
Sol-34612,,,,,,,
Sol-34613,,,,,,,
Sol-34614,,,,,,,
Sol-34615,,,,,,,
Sol-34616,,,,,,,
Sol-34617,,,,,,,
Sol-34618,,,,,,,
Sol-34619,,,,,,,
Sol-34620,,,,,,,
Sol-34621,,,,,,,
Sol-34622,,,,,,,
Sol-34623,,,,,,,
Sol-34624,,,,,,,
Sol-34625,,,,,,,
Sol-34626,,,,,,,
Sol-34627,,,,,,,
Sol-34628,,,,,,,
Sol-34629,,,,,,,
Sol-34630,,,,,,,
Sol-34631,,,,,,,
Sol-34632,,,,,,,
Sol-34633,,,,,,,
Sol-34634,,,,,,,
Sol-34635,,,,,,,
Sol-34636,,,,,,,
Sol-34637,,,,,,,
Sol-34638,,,,,,,
Sol-34639,,,,,,,
Sol-34640,,,,,,,
Sol-34641,,,,,,,
Sol-34642,,,,,,,
Sol-34643,,,,,,,
Sol-34644,,,,,,,
Sol-34645,,,,,,,
Sol-34646,,,,,,,
Sol-34647,,,,,,,
Sol-34648,,,,,,,
Sol-34649,,,,,,,
Sol-34650,,,,,,,
Sol-34651,,,,,,,
Sol-34652,,,,,,,
Sol-34653,,,,,,,
Sol-34654,,,,,,,
Sol-34655,,,,,,,
Sol-34656,,,,,,,
Sol-34657,,,,,,,
Sol-34658,,,,,,,
Sol-34659,,,,,,,
Sol-34660,,,,,,,
Sol-34661,,,,,,,
Sol-34662,,,,,,,
Sol-34663,,,,,,,
Sol-34664,,,,,,,
Sol-34665,,,,,,,
Sol-34666,,,,,,,
Sol-34667,,,,,,,
Sol-34668,,,,,,,
Sol-34669,,,,,,,
Sol-34670,,,,,,,
Sol-34671,,,,,,,
Sol-34672,,,,,,,
Sol-34673,,,,,,,
Sol-34674,,,,,,,
Sol-34675,,,,,,,
Sol-34676,,,,,,,
Sol-34677,,,,,,,
Sol-34678,,,,,,,
Sol-34679,,,,,,,
Sol-34680,,,,,,,
Sol-34681,,,,,,,
Sol-34682,,,,,,,
Sol-34683,,,,,,,
Sol-34684,,,,,,,
Sol-34685,,,,,,,
Sol-34686,,,,,,,
Sol-34687,,,,,,,
Sol-34688,,,,,,,
Sol-34689,,,,,,,
Sol-34690,,,,,,,
Sol-34691,,,,,,,
Sol-34692,,,,,,,
Sol-34693,,,,,,,
Sol-34694,,,,,,,
Sol-34695,,,,,,,
Sol-34696,,,,,,,
Sol-34697,,,,,,,
Sol-34698,,,,,,,
Sol-34699,,,,,,,
Sol-34700,,,,,,,
Sol-34701,,,,,,,
Sol-34702,,,,,,,
Sol-34703,,,,,,,
Sol-34704,,,,,,,
Sol-34705,,,,,,,
Sol-34706,,,,,,,
Sol-34707,,,,,,,
Sol-34708,,,,,,,
Sol-34709,,,,,,,
Sol-34710,,,,,,,
Sol-34711,,,,,,,
Sol-34712,,,,,,,
Sol-34713,,,,,,,
Sol-34714,,,,,,,
Sol-34715,,,,,,,
Sol-34716,,,,,,,
Sol-34717,,,,,,,
Sol-34718,,,,,,,
Sol-34719,,,,,,,
Sol-34720,,,,,,,
Sol-34721,,,,,,,
Sol-34722,,,,,,,
Sol-34723,,,,,,,
Sol-34724,,,,,,,
Sol-34725,,,,,,,
Sol-34726,,,,,,,
Sol-34727,,,,,,,
Sol-34728,,,,,,,
Sol-34729,,,,,,,
Sol-34730,,,,,,,
Sol-34731,,,,,,,
Sol-34732,,,,,,,
Sol-34733,,,,,,,
Sol-34734,,,,,,,
Sol-34735,,,,,,,
Sol-34736,,,,,,,
Sol-34737,,,,,,,
Sol-34738,,,,,,,
Sol-34739,,,,,,,
Sol-34740,,,,,,,
Sol-34741,,,,,,,
Sol-34742,,,,,,,
Sol-34743,,,,,,,
Sol-34744,,,,,,,
Sol-34745,,,,,,,
Sol-34746,,,,,,,
Sol-34747,,,,,,,
Sol-34748,,,,,,,
Sol-34749,,,,,,,
Sol-34750,,,,,,,
Sol-34751,,,,,,,
Sol-34752,,,,,,,
Sol-34753,,,,,,,
Sol-34754,,,,,,,
Sol-34755,,,,,,,
Sol-34756,,,,,,,
Sol-34757,,,,,,,
Sol-34758,,,,,,,
Sol-34759,,,,,,,
Sol-34760,,,,,,,
Sol-34761,,,,,,,
Sol-34762,,,,,,,
Sol-34763,,,,,,,
Sol-34764,,,,,,,
Sol-34765,,,,,,,
Sol-34766,,,,,,,
Sol-34767,,,,,,,
Sol-34768,,,,,,,
Sol-34769,,,,,,,
Sol-34770,,,,,,,
Sol-34771,,,,,,,
Sol-34772,,,,,,,
Sol-34773,,,,,,,
Sol-34774,,,,,,,
Sol-34775,,,,,,,
Sol-34776,,,,,,,
Sol-34777,,,,,,,
Sol-34778,,,,,,,
Sol-34779,,,,,,,
Sol-34780,,,,,,,
Sol-34781,,,,,,,
Sol-34782,,,,,,,
Sol-34783,,,,,,,
Sol-34784,,,,,,,
Sol-34785,,,,,,,
Sol-34786,,,,,,,
Sol-34787,,,,,,,
Sol-34788,,,,,,,
Sol-34789,,,,,,,
Sol-34790,,,,,,,
Sol-34791,,,,,,,
Sol-34792,,,,,,,
Sol-34793,,,,,,,
Sol-34794,,,,,,,
Sol-34795,,,,,,,
Sol-34796,,,,,,,
Sol-34797,,,,,,,
Sol-34798,,,,,,,
Sol-34799,,,,,,,
Sol-34800,,,,,,,
Sol-34801,,,,,,,
Sol-34802,,,,,,,
Sol-34803,,,,,,,
Sol-34804,,,,,,,
Sol-34805,,,,,,,
Sol-34806,,,,,,,
Sol-34807,,,,,,,
Sol-34808,,,,,,,
Sol-34809,,,,,,,
Sol-34810,,,,,,,
Sol-34811,,,,,,,
Sol-34812,,,,,,,
Sol-34813,,,,,,,
Sol-34814,,,,,,,
Sol-34815,,,,,,,
Sol-34816,,,,,,,
Sol-34817,,,,,,,
Sol-34818,,,,,,,
Sol-34819,,,,,,,
Sol-34820,,,,,,,
Sol-34821,,,,,,,
Sol-34822,,,,,,,
Sol-34823,,,,,,,
Sol-34824,,,,,,,
Sol-34825,,,,,,,
Sol-34826,,,,,,,
Sol-34827,,,,,,,
Sol-34828,,,,,,,
Sol-34829,,,,,,,
Sol-34830,,,,,,,
Sol-34831,,,,,,,
Sol-34832,,,,,,,
Sol-34833,,,,,,,
Sol-34834,,,,,,,
Sol-34835,,,,,,,
Sol-34836,,,,,,,
Sol-34837,,,,,,,
Sol-34838,,,,,,,
Sol-34839,,,,,,,
Sol-34840,,,,,,,
Sol-34841,,,,,,,
Sol-34842,,,,,,,
Sol-34843,,,,,,,
Sol-34844,,,,,,,
Sol-34845,,,,,,,
Sol-34846,,,,,,,
Sol-34847,,,,,,,
Sol-34848,,,,,,,
Sol-34849,,,,,,,
Sol-34850,,,,,,,
Sol-34851,,,,,,,
Sol-34852,,,,,,,
Sol-34853,,,,,,,
Sol-34854,,,,,,,
Sol-34855,,,,,,,
Sol-34856,,,,,,,
Sol-34857,,,,,,,
Sol-34858,,,,,,,
Sol-34859,,,,,,,
Sol-34860,,,,,,,
Sol-34861,,,,,,,
Sol-34862,,,,,,,
Sol-34863,,,,,,,
Sol-34864,,,,,,,
Sol-34865,,,,,,,
Sol-34866,,,,,,,
Sol-34867,,,,,,,
Sol-34868,,,,,,,
Sol-34869,,,,,,,
Sol-34870,,,,,,,
Sol-34871,,,,,,,
Sol-34872,,,,,,,
Sol-34873,,,,,,,
Sol-34874,,,,,,,
Sol-34875,,,,,,,
Sol-34876,,,,,,,
Sol-34877,,,,,,,
Sol-34878,,,,,,,
Sol-34879,,,,,,,
Sol-34880,,,,,,,
Sol-34881,,,,,,,
Sol-34882,,,,,,,
Sol-34883,,,,,,,
Sol-34884,,,,,,,
Sol-34885,,,,,,,
Sol-34886,,,,,,,
Sol-34887,,,,,,,
Sol-34888,,,,,,,
Sol-34889,,,,,,,
Sol-34890,,,,,,,
Sol-34891,,,,,,,
Sol-34892,,,,,,,
Sol-34893,,,,,,,
Sol-34894,,,,,,,
Sol-34895,,,,,,,
Sol-34896,,,,,,,
Sol-34897,,,,,,,
Sol-34898,,,,,,,
Sol-34899,,,,,,,
Sol-34900,,,,,,,
Sol-34901,,,,,,,
Sol-34902,,,,,,,
Sol-34903,,,,,,,
Sol-34904,,,,,,,
Sol-34905,,,,,,,
Sol-34906,,,,,,,
Sol-34907,,,,,,,
Sol-34908,,,,,,,
Sol-34909,,,,,,,
Sol-34910,,,,,,,
Sol-34911,,,,,,,
Sol-34912,,,,,,,
Sol-34913,,,,,,,
Sol-34914,,,,,,,
Sol-34915,,,,,,,
Sol-34916,,,,,,,
Sol-34917,,,,,,,
Sol-34918,,,,,,,
Sol-34919,,,,,,,
Sol-34920,,,,,,,
Sol-34921,,,,,,,
Sol-34922,,,,,,,
Sol-34923,,,,,,,
Sol-34924,,,,,,,
Sol-34925,,,,,,,
Sol-34926,,,,,,,
Sol-34927,,,,,,,
Sol-34928,,,,,,,
Sol-34929,,,,,,,
Sol-34930,,,,,,,
Sol-34931,,,,,,,
Sol-34932,,,,,,,
Sol-34933,,,,,,,
Sol-34934,,,,,,,
Sol-34935,,,,,,,
Sol-34936,,,,,,,
Sol-34937,,,,,,,
Sol-34938,,,,,,,
Sol-34939,,,,,,,
Sol-34940,,,,,,,
Sol-34941,,,,,,,
Sol-34942,,,,,,,
Sol-34943,,,,,,,
Sol-34944,,,,,,,
Sol-34945,,,,,,,
Sol-34946,,,,,,,
Sol-34947,,,,,,,
Sol-34948,,,,,,,
Sol-34949,,,,,,,
Sol-34950,,,,,,,
Sol-34951,,,,,,,
Sol-34952,,,,,,,
Sol-34953,,,,,,,
Sol-34954,,,,,,,
Sol-34955,,,,,,,
Sol-34956,,,,,,,
Sol-34957,,,,,,,
Sol-34958,,,,,,,
Sol-34959,,,,,,,
Sol-34960,,,,,,,
Sol-34961,,,,,,,
Sol-34962,,,,,,,
Sol-34963,,,,,,,
Sol-34964,,,,,,,
Sol-34965,,,,,,,
Sol-34966,,,,,,,
Sol-34967,,,,,,,
Sol-34968,,,,,,,
Sol-34969,,,,,,,
Sol-34970,,,,,,,
Sol-34971,,,,,,,
Sol-34972,,,,,,,
Sol-34973,,,,,,,
Sol-34974,,,,,,,
Sol-34975,,,,,,,
Sol-34976,,,,,,,
Sol-34977,,,,,,,
Sol-34978,,,,,,,
Sol-34979,,,,,,,
Sol-34980,,,,,,,
Sol-34981,,,,,,,
Sol-34982,,,,,,,
Sol-34983,,,,,,,
Sol-34984,,,,,,,
Sol-34985,,,,,,,
Sol-34986,,,,,,,
Sol-34987,,,,,,,
Sol-34988,,,,,,,
Sol-34989,,,,,,,
Sol-34990,,,,,,,
Sol-34991,,,,,,,
Sol-34992,,,,,,,
Sol-34993,,,,,,,
Sol-34994,,,,,,,
Sol-34995,,,,,,,
Sol-34996,,,,,,,
Sol-34997,,,,,,,
Sol-34998,,,,,,,
Sol-34999,,,,,,,
Sol-35000,,,,,,,
Sol-35001,,,,,,,
Sol-35002,,,,,,,
Sol-35003,,,,,,,
Sol-35004,,,,,,,
Sol-35005,,,,,,,
Sol-35006,,,,,,,
Sol-35007,,,,,,,
Sol-35008,,,,,,,
Sol-35009,,,,,,,
Sol-35010,,,,,,,
Sol-35011,,,,,,,
Sol-35012,,,,,,,
Sol-35013,,,,,,,
Sol-35014,,,,,,,
Sol-35015,,,,,,,
Sol-35016,,,,,,,
Sol-35017,,,,,,,
Sol-35018,,,,,,,
Sol-35019,,,,,,,
Sol-35020,,,,,,,
Sol-35021,,,,,,,
Sol-35022,,,,,,,
Sol-35023,,,,,,,
Sol-35024,,,,,,,
Sol-35025,,,,,,,
Sol-35026,,,,,,,
Sol-35027,,,,,,,
Sol-35028,,,,,,,
Sol-35029,,,,,,,
Sol-35030,,,,,,,
Sol-35031,,,,,,,
Sol-35032,,,,,,,
Sol-35033,,,,,,,
Sol-35034,,,,,,,
Sol-35035,,,,,,,
Sol-35036,,,,,,,
Sol-35037,,,,,,,
Sol-35038,,,,,,,
Sol-35039,,,,,,,
Sol-35040,,,,,,,
Sol-35041,,,,,,,
Sol-35042,,,,,,,
Sol-35043,,,,,,,
Sol-35044,,,,,,,
Sol-35045,,,,,,,
Sol-35046,,,,,,,
Sol-35047,,,,,,,
Sol-35048,,,,,,,
Sol-35049,,,,,,,
Sol-35050,,,,,,,
Sol-35051,,,,,,,
Sol-35052,,,,,,,
Sol-35053,,,,,,,
Sol-35054,,,,,,,
Sol-35055,,,,,,,
Sol-35056,,,,,,,
Sol-35057,,,,,,,
Sol-35058,,,,,,,
Sol-35059,,,,,,,
Sol-35060,,,,,,,
Sol-35061,,,,,,,
Sol-35062,,,,,,,
Sol-35063,,,,,,,
Sol-35064,,,,,,,
Sol-35065,,,,,,,
Sol-35066,,,,,,,
Sol-35067,,,,,,,
Sol-35068,,,,,,,
Sol-35069,,,,,,,
Sol-35070,,,,,,,
Sol-35071,,,,,,,
Sol-35072,,,,,,,
Sol-35073,,,,,,,
Sol-35074,,,,,,,
Sol-35075,,,,,,,
Sol-35076,,,,,,,
Sol-35077,,,,,,,
Sol-35078,,,,,,,
Sol-35079,,,,,,,
Sol-35080,,,,,,,
Sol-35081,,,,,,,
Sol-35082,,,,,,,
Sol-35083,,,,,,,
Sol-35084,,,,,,,
Sol-35085,,,,,,,
Sol-35086,,,,,,,
Sol-35087,,,,,,,
Sol-35088,,,,,,,
Sol-35089,,,,,,,
Sol-35090,,,,,,,
Sol-35091,,,,,,,
Sol-35092,,,,,,,
Sol-35093,,,,,,,
Sol-35094,,,,,,,
Sol-35095,,,,,,,
Sol-35096,,,,,,,
Sol-35097,,,,,,,
Sol-35098,,,,,,,
Sol-35099,,,,,,,
Sol-35100,,,,,,,
Sol-35101,,,,,,,
Sol-35102,,,,,,,
Sol-35103,,,,,,,
Sol-35104,,,,,,,
Sol-35105,,,,,,,
Sol-35106,,,,,,,
Sol-35107,,,,,,,
Sol-35108,,,,,,,
Sol-35109,,,,,,,
Sol-35110,,,,,,,
Sol-35111,,,,,,,
Sol-35112,,,,,,,
Sol-35113,,,,,,,
Sol-35114,,,,,,,
Sol-35115,,,,,,,
Sol-35116,,,,,,,
Sol-35117,,,,,,,
Sol-35118,,,,,,,
Sol-35119,,,,,,,
Sol-35120,,,,,,,
Sol-35121,,,,,,,
Sol-35122,,,,,,,
Sol-35123,,,,,,,
Sol-35124,,,,,,,
Sol-35125,,,,,,,
Sol-35126,,,,,,,
Sol-35127,,,,,,,
Sol-35128,,,,,,,
Sol-35129,,,,,,,
Sol-35130,,,,,,,
Sol-35131,,,,,,,
Sol-35132,,,,,,,
Sol-35133,,,,,,,
Sol-35134,,,,,,,
Sol-35135,,,,,,,
Sol-35136,,,,,,,
Sol-35137,,,,,,,
Sol-35138,,,,,,,
Sol-35139,,,,,,,
Sol-35140,,,,,,,
Sol-35141,,,,,,,
Sol-35142,,,,,,,
Sol-35143,,,,,,,
Sol-35144,,,,,,,
Sol-35145,,,,,,,
Sol-35146,,,,,,,
Sol-35147,,,,,,,
Sol-35148,,,,,,,
Sol-35149,,,,,,,
Sol-35150,,,,,,,
Sol-35151,,,,,,,
Sol-35152,,,,,,,
Sol-35153,,,,,,,
Sol-35154,,,,,,,
Sol-35155,,,,,,,
Sol-35156,,,,,,,
Sol-35157,,,,,,,
Sol-35158,,,,,,,
Sol-35159,,,,,,,
Sol-35160,,,,,,,
Sol-35161,,,,,,,
Sol-35162,,,,,,,
Sol-35163,,,,,,,
Sol-35164,,,,,,,
Sol-35165,,,,,,,
Sol-35166,,,,,,,
Sol-35167,,,,,,,
Sol-35168,,,,,,,
Sol-35169,,,,,,,
Sol-35170,,,,,,,
Sol-35171,,,,,,,
Sol-35172,,,,,,,
Sol-35173,,,,,,,
Sol-35174,,,,,,,
Sol-35175,,,,,,,
Sol-35176,,,,,,,
Sol-35177,,,,,,,
Sol-35178,,,,,,,
Sol-35179,,,,,,,
Sol-35180,,,,,,,
Sol-35181,,,,,,,
Sol-35182,,,,,,,
Sol-35183,,,,,,,
Sol-35184,,,,,,,
Sol-35185,,,,,,,
Sol-35186,,,,,,,
Sol-35187,,,,,,,
Sol-35188,,,,,,,
Sol-35189,,,,,,,
Sol-35190,,,,,,,
Sol-35191,,,,,,,
Sol-35192,,,,,,,
Sol-35193,,,,,,,
Sol-35194,,,,,,,
Sol-35195,,,,,,,
Sol-35196,,,,,,,
Sol-35197,,,,,,,
Sol-35198,,,,,,,
Sol-35199,,,,,,,
Sol-35200,,,,,,,
Sol-35201,,,,,,,
Sol-35202,,,,,,,
Sol-35203,,,,,,,
Sol-35204,,,,,,,
Sol-35205,,,,,,,
Sol-35206,,,,,,,
Sol-35207,,,,,,,
Sol-35208,,,,,,,
Sol-35209,,,,,,,
Sol-35210,,,,,,,
Sol-35211,,,,,,,
Sol-35212,,,,,,,
Sol-35213,,,,,,,
Sol-35214,,,,,,,
Sol-35215,,,,,,,
Sol-35216,,,,,,,
Sol-35217,,,,,,,
Sol-35218,,,,,,,
Sol-35219,,,,,,,
Sol-35220,,,,,,,
Sol-35221,,,,,,,
Sol-35222,,,,,,,
Sol-35223,,,,,,,
Sol-35224,,,,,,,
Sol-35225,,,,,,,
Sol-35226,,,,,,,
Sol-35227,,,,,,,
Sol-35228,,,,,,,
Sol-35229,,,,,,,
Sol-35230,,,,,,,
Sol-35231,,,,,,,
Sol-35232,,,,,,,
Sol-35233,,,,,,,
Sol-35234,,,,,,,
Sol-35235,,,,,,,
Sol-35236,,,,,,,
Sol-35237,,,,,,,
Sol-35238,,,,,,,
Sol-35239,,,,,,,
Sol-35240,,,,,,,
Sol-35241,,,,,,,
Sol-35242,,,,,,,
Sol-35243,,,,,,,
Sol-35244,,,,,,,
Sol-35245,,,,,,,
Sol-35246,,,,,,,
Sol-35247,,,,,,,
Sol-35248,,,,,,,
Sol-35249,,,,,,,
Sol-35250,,,,,,,
Sol-35251,,,,,,,
Sol-35252,,,,,,,
Sol-35253,,,,,,,
Sol-35254,,,,,,,
Sol-35255,,,,,,,
Sol-35256,,,,,,,
Sol-35257,,,,,,,
Sol-35258,,,,,,,
Sol-35259,,,,,,,
Sol-35260,,,,,,,
Sol-35261,,,,,,,
Sol-35262,,,,,,,
Sol-35263,,,,,,,
Sol-35264,,,,,,,
Sol-35265,,,,,,,
Sol-35266,,,,,,,
Sol-35267,,,,,,,
Sol-35268,,,,,,,
Sol-35269,,,,,,,
Sol-35270,,,,,,,
Sol-35271,,,,,,,
Sol-35272,,,,,,,
Sol-35273,,,,,,,
Sol-35274,,,,,,,
Sol-35275,,,,,,,
Sol-35276,,,,,,,
Sol-35277,,,,,,,
Sol-35278,,,,,,,
Sol-35279,,,,,,,
Sol-35280,,,,,,,
Sol-35281,,,,,,,
Sol-35282,,,,,,,
Sol-35283,,,,,,,
Sol-35284,,,,,,,
Sol-35285,,,,,,,
Sol-35286,,,,,,,
Sol-35287,,,,,,,
Sol-35288,,,,,,,
Sol-35289,,,,,,,
Sol-35290,,,,,,,
Sol-35291,,,,,,,
Sol-35292,,,,,,,
Sol-35293,,,,,,,
Sol-35294,,,,,,,
Sol-35295,,,,,,,
Sol-35296,,,,,,,
Sol-35297,,,,,,,
Sol-35298,,,,,,,
Sol-35299,,,,,,,
Sol-35300,,,,,,,
Sol-35301,,,,,,,
Sol-35302,,,,,,,
Sol-35303,,,,,,,
Sol-35304,,,,,,,
Sol-35305,,,,,,,
Sol-35306,,,,,,,
Sol-35307,,,,,,,
Sol-35308,,,,,,,
Sol-35309,,,,,,,
Sol-35310,,,,,,,
Sol-35311,,,,,,,
Sol-35312,,,,,,,
Sol-35313,,,,,,,
Sol-35314,,,,,,,
Sol-35315,,,,,,,
Sol-35316,,,,,,,
Sol-35317,,,,,,,
Sol-35318,,,,,,,
Sol-35319,,,,,,,
Sol-35320,,,,,,,
Sol-35321,,,,,,,
Sol-35322,,,,,,,
Sol-35323,,,,,,,
Sol-35324,,,,,,,
Sol-35325,,,,,,,
Sol-35326,,,,,,,
Sol-35327,,,,,,,
Sol-35328,,,,,,,
Sol-35329,,,,,,,
Sol-35330,,,,,,,
Sol-35331,,,,,,,
Sol-35332,,,,,,,
Sol-35333,,,,,,,
Sol-35334,,,,,,,
Sol-35335,,,,,,,
Sol-35336,,,,,,,
Sol-35337,,,,,,,
Sol-35338,,,,,,,
Sol-35339,,,,,,,
Sol-35340,,,,,,,
Sol-35341,,,,,,,
Sol-35342,,,,,,,
Sol-35343,,,,,,,
Sol-35344,,,,,,,
Sol-35345,,,,,,,
Sol-35346,,,,,,,
Sol-35347,,,,,,,
Sol-35348,,,,,,,
Sol-35349,,,,,,,
Sol-35350,,,,,,,
Sol-35351,,,,,,,
Sol-35352,,,,,,,
Sol-35353,,,,,,,
Sol-35354,,,,,,,
Sol-35355,,,,,,,
Sol-35356,,,,,,,
Sol-35357,,,,,,,
Sol-35358,,,,,,,
Sol-35359,,,,,,,
Sol-35360,,,,,,,
Sol-35361,,,,,,,
Sol-35362,,,,,,,
Sol-35363,,,,,,,
Sol-35364,,,,,,,
Sol-35365,,,,,,,
Sol-35366,,,,,,,
Sol-35367,,,,,,,
Sol-35368,,,,,,,
Sol-35369,,,,,,,
Sol-35370,,,,,,,
Sol-35371,,,,,,,
Sol-35372,,,,,,,
Sol-35373,,,,,,,
Sol-35374,,,,,,,
Sol-35375,,,,,,,
Sol-35376,,,,,,,
Sol-35377,,,,,,,
Sol-35378,,,,,,,
Sol-35379,,,,,,,
Sol-35380,,,,,,,
Sol-35381,,,,,,,
Sol-35382,,,,,,,
Sol-35383,,,,,,,
Sol-35384,,,,,,,
Sol-35385,,,,,,,
Sol-35386,,,,,,,
Sol-35387,,,,,,,
Sol-35388,,,,,,,
Sol-35389,,,,,,,
Sol-35390,,,,,,,
Sol-35391,,,,,,,
Sol-35392,,,,,,,
Sol-35393,,,,,,,
Sol-35394,,,,,,,
Sol-35395,,,,,,,
Sol-35396,,,,,,,
Sol-35397,,,,,,,
Sol-35398,,,,,,,
Sol-35399,,,,,,,
Sol-35400,,,,,,,
Sol-35401,,,,,,,
Sol-35402,,,,,,,
Sol-35403,,,,,,,
Sol-35404,,,,,,,
Sol-35405,,,,,,,
Sol-35406,,,,,,,
Sol-35407,,,,,,,
Sol-35408,,,,,,,
Sol-35409,,,,,,,
Sol-35410,,,,,,,
Sol-35411,,,,,,,
Sol-35412,,,,,,,
Sol-35413,,,,,,,
Sol-35414,,,,,,,
Sol-35415,,,,,,,
Sol-35416,,,,,,,
Sol-35417,,,,,,,
Sol-35418,,,,,,,
Sol-35419,,,,,,,
Sol-35420,,,,,,,
Sol-35421,,,,,,,
Sol-35422,,,,,,,
Sol-35423,,,,,,,
Sol-35424,,,,,,,
Sol-35425,,,,,,,
Sol-35426,,,,,,,
Sol-35427,,,,,,,
Sol-35428,,,,,,,
Sol-35429,,,,,,,
Sol-35430,,,,,,,
Sol-35431,,,,,,,
Sol-35432,,,,,,,
Sol-35433,,,,,,,
Sol-35434,,,,,,,
Sol-35435,,,,,,,
Sol-35436,,,,,,,
Sol-35437,,,,,,,
Sol-35438,,,,,,,
Sol-35439,,,,,,,
Sol-35440,,,,,,,
Sol-35441,,,,,,,
Sol-35442,,,,,,,
Sol-35443,,,,,,,
Sol-35444,,,,,,,
Sol-35445,,,,,,,
Sol-35446,,,,,,,
Sol-35447,,,,,,,
Sol-35448,,,,,,,
Sol-35449,,,,,,,
Sol-35450,,,,,,,
Sol-35451,,,,,,,
Sol-35452,,,,,,,
Sol-35453,,,,,,,
Sol-35454,,,,,,,
Sol-35455,,,,,,,
Sol-35456,,,,,,,
Sol-35457,,,,,,,
Sol-35458,,,,,,,
Sol-35459,,,,,,,
Sol-35460,,,,,,,
Sol-35461,,,,,,,
Sol-35462,,,,,,,
Sol-35463,,,,,,,
Sol-35464,,,,,,,
Sol-35465,,,,,,,
Sol-35466,,,,,,,
Sol-35467,,,,,,,
Sol-35468,,,,,,,
Sol-35469,,,,,,,
Sol-35470,,,,,,,
Sol-35471,,,,,,,
Sol-35472,,,,,,,
Sol-35473,,,,,,,
Sol-35474,,,,,,,
Sol-35475,,,,,,,
Sol-35476,,,,,,,
Sol-35477,,,,,,,
Sol-35478,,,,,,,
Sol-35479,,,,,,,
Sol-35480,,,,,,,
Sol-35481,,,,,,,
Sol-35482,,,,,,,
Sol-35483,,,,,,,
Sol-35484,,,,,,,
Sol-35485,,,,,,,
Sol-35486,,,,,,,
Sol-35487,,,,,,,
Sol-35488,,,,,,,
Sol-35489,,,,,,,
Sol-35490,,,,,,,
Sol-35491,,,,,,,
Sol-35492,,,,,,,
Sol-35493,,,,,,,
Sol-35494,,,,,,,
Sol-35495,,,,,,,
Sol-35496,,,,,,,
Sol-35497,,,,,,,
Sol-35498,,,,,,,
Sol-35499,,,,,,,
Sol-35500,,,,,,,
Sol-35501,,,,,,,
Sol-35502,,,,,,,
Sol-35503,,,,,,,
Sol-35504,,,,,,,
Sol-35505,,,,,,,
Sol-35506,,,,,,,
Sol-35507,,,,,,,
Sol-35508,,,,,,,
Sol-35509,,,,,,,
Sol-35510,,,,,,,
Sol-35511,,,,,,,
Sol-35512,,,,,,,
Sol-35513,,,,,,,
Sol-35514,,,,,,,
Sol-35515,,,,,,,
Sol-35516,,,,,,,
Sol-35517,,,,,,,
Sol-35518,,,,,,,
Sol-35519,,,,,,,
Sol-35520,,,,,,,
Sol-35521,,,,,,,
Sol-35522,,,,,,,
Sol-35523,,,,,,,
Sol-35524,,,,,,,
Sol-35525,,,,,,,
Sol-35526,,,,,,,
Sol-35527,,,,,,,
Sol-35528,,,,,,,
Sol-35529,,,,,,,
Sol-35530,,,,,,,
Sol-35531,,,,,,,
Sol-35532,,,,,,,
Sol-35533,,,,,,,
Sol-35534,,,,,,,
Sol-35535,,,,,,,
Sol-35536,,,,,,,
Sol-35537,,,,,,,
Sol-35538,,,,,,,
Sol-35539,,,,,,,
Sol-35540,,,,,,,
Sol-35541,,,,,,,
Sol-35542,,,,,,,
Sol-35543,,,,,,,
Sol-35544,,,,,,,
Sol-35545,,,,,,,
Sol-35546,,,,,,,
Sol-35547,,,,,,,
Sol-35548,,,,,,,
Sol-35549,,,,,,,
Sol-35550,,,,,,,
Sol-35551,,,,,,,
Sol-35552,,,,,,,
Sol-35553,,,,,,,
Sol-35554,,,,,,,
Sol-35555,,,,,,,
Sol-35556,,,,,,,
Sol-35557,,,,,,,
Sol-35558,,,,,,,
Sol-35559,,,,,,,
Sol-35560,,,,,,,
Sol-35561,,,,,,,
Sol-35562,,,,,,,
Sol-35563,,,,,,,
Sol-35564,,,,,,,
Sol-35565,,,,,,,
Sol-35566,,,,,,,
Sol-35567,,,,,,,
Sol-35568,,,,,,,
Sol-35569,,,,,,,
Sol-35570,,,,,,,
Sol-35571,,,,,,,
Sol-35572,,,,,,,
Sol-35573,,,,,,,
Sol-35574,,,,,,,
Sol-35575,,,,,,,
Sol-35576,,,,,,,
Sol-35577,,,,,,,
Sol-35578,,,,,,,
Sol-35579,,,,,,,
Sol-35580,,,,,,,
Sol-35581,,,,,,,
Sol-35582,,,,,,,
Sol-35583,,,,,,,
Sol-35584,,,,,,,
Sol-35585,,,,,,,
Sol-35586,,,,,,,
Sol-35587,,,,,,,
Sol-35588,,,,,,,
Sol-35589,,,,,,,
Sol-35590,,,,,,,
Sol-35591,,,,,,,
Sol-35592,,,,,,,
Sol-35593,,,,,,,
Sol-35594,,,,,,,
Sol-35595,,,,,,,
Sol-35596,,,,,,,
Sol-35597,,,,,,,
Sol-35598,,,,,,,
Sol-35599,,,,,,,
Sol-35600,,,,,,,
Sol-35601,,,,,,,
Sol-35602,,,,,,,
Sol-35603,,,,,,,
Sol-35604,,,,,,,
Sol-35605,,,,,,,
Sol-35606,,,,,,,
Sol-35607,,,,,,,
Sol-35608,,,,,,,
Sol-35609,,,,,,,
Sol-35610,,,,,,,
Sol-35611,,,,,,,
Sol-35612,,,,,,,
Sol-35613,,,,,,,
Sol-35614,,,,,,,
Sol-35615,,,,,,,
Sol-35616,,,,,,,
Sol-35617,,,,,,,
Sol-35618,,,,,,,
Sol-35619,,,,,,,
Sol-35620,,,,,,,
Sol-35621,,,,,,,
Sol-35622,,,,,,,
Sol-35623,,,,,,,
Sol-35624,,,,,,,
Sol-35625,,,,,,,
Sol-35626,,,,,,,
Sol-35627,,,,,,,
Sol-35628,,,,,,,
Sol-35629,,,,,,,
Sol-35630,,,,,,,
Sol-35631,,,,,,,
Sol-35632,,,,,,,
Sol-35633,,,,,,,
Sol-35634,,,,,,,
Sol-35635,,,,,,,
Sol-35636,,,,,,,
Sol-35637,,,,,,,
Sol-35638,,,,,,,
Sol-35639,,,,,,,
Sol-35640,,,,,,,
Sol-35641,,,,,,,
Sol-35642,,,,,,,
Sol-35643,,,,,,,
Sol-35644,,,,,,,
Sol-35645,,,,,,,
Sol-35646,,,,,,,
Sol-35647,,,,,,,
Sol-35648,,,,,,,
Sol-35649,,,,,,,
Sol-35650,,,,,,,
Sol-35651,,,,,,,
Sol-35652,,,,,,,
Sol-35653,,,,,,,
Sol-35654,,,,,,,
Sol-35655,,,,,,,
Sol-35656,,,,,,,
Sol-35657,,,,,,,
Sol-35658,,,,,,,
Sol-35659,,,,,,,
Sol-35660,,,,,,,
Sol-35661,,,,,,,
Sol-35662,,,,,,,
Sol-35663,,,,,,,
Sol-35664,,,,,,,
Sol-35665,,,,,,,
Sol-35666,,,,,,,
Sol-35667,,,,,,,
Sol-35668,,,,,,,
Sol-35669,,,,,,,
Sol-35670,,,,,,,
Sol-35671,,,,,,,
Sol-35672,,,,,,,
Sol-35673,,,,,,,
Sol-35674,,,,,,,
Sol-35675,,,,,,,
Sol-35676,,,,,,,
Sol-35677,,,,,,,
Sol-35678,,,,,,,
Sol-35679,,,,,,,
Sol-35680,,,,,,,
Sol-35681,,,,,,,
Sol-35682,,,,,,,
Sol-35683,,,,,,,
Sol-35684,,,,,,,
Sol-35685,,,,,,,
Sol-35686,,,,,,,
Sol-35687,,,,,,,
Sol-35688,,,,,,,
Sol-35689,,,,,,,
Sol-35690,,,,,,,
Sol-35691,,,,,,,
Sol-35692,,,,,,,
Sol-35693,,,,,,,
Sol-35694,,,,,,,
Sol-35695,,,,,,,
Sol-35696,,,,,,,
Sol-35697,,,,,,,
Sol-35698,,,,,,,
Sol-35699,,,,,,,
Sol-35700,,,,,,,
Sol-35701,,,,,,,
Sol-35702,,,,,,,
Sol-35703,,,,,,,
Sol-35704,,,,,,,
Sol-35705,,,,,,,
Sol-35706,,,,,,,
Sol-35707,,,,,,,
Sol-35708,,,,,,,
Sol-35709,,,,,,,
Sol-35710,,,,,,,
Sol-35711,,,,,,,
Sol-35712,,,,,,,
Sol-35713,,,,,,,
Sol-35714,,,,,,,
Sol-35715,,,,,,,
Sol-35716,,,,,,,
Sol-35717,,,,,,,
Sol-35718,,,,,,,
Sol-35719,,,,,,,
Sol-35720,,,,,,,
Sol-35721,,,,,,,
Sol-35722,,,,,,,
Sol-35723,,,,,,,
Sol-35724,,,,,,,
Sol-35725,,,,,,,
Sol-35726,,,,,,,
Sol-35727,,,,,,,
Sol-35728,,,,,,,
Sol-35729,,,,,,,
Sol-35730,,,,,,,
Sol-35731,,,,,,,
Sol-35732,,,,,,,
Sol-35733,,,,,,,
Sol-35734,,,,,,,
Sol-35735,,,,,,,
Sol-35736,,,,,,,
Sol-35737,,,,,,,
Sol-35738,,,,,,,
Sol-35739,,,,,,,
Sol-35740,,,,,,,
Sol-35741,,,,,,,
Sol-35742,,,,,,,
Sol-35743,,,,,,,
Sol-35744,,,,,,,
Sol-35745,,,,,,,
Sol-35746,,,,,,,
Sol-35747,,,,,,,
Sol-35748,,,,,,,
Sol-35749,,,,,,,
Sol-35750,,,,,,,
Sol-35751,,,,,,,
Sol-35752,,,,,,,
Sol-35753,,,,,,,
Sol-35754,,,,,,,
Sol-35755,,,,,,,
Sol-35756,,,,,,,
Sol-35757,,,,,,,
Sol-35758,,,,,,,
Sol-35759,,,,,,,
Sol-35760,,,,,,,
Sol-35761,,,,,,,
Sol-35762,,,,,,,
Sol-35763,,,,,,,
Sol-35764,,,,,,,
Sol-35765,,,,,,,
Sol-35766,,,,,,,
Sol-35767,,,,,,,
Sol-35768,,,,,,,
Sol-35769,,,,,,,
Sol-35770,,,,,,,
Sol-35771,,,,,,,
Sol-35772,,,,,,,
Sol-35773,,,,,,,
Sol-35774,,,,,,,
Sol-35775,,,,,,,
Sol-35776,,,,,,,
Sol-35777,,,,,,,
Sol-35778,,,,,,,
Sol-35779,,,,,,,
Sol-35780,,,,,,,
Sol-35781,,,,,,,
Sol-35782,,,,,,,
Sol-35783,,,,,,,
Sol-35784,,,,,,,
Sol-35785,,,,,,,
Sol-35786,,,,,,,
Sol-35787,,,,,,,
Sol-35788,,,,,,,
Sol-35789,,,,,,,
Sol-35790,,,,,,,
Sol-35791,,,,,,,
Sol-35792,,,,,,,
Sol-35793,,,,,,,
Sol-35794,,,,,,,
Sol-35795,,,,,,,
Sol-35796,,,,,,,
Sol-35797,,,,,,,
Sol-35798,,,,,,,
Sol-35799,,,,,,,
Sol-35800,,,,,,,
Sol-35801,,,,,,,
Sol-35802,,,,,,,
Sol-35803,,,,,,,
Sol-35804,,,,,,,
Sol-35805,,,,,,,
Sol-35806,,,,,,,
Sol-35807,,,,,,,
Sol-35808,,,,,,,
Sol-35809,,,,,,,
Sol-35810,,,,,,,
Sol-35811,,,,,,,
Sol-35812,,,,,,,
Sol-35813,,,,,,,
Sol-35814,,,,,,,
Sol-35815,,,,,,,
Sol-35816,,,,,,,
Sol-35817,,,,,,,
Sol-35818,,,,,,,
Sol-35819,,,,,,,
Sol-35820,,,,,,,
Sol-35821,,,,,,,
Sol-35822,,,,,,,
Sol-35823,,,,,,,
Sol-35824,,,,,,,
Sol-35825,,,,,,,
Sol-35826,,,,,,,
Sol-35827,,,,,,,
Sol-35828,,,,,,,
Sol-35829,,,,,,,
Sol-35830,,,,,,,
Sol-35831,,,,,,,
Sol-35832,,,,,,,
Sol-35833,,,,,,,
Sol-35834,,,,,,,
Sol-35835,,,,,,,
Sol-35836,,,,,,,
Sol-35837,,,,,,,
Sol-35838,,,,,,,
Sol-35839,,,,,,,
Sol-35840,,,,,,,
Sol-35841,,,,,,,
Sol-35842,,,,,,,
Sol-35843,,,,,,,
Sol-35844,,,,,,,
Sol-35845,,,,,,,
Sol-35846,,,,,,,
Sol-35847,,,,,,,
Sol-35848,,,,,,,
Sol-35849,,,,,,,
Sol-35850,,,,,,,
Sol-35851,,,,,,,
Sol-35852,,,,,,,
Sol-35853,,,,,,,
Sol-35854,,,,,,,
Sol-35855,,,,,,,
Sol-35856,,,,,,,
Sol-35857,,,,,,,
Sol-35858,,,,,,,
Sol-35859,,,,,,,
Sol-35860,,,,,,,
Sol-35861,,,,,,,
Sol-35862,,,,,,,
Sol-35863,,,,,,,
Sol-35864,,,,,,,
Sol-35865,,,,,,,
Sol-35866,,,,,,,
Sol-35867,,,,,,,
Sol-35868,,,,,,,
Sol-35869,,,,,,,
Sol-35870,,,,,,,
Sol-35871,,,,,,,
Sol-35872,,,,,,,
Sol-35873,,,,,,,
Sol-35874,,,,,,,
Sol-35875,,,,,,,
Sol-35876,,,,,,,
Sol-35877,,,,,,,
Sol-35878,,,,,,,
Sol-35879,,,,,,,
Sol-35880,,,,,,,
Sol-35881,,,,,,,
Sol-35882,,,,,,,
Sol-35883,,,,,,,
Sol-35884,,,,,,,
Sol-35885,,,,,,,
Sol-35886,,,,,,,
Sol-35887,,,,,,,
Sol-35888,,,,,,,
Sol-35889,,,,,,,
Sol-35890,,,,,,,
Sol-35891,,,,,,,
Sol-35892,,,,,,,
Sol-35893,,,,,,,
Sol-35894,,,,,,,
Sol-35895,,,,,,,
Sol-35896,,,,,,,
Sol-35897,,,,,,,
Sol-35898,,,,,,,
Sol-35899,,,,,,,
Sol-35900,,,,,,,
Sol-35901,,,,,,,
Sol-35902,,,,,,,
Sol-35903,,,,,,,
Sol-35904,,,,,,,
Sol-35905,,,,,,,
Sol-35906,,,,,,,
Sol-35907,,,,,,,
Sol-35908,,,,,,,
Sol-35909,,,,,,,
Sol-35910,,,,,,,
Sol-35911,,,,,,,
Sol-35912,,,,,,,
Sol-35913,,,,,,,
Sol-35914,,,,,,,
Sol-35915,,,,,,,
Sol-35916,,,,,,,
Sol-35917,,,,,,,
Sol-35918,,,,,,,
Sol-35919,,,,,,,
Sol-35920,,,,,,,
Sol-35921,,,,,,,
Sol-35922,,,,,,,
Sol-35923,,,,,,,
Sol-35924,,,,,,,
Sol-35925,,,,,,,
Sol-35926,,,,,,,
Sol-35927,,,,,,,
Sol-35928,,,,,,,
Sol-35929,,,,,,,
Sol-35930,,,,,,,
Sol-35931,,,,,,,
Sol-35932,,,,,,,
Sol-35933,,,,,,,
Sol-35934,,,,,,,
Sol-35935,,,,,,,
Sol-35936,,,,,,,
Sol-35937,,,,,,,
Sol-35938,,,,,,,
Sol-35939,,,,,,,
Sol-35940,,,,,,,
Sol-35941,,,,,,,
Sol-35942,,,,,,,
Sol-35943,,,,,,,
Sol-35944,,,,,,,
Sol-35945,,,,,,,
Sol-35946,,,,,,,
Sol-35947,,,,,,,
Sol-35948,,,,,,,
Sol-35949,,,,,,,
Sol-35950,,,,,,,
Sol-35951,,,,,,,
Sol-35952,,,,,,,
Sol-35953,,,,,,,
Sol-35954,,,,,,,
Sol-35955,,,,,,,
Sol-35956,,,,,,,
Sol-35957,,,,,,,
Sol-35958,,,,,,,
Sol-35959,,,,,,,
Sol-35960,,,,,,,
Sol-35961,,,,,,,
Sol-35962,,,,,,,
Sol-35963,,,,,,,
Sol-35964,,,,,,,
Sol-35965,,,,,,,
Sol-35966,,,,,,,
Sol-35967,,,,,,,
Sol-35968,,,,,,,
Sol-35969,,,,,,,
Sol-35970,,,,,,,
Sol-35971,,,,,,,
Sol-35972,,,,,,,
Sol-35973,,,,,,,
Sol-35974,,,,,,,
Sol-35975,,,,,,,
Sol-35976,,,,,,,
Sol-35977,,,,,,,
Sol-35978,,,,,,,
Sol-35979,,,,,,,
Sol-35980,,,,,,,
Sol-35981,,,,,,,
Sol-35982,,,,,,,
Sol-35983,,,,,,,
Sol-35984,,,,,,,
Sol-35985,,,,,,,
Sol-35986,,,,,,,
Sol-35987,,,,,,,
Sol-35988,,,,,,,
Sol-35989,,,,,,,
Sol-35990,,,,,,,
Sol-35991,,,,,,,
Sol-35992,,,,,,,
Sol-35993,,,,,,,
Sol-35994,,,,,,,
Sol-35995,,,,,,,
Sol-35996,,,,,,,
Sol-35997,,,,,,,
Sol-35998,,,,,,,
Sol-35999,,,,,,,
Sol-36000,,,,,,,
Sol-36001,,,,,,,
Sol-36002,,,,,,,
Sol-36003,,,,,,,
Sol-36004,,,,,,,
Sol-36005,,,,,,,
Sol-36006,,,,,,,
Sol-36007,,,,,,,
Sol-36008,,,,,,,
Sol-36009,,,,,,,
Sol-36010,,,,,,,
Sol-36011,,,,,,,
Sol-36012,,,,,,,
Sol-36013,,,,,,,
Sol-36014,,,,,,,
Sol-36015,,,,,,,
Sol-36016,,,,,,,
Sol-36017,,,,,,,
Sol-36018,,,,,,,
Sol-36019,,,,,,,
Sol-36020,,,,,,,
Sol-36021,,,,,,,
Sol-36022,,,,,,,
Sol-36023,,,,,,,
Sol-36024,,,,,,,
Sol-36025,,,,,,,
Sol-36026,,,,,,,
Sol-36027,,,,,,,
Sol-36028,,,,,,,
Sol-36029,,,,,,,
Sol-36030,,,,,,,
Sol-36031,,,,,,,
Sol-36032,,,,,,,
Sol-36033,,,,,,,
Sol-36034,,,,,,,
Sol-36035,,,,,,,
Sol-36036,,,,,,,
Sol-36037,,,,,,,
Sol-36038,,,,,,,
Sol-36039,,,,,,,
Sol-36040,,,,,,,
Sol-36041,,,,,,,
Sol-36042,,,,,,,
Sol-36043,,,,,,,
Sol-36044,,,,,,,
Sol-36045,,,,,,,
Sol-36046,,,,,,,
Sol-36047,,,,,,,
Sol-36048,,,,,,,
Sol-36049,,,,,,,
Sol-36050,,,,,,,
Sol-36051,,,,,,,
Sol-36052,,,,,,,
Sol-36053,,,,,,,
Sol-36054,,,,,,,
Sol-36055,,,,,,,
Sol-36056,,,,,,,
Sol-36057,,,,,,,
Sol-36058,,,,,,,
Sol-36059,,,,,,,
Sol-36060,,,,,,,
Sol-36061,,,,,,,
Sol-36062,,,,,,,
Sol-36063,,,,,,,
Sol-36064,,,,,,,
Sol-36065,,,,,,,
Sol-36066,,,,,,,
Sol-36067,,,,,,,
Sol-36068,,,,,,,
Sol-36069,,,,,,,
Sol-36070,,,,,,,
Sol-36071,,,,,,,
Sol-36072,,,,,,,
Sol-36073,,,,,,,
Sol-36074,,,,,,,
Sol-36075,,,,,,,
Sol-36076,,,,,,,
Sol-36077,,,,,,,
Sol-36078,,,,,,,
Sol-36079,,,,,,,
Sol-36080,,,,,,,
Sol-36081,,,,,,,
Sol-36082,,,,,,,
Sol-36083,,,,,,,
Sol-36084,,,,,,,
Sol-36085,,,,,,,
Sol-36086,,,,,,,
Sol-36087,,,,,,,
Sol-36088,,,,,,,
Sol-36089,,,,,,,
Sol-36090,,,,,,,
Sol-36091,,,,,,,
Sol-36092,,,,,,,
Sol-36093,,,,,,,
Sol-36094,,,,,,,
Sol-36095,,,,,,,
Sol-36096,,,,,,,
Sol-36097,,,,,,,
Sol-36098,,,,,,,
Sol-36099,,,,,,,
Sol-36100,,,,,,,
Sol-36101,,,,,,,
Sol-36102,,,,,,,
Sol-36103,,,,,,,
Sol-36104,,,,,,,
Sol-36105,,,,,,,
Sol-36106,,,,,,,
Sol-36107,,,,,,,
Sol-36108,,,,,,,
Sol-36109,,,,,,,
Sol-36110,,,,,,,
Sol-36111,,,,,,,
Sol-36112,,,,,,,
Sol-36113,,,,,,,
Sol-36114,,,,,,,
Sol-36115,,,,,,,
Sol-36116,,,,,,,
Sol-36117,,,,,,,
Sol-36118,,,,,,,
Sol-36119,,,,,,,
Sol-36120,,,,,,,
Sol-36121,,,,,,,
Sol-36122,,,,,,,
Sol-36123,,,,,,,
Sol-36124,,,,,,,
Sol-36125,,,,,,,
Sol-36126,,,,,,,
Sol-36127,,,,,,,
Sol-36128,,,,,,,
Sol-36129,,,,,,,
Sol-36130,,,,,,,
Sol-36131,,,,,,,
Sol-36132,,,,,,,
Sol-36133,,,,,,,
Sol-36134,,,,,,,
Sol-36135,,,,,,,
Sol-36136,,,,,,,
Sol-36137,,,,,,,
Sol-36138,,,,,,,
Sol-36139,,,,,,,
Sol-36140,,,,,,,
Sol-36141,,,,,,,
Sol-36142,,,,,,,
Sol-36143,,,,,,,
Sol-36144,,,,,,,
Sol-36145,,,,,,,
Sol-36146,,,,,,,
Sol-36147,,,,,,,
Sol-36148,,,,,,,
Sol-36149,,,,,,,
Sol-36150,,,,,,,
Sol-36151,,,,,,,
Sol-36152,,,,,,,
Sol-36153,,,,,,,
Sol-36154,,,,,,,
Sol-36155,,,,,,,
Sol-36156,,,,,,,
Sol-36157,,,,,,,
Sol-36158,,,,,,,
Sol-36159,,,,,,,
Sol-36160,,,,,,,
Sol-36161,,,,,,,
Sol-36162,,,,,,,
Sol-36163,,,,,,,
Sol-36164,,,,,,,
Sol-36165,,,,,,,
Sol-36166,,,,,,,
Sol-36167,,,,,,,
Sol-36168,,,,,,,
Sol-36169,,,,,,,
Sol-36170,,,,,,,
Sol-36171,,,,,,,
Sol-36172,,,,,,,
Sol-36173,,,,,,,
Sol-36174,,,,,,,
Sol-36175,,,,,,,
Sol-36176,,,,,,,
Sol-36177,,,,,,,
Sol-36178,,,,,,,
Sol-36179,,,,,,,
Sol-36180,,,,,,,
Sol-36181,,,,,,,
Sol-36182,,,,,,,
Sol-36183,,,,,,,
Sol-36184,,,,,,,
Sol-36185,,,,,,,
Sol-36186,,,,,,,
Sol-36187,,,,,,,
Sol-36188,,,,,,,
Sol-36189,,,,,,,
Sol-36190,,,,,,,
Sol-36191,,,,,,,
Sol-36192,,,,,,,
Sol-36193,,,,,,,
Sol-36194,,,,,,,
Sol-36195,,,,,,,
Sol-36196,,,,,,,
Sol-36197,,,,,,,
Sol-36198,,,,,,,
Sol-36199,,,,,,,
Sol-36200,,,,,,,
Sol-36201,,,,,,,
Sol-36202,,,,,,,
Sol-36203,,,,,,,
Sol-36204,,,,,,,
Sol-36205,,,,,,,
Sol-36206,,,,,,,
Sol-36207,,,,,,,
Sol-36208,,,,,,,
Sol-36209,,,,,,,
Sol-36210,,,,,,,
Sol-36211,,,,,,,
Sol-36212,,,,,,,
Sol-36213,,,,,,,
Sol-36214,,,,,,,
Sol-36215,,,,,,,
Sol-36216,,,,,,,
Sol-36217,,,,,,,
Sol-36218,,,,,,,
Sol-36219,,,,,,,
Sol-36220,,,,,,,
Sol-36221,,,,,,,
Sol-36222,,,,,,,
Sol-36223,,,,,,,
Sol-36224,,,,,,,
Sol-36225,,,,,,,
Sol-36226,,,,,,,
Sol-36227,,,,,,,
Sol-36228,,,,,,,
Sol-36229,,,,,,,
Sol-36230,,,,,,,
Sol-36231,,,,,,,
Sol-36232,,,,,,,
Sol-36233,,,,,,,
Sol-36234,,,,,,,
Sol-36235,,,,,,,
Sol-36236,,,,,,,
Sol-36237,,,,,,,
Sol-36238,,,,,,,
Sol-36239,,,,,,,
Sol-36240,,,,,,,
Sol-36241,,,,,,,
Sol-36242,,,,,,,
Sol-36243,,,,,,,
Sol-36244,,,,,,,
Sol-36245,,,,,,,
Sol-36246,,,,,,,
Sol-36247,,,,,,,
Sol-36248,,,,,,,
Sol-36249,,,,,,,
Sol-36250,,,,,,,
Sol-36251,,,,,,,
Sol-36252,,,,,,,
Sol-36253,,,,,,,
Sol-36254,,,,,,,
Sol-36255,,,,,,,
Sol-36256,,,,,,,
Sol-36257,,,,,,,
Sol-36258,,,,,,,
Sol-36259,,,,,,,
Sol-36260,,,,,,,
Sol-36261,,,,,,,
Sol-36262,,,,,,,
Sol-36263,,,,,,,
Sol-36264,,,,,,,
Sol-36265,,,,,,,
Sol-36266,,,,,,,
Sol-36267,,,,,,,
Sol-36268,,,,,,,
Sol-36269,,,,,,,
Sol-36270,,,,,,,
Sol-36271,,,,,,,
Sol-36272,,,,,,,
Sol-36273,,,,,,,
Sol-36274,,,,,,,
Sol-36275,,,,,,,
Sol-36276,,,,,,,
Sol-36277,,,,,,,
Sol-36278,,,,,,,
Sol-36279,,,,,,,
Sol-36280,,,,,,,
Sol-36281,,,,,,,
Sol-36282,,,,,,,
Sol-36283,,,,,,,
Sol-36284,,,,,,,
Sol-36285,,,,,,,
Sol-36286,,,,,,,
Sol-36287,,,,,,,
Sol-36288,,,,,,,
Sol-36289,,,,,,,
Sol-36290,,,,,,,
Sol-36291,,,,,,,
Sol-36292,,,,,,,
Sol-36293,,,,,,,
Sol-36294,,,,,,,
Sol-36295,,,,,,,
Sol-36296,,,,,,,
Sol-36297,,,,,,,
Sol-36298,,,,,,,
Sol-36299,,,,,,,
Sol-36300,,,,,,,
Sol-36301,,,,,,,
Sol-36302,,,,,,,
Sol-36303,,,,,,,
Sol-36304,,,,,,,
Sol-36305,,,,,,,
Sol-36306,,,,,,,
Sol-36307,,,,,,,
Sol-36308,,,,,,,
Sol-36309,,,,,,,
Sol-36310,,,,,,,
Sol-36311,,,,,,,
Sol-36312,,,,,,,
Sol-36313,,,,,,,
Sol-36314,,,,,,,
Sol-36315,,,,,,,
Sol-36316,,,,,,,
Sol-36317,,,,,,,
Sol-36318,,,,,,,
Sol-36319,,,,,,,
Sol-36320,,,,,,,
Sol-36321,,,,,,,
Sol-36322,,,,,,,
Sol-36323,,,,,,,
Sol-36324,,,,,,,
Sol-36325,,,,,,,
Sol-36326,,,,,,,
Sol-36327,,,,,,,
Sol-36328,,,,,,,
Sol-36329,,,,,,,
Sol-36330,,,,,,,
Sol-36331,,,,,,,
Sol-36332,,,,,,,
Sol-36333,,,,,,,
Sol-36334,,,,,,,
Sol-36335,,,,,,,
Sol-36336,,,,,,,
Sol-36337,,,,,,,
Sol-36338,,,,,,,
Sol-36339,,,,,,,
Sol-36340,,,,,,,
Sol-36341,,,,,,,
Sol-36342,,,,,,,
Sol-36343,,,,,,,
Sol-36344,,,,,,,
Sol-36345,,,,,,,
Sol-36346,,,,,,,
Sol-36347,,,,,,,
Sol-36348,,,,,,,
Sol-36349,,,,,,,
Sol-36350,,,,,,,
Sol-36351,,,,,,,
Sol-36352,,,,,,,
Sol-36353,,,,,,,
Sol-36354,,,,,,,
Sol-36355,,,,,,,
Sol-36356,,,,,,,
Sol-36357,,,,,,,
Sol-36358,,,,,,,
Sol-36359,,,,,,,
Sol-36360,,,,,,,
Sol-36361,,,,,,,
Sol-36362,,,,,,,
Sol-36363,,,,,,,
Sol-36364,,,,,,,
Sol-36365,,,,,,,
Sol-36366,,,,,,,
Sol-36367,,,,,,,
Sol-36368,,,,,,,
Sol-36369,,,,,,,
Sol-36370,,,,,,,
Sol-36371,,,,,,,
Sol-36372,,,,,,,
Sol-36373,,,,,,,
Sol-36374,,,,,,,
Sol-36375,,,,,,,
Sol-36376,,,,,,,
Sol-36377,,,,,,,
Sol-36378,,,,,,,
Sol-36379,,,,,,,
Sol-36380,,,,,,,
Sol-36381,,,,,,,
Sol-36382,,,,,,,
Sol-36383,,,,,,,
Sol-36384,,,,,,,
Sol-36385,,,,,,,
Sol-36386,,,,,,,
Sol-36387,,,,,,,
Sol-36388,,,,,,,
Sol-36389,,,,,,,
Sol-36390,,,,,,,
Sol-36391,,,,,,,
Sol-36392,,,,,,,
Sol-36393,,,,,,,
Sol-36394,,,,,,,
Sol-36395,,,,,,,
Sol-36396,,,,,,,
Sol-36397,,,,,,,
Sol-36398,,,,,,,
Sol-36399,,,,,,,
Sol-36400,,,,,,,
Sol-36401,,,,,,,
Sol-36402,,,,,,,
Sol-36403,,,,,,,
Sol-36404,,,,,,,
Sol-36405,,,,,,,
Sol-36406,,,,,,,
Sol-36407,,,,,,,
Sol-36408,,,,,,,
Sol-36409,,,,,,,
Sol-36410,,,,,,,
Sol-36411,,,,,,,
Sol-36412,,,,,,,
Sol-36413,,,,,,,
Sol-36414,,,,,,,
Sol-36415,,,,,,,
Sol-36416,,,,,,,
Sol-36417,,,,,,,
Sol-36418,,,,,,,
Sol-36419,,,,,,,
Sol-36420,,,,,,,
Sol-36421,,,,,,,
Sol-36422,,,,,,,
Sol-36423,,,,,,,
Sol-36424,,,,,,,
Sol-36425,,,,,,,
Sol-36426,,,,,,,
Sol-36427,,,,,,,
Sol-36428,,,,,,,
Sol-36429,,,,,,,
Sol-36430,,,,,,,
Sol-36431,,,,,,,
Sol-36432,,,,,,,
Sol-36433,,,,,,,
Sol-36434,,,,,,,
Sol-36435,,,,,,,
Sol-36436,,,,,,,
Sol-36437,,,,,,,
Sol-36438,,,,,,,
Sol-36439,,,,,,,
Sol-36440,,,,,,,
Sol-36441,,,,,,,
Sol-36442,,,,,,,
Sol-36443,,,,,,,
Sol-36444,,,,,,,
Sol-36445,,,,,,,
Sol-36446,,,,,,,
Sol-36447,,,,,,,
Sol-36448,,,,,,,
Sol-36449,,,,,,,
Sol-36450,,,,,,,
Sol-36451,,,,,,,
Sol-36452,,,,,,,
Sol-36453,,,,,,,
Sol-36454,,,,,,,
Sol-36455,,,,,,,
Sol-36456,,,,,,,
Sol-36457,,,,,,,
Sol-36458,,,,,,,
Sol-36459,,,,,,,
Sol-36460,,,,,,,
Sol-36461,,,,,,,
Sol-36462,,,,,,,
Sol-36463,,,,,,,
Sol-36464,,,,,,,
Sol-36465,,,,,,,
Sol-36466,,,,,,,
Sol-36467,,,,,,,
Sol-36468,,,,,,,
Sol-36469,,,,,,,
Sol-36470,,,,,,,
Sol-36471,,,,,,,
Sol-36472,,,,,,,
Sol-36473,,,,,,,
Sol-36474,,,,,,,
Sol-36475,,,,,,,
Sol-36476,,,,,,,
Sol-36477,,,,,,,
Sol-36478,,,,,,,
Sol-36479,,,,,,,
Sol-36480,,,,,,,
Sol-36481,,,,,,,
Sol-36482,,,,,,,
Sol-36483,,,,,,,
Sol-36484,,,,,,,
Sol-36485,,,,,,,
Sol-36486,,,,,,,
Sol-36487,,,,,,,
Sol-36488,,,,,,,
Sol-36489,,,,,,,
Sol-36490,,,,,,,
Sol-36491,,,,,,,
Sol-36492,,,,,,,
Sol-36493,,,,,,,
Sol-36494,,,,,,,
Sol-36495,,,,,,,
Sol-36496,,,,,,,
Sol-36497,,,,,,,
Sol-36498,,,,,,,
Sol-36499,,,,,,,
Sol-36500,,,,,,,
Sol-36501,,,,,,,
Sol-36502,,,,,,,
Sol-36503,,,,,,,
Sol-36504,,,,,,,
Sol-36505,,,,,,,
Sol-36506,,,,,,,
Sol-36507,,,,,,,
Sol-36508,,,,,,,
Sol-36509,,,,,,,
Sol-36510,,,,,,,
Sol-36511,,,,,,,
Sol-36512,,,,,,,
Sol-36513,,,,,,,
Sol-36514,,,,,,,
Sol-36515,,,,,,,
Sol-36516,,,,,,,
Sol-36517,,,,,,,
Sol-36518,,,,,,,
Sol-36519,,,,,,,
Sol-36520,,,,,,,
Sol-36521,,,,,,,
Sol-36522,,,,,,,
Sol-36523,,,,,,,
Sol-36524,,,,,,,
Sol-36525,,,,,,,
Sol-36526,,,,,,,
Sol-36527,,,,,,,
Sol-36528,,,,,,,
Sol-36529,,,,,,,
Sol-36530,,,,,,,
Sol-36531,,,,,,,
Sol-36532,,,,,,,
Sol-36533,,,,,,,
Sol-36534,,,,,,,
Sol-36535,,,,,,,
Sol-36536,,,,,,,
Sol-36537,,,,,,,
Sol-36538,,,,,,,
Sol-36539,,,,,,,
Sol-36540,,,,,,,
Sol-36541,,,,,,,
Sol-36542,,,,,,,
Sol-36543,,,,,,,
Sol-36544,,,,,,,
Sol-36545,,,,,,,
Sol-36546,,,,,,,
Sol-36547,,,,,,,
Sol-36548,,,,,,,
Sol-36549,,,,,,,
Sol-36550,,,,,,,
Sol-36551,,,,,,,
Sol-36552,,,,,,,
Sol-36553,,,,,,,
Sol-36554,,,,,,,
Sol-36555,,,,,,,
Sol-36556,,,,,,,
Sol-36557,,,,,,,
Sol-36558,,,,,,,
Sol-36559,,,,,,,
Sol-36560,,,,,,,
Sol-36561,,,,,,,
Sol-36562,,,,,,,
Sol-36563,,,,,,,
Sol-36564,,,,,,,
Sol-36565,,,,,,,
Sol-36566,,,,,,,
Sol-36567,,,,,,,
Sol-36568,,,,,,,
Sol-36569,,,,,,,
Sol-36570,,,,,,,
Sol-36571,,,,,,,
Sol-36572,,,,,,,
Sol-36573,,,,,,,
Sol-36574,,,,,,,
Sol-36575,,,,,,,
Sol-36576,,,,,,,
Sol-36577,,,,,,,
Sol-36578,,,,,,,
Sol-36579,,,,,,,
Sol-36580,,,,,,,
Sol-36581,,,,,,,
Sol-36582,,,,,,,
Sol-36583,,,,,,,
Sol-36584,,,,,,,
Sol-36585,,,,,,,
Sol-36586,,,,,,,
Sol-36587,,,,,,,
Sol-36588,,,,,,,
Sol-36589,,,,,,,
Sol-36590,,,,,,,
Sol-36591,,,,,,,
Sol-36592,,,,,,,
Sol-36593,,,,,,,
Sol-36594,,,,,,,
Sol-36595,,,,,,,
Sol-36596,,,,,,,
Sol-36597,,,,,,,
Sol-36598,,,,,,,
Sol-36599,,,,,,,
Sol-36600,,,,,,,
Sol-36601,,,,,,,
Sol-36602,,,,,,,
Sol-36603,,,,,,,
Sol-36604,,,,,,,
Sol-36605,,,,,,,
Sol-36606,,,,,,,
Sol-36607,,,,,,,
Sol-36608,,,,,,,
Sol-36609,,,,,,,
Sol-36610,,,,,,,
Sol-36611,,,,,,,
Sol-36612,,,,,,,
Sol-36613,,,,,,,
Sol-36614,,,,,,,
Sol-36615,,,,,,,
Sol-36616,,,,,,,
Sol-36617,,,,,,,
Sol-36618,,,,,,,
Sol-36619,,,,,,,
Sol-36620,,,,,,,
Sol-36621,,,,,,,
Sol-36622,,,,,,,
Sol-36623,,,,,,,
Sol-36624,,,,,,,
Sol-36625,,,,,,,
Sol-36626,,,,,,,
Sol-36627,,,,,,,
Sol-36628,,,,,,,
Sol-36629,,,,,,,
Sol-36630,,,,,,,
Sol-36631,,,,,,,
Sol-36632,,,,,,,
Sol-36633,,,,,,,
Sol-36634,,,,,,,
Sol-36635,,,,,,,
Sol-36636,,,,,,,
Sol-36637,,,,,,,
Sol-36638,,,,,,,
Sol-36639,,,,,,,
Sol-36640,,,,,,,
Sol-36641,,,,,,,
Sol-36642,,,,,,,
Sol-36643,,,,,,,
Sol-36644,,,,,,,
Sol-36645,,,,,,,
Sol-36646,,,,,,,
Sol-36647,,,,,,,
Sol-36648,,,,,,,
Sol-36649,,,,,,,
Sol-36650,,,,,,,
Sol-36651,,,,,,,
Sol-36652,,,,,,,
Sol-36653,,,,,,,
Sol-36654,,,,,,,
Sol-36655,,,,,,,
Sol-36656,,,,,,,
Sol-36657,,,,,,,
Sol-36658,,,,,,,
Sol-36659,,,,,,,
Sol-36660,,,,,,,
Sol-36661,,,,,,,
Sol-36662,,,,,,,
Sol-36663,,,,,,,
Sol-36664,,,,,,,
Sol-36665,,,,,,,
Sol-36666,,,,,,,
Sol-36667,,,,,,,
Sol-36668,,,,,,,
Sol-36669,,,,,,,
Sol-36670,,,,,,,
Sol-36671,,,,,,,
Sol-36672,,,,,,,
Sol-36673,,,,,,,
Sol-36674,,,,,,,
Sol-36675,,,,,,,
Sol-36676,,,,,,,
Sol-36677,,,,,,,
Sol-36678,,,,,,,
Sol-36679,,,,,,,
Sol-36680,,,,,,,
Sol-36681,,,,,,,
Sol-36682,,,,,,,
Sol-36683,,,,,,,
Sol-36684,,,,,,,
Sol-36685,,,,,,,
Sol-36686,,,,,,,
Sol-36687,,,,,,,
Sol-36688,,,,,,,
Sol-36689,,,,,,,
Sol-36690,,,,,,,
Sol-36691,,,,,,,
Sol-36692,,,,,,,
Sol-36693,,,,,,,
Sol-36694,,,,,,,
Sol-36695,,,,,,,
Sol-36696,,,,,,,
Sol-36697,,,,,,,
Sol-36698,,,,,,,
Sol-36699,,,,,,,
Sol-36700,,,,,,,
Sol-36701,,,,,,,
Sol-36702,,,,,,,
Sol-36703,,,,,,,
Sol-36704,,,,,,,
Sol-36705,,,,,,,
Sol-36706,,,,,,,
Sol-36707,,,,,,,
Sol-36708,,,,,,,
Sol-36709,,,,,,,
Sol-36710,,,,,,,
Sol-36711,,,,,,,
Sol-36712,,,,,,,
Sol-36713,,,,,,,
Sol-36714,,,,,,,
Sol-36715,,,,,,,
Sol-36716,,,,,,,
Sol-36717,,,,,,,
Sol-36718,,,,,,,
Sol-36719,,,,,,,
Sol-36720,,,,,,,
Sol-36721,,,,,,,
Sol-36722,,,,,,,
Sol-36723,,,,,,,
Sol-36724,,,,,,,
Sol-36725,,,,,,,
Sol-36726,,,,,,,
Sol-36727,,,,,,,
Sol-36728,,,,,,,
Sol-36729,,,,,,,
Sol-36730,,,,,,,
Sol-36731,,,,,,,
Sol-36732,,,,,,,
Sol-36733,,,,,,,
Sol-36734,,,,,,,
Sol-36735,,,,,,,
Sol-36736,,,,,,,
Sol-36737,,,,,,,
Sol-36738,,,,,,,
Sol-36739,,,,,,,
Sol-36740,,,,,,,
Sol-36741,,,,,,,
Sol-36742,,,,,,,
Sol-36743,,,,,,,
Sol-36744,,,,,,,
Sol-36745,,,,,,,
Sol-36746,,,,,,,
Sol-36747,,,,,,,
Sol-36748,,,,,,,
Sol-36749,,,,,,,
Sol-36750,,,,,,,
Sol-36751,,,,,,,
Sol-36752,,,,,,,
Sol-36753,,,,,,,
Sol-36754,,,,,,,
Sol-36755,,,,,,,
Sol-36756,,,,,,,
Sol-36757,,,,,,,
Sol-36758,,,,,,,
Sol-36759,,,,,,,
Sol-36760,,,,,,,
Sol-36761,,,,,,,
Sol-36762,,,,,,,
Sol-36763,,,,,,,
Sol-36764,,,,,,,
Sol-36765,,,,,,,
Sol-36766,,,,,,,
Sol-36767,,,,,,,
Sol-36768,,,,,,,
Sol-36769,,,,,,,
Sol-36770,,,,,,,
Sol-36771,,,,,,,
Sol-36772,,,,,,,
Sol-36773,,,,,,,
Sol-36774,,,,,,,
Sol-36775,,,,,,,
Sol-36776,,,,,,,
Sol-36777,,,,,,,
Sol-36778,,,,,,,
Sol-36779,,,,,,,
Sol-36780,,,,,,,
Sol-36781,,,,,,,
Sol-36782,,,,,,,
Sol-36783,,,,,,,
Sol-36784,,,,,,,
Sol-36785,,,,,,,
Sol-36786,,,,,,,
Sol-36787,,,,,,,
Sol-36788,,,,,,,
Sol-36789,,,,,,,
Sol-36790,,,,,,,
Sol-36791,,,,,,,
Sol-36792,,,,,,,
Sol-36793,,,,,,,
Sol-36794,,,,,,,
Sol-36795,,,,,,,
Sol-36796,,,,,,,
Sol-36797,,,,,,,
Sol-36798,,,,,,,
Sol-36799,,,,,,,
Sol-36800,,,,,,,
Sol-36801,,,,,,,
Sol-36802,,,,,,,
Sol-36803,,,,,,,
Sol-36804,,,,,,,
Sol-36805,,,,,,,
Sol-36806,,,,,,,
Sol-36807,,,,,,,
Sol-36808,,,,,,,
Sol-36809,,,,,,,
Sol-36810,,,,,,,
Sol-36811,,,,,,,
Sol-36812,,,,,,,
Sol-36813,,,,,,,
Sol-36814,,,,,,,
Sol-36815,,,,,,,
Sol-36816,,,,,,,
Sol-36817,,,,,,,
Sol-36818,,,,,,,
Sol-36819,,,,,,,
Sol-36820,,,,,,,
Sol-36821,,,,,,,
Sol-36822,,,,,,,
Sol-36823,,,,,,,
Sol-36824,,,,,,,
Sol-36825,,,,,,,
Sol-36826,,,,,,,
Sol-36827,,,,,,,
Sol-36828,,,,,,,
Sol-36829,,,,,,,
Sol-36830,,,,,,,
Sol-36831,,,,,,,
Sol-36832,,,,,,,
Sol-36833,,,,,,,
Sol-36834,,,,,,,
Sol-36835,,,,,,,
Sol-36836,,,,,,,
Sol-36837,,,,,,,
Sol-36838,,,,,,,
Sol-36839,,,,,,,
Sol-36840,,,,,,,
Sol-36841,,,,,,,
Sol-36842,,,,,,,
Sol-36843,,,,,,,
Sol-36844,,,,,,,
Sol-36845,,,,,,,
Sol-36846,,,,,,,
Sol-36847,,,,,,,
Sol-36848,,,,,,,
Sol-36849,,,,,,,
Sol-36850,,,,,,,
Sol-36851,,,,,,,
Sol-36852,,,,,,,
Sol-36853,,,,,,,
Sol-36854,,,,,,,
Sol-36855,,,,,,,
Sol-36856,,,,,,,
Sol-36857,,,,,,,
Sol-36858,,,,,,,
Sol-36859,,,,,,,
Sol-36860,,,,,,,
Sol-36861,,,,,,,
Sol-36862,,,,,,,
Sol-36863,,,,,,,
Sol-36864,,,,,,,
Sol-36865,,,,,,,
Sol-36866,,,,,,,
Sol-36867,,,,,,,
Sol-36868,,,,,,,
Sol-36869,,,,,,,
Sol-36870,,,,,,,
Sol-36871,,,,,,,
Sol-36872,,,,,,,
Sol-36873,,,,,,,
Sol-36874,,,,,,,
Sol-36875,,,,,,,
Sol-36876,,,,,,,
Sol-36877,,,,,,,
Sol-36878,,,,,,,
Sol-36879,,,,,,,
Sol-36880,,,,,,,
Sol-36881,,,,,,,
Sol-36882,,,,,,,
Sol-36883,,,,,,,
Sol-36884,,,,,,,
Sol-36885,,,,,,,
Sol-36886,,,,,,,
Sol-36887,,,,,,,
Sol-36888,,,,,,,
Sol-36889,,,,,,,
Sol-36890,,,,,,,
Sol-36891,,,,,,,
Sol-36892,,,,,,,
Sol-36893,,,,,,,
Sol-36894,,,,,,,
Sol-36895,,,,,,,
Sol-36896,,,,,,,
Sol-36897,,,,,,,
Sol-36898,,,,,,,
Sol-36899,,,,,,,
Sol-36900,,,,,,,
Sol-36901,,,,,,,
Sol-36902,,,,,,,
Sol-36903,,,,,,,
Sol-36904,,,,,,,
Sol-36905,,,,,,,
Sol-36906,,,,,,,
Sol-36907,,,,,,,
Sol-36908,,,,,,,
Sol-36909,,,,,,,
Sol-36910,,,,,,,
Sol-36911,,,,,,,
Sol-36912,,,,,,,
Sol-36913,,,,,,,
Sol-36914,,,,,,,
Sol-36915,,,,,,,
Sol-36916,,,,,,,
Sol-36917,,,,,,,
Sol-36918,,,,,,,
Sol-36919,,,,,,,
Sol-36920,,,,,,,
Sol-36921,,,,,,,
Sol-36922,,,,,,,
Sol-36923,,,,,,,
Sol-36924,,,,,,,
Sol-36925,,,,,,,
Sol-36926,,,,,,,
Sol-36927,,,,,,,
Sol-36928,,,,,,,
Sol-36929,,,,,,,
Sol-36930,,,,,,,
Sol-36931,,,,,,,
Sol-36932,,,,,,,
Sol-36933,,,,,,,
Sol-36934,,,,,,,
Sol-36935,,,,,,,
Sol-36936,,,,,,,
Sol-36937,,,,,,,
Sol-36938,,,,,,,
Sol-36939,,,,,,,
Sol-36940,,,,,,,
Sol-36941,,,,,,,
Sol-36942,,,,,,,
Sol-36943,,,,,,,
Sol-36944,,,,,,,
Sol-36945,,,,,,,
Sol-36946,,,,,,,
Sol-36947,,,,,,,
Sol-36948,,,,,,,
Sol-36949,,,,,,,
Sol-36950,,,,,,,
Sol-36951,,,,,,,
Sol-36952,,,,,,,
Sol-36953,,,,,,,
Sol-36954,,,,,,,
Sol-36955,,,,,,,
Sol-36956,,,,,,,
Sol-36957,,,,,,,
Sol-36958,,,,,,,
Sol-36959,,,,,,,
Sol-36960,,,,,,,
Sol-36961,,,,,,,
Sol-36962,,,,,,,
Sol-36963,,,,,,,
Sol-36964,,,,,,,
Sol-36965,,,,,,,
Sol-36966,,,,,,,
Sol-36967,,,,,,,
Sol-36968,,,,,,,
Sol-36969,,,,,,,
Sol-36970,,,,,,,
Sol-36971,,,,,,,
Sol-36972,,,,,,,
Sol-36973,,,,,,,
Sol-36974,,,,,,,
Sol-36975,,,,,,,
Sol-36976,,,,,,,
Sol-36977,,,,,,,
Sol-36978,,,,,,,
Sol-36979,,,,,,,
Sol-36980,,,,,,,
Sol-36981,,,,,,,
Sol-36982,,,,,,,
Sol-36983,,,,,,,
Sol-36984,,,,,,,
Sol-36985,,,,,,,
Sol-36986,,,,,,,
Sol-36987,,,,,,,
Sol-36988,,,,,,,
Sol-36989,,,,,,,
Sol-36990,,,,,,,
Sol-36991,,,,,,,
Sol-36992,,,,,,,
Sol-36993,,,,,,,
Sol-36994,,,,,,,
Sol-36995,,,,,,,
Sol-36996,,,,,,,
Sol-36997,,,,,,,
Sol-36998,,,,,,,
Sol-36999,,,,,,,
Sol-37000,,,,,,,
Sol-37001,,,,,,,
Sol-37002,,,,,,,
Sol-37003,,,,,,,
Sol-37004,,,,,,,
Sol-37005,,,,,,,
Sol-37006,,,,,,,
Sol-37007,,,,,,,
Sol-37008,,,,,,,
Sol-37009,,,,,,,
Sol-37010,,,,,,,
Sol-37011,,,,,,,
Sol-37012,,,,,,,
Sol-37013,,,,,,,
Sol-37014,,,,,,,
Sol-37015,,,,,,,
Sol-37016,,,,,,,
Sol-37017,,,,,,,
Sol-37018,,,,,,,
Sol-37019,,,,,,,
Sol-37020,,,,,,,
Sol-37021,,,,,,,
Sol-37022,,,,,,,
Sol-37023,,,,,,,
Sol-37024,,,,,,,
Sol-37025,,,,,,,
Sol-37026,,,,,,,
Sol-37027,,,,,,,
Sol-37028,,,,,,,
Sol-37029,,,,,,,
Sol-37030,,,,,,,
Sol-37031,,,,,,,
Sol-37032,,,,,,,
Sol-37033,,,,,,,
Sol-37034,,,,,,,
Sol-37035,,,,,,,
Sol-37036,,,,,,,
Sol-37037,,,,,,,
Sol-37038,,,,,,,
Sol-37039,,,,,,,
Sol-37040,,,,,,,
Sol-37041,,,,,,,
Sol-37042,,,,,,,
Sol-37043,,,,,,,
Sol-37044,,,,,,,
Sol-37045,,,,,,,
Sol-37046,,,,,,,
Sol-37047,,,,,,,
Sol-37048,,,,,,,
Sol-37049,,,,,,,
Sol-37050,,,,,,,
Sol-37051,,,,,,,
Sol-37052,,,,,,,
Sol-37053,,,,,,,
Sol-37054,,,,,,,
Sol-37055,,,,,,,
Sol-37056,,,,,,,
Sol-37057,,,,,,,
Sol-37058,,,,,,,
Sol-37059,,,,,,,
Sol-37060,,,,,,,
Sol-37061,,,,,,,
Sol-37062,,,,,,,
Sol-37063,,,,,,,
Sol-37064,,,,,,,
Sol-37065,,,,,,,
Sol-37066,,,,,,,
Sol-37067,,,,,,,
Sol-37068,,,,,,,
Sol-37069,,,,,,,
Sol-37070,,,,,,,
Sol-37071,,,,,,,
Sol-37072,,,,,,,
Sol-37073,,,,,,,
Sol-37074,,,,,,,
Sol-37075,,,,,,,
Sol-37076,,,,,,,
Sol-37077,,,,,,,
Sol-37078,,,,,,,
Sol-37079,,,,,,,
Sol-37080,,,,,,,
Sol-37081,,,,,,,
Sol-37082,,,,,,,
Sol-37083,,,,,,,
Sol-37084,,,,,,,
Sol-37085,,,,,,,
Sol-37086,,,,,,,
Sol-37087,,,,,,,
Sol-37088,,,,,,,
Sol-37089,,,,,,,
Sol-37090,,,,,,,
Sol-37091,,,,,,,
Sol-37092,,,,,,,
Sol-37093,,,,,,,
Sol-37094,,,,,,,
Sol-37095,,,,,,,
Sol-37096,,,,,,,
Sol-37097,,,,,,,
Sol-37098,,,,,,,
Sol-37099,,,,,,,
Sol-37100,,,,,,,
Sol-37101,,,,,,,
Sol-37102,,,,,,,
Sol-37103,,,,,,,
Sol-37104,,,,,,,
Sol-37105,,,,,,,
Sol-37106,,,,,,,
Sol-37107,,,,,,,
Sol-37108,,,,,,,
Sol-37109,,,,,,,
Sol-37110,,,,,,,
Sol-37111,,,,,,,
Sol-37112,,,,,,,
Sol-37113,,,,,,,
Sol-37114,,,,,,,
Sol-37115,,,,,,,
Sol-37116,,,,,,,
Sol-37117,,,,,,,
Sol-37118,,,,,,,
Sol-37119,,,,,,,
Sol-37120,,,,,,,
Sol-37121,,,,,,,
Sol-37122,,,,,,,
Sol-37123,,,,,,,
Sol-37124,,,,,,,
Sol-37125,,,,,,,
Sol-37126,,,,,,,
Sol-37127,,,,,,,
Sol-37128,,,,,,,
Sol-37129,,,,,,,
Sol-37130,,,,,,,
Sol-37131,,,,,,,
Sol-37132,,,,,,,
Sol-37133,,,,,,,
Sol-37134,,,,,,,
Sol-37135,,,,,,,
Sol-37136,,,,,,,
Sol-37137,,,,,,,
Sol-37138,,,,,,,
Sol-37139,,,,,,,
Sol-37140,,,,,,,
Sol-37141,,,,,,,
Sol-37142,,,,,,,
Sol-37143,,,,,,,
Sol-37144,,,,,,,
Sol-37145,,,,,,,
Sol-37146,,,,,,,
Sol-37147,,,,,,,
Sol-37148,,,,,,,
Sol-37149,,,,,,,
Sol-37150,,,,,,,
Sol-37151,,,,,,,
Sol-37152,,,,,,,
Sol-37153,,,,,,,
Sol-37154,,,,,,,
Sol-37155,,,,,,,
Sol-37156,,,,,,,
Sol-37157,,,,,,,
Sol-37158,,,,,,,
Sol-37159,,,,,,,
Sol-37160,,,,,,,
Sol-37161,,,,,,,
Sol-37162,,,,,,,
Sol-37163,,,,,,,
Sol-37164,,,,,,,
Sol-37165,,,,,,,
Sol-37166,,,,,,,
Sol-37167,,,,,,,
Sol-37168,,,,,,,
Sol-37169,,,,,,,
Sol-37170,,,,,,,
Sol-37171,,,,,,,
Sol-37172,,,,,,,
Sol-37173,,,,,,,
Sol-37174,,,,,,,
Sol-37175,,,,,,,
Sol-37176,,,,,,,
Sol-37177,,,,,,,
Sol-37178,,,,,,,
Sol-37179,,,,,,,
Sol-37180,,,,,,,
Sol-37181,,,,,,,
Sol-37182,,,,,,,
Sol-37183,,,,,,,
Sol-37184,,,,,,,
Sol-37185,,,,,,,
Sol-37186,,,,,,,
Sol-37187,,,,,,,
Sol-37188,,,,,,,
Sol-37189,,,,,,,
Sol-37190,,,,,,,
Sol-37191,,,,,,,
Sol-37192,,,,,,,
Sol-37193,,,,,,,
Sol-37194,,,,,,,
Sol-37195,,,,,,,
Sol-37196,,,,,,,
Sol-37197,,,,,,,
Sol-37198,,,,,,,
Sol-37199,,,,,,,
Sol-37200,,,,,,,
Sol-37201,,,,,,,
Sol-37202,,,,,,,
Sol-37203,,,,,,,
Sol-37204,,,,,,,
Sol-37205,,,,,,,
Sol-37206,,,,,,,
Sol-37207,,,,,,,
Sol-37208,,,,,,,
Sol-37209,,,,,,,
Sol-37210,,,,,,,
Sol-37211,,,,,,,
Sol-37212,,,,,,,
Sol-37213,,,,,,,
Sol-37214,,,,,,,
Sol-37215,,,,,,,
Sol-37216,,,,,,,
Sol-37217,,,,,,,
Sol-37218,,,,,,,
Sol-37219,,,,,,,
Sol-37220,,,,,,,
Sol-37221,,,,,,,
Sol-37222,,,,,,,
Sol-37223,,,,,,,
Sol-37224,,,,,,,
Sol-37225,,,,,,,
Sol-37226,,,,,,,
Sol-37227,,,,,,,
Sol-37228,,,,,,,
Sol-37229,,,,,,,
Sol-37230,,,,,,,
Sol-37231,,,,,,,
Sol-37232,,,,,,,
Sol-37233,,,,,,,
Sol-37234,,,,,,,
Sol-37235,,,,,,,
Sol-37236,,,,,,,
Sol-37237,,,,,,,
Sol-37238,,,,,,,
Sol-37239,,,,,,,
Sol-37240,,,,,,,
Sol-37241,,,,,,,
Sol-37242,,,,,,,
Sol-37243,,,,,,,
Sol-37244,,,,,,,
Sol-37245,,,,,,,
Sol-37246,,,,,,,
Sol-37247,,,,,,,
Sol-37248,,,,,,,
Sol-37249,,,,,,,
Sol-37250,,,,,,,
Sol-37251,,,,,,,
Sol-37252,,,,,,,
Sol-37253,,,,,,,
Sol-37254,,,,,,,
Sol-37255,,,,,,,
Sol-37256,,,,,,,
Sol-37257,,,,,,,
Sol-37258,,,,,,,
Sol-37259,,,,,,,
Sol-37260,,,,,,,
Sol-37261,,,,,,,
Sol-37262,,,,,,,
Sol-37263,,,,,,,
Sol-37264,,,,,,,
Sol-37265,,,,,,,
Sol-37266,,,,,,,
Sol-37267,,,,,,,
Sol-37268,,,,,,,
Sol-37269,,,,,,,
Sol-37270,,,,,,,
Sol-37271,,,,,,,
Sol-37272,,,,,,,
Sol-37273,,,,,,,
Sol-37274,,,,,,,
Sol-37275,,,,,,,
Sol-37276,,,,,,,
Sol-37277,,,,,,,
Sol-37278,,,,,,,
Sol-37279,,,,,,,
Sol-37280,,,,,,,
Sol-37281,,,,,,,
Sol-37282,,,,,,,
Sol-37283,,,,,,,
Sol-37284,,,,,,,
Sol-37285,,,,,,,
Sol-37286,,,,,,,
Sol-37287,,,,,,,
Sol-37288,,,,,,,
Sol-37289,,,,,,,
Sol-37290,,,,,,,
Sol-37291,,,,,,,
Sol-37292,,,,,,,
Sol-37293,,,,,,,
Sol-37294,,,,,,,
Sol-37295,,,,,,,
Sol-37296,,,,,,,
Sol-37297,,,,,,,
Sol-37298,,,,,,,
Sol-37299,,,,,,,
Sol-37300,,,,,,,
Sol-37301,,,,,,,
Sol-37302,,,,,,,
Sol-37303,,,,,,,
Sol-37304,,,,,,,
Sol-37305,,,,,,,
Sol-37306,,,,,,,
Sol-37307,,,,,,,
Sol-37308,,,,,,,
Sol-37309,,,,,,,
Sol-37310,,,,,,,
Sol-37311,,,,,,,
Sol-37312,,,,,,,
Sol-37313,,,,,,,
Sol-37314,,,,,,,
Sol-37315,,,,,,,
Sol-37316,,,,,,,
Sol-37317,,,,,,,
Sol-37318,,,,,,,
Sol-37319,,,,,,,
Sol-37320,,,,,,,
Sol-37321,,,,,,,
Sol-37322,,,,,,,
Sol-37323,,,,,,,
Sol-37324,,,,,,,
Sol-37325,,,,,,,
Sol-37326,,,,,,,
Sol-37327,,,,,,,
Sol-37328,,,,,,,
Sol-37329,,,,,,,
Sol-37330,,,,,,,
Sol-37331,,,,,,,
Sol-37332,,,,,,,
Sol-37333,,,,,,,
Sol-37334,,,,,,,
Sol-37335,,,,,,,
Sol-37336,,,,,,,
Sol-37337,,,,,,,
Sol-37338,,,,,,,
Sol-37339,,,,,,,
Sol-37340,,,,,,,
Sol-37341,,,,,,,
Sol-37342,,,,,,,
Sol-37343,,,,,,,
Sol-37344,,,,,,,
Sol-37345,,,,,,,
Sol-37346,,,,,,,
Sol-37347,,,,,,,
Sol-37348,,,,,,,
Sol-37349,,,,,,,
Sol-37350,,,,,,,
Sol-37351,,,,,,,
Sol-37352,,,,,,,
Sol-37353,,,,,,,
Sol-37354,,,,,,,
Sol-37355,,,,,,,
Sol-37356,,,,,,,
Sol-37357,,,,,,,
Sol-37358,,,,,,,
Sol-37359,,,,,,,
Sol-37360,,,,,,,
Sol-37361,,,,,,,
Sol-37362,,,,,,,
Sol-37363,,,,,,,
Sol-37364,,,,,,,
Sol-37365,,,,,,,
Sol-37366,,,,,,,
Sol-37367,,,,,,,
Sol-37368,,,,,,,
Sol-37369,,,,,,,
Sol-37370,,,,,,,
Sol-37371,,,,,,,
Sol-37372,,,,,,,
Sol-37373,,,,,,,
Sol-37374,,,,,,,
Sol-37375,,,,,,,
Sol-37376,,,,,,,
Sol-37377,,,,,,,
Sol-37378,,,,,,,
Sol-37379,,,,,,,
Sol-37380,,,,,,,
Sol-37381,,,,,,,
Sol-37382,,,,,,,
Sol-37383,,,,,,,
Sol-37384,,,,,,,
Sol-37385,,,,,,,
Sol-37386,,,,,,,
Sol-37387,,,,,,,
Sol-37388,,,,,,,
Sol-37389,,,,,,,
Sol-37390,,,,,,,
Sol-37391,,,,,,,
Sol-37392,,,,,,,
Sol-37393,,,,,,,
Sol-37394,,,,,,,
Sol-37395,,,,,,,
Sol-37396,,,,,,,
Sol-37397,,,,,,,
Sol-37398,,,,,,,
Sol-37399,,,,,,,
Sol-37400,,,,,,,
Sol-37401,,,,,,,
Sol-37402,,,,,,,
Sol-37403,,,,,,,
Sol-37404,,,,,,,
Sol-37405,,,,,,,
Sol-37406,,,,,,,
Sol-37407,,,,,,,
Sol-37408,,,,,,,
Sol-37409,,,,,,,
Sol-37410,,,,,,,
Sol-37411,,,,,,,
Sol-37412,,,,,,,
Sol-37413,,,,,,,
Sol-37414,,,,,,,
Sol-37415,,,,,,,
Sol-37416,,,,,,,
Sol-37417,,,,,,,
Sol-37418,,,,,,,
Sol-37419,,,,,,,
Sol-37420,,,,,,,
Sol-37421,,,,,,,
Sol-37422,,,,,,,
Sol-37423,,,,,,,
Sol-37424,,,,,,,
Sol-37425,,,,,,,
Sol-37426,,,,,,,
Sol-37427,,,,,,,
Sol-37428,,,,,,,
Sol-37429,,,,,,,
Sol-37430,,,,,,,
Sol-37431,,,,,,,
Sol-37432,,,,,,,
Sol-37433,,,,,,,
Sol-37434,,,,,,,
Sol-37435,,,,,,,
Sol-37436,,,,,,,
Sol-37437,,,,,,,
Sol-37438,,,,,,,
Sol-37439,,,,,,,
Sol-37440,,,,,,,
Sol-37441,,,,,,,
Sol-37442,,,,,,,
Sol-37443,,,,,,,
Sol-37444,,,,,,,
Sol-37445,,,,,,,
Sol-37446,,,,,,,
Sol-37447,,,,,,,
Sol-37448,,,,,,,
Sol-37449,,,,,,,
Sol-37450,,,,,,,
Sol-37451,,,,,,,
Sol-37452,,,,,,,
Sol-37453,,,,,,,
Sol-37454,,,,,,,
Sol-37455,,,,,,,
Sol-37456,,,,,,,
Sol-37457,,,,,,,
Sol-37458,,,,,,,
Sol-37459,,,,,,,
Sol-37460,,,,,,,
Sol-37461,,,,,,,
Sol-37462,,,,,,,
Sol-37463,,,,,,,
Sol-37464,,,,,,,
Sol-37465,,,,,,,
Sol-37466,,,,,,,
Sol-37467,,,,,,,
Sol-37468,,,,,,,
Sol-37469,,,,,,,
Sol-37470,,,,,,,
Sol-37471,,,,,,,
Sol-37472,,,,,,,
Sol-37473,,,,,,,
Sol-37474,,,,,,,
Sol-37475,,,,,,,
Sol-37476,,,,,,,
Sol-37477,,,,,,,
Sol-37478,,,,,,,
Sol-37479,,,,,,,
Sol-37480,,,,,,,
Sol-37481,,,,,,,
Sol-37482,,,,,,,
Sol-37483,,,,,,,
Sol-37484,,,,,,,
Sol-37485,,,,,,,
Sol-37486,,,,,,,
Sol-37487,,,,,,,
Sol-37488,,,,,,,
Sol-37489,,,,,,,
Sol-37490,,,,,,,
Sol-37491,,,,,,,
Sol-37492,,,,,,,
Sol-37493,,,,,,,
Sol-37494,,,,,,,
Sol-37495,,,,,,,
Sol-37496,,,,,,,
Sol-37497,,,,,,,
Sol-37498,,,,,,,
Sol-37499,,,,,,,
Sol-37500,,,,,,,
Sol-37501,,,,,,,
Sol-37502,,,,,,,
Sol-37503,,,,,,,
Sol-37504,,,,,,,
Sol-37505,,,,,,,
Sol-37506,,,,,,,
Sol-37507,,,,,,,
Sol-37508,,,,,,,
Sol-37509,,,,,,,
Sol-37510,,,,,,,
Sol-37511,,,,,,,
Sol-37512,,,,,,,
Sol-37513,,,,,,,
Sol-37514,,,,,,,
Sol-37515,,,,,,,
Sol-37516,,,,,,,
Sol-37517,,,,,,,
Sol-37518,,,,,,,
Sol-37519,,,,,,,
Sol-37520,,,,,,,
Sol-37521,,,,,,,
Sol-37522,,,,,,,
Sol-37523,,,,,,,
Sol-37524,,,,,,,
Sol-37525,,,,,,,
Sol-37526,,,,,,,
Sol-37527,,,,,,,
Sol-37528,,,,,,,
Sol-37529,,,,,,,
Sol-37530,,,,,,,
Sol-37531,,,,,,,
Sol-37532,,,,,,,
Sol-37533,,,,,,,
Sol-37534,,,,,,,
Sol-37535,,,,,,,
Sol-37536,,,,,,,
Sol-37537,,,,,,,
Sol-37538,,,,,,,
Sol-37539,,,,,,,
Sol-37540,,,,,,,
Sol-37541,,,,,,,
Sol-37542,,,,,,,
Sol-37543,,,,,,,
Sol-37544,,,,,,,
Sol-37545,,,,,,,
Sol-37546,,,,,,,
Sol-37547,,,,,,,
Sol-37548,,,,,,,
Sol-37549,,,,,,,
Sol-37550,,,,,,,
Sol-37551,,,,,,,
Sol-37552,,,,,,,
Sol-37553,,,,,,,
Sol-37554,,,,,,,
Sol-37555,,,,,,,
Sol-37556,,,,,,,
Sol-37557,,,,,,,
Sol-37558,,,,,,,
Sol-37559,,,,,,,
Sol-37560,,,,,,,
Sol-37561,,,,,,,
Sol-37562,,,,,,,
Sol-37563,,,,,,,
Sol-37564,,,,,,,
Sol-37565,,,,,,,
Sol-37566,,,,,,,
Sol-37567,,,,,,,
Sol-37568,,,,,,,
Sol-37569,,,,,,,
Sol-37570,,,,,,,
Sol-37571,,,,,,,
Sol-37572,,,,,,,
Sol-37573,,,,,,,
Sol-37574,,,,,,,
Sol-37575,,,,,,,
Sol-37576,,,,,,,
Sol-37577,,,,,,,
Sol-37578,,,,,,,
Sol-37579,,,,,,,
Sol-37580,,,,,,,
Sol-37581,,,,,,,
Sol-37582,,,,,,,
Sol-37583,,,,,,,
Sol-37584,,,,,,,
Sol-37585,,,,,,,
Sol-37586,,,,,,,
Sol-37587,,,,,,,
Sol-37588,,,,,,,
Sol-37589,,,,,,,
Sol-37590,,,,,,,
Sol-37591,,,,,,,
Sol-37592,,,,,,,
Sol-37593,,,,,,,
Sol-37594,,,,,,,
Sol-37595,,,,,,,
Sol-37596,,,,,,,
Sol-37597,,,,,,,
Sol-37598,,,,,,,
Sol-37599,,,,,,,
Sol-37600,,,,,,,
Sol-37601,,,,,,,
Sol-37602,,,,,,,
Sol-37603,,,,,,,
Sol-37604,,,,,,,
Sol-37605,,,,,,,
Sol-37606,,,,,,,
Sol-37607,,,,,,,
Sol-37608,,,,,,,
Sol-37609,,,,,,,
Sol-37610,,,,,,,
Sol-37611,,,,,,,
Sol-37612,,,,,,,
Sol-37613,,,,,,,
Sol-37614,,,,,,,
Sol-37615,,,,,,,
Sol-37616,,,,,,,
Sol-37617,,,,,,,
Sol-37618,,,,,,,
Sol-37619,,,,,,,
Sol-37620,,,,,,,
Sol-37621,,,,,,,
Sol-37622,,,,,,,
Sol-37623,,,,,,,
Sol-37624,,,,,,,
Sol-37625,,,,,,,
Sol-37626,,,,,,,
Sol-37627,,,,,,,
Sol-37628,,,,,,,
Sol-37629,,,,,,,
Sol-37630,,,,,,,
Sol-37631,,,,,,,
Sol-37632,,,,,,,
Sol-37633,,,,,,,
Sol-37634,,,,,,,
Sol-37635,,,,,,,
Sol-37636,,,,,,,
Sol-37637,,,,,,,
Sol-37638,,,,,,,
Sol-37639,,,,,,,
Sol-37640,,,,,,,
Sol-37641,,,,,,,
Sol-37642,,,,,,,
Sol-37643,,,,,,,
Sol-37644,,,,,,,
Sol-37645,,,,,,,
Sol-37646,,,,,,,
Sol-37647,,,,,,,
Sol-37648,,,,,,,
Sol-37649,,,,,,,
Sol-37650,,,,,,,
Sol-37651,,,,,,,
Sol-37652,,,,,,,
Sol-37653,,,,,,,
Sol-37654,,,,,,,
Sol-37655,,,,,,,
Sol-37656,,,,,,,
Sol-37657,,,,,,,
Sol-37658,,,,,,,
Sol-37659,,,,,,,
Sol-37660,,,,,,,
Sol-37661,,,,,,,
Sol-37662,,,,,,,
Sol-37663,,,,,,,
Sol-37664,,,,,,,
Sol-37665,,,,,,,
Sol-37666,,,,,,,
Sol-37667,,,,,,,
Sol-37668,,,,,,,
Sol-37669,,,,,,,
Sol-37670,,,,,,,
Sol-37671,,,,,,,
Sol-37672,,,,,,,
Sol-37673,,,,,,,
Sol-37674,,,,,,,
Sol-37675,,,,,,,
Sol-37676,,,,,,,
Sol-37677,,,,,,,
Sol-37678,,,,,,,
Sol-37679,,,,,,,
Sol-37680,,,,,,,
Sol-37681,,,,,,,
Sol-37682,,,,,,,
Sol-37683,,,,,,,
Sol-37684,,,,,,,
Sol-37685,,,,,,,
Sol-37686,,,,,,,
Sol-37687,,,,,,,
Sol-37688,,,,,,,
Sol-37689,,,,,,,
Sol-37690,,,,,,,
Sol-37691,,,,,,,
Sol-37692,,,,,,,
Sol-37693,,,,,,,
Sol-37694,,,,,,,
Sol-37695,,,,,,,
Sol-37696,,,,,,,
Sol-37697,,,,,,,
Sol-37698,,,,,,,
Sol-37699,,,,,,,
Sol-37700,,,,,,,
Sol-37701,,,,,,,
Sol-37702,,,,,,,
Sol-37703,,,,,,,
Sol-37704,,,,,,,
Sol-37705,,,,,,,
Sol-37706,,,,,,,
Sol-37707,,,,,,,
Sol-37708,,,,,,,
Sol-37709,,,,,,,
Sol-37710,,,,,,,
Sol-37711,,,,,,,
Sol-37712,,,,,,,
Sol-37713,,,,,,,
Sol-37714,,,,,,,
Sol-37715,,,,,,,
Sol-37716,,,,,,,
Sol-37717,,,,,,,
Sol-37718,,,,,,,
Sol-37719,,,,,,,
Sol-37720,,,,,,,
Sol-37721,,,,,,,
Sol-37722,,,,,,,
Sol-37723,,,,,,,
Sol-37724,,,,,,,
Sol-37725,,,,,,,
Sol-37726,,,,,,,
Sol-37727,,,,,,,
Sol-37728,,,,,,,
Sol-37729,,,,,,,
Sol-37730,,,,,,,
Sol-37731,,,,,,,
Sol-37732,,,,,,,
Sol-37733,,,,,,,
Sol-37734,,,,,,,
Sol-37735,,,,,,,
Sol-37736,,,,,,,
Sol-37737,,,,,,,
Sol-37738,,,,,,,
Sol-37739,,,,,,,
Sol-37740,,,,,,,
Sol-37741,,,,,,,
Sol-37742,,,,,,,
Sol-37743,,,,,,,
Sol-37744,,,,,,,
Sol-37745,,,,,,,
Sol-37746,,,,,,,
Sol-37747,,,,,,,
Sol-37748,,,,,,,
Sol-37749,,,,,,,
Sol-37750,,,,,,,
Sol-37751,,,,,,,
Sol-37752,,,,,,,
Sol-37753,,,,,,,
Sol-37754,,,,,,,
Sol-37755,,,,,,,
Sol-37756,,,,,,,
Sol-37757,,,,,,,
Sol-37758,,,,,,,
Sol-37759,,,,,,,
Sol-37760,,,,,,,
Sol-37761,,,,,,,
Sol-37762,,,,,,,
Sol-37763,,,,,,,
Sol-37764,,,,,,,
Sol-37765,,,,,,,
Sol-37766,,,,,,,
Sol-37767,,,,,,,
Sol-37768,,,,,,,
Sol-37769,,,,,,,
Sol-37770,,,,,,,
Sol-37771,,,,,,,
Sol-37772,,,,,,,
Sol-37773,,,,,,,
Sol-37774,,,,,,,
Sol-37775,,,,,,,
Sol-37776,,,,,,,
Sol-37777,,,,,,,
Sol-37778,,,,,,,
Sol-37779,,,,,,,
Sol-37780,,,,,,,
Sol-37781,,,,,,,
Sol-37782,,,,,,,
Sol-37783,,,,,,,
Sol-37784,,,,,,,
Sol-37785,,,,,,,
Sol-37786,,,,,,,
Sol-37787,,,,,,,
Sol-37788,,,,,,,
Sol-37789,,,,,,,
Sol-37790,,,,,,,
Sol-37791,,,,,,,
Sol-37792,,,,,,,
Sol-37793,,,,,,,
Sol-37794,,,,,,,
Sol-37795,,,,,,,
Sol-37796,,,,,,,
Sol-37797,,,,,,,
Sol-37798,,,,,,,
Sol-37799,,,,,,,
Sol-37800,,,,,,,
Sol-37801,,,,,,,
Sol-37802,,,,,,,
Sol-37803,,,,,,,
Sol-37804,,,,,,,
Sol-37805,,,,,,,
Sol-37806,,,,,,,
Sol-37807,,,,,,,
Sol-37808,,,,,,,
Sol-37809,,,,,,,
Sol-37810,,,,,,,
Sol-37811,,,,,,,
Sol-37812,,,,,,,
Sol-37813,,,,,,,
Sol-37814,,,,,,,
Sol-37815,,,,,,,
Sol-37816,,,,,,,
Sol-37817,,,,,,,
Sol-37818,,,,,,,
Sol-37819,,,,,,,
Sol-37820,,,,,,,
Sol-37821,,,,,,,
Sol-37822,,,,,,,
Sol-37823,,,,,,,
Sol-37824,,,,,,,
Sol-37825,,,,,,,
Sol-37826,,,,,,,
Sol-37827,,,,,,,
Sol-37828,,,,,,,
Sol-37829,,,,,,,
Sol-37830,,,,,,,
Sol-37831,,,,,,,
Sol-37832,,,,,,,
Sol-37833,,,,,,,
Sol-37834,,,,,,,
Sol-37835,,,,,,,
Sol-37836,,,,,,,
Sol-37837,,,,,,,
Sol-37838,,,,,,,
Sol-37839,,,,,,,
Sol-37840,,,,,,,
Sol-37841,,,,,,,
Sol-37842,,,,,,,
Sol-37843,,,,,,,
Sol-37844,,,,,,,
Sol-37845,,,,,,,
Sol-37846,,,,,,,
Sol-37847,,,,,,,
Sol-37848,,,,,,,
Sol-37849,,,,,,,
Sol-37850,,,,,,,
Sol-37851,,,,,,,
Sol-37852,,,,,,,
Sol-37853,,,,,,,
Sol-37854,,,,,,,
Sol-37855,,,,,,,
Sol-37856,,,,,,,
Sol-37857,,,,,,,
Sol-37858,,,,,,,
Sol-37859,,,,,,,
Sol-37860,,,,,,,
Sol-37861,,,,,,,
Sol-37862,,,,,,,
Sol-37863,,,,,,,
Sol-37864,,,,,,,
Sol-37865,,,,,,,
Sol-37866,,,,,,,
Sol-37867,,,,,,,
Sol-37868,,,,,,,
Sol-37869,,,,,,,
Sol-37870,,,,,,,
Sol-37871,,,,,,,
Sol-37872,,,,,,,
Sol-37873,,,,,,,
Sol-37874,,,,,,,
Sol-37875,,,,,,,
Sol-37876,,,,,,,
Sol-37877,,,,,,,
Sol-37878,,,,,,,
Sol-37879,,,,,,,
Sol-37880,,,,,,,
Sol-37881,,,,,,,
Sol-37882,,,,,,,
Sol-37883,,,,,,,
Sol-37884,,,,,,,
Sol-37885,,,,,,,
Sol-37886,,,,,,,
Sol-37887,,,,,,,
Sol-37888,,,,,,,
Sol-37889,,,,,,,
Sol-37890,,,,,,,
Sol-37891,,,,,,,
Sol-37892,,,,,,,
Sol-37893,,,,,,,
Sol-37894,,,,,,,
Sol-37895,,,,,,,
Sol-37896,,,,,,,
Sol-37897,,,,,,,
Sol-37898,,,,,,,
Sol-37899,,,,,,,
Sol-37900,,,,,,,
Sol-37901,,,,,,,
Sol-37902,,,,,,,
Sol-37903,,,,,,,
Sol-37904,,,,,,,
Sol-37905,,,,,,,
Sol-37906,,,,,,,
Sol-37907,,,,,,,
Sol-37908,,,,,,,
Sol-37909,,,,,,,
Sol-37910,,,,,,,
Sol-37911,,,,,,,
Sol-37912,,,,,,,
Sol-37913,,,,,,,
Sol-37914,,,,,,,
Sol-37915,,,,,,,
Sol-37916,,,,,,,
Sol-37917,,,,,,,
Sol-37918,,,,,,,
Sol-37919,,,,,,,
Sol-37920,,,,,,,
Sol-37921,,,,,,,
Sol-37922,,,,,,,
Sol-37923,,,,,,,
Sol-37924,,,,,,,
Sol-37925,,,,,,,
Sol-37926,,,,,,,
Sol-37927,,,,,,,
Sol-37928,,,,,,,
Sol-37929,,,,,,,
Sol-37930,,,,,,,
Sol-37931,,,,,,,
Sol-37932,,,,,,,
Sol-37933,,,,,,,
Sol-37934,,,,,,,
Sol-37935,,,,,,,
Sol-37936,,,,,,,
Sol-37937,,,,,,,
Sol-37938,,,,,,,
Sol-37939,,,,,,,
Sol-37940,,,,,,,
Sol-37941,,,,,,,
Sol-37942,,,,,,,
Sol-37943,,,,,,,
Sol-37944,,,,,,,
Sol-37945,,,,,,,
Sol-37946,,,,,,,
Sol-37947,,,,,,,
Sol-37948,,,,,,,
Sol-37949,,,,,,,
Sol-37950,,,,,,,
Sol-37951,,,,,,,
Sol-37952,,,,,,,
Sol-37953,,,,,,,
Sol-37954,,,,,,,
Sol-37955,,,,,,,
Sol-37956,,,,,,,
Sol-37957,,,,,,,
Sol-37958,,,,,,,
Sol-37959,,,,,,,
Sol-37960,,,,,,,
Sol-37961,,,,,,,
Sol-37962,,,,,,,
Sol-37963,,,,,,,
Sol-37964,,,,,,,
Sol-37965,,,,,,,
Sol-37966,,,,,,,
Sol-37967,,,,,,,
Sol-37968,,,,,,,
Sol-37969,,,,,,,
Sol-37970,,,,,,,
Sol-37971,,,,,,,
Sol-37972,,,,,,,
Sol-37973,,,,,,,
Sol-37974,,,,,,,
Sol-37975,,,,,,,
Sol-37976,,,,,,,
Sol-37977,,,,,,,
Sol-37978,,,,,,,
Sol-37979,,,,,,,
Sol-37980,,,,,,,
Sol-37981,,,,,,,
Sol-37982,,,,,,,
Sol-37983,,,,,,,
Sol-37984,,,,,,,
Sol-37985,,,,,,,
Sol-37986,,,,,,,
Sol-37987,,,,,,,
Sol-37988,,,,,,,
Sol-37989,,,,,,,
Sol-37990,,,,,,,
Sol-37991,,,,,,,
Sol-37992,,,,,,,
Sol-37993,,,,,,,
Sol-37994,,,,,,,
Sol-37995,,,,,,,
Sol-37996,,,,,,,
Sol-37997,,,,,,,
Sol-37998,,,,,,,
Sol-37999,,,,,,,
Sol-38000,,,,,,,
Sol-38001,,,,,,,
Sol-38002,,,,,,,
Sol-38003,,,,,,,
Sol-38004,,,,,,,
Sol-38005,,,,,,,
Sol-38006,,,,,,,
Sol-38007,,,,,,,
Sol-38008,,,,,,,
Sol-38009,,,,,,,
Sol-38010,,,,,,,
Sol-38011,,,,,,,
Sol-38012,,,,,,,
Sol-38013,,,,,,,
Sol-38014,,,,,,,
Sol-38015,,,,,,,
Sol-38016,,,,,,,
Sol-38017,,,,,,,
Sol-38018,,,,,,,
Sol-38019,,,,,,,
Sol-38020,,,,,,,
Sol-38021,,,,,,,
Sol-38022,,,,,,,
Sol-38023,,,,,,,
Sol-38024,,,,,,,
Sol-38025,,,,,,,
Sol-38026,,,,,,,
Sol-38027,,,,,,,
Sol-38028,,,,,,,
Sol-38029,,,,,,,
Sol-38030,,,,,,,
Sol-38031,,,,,,,
Sol-38032,,,,,,,
Sol-38033,,,,,,,
Sol-38034,,,,,,,
Sol-38035,,,,,,,
Sol-38036,,,,,,,
Sol-38037,,,,,,,
Sol-38038,,,,,,,
Sol-38039,,,,,,,
Sol-38040,,,,,,,
Sol-38041,,,,,,,
Sol-38042,,,,,,,
Sol-38043,,,,,,,
Sol-38044,,,,,,,
Sol-38045,,,,,,,
Sol-38046,,,,,,,
Sol-38047,,,,,,,
Sol-38048,,,,,,,
Sol-38049,,,,,,,
Sol-38050,,,,,,,
Sol-38051,,,,,,,
Sol-38052,,,,,,,
Sol-38053,,,,,,,
Sol-38054,,,,,,,
Sol-38055,,,,,,,
Sol-38056,,,,,,,
Sol-38057,,,,,,,
Sol-38058,,,,,,,
Sol-38059,,,,,,,
Sol-38060,,,,,,,
Sol-38061,,,,,,,
Sol-38062,,,,,,,
Sol-38063,,,,,,,
Sol-38064,,,,,,,
Sol-38065,,,,,,,
Sol-38066,,,,,,,
Sol-38067,,,,,,,
Sol-38068,,,,,,,
Sol-38069,,,,,,,
Sol-38070,,,,,,,
Sol-38071,,,,,,,
Sol-38072,,,,,,,
Sol-38073,,,,,,,
Sol-38074,,,,,,,
Sol-38075,,,,,,,
Sol-38076,,,,,,,
Sol-38077,,,,,,,
Sol-38078,,,,,,,
Sol-38079,,,,,,,
Sol-38080,,,,,,,
Sol-38081,,,,,,,
Sol-38082,,,,,,,
Sol-38083,,,,,,,
Sol-38084,,,,,,,
Sol-38085,,,,,,,
Sol-38086,,,,,,,
Sol-38087,,,,,,,
Sol-38088,,,,,,,
Sol-38089,,,,,,,
Sol-38090,,,,,,,
Sol-38091,,,,,,,
Sol-38092,,,,,,,
Sol-38093,,,,,,,
Sol-38094,,,,,,,
Sol-38095,,,,,,,
Sol-38096,,,,,,,
Sol-38097,,,,,,,
Sol-38098,,,,,,,
Sol-38099,,,,,,,
Sol-38100,,,,,,,
Sol-38101,,,,,,,
Sol-38102,,,,,,,
Sol-38103,,,,,,,
Sol-38104,,,,,,,
Sol-38105,,,,,,,
Sol-38106,,,,,,,
Sol-38107,,,,,,,
Sol-38108,,,,,,,
Sol-38109,,,,,,,
Sol-38110,,,,,,,
Sol-38111,,,,,,,
Sol-38112,,,,,,,
Sol-38113,,,,,,,
Sol-38114,,,,,,,
Sol-38115,,,,,,,
Sol-38116,,,,,,,
Sol-38117,,,,,,,
Sol-38118,,,,,,,
Sol-38119,,,,,,,
Sol-38120,,,,,,,
Sol-38121,,,,,,,
Sol-38122,,,,,,,
Sol-38123,,,,,,,
Sol-38124,,,,,,,
Sol-38125,,,,,,,
Sol-38126,,,,,,,
Sol-38127,,,,,,,
Sol-38128,,,,,,,
Sol-38129,,,,,,,
Sol-38130,,,,,,,
Sol-38131,,,,,,,
Sol-38132,,,,,,,
Sol-38133,,,,,,,
Sol-38134,,,,,,,
Sol-38135,,,,,,,
Sol-38136,,,,,,,
Sol-38137,,,,,,,
Sol-38138,,,,,,,
Sol-38139,,,,,,,
Sol-38140,,,,,,,
Sol-38141,,,,,,,
Sol-38142,,,,,,,
Sol-38143,,,,,,,
Sol-38144,,,,,,,
Sol-38145,,,,,,,
Sol-38146,,,,,,,
Sol-38147,,,,,,,
Sol-38148,,,,,,,
Sol-38149,,,,,,,
Sol-38150,,,,,,,
Sol-38151,,,,,,,
Sol-38152,,,,,,,
Sol-38153,,,,,,,
Sol-38154,,,,,,,
Sol-38155,,,,,,,
Sol-38156,,,,,,,
Sol-38157,,,,,,,
Sol-38158,,,,,,,
Sol-38159,,,,,,,
Sol-38160,,,,,,,
Sol-38161,,,,,,,
Sol-38162,,,,,,,
Sol-38163,,,,,,,
Sol-38164,,,,,,,
Sol-38165,,,,,,,
Sol-38166,,,,,,,
Sol-38167,,,,,,,
Sol-38168,,,,,,,
Sol-38169,,,,,,,
Sol-38170,,,,,,,
Sol-38171,,,,,,,
Sol-38172,,,,,,,
Sol-38173,,,,,,,
Sol-38174,,,,,,,
Sol-38175,,,,,,,
Sol-38176,,,,,,,
Sol-38177,,,,,,,
Sol-38178,,,,,,,
Sol-38179,,,,,,,
Sol-38180,,,,,,,
Sol-38181,,,,,,,
Sol-38182,,,,,,,
Sol-38183,,,,,,,
Sol-38184,,,,,,,
Sol-38185,,,,,,,
Sol-38186,,,,,,,
Sol-38187,,,,,,,
Sol-38188,,,,,,,
Sol-38189,,,,,,,
Sol-38190,,,,,,,
Sol-38191,,,,,,,
Sol-38192,,,,,,,
Sol-38193,,,,,,,
Sol-38194,,,,,,,
Sol-38195,,,,,,,
Sol-38196,,,,,,,
Sol-38197,,,,,,,
Sol-38198,,,,,,,
Sol-38199,,,,,,,
Sol-38200,,,,,,,
Sol-38201,,,,,,,
Sol-38202,,,,,,,
Sol-38203,,,,,,,
Sol-38204,,,,,,,
Sol-38205,,,,,,,
Sol-38206,,,,,,,
Sol-38207,,,,,,,
Sol-38208,,,,,,,
Sol-38209,,,,,,,
Sol-38210,,,,,,,
Sol-38211,,,,,,,
Sol-38212,,,,,,,
Sol-38213,,,,,,,
Sol-38214,,,,,,,
Sol-38215,,,,,,,
Sol-38216,,,,,,,
Sol-38217,,,,,,,
Sol-38218,,,,,,,
Sol-38219,,,,,,,
Sol-38220,,,,,,,
Sol-38221,,,,,,,
Sol-38222,,,,,,,
Sol-38223,,,,,,,
Sol-38224,,,,,,,
Sol-38225,,,,,,,
Sol-38226,,,,,,,
Sol-38227,,,,,,,
Sol-38228,,,,,,,
Sol-38229,,,,,,,
Sol-38230,,,,,,,
Sol-38231,,,,,,,
Sol-38232,,,,,,,
Sol-38233,,,,,,,
Sol-38234,,,,,,,
Sol-38235,,,,,,,
Sol-38236,,,,,,,
Sol-38237,,,,,,,
Sol-38238,,,,,,,
Sol-38239,,,,,,,
Sol-38240,,,,,,,
Sol-38241,,,,,,,
Sol-38242,,,,,,,
Sol-38243,,,,,,,
Sol-38244,,,,,,,
Sol-38245,,,,,,,
Sol-38246,,,,,,,
Sol-38247,,,,,,,
Sol-38248,,,,,,,
Sol-38249,,,,,,,
Sol-38250,,,,,,,
Sol-38251,,,,,,,
Sol-38252,,,,,,,
Sol-38253,,,,,,,
Sol-38254,,,,,,,
Sol-38255,,,,,,,
Sol-38256,,,,,,,
Sol-38257,,,,,,,
Sol-38258,,,,,,,
Sol-38259,,,,,,,
Sol-38260,,,,,,,
Sol-38261,,,,,,,
Sol-38262,,,,,,,
Sol-38263,,,,,,,
Sol-38264,,,,,,,
Sol-38265,,,,,,,
Sol-38266,,,,,,,
Sol-38267,,,,,,,
Sol-38268,,,,,,,
Sol-38269,,,,,,,
Sol-38270,,,,,,,
Sol-38271,,,,,,,
Sol-38272,,,,,,,
Sol-38273,,,,,,,
Sol-38274,,,,,,,
Sol-38275,,,,,,,
Sol-38276,,,,,,,
Sol-38277,,,,,,,
Sol-38278,,,,,,,
Sol-38279,,,,,,,
Sol-38280,,,,,,,
Sol-38281,,,,,,,
Sol-38282,,,,,,,
Sol-38283,,,,,,,
Sol-38284,,,,,,,
Sol-38285,,,,,,,
Sol-38286,,,,,,,
Sol-38287,,,,,,,
Sol-38288,,,,,,,
Sol-38289,,,,,,,
Sol-38290,,,,,,,
Sol-38291,,,,,,,
Sol-38292,,,,,,,
Sol-38293,,,,,,,
Sol-38294,,,,,,,
Sol-38295,,,,,,,
Sol-38296,,,,,,,
Sol-38297,,,,,,,
Sol-38298,,,,,,,
Sol-38299,,,,,,,
Sol-38300,,,,,,,
Sol-38301,,,,,,,
Sol-38302,,,,,,,
Sol-38303,,,,,,,
Sol-38304,,,,,,,
Sol-38305,,,,,,,
Sol-38306,,,,,,,
Sol-38307,,,,,,,
Sol-38308,,,,,,,
Sol-38309,,,,,,,
Sol-38310,,,,,,,
Sol-38311,,,,,,,
Sol-38312,,,,,,,
Sol-38313,,,,,,,
Sol-38314,,,,,,,
Sol-38315,,,,,,,
Sol-38316,,,,,,,
Sol-38317,,,,,,,
Sol-38318,,,,,,,
Sol-38319,,,,,,,
Sol-38320,,,,,,,
Sol-38321,,,,,,,
Sol-38322,,,,,,,
Sol-38323,,,,,,,
Sol-38324,,,,,,,
Sol-38325,,,,,,,
Sol-38326,,,,,,,
Sol-38327,,,,,,,
Sol-38328,,,,,,,
Sol-38329,,,,,,,
Sol-38330,,,,,,,
Sol-38331,,,,,,,
Sol-38332,,,,,,,
Sol-38333,,,,,,,
Sol-38334,,,,,,,
Sol-38335,,,,,,,
Sol-38336,,,,,,,
Sol-38337,,,,,,,
Sol-38338,,,,,,,
Sol-38339,,,,,,,
Sol-38340,,,,,,,
Sol-38341,,,,,,,
Sol-38342,,,,,,,
Sol-38343,,,,,,,
Sol-38344,,,,,,,
Sol-38345,,,,,,,
Sol-38346,,,,,,,
Sol-38347,,,,,,,
Sol-38348,,,,,,,
Sol-38349,,,,,,,
Sol-38350,,,,,,,
Sol-38351,,,,,,,
Sol-38352,,,,,,,
Sol-38353,,,,,,,
Sol-38354,,,,,,,
Sol-38355,,,,,,,
Sol-38356,,,,,,,
Sol-38357,,,,,,,
Sol-38358,,,,,,,
Sol-38359,,,,,,,
Sol-38360,,,,,,,
Sol-38361,,,,,,,
Sol-38362,,,,,,,
Sol-38363,,,,,,,
Sol-38364,,,,,,,
Sol-38365,,,,,,,
Sol-38366,,,,,,,
Sol-38367,,,,,,,
Sol-38368,,,,,,,
Sol-38369,,,,,,,
Sol-38370,,,,,,,
Sol-38371,,,,,,,
Sol-38372,,,,,,,
Sol-38373,,,,,,,
Sol-38374,,,,,,,
Sol-38375,,,,,,,
Sol-38376,,,,,,,
Sol-38377,,,,,,,
Sol-38378,,,,,,,
Sol-38379,,,,,,,
Sol-38380,,,,,,,
Sol-38381,,,,,,,
Sol-38382,,,,,,,
Sol-38383,,,,,,,
Sol-38384,,,,,,,
Sol-38385,,,,,,,
Sol-38386,,,,,,,
Sol-38387,,,,,,,
Sol-38388,,,,,,,
Sol-38389,,,,,,,
Sol-38390,,,,,,,
Sol-38391,,,,,,,
Sol-38392,,,,,,,
Sol-38393,,,,,,,
Sol-38394,,,,,,,
Sol-38395,,,,,,,
Sol-38396,,,,,,,
Sol-38397,,,,,,,
Sol-38398,,,,,,,
Sol-38399,,,,,,,
Sol-38400,,,,,,,
Sol-38401,,,,,,,
Sol-38402,,,,,,,
Sol-38403,,,,,,,
Sol-38404,,,,,,,
Sol-38405,,,,,,,
Sol-38406,,,,,,,
Sol-38407,,,,,,,
Sol-38408,,,,,,,
Sol-38409,,,,,,,
Sol-38410,,,,,,,
Sol-38411,,,,,,,
Sol-38412,,,,,,,
Sol-38413,,,,,,,
Sol-38414,,,,,,,
Sol-38415,,,,,,,
Sol-38416,,,,,,,
Sol-38417,,,,,,,
Sol-38418,,,,,,,
Sol-38419,,,,,,,
Sol-38420,,,,,,,
Sol-38421,,,,,,,
Sol-38422,,,,,,,
Sol-38423,,,,,,,
Sol-38424,,,,,,,
Sol-38425,,,,,,,
Sol-38426,,,,,,,
Sol-38427,,,,,,,
Sol-38428,,,,,,,
Sol-38429,,,,,,,
Sol-38430,,,,,,,
Sol-38431,,,,,,,
Sol-38432,,,,,,,
Sol-38433,,,,,,,
Sol-38434,,,,,,,
Sol-38435,,,,,,,
Sol-38436,,,,,,,
Sol-38437,,,,,,,
Sol-38438,,,,,,,
Sol-38439,,,,,,,
Sol-38440,,,,,,,
Sol-38441,,,,,,,
Sol-38442,,,,,,,
Sol-38443,,,,,,,
Sol-38444,,,,,,,
Sol-38445,,,,,,,
Sol-38446,,,,,,,
Sol-38447,,,,,,,
Sol-38448,,,,,,,
Sol-38449,,,,,,,
Sol-38450,,,,,,,
Sol-38451,,,,,,,
Sol-38452,,,,,,,
Sol-38453,,,,,,,
Sol-38454,,,,,,,
Sol-38455,,,,,,,
Sol-38456,,,,,,,
Sol-38457,,,,,,,
Sol-38458,,,,,,,
Sol-38459,,,,,,,
Sol-38460,,,,,,,
Sol-38461,,,,,,,
Sol-38462,,,,,,,
Sol-38463,,,,,,,
Sol-38464,,,,,,,
Sol-38465,,,,,,,
Sol-38466,,,,,,,
Sol-38467,,,,,,,
Sol-38468,,,,,,,
Sol-38469,,,,,,,
Sol-38470,,,,,,,
Sol-38471,,,,,,,
Sol-38472,,,,,,,
Sol-38473,,,,,,,
Sol-38474,,,,,,,
Sol-38475,,,,,,,
Sol-38476,,,,,,,
Sol-38477,,,,,,,
Sol-38478,,,,,,,
Sol-38479,,,,,,,
Sol-38480,,,,,,,
Sol-38481,,,,,,,
Sol-38482,,,,,,,
Sol-38483,,,,,,,
Sol-38484,,,,,,,
Sol-38485,,,,,,,
Sol-38486,,,,,,,
Sol-38487,,,,,,,
Sol-38488,,,,,,,
Sol-38489,,,,,,,
Sol-38490,,,,,,,
Sol-38491,,,,,,,
Sol-38492,,,,,,,
Sol-38493,,,,,,,
Sol-38494,,,,,,,
Sol-38495,,,,,,,
Sol-38496,,,,,,,
Sol-38497,,,,,,,
Sol-38498,,,,,,,
Sol-38499,,,,,,,
Sol-38500,,,,,,,
Sol-38501,,,,,,,
Sol-38502,,,,,,,
Sol-38503,,,,,,,
Sol-38504,,,,,,,
Sol-38505,,,,,,,
Sol-38506,,,,,,,
Sol-38507,,,,,,,
Sol-38508,,,,,,,
Sol-38509,,,,,,,
Sol-38510,,,,,,,
Sol-38511,,,,,,,
Sol-38512,,,,,,,
Sol-38513,,,,,,,
Sol-38514,,,,,,,
Sol-38515,,,,,,,
Sol-38516,,,,,,,
Sol-38517,,,,,,,
Sol-38518,,,,,,,
Sol-38519,,,,,,,
Sol-38520,,,,,,,
Sol-38521,,,,,,,
Sol-38522,,,,,,,
Sol-38523,,,,,,,
Sol-38524,,,,,,,
Sol-38525,,,,,,,
Sol-38526,,,,,,,
Sol-38527,,,,,,,
Sol-38528,,,,,,,
Sol-38529,,,,,,,
Sol-38530,,,,,,,
Sol-38531,,,,,,,
Sol-38532,,,,,,,
Sol-38533,,,,,,,
Sol-38534,,,,,,,
Sol-38535,,,,,,,
Sol-38536,,,,,,,
Sol-38537,,,,,,,
Sol-38538,,,,,,,
Sol-38539,,,,,,,
Sol-38540,,,,,,,
Sol-38541,,,,,,,
Sol-38542,,,,,,,
Sol-38543,,,,,,,
Sol-38544,,,,,,,
Sol-38545,,,,,,,
Sol-38546,,,,,,,
Sol-38547,,,,,,,
Sol-38548,,,,,,,
Sol-38549,,,,,,,
Sol-38550,,,,,,,
Sol-38551,,,,,,,
Sol-38552,,,,,,,
Sol-38553,,,,,,,
Sol-38554,,,,,,,
Sol-38555,,,,,,,
Sol-38556,,,,,,,
Sol-38557,,,,,,,
Sol-38558,,,,,,,
Sol-38559,,,,,,,
Sol-38560,,,,,,,
Sol-38561,,,,,,,
Sol-38562,,,,,,,
Sol-38563,,,,,,,
Sol-38564,,,,,,,
Sol-38565,,,,,,,
Sol-38566,,,,,,,
Sol-38567,,,,,,,
Sol-38568,,,,,,,
Sol-38569,,,,,,,
Sol-38570,,,,,,,
Sol-38571,,,,,,,
Sol-38572,,,,,,,
Sol-38573,,,,,,,
Sol-38574,,,,,,,
Sol-38575,,,,,,,
Sol-38576,,,,,,,
Sol-38577,,,,,,,
Sol-38578,,,,,,,
Sol-38579,,,,,,,
Sol-38580,,,,,,,
Sol-38581,,,,,,,
Sol-38582,,,,,,,
Sol-38583,,,,,,,
Sol-38584,,,,,,,
Sol-38585,,,,,,,
Sol-38586,,,,,,,
Sol-38587,,,,,,,
Sol-38588,,,,,,,
Sol-38589,,,,,,,
Sol-38590,,,,,,,
Sol-38591,,,,,,,
Sol-38592,,,,,,,
Sol-38593,,,,,,,
Sol-38594,,,,,,,
Sol-38595,,,,,,,
Sol-38596,,,,,,,
Sol-38597,,,,,,,
Sol-38598,,,,,,,
Sol-38599,,,,,,,
Sol-38600,,,,,,,
Sol-38601,,,,,,,
Sol-38602,,,,,,,
Sol-38603,,,,,,,
Sol-38604,,,,,,,
Sol-38605,,,,,,,
Sol-38606,,,,,,,
Sol-38607,,,,,,,
Sol-38608,,,,,,,
Sol-38609,,,,,,,
Sol-38610,,,,,,,
Sol-38611,,,,,,,
Sol-38612,,,,,,,
Sol-38613,,,,,,,
Sol-38614,,,,,,,
Sol-38615,,,,,,,
Sol-38616,,,,,,,
Sol-38617,,,,,,,
Sol-38618,,,,,,,
Sol-38619,,,,,,,
Sol-38620,,,,,,,
Sol-38621,,,,,,,
Sol-38622,,,,,,,
Sol-38623,,,,,,,
Sol-38624,,,,,,,
Sol-38625,,,,,,,
Sol-38626,,,,,,,
Sol-38627,,,,,,,
Sol-38628,,,,,,,
Sol-38629,,,,,,,
Sol-38630,,,,,,,
Sol-38631,,,,,,,
Sol-38632,,,,,,,
Sol-38633,,,,,,,
Sol-38634,,,,,,,
Sol-38635,,,,,,,
Sol-38636,,,,,,,
Sol-38637,,,,,,,
Sol-38638,,,,,,,
Sol-38639,,,,,,,
Sol-38640,,,,,,,
Sol-38641,,,,,,,
Sol-38642,,,,,,,
Sol-38643,,,,,,,
Sol-38644,,,,,,,
Sol-38645,,,,,,,
Sol-38646,,,,,,,
Sol-38647,,,,,,,
Sol-38648,,,,,,,
Sol-38649,,,,,,,
Sol-38650,,,,,,,
Sol-38651,,,,,,,
Sol-38652,,,,,,,
Sol-38653,,,,,,,
Sol-38654,,,,,,,
Sol-38655,,,,,,,
Sol-38656,,,,,,,
Sol-38657,,,,,,,
Sol-38658,,,,,,,
Sol-38659,,,,,,,
Sol-38660,,,,,,,
Sol-38661,,,,,,,
Sol-38662,,,,,,,
Sol-38663,,,,,,,
Sol-38664,,,,,,,
Sol-38665,,,,,,,
Sol-38666,,,,,,,
Sol-38667,,,,,,,
Sol-38668,,,,,,,
Sol-38669,,,,,,,
Sol-38670,,,,,,,
Sol-38671,,,,,,,
Sol-38672,,,,,,,
Sol-38673,,,,,,,
Sol-38674,,,,,,,
Sol-38675,,,,,,,
Sol-38676,,,,,,,
Sol-38677,,,,,,,
Sol-38678,,,,,,,
Sol-38679,,,,,,,
Sol-38680,,,,,,,
Sol-38681,,,,,,,
Sol-38682,,,,,,,
Sol-38683,,,,,,,
Sol-38684,,,,,,,
Sol-38685,,,,,,,
Sol-38686,,,,,,,
Sol-38687,,,,,,,
Sol-38688,,,,,,,
Sol-38689,,,,,,,
Sol-38690,,,,,,,
Sol-38691,,,,,,,
Sol-38692,,,,,,,
Sol-38693,,,,,,,
Sol-38694,,,,,,,
Sol-38695,,,,,,,
Sol-38696,,,,,,,
Sol-38697,,,,,,,
Sol-38698,,,,,,,
Sol-38699,,,,,,,
Sol-38700,,,,,,,
Sol-38701,,,,,,,
Sol-38702,,,,,,,
Sol-38703,,,,,,,
Sol-38704,,,,,,,
Sol-38705,,,,,,,
Sol-38706,,,,,,,
Sol-38707,,,,,,,
Sol-38708,,,,,,,
Sol-38709,,,,,,,
Sol-38710,,,,,,,
Sol-38711,,,,,,,
Sol-38712,,,,,,,
Sol-38713,,,,,,,
Sol-38714,,,,,,,
Sol-38715,,,,,,,
Sol-38716,,,,,,,
Sol-38717,,,,,,,
Sol-38718,,,,,,,
Sol-38719,,,,,,,
Sol-38720,,,,,,,
Sol-38721,,,,,,,
Sol-38722,,,,,,,
Sol-38723,,,,,,,
Sol-38724,,,,,,,
Sol-38725,,,,,,,
Sol-38726,,,,,,,
Sol-38727,,,,,,,
Sol-38728,,,,,,,
Sol-38729,,,,,,,
Sol-38730,,,,,,,
Sol-38731,,,,,,,
Sol-38732,,,,,,,
Sol-38733,,,,,,,
Sol-38734,,,,,,,
Sol-38735,,,,,,,
Sol-38736,,,,,,,
Sol-38737,,,,,,,
Sol-38738,,,,,,,
Sol-38739,,,,,,,
Sol-38740,,,,,,,
Sol-38741,,,,,,,
Sol-38742,,,,,,,
Sol-38743,,,,,,,
Sol-38744,,,,,,,
Sol-38745,,,,,,,
Sol-38746,,,,,,,
Sol-38747,,,,,,,
Sol-38748,,,,,,,
Sol-38749,,,,,,,
Sol-38750,,,,,,,
Sol-38751,,,,,,,
Sol-38752,,,,,,,
Sol-38753,,,,,,,
Sol-38754,,,,,,,
Sol-38755,,,,,,,
Sol-38756,,,,,,,
Sol-38757,,,,,,,
Sol-38758,,,,,,,
Sol-38759,,,,,,,
Sol-38760,,,,,,,
Sol-38761,,,,,,,
Sol-38762,,,,,,,
Sol-38763,,,,,,,
Sol-38764,,,,,,,
Sol-38765,,,,,,,
Sol-38766,,,,,,,
Sol-38767,,,,,,,
Sol-38768,,,,,,,
Sol-38769,,,,,,,
Sol-38770,,,,,,,
Sol-38771,,,,,,,
Sol-38772,,,,,,,
Sol-38773,,,,,,,
Sol-38774,,,,,,,
Sol-38775,,,,,,,
Sol-38776,,,,,,,
Sol-38777,,,,,,,
Sol-38778,,,,,,,
Sol-38779,,,,,,,
Sol-38780,,,,,,,
Sol-38781,,,,,,,
Sol-38782,,,,,,,
Sol-38783,,,,,,,
Sol-38784,,,,,,,
Sol-38785,,,,,,,
Sol-38786,,,,,,,
Sol-38787,,,,,,,
Sol-38788,,,,,,,
Sol-38789,,,,,,,
Sol-38790,,,,,,,
Sol-38791,,,,,,,
Sol-38792,,,,,,,
Sol-38793,,,,,,,
Sol-38794,,,,,,,
Sol-38795,,,,,,,
Sol-38796,,,,,,,
Sol-38797,,,,,,,
Sol-38798,,,,,,,
Sol-38799,,,,,,,
Sol-38800,,,,,,,
Sol-38801,,,,,,,
Sol-38802,,,,,,,
Sol-38803,,,,,,,
Sol-38804,,,,,,,
Sol-38805,,,,,,,
Sol-38806,,,,,,,
Sol-38807,,,,,,,
Sol-38808,,,,,,,
Sol-38809,,,,,,,
Sol-38810,,,,,,,
Sol-38811,,,,,,,
Sol-38812,,,,,,,
Sol-38813,,,,,,,
Sol-38814,,,,,,,
Sol-38815,,,,,,,
Sol-38816,,,,,,,
Sol-38817,,,,,,,
Sol-38818,,,,,,,
Sol-38819,,,,,,,
Sol-38820,,,,,,,
Sol-38821,,,,,,,
Sol-38822,,,,,,,
Sol-38823,,,,,,,
Sol-38824,,,,,,,
Sol-38825,,,,,,,
Sol-38826,,,,,,,
Sol-38827,,,,,,,
Sol-38828,,,,,,,
Sol-38829,,,,,,,
Sol-38830,,,,,,,
Sol-38831,,,,,,,
Sol-38832,,,,,,,
Sol-38833,,,,,,,
Sol-38834,,,,,,,
Sol-38835,,,,,,,
Sol-38836,,,,,,,
Sol-38837,,,,,,,
Sol-38838,,,,,,,
Sol-38839,,,,,,,
Sol-38840,,,,,,,
Sol-38841,,,,,,,
Sol-38842,,,,,,,
Sol-38843,,,,,,,
Sol-38844,,,,,,,
Sol-38845,,,,,,,
Sol-38846,,,,,,,
Sol-38847,,,,,,,
Sol-38848,,,,,,,
Sol-38849,,,,,,,
Sol-38850,,,,,,,
Sol-38851,,,,,,,
Sol-38852,,,,,,,
Sol-38853,,,,,,,
Sol-38854,,,,,,,
Sol-38855,,,,,,,
Sol-38856,,,,,,,
Sol-38857,,,,,,,
Sol-38858,,,,,,,
Sol-38859,,,,,,,
Sol-38860,,,,,,,
Sol-38861,,,,,,,
Sol-38862,,,,,,,
Sol-38863,,,,,,,
Sol-38864,,,,,,,
Sol-38865,,,,,,,
Sol-38866,,,,,,,
Sol-38867,,,,,,,
Sol-38868,,,,,,,
Sol-38869,,,,,,,
Sol-38870,,,,,,,
Sol-38871,,,,,,,
Sol-38872,,,,,,,
Sol-38873,,,,,,,
Sol-38874,,,,,,,
Sol-38875,,,,,,,
Sol-38876,,,,,,,
Sol-38877,,,,,,,
Sol-38878,,,,,,,
Sol-38879,,,,,,,
Sol-38880,,,,,,,
Sol-38881,,,,,,,
Sol-38882,,,,,,,
Sol-38883,,,,,,,
Sol-38884,,,,,,,
Sol-38885,,,,,,,
Sol-38886,,,,,,,
Sol-38887,,,,,,,
Sol-38888,,,,,,,
Sol-38889,,,,,,,
Sol-38890,,,,,,,
Sol-38891,,,,,,,
Sol-38892,,,,,,,
Sol-38893,,,,,,,
Sol-38894,,,,,,,
Sol-38895,,,,,,,
Sol-38896,,,,,,,
Sol-38897,,,,,,,
Sol-38898,,,,,,,
Sol-38899,,,,,,,
Sol-38900,,,,,,,
Sol-38901,,,,,,,
Sol-38902,,,,,,,
Sol-38903,,,,,,,
Sol-38904,,,,,,,
Sol-38905,,,,,,,
Sol-38906,,,,,,,
Sol-38907,,,,,,,
Sol-38908,,,,,,,
Sol-38909,,,,,,,
Sol-38910,,,,,,,
Sol-38911,,,,,,,
Sol-38912,,,,,,,
Sol-38913,,,,,,,
Sol-38914,,,,,,,
Sol-38915,,,,,,,
Sol-38916,,,,,,,
Sol-38917,,,,,,,
Sol-38918,,,,,,,
Sol-38919,,,,,,,
Sol-38920,,,,,,,
Sol-38921,,,,,,,
Sol-38922,,,,,,,
Sol-38923,,,,,,,
Sol-38924,,,,,,,
Sol-38925,,,,,,,
Sol-38926,,,,,,,
Sol-38927,,,,,,,
Sol-38928,,,,,,,
Sol-38929,,,,,,,
Sol-38930,,,,,,,
Sol-38931,,,,,,,
Sol-38932,,,,,,,
Sol-38933,,,,,,,
Sol-38934,,,,,,,
Sol-38935,,,,,,,
Sol-38936,,,,,,,
Sol-38937,,,,,,,
Sol-38938,,,,,,,
Sol-38939,,,,,,,
Sol-38940,,,,,,,
Sol-38941,,,,,,,
Sol-38942,,,,,,,
Sol-38943,,,,,,,
Sol-38944,,,,,,,
Sol-38945,,,,,,,
Sol-38946,,,,,,,
Sol-38947,,,,,,,
Sol-38948,,,,,,,
Sol-38949,,,,,,,
Sol-38950,,,,,,,
Sol-38951,,,,,,,
Sol-38952,,,,,,,
Sol-38953,,,,,,,
Sol-38954,,,,,,,
Sol-38955,,,,,,,
Sol-38956,,,,,,,
Sol-38957,,,,,,,
Sol-38958,,,,,,,
Sol-38959,,,,,,,
Sol-38960,,,,,,,
Sol-38961,,,,,,,
Sol-38962,,,,,,,
Sol-38963,,,,,,,
Sol-38964,,,,,,,
Sol-38965,,,,,,,
Sol-38966,,,,,,,
Sol-38967,,,,,,,
Sol-38968,,,,,,,
Sol-38969,,,,,,,
Sol-38970,,,,,,,
Sol-38971,,,,,,,
Sol-38972,,,,,,,
Sol-38973,,,,,,,
Sol-38974,,,,,,,
Sol-38975,,,,,,,
Sol-38976,,,,,,,
Sol-38977,,,,,,,
Sol-38978,,,,,,,
Sol-38979,,,,,,,
Sol-38980,,,,,,,
Sol-38981,,,,,,,
Sol-38982,,,,,,,
Sol-38983,,,,,,,
Sol-38984,,,,,,,
Sol-38985,,,,,,,
Sol-38986,,,,,,,
Sol-38987,,,,,,,
Sol-38988,,,,,,,
Sol-38989,,,,,,,
Sol-38990,,,,,,,
Sol-38991,,,,,,,
Sol-38992,,,,,,,
Sol-38993,,,,,,,
Sol-38994,,,,,,,
Sol-38995,,,,,,,
Sol-38996,,,,,,,
Sol-38997,,,,,,,
Sol-38998,,,,,,,
Sol-38999,,,,,,,
Sol-39000,,,,,,,
Sol-39001,,,,,,,
Sol-39002,,,,,,,
Sol-39003,,,,,,,
Sol-39004,,,,,,,
Sol-39005,,,,,,,
Sol-39006,,,,,,,
Sol-39007,,,,,,,
Sol-39008,,,,,,,
Sol-39009,,,,,,,
Sol-39010,,,,,,,
Sol-39011,,,,,,,
Sol-39012,,,,,,,
Sol-39013,,,,,,,
Sol-39014,,,,,,,
Sol-39015,,,,,,,
Sol-39016,,,,,,,
Sol-39017,,,,,,,
Sol-39018,,,,,,,
Sol-39019,,,,,,,
Sol-39020,,,,,,,
Sol-39021,,,,,,,
Sol-39022,,,,,,,
Sol-39023,,,,,,,
Sol-39024,,,,,,,
Sol-39025,,,,,,,
Sol-39026,,,,,,,
Sol-39027,,,,,,,
Sol-39028,,,,,,,
Sol-39029,,,,,,,
Sol-39030,,,,,,,
Sol-39031,,,,,,,
Sol-39032,,,,,,,
Sol-39033,,,,,,,
Sol-39034,,,,,,,
Sol-39035,,,,,,,
Sol-39036,,,,,,,
Sol-39037,,,,,,,
Sol-39038,,,,,,,
Sol-39039,,,,,,,
Sol-39040,,,,,,,
Sol-39041,,,,,,,
Sol-39042,,,,,,,
Sol-39043,,,,,,,
Sol-39044,,,,,,,
Sol-39045,,,,,,,
Sol-39046,,,,,,,
Sol-39047,,,,,,,
Sol-39048,,,,,,,
Sol-39049,,,,,,,
Sol-39050,,,,,,,
Sol-39051,,,,,,,
Sol-39052,,,,,,,
Sol-39053,,,,,,,
Sol-39054,,,,,,,
Sol-39055,,,,,,,
Sol-39056,,,,,,,
Sol-39057,,,,,,,
Sol-39058,,,,,,,
Sol-39059,,,,,,,
Sol-39060,,,,,,,
Sol-39061,,,,,,,
Sol-39062,,,,,,,
Sol-39063,,,,,,,
Sol-39064,,,,,,,
Sol-39065,,,,,,,
Sol-39066,,,,,,,
Sol-39067,,,,,,,
Sol-39068,,,,,,,
Sol-39069,,,,,,,
Sol-39070,,,,,,,
Sol-39071,,,,,,,
Sol-39072,,,,,,,
Sol-39073,,,,,,,
Sol-39074,,,,,,,
Sol-39075,,,,,,,
Sol-39076,,,,,,,
Sol-39077,,,,,,,
Sol-39078,,,,,,,
Sol-39079,,,,,,,
Sol-39080,,,,,,,
Sol-39081,,,,,,,
Sol-39082,,,,,,,
Sol-39083,,,,,,,
Sol-39084,,,,,,,
Sol-39085,,,,,,,
Sol-39086,,,,,,,
Sol-39087,,,,,,,
Sol-39088,,,,,,,
Sol-39089,,,,,,,
Sol-39090,,,,,,,
Sol-39091,,,,,,,
Sol-39092,,,,,,,
Sol-39093,,,,,,,
Sol-39094,,,,,,,
Sol-39095,,,,,,,
Sol-39096,,,,,,,
Sol-39097,,,,,,,
Sol-39098,,,,,,,
Sol-39099,,,,,,,
Sol-39100,,,,,,,
Sol-39101,,,,,,,
Sol-39102,,,,,,,
Sol-39103,,,,,,,
Sol-39104,,,,,,,
Sol-39105,,,,,,,
Sol-39106,,,,,,,
Sol-39107,,,,,,,
Sol-39108,,,,,,,
Sol-39109,,,,,,,
Sol-39110,,,,,,,
Sol-39111,,,,,,,
Sol-39112,,,,,,,
Sol-39113,,,,,,,
Sol-39114,,,,,,,
Sol-39115,,,,,,,
Sol-39116,,,,,,,
Sol-39117,,,,,,,
Sol-39118,,,,,,,
Sol-39119,,,,,,,
Sol-39120,,,,,,,
Sol-39121,,,,,,,
Sol-39122,,,,,,,
Sol-39123,,,,,,,
Sol-39124,,,,,,,
Sol-39125,,,,,,,
Sol-39126,,,,,,,
Sol-39127,,,,,,,
Sol-39128,,,,,,,
Sol-39129,,,,,,,
Sol-39130,,,,,,,
Sol-39131,,,,,,,
Sol-39132,,,,,,,
Sol-39133,,,,,,,
Sol-39134,,,,,,,
Sol-39135,,,,,,,
Sol-39136,,,,,,,
Sol-39137,,,,,,,
Sol-39138,,,,,,,
Sol-39139,,,,,,,
Sol-39140,,,,,,,
Sol-39141,,,,,,,
Sol-39142,,,,,,,
Sol-39143,,,,,,,
Sol-39144,,,,,,,
Sol-39145,,,,,,,
Sol-39146,,,,,,,
Sol-39147,,,,,,,
Sol-39148,,,,,,,
Sol-39149,,,,,,,
Sol-39150,,,,,,,
Sol-39151,,,,,,,
Sol-39152,,,,,,,
Sol-39153,,,,,,,
Sol-39154,,,,,,,
Sol-39155,,,,,,,
Sol-39156,,,,,,,
Sol-39157,,,,,,,
Sol-39158,,,,,,,
Sol-39159,,,,,,,
Sol-39160,,,,,,,
Sol-39161,,,,,,,
Sol-39162,,,,,,,
Sol-39163,,,,,,,
Sol-39164,,,,,,,
Sol-39165,,,,,,,
Sol-39166,,,,,,,
Sol-39167,,,,,,,
Sol-39168,,,,,,,
Sol-39169,,,,,,,
Sol-39170,,,,,,,
Sol-39171,,,,,,,
Sol-39172,,,,,,,
Sol-39173,,,,,,,
Sol-39174,,,,,,,
Sol-39175,,,,,,,
Sol-39176,,,,,,,
Sol-39177,,,,,,,
Sol-39178,,,,,,,
Sol-39179,,,,,,,
Sol-39180,,,,,,,
Sol-39181,,,,,,,
Sol-39182,,,,,,,
Sol-39183,,,,,,,
Sol-39184,,,,,,,
Sol-39185,,,,,,,
Sol-39186,,,,,,,
Sol-39187,,,,,,,
Sol-39188,,,,,,,
Sol-39189,,,,,,,
Sol-39190,,,,,,,
Sol-39191,,,,,,,
Sol-39192,,,,,,,
Sol-39193,,,,,,,
Sol-39194,,,,,,,
Sol-39195,,,,,,,
Sol-39196,,,,,,,
Sol-39197,,,,,,,
Sol-39198,,,,,,,
Sol-39199,,,,,,,
Sol-39200,,,,,,,
Sol-39201,,,,,,,
Sol-39202,,,,,,,
Sol-39203,,,,,,,
Sol-39204,,,,,,,
Sol-39205,,,,,,,
Sol-39206,,,,,,,
Sol-39207,,,,,,,
Sol-39208,,,,,,,
Sol-39209,,,,,,,
Sol-39210,,,,,,,
Sol-39211,,,,,,,
Sol-39212,,,,,,,
Sol-39213,,,,,,,
Sol-39214,,,,,,,
Sol-39215,,,,,,,
Sol-39216,,,,,,,
Sol-39217,,,,,,,
Sol-39218,,,,,,,
Sol-39219,,,,,,,
Sol-39220,,,,,,,
Sol-39221,,,,,,,
Sol-39222,,,,,,,
Sol-39223,,,,,,,
Sol-39224,,,,,,,
Sol-39225,,,,,,,
Sol-39226,,,,,,,
Sol-39227,,,,,,,
Sol-39228,,,,,,,
Sol-39229,,,,,,,
Sol-39230,,,,,,,
Sol-39231,,,,,,,
Sol-39232,,,,,,,
Sol-39233,,,,,,,
Sol-39234,,,,,,,
Sol-39235,,,,,,,
Sol-39236,,,,,,,
Sol-39237,,,,,,,
Sol-39238,,,,,,,
Sol-39239,,,,,,,
Sol-39240,,,,,,,
Sol-39241,,,,,,,
Sol-39242,,,,,,,
Sol-39243,,,,,,,
Sol-39244,,,,,,,
Sol-39245,,,,,,,
Sol-39246,,,,,,,
Sol-39247,,,,,,,
Sol-39248,,,,,,,
Sol-39249,,,,,,,
Sol-39250,,,,,,,
Sol-39251,,,,,,,
Sol-39252,,,,,,,
Sol-39253,,,,,,,
Sol-39254,,,,,,,
Sol-39255,,,,,,,
Sol-39256,,,,,,,
Sol-39257,,,,,,,
Sol-39258,,,,,,,
Sol-39259,,,,,,,
Sol-39260,,,,,,,
Sol-39261,,,,,,,
Sol-39262,,,,,,,
Sol-39263,,,,,,,
Sol-39264,,,,,,,
Sol-39265,,,,,,,
Sol-39266,,,,,,,
Sol-39267,,,,,,,
Sol-39268,,,,,,,
Sol-39269,,,,,,,
Sol-39270,,,,,,,
Sol-39271,,,,,,,
Sol-39272,,,,,,,
Sol-39273,,,,,,,
Sol-39274,,,,,,,
Sol-39275,,,,,,,
Sol-39276,,,,,,,
Sol-39277,,,,,,,
Sol-39278,,,,,,,
Sol-39279,,,,,,,
Sol-39280,,,,,,,
Sol-39281,,,,,,,
Sol-39282,,,,,,,
Sol-39283,,,,,,,
Sol-39284,,,,,,,
Sol-39285,,,,,,,
Sol-39286,,,,,,,
Sol-39287,,,,,,,
Sol-39288,,,,,,,
Sol-39289,,,,,,,
Sol-39290,,,,,,,
Sol-39291,,,,,,,
Sol-39292,,,,,,,
Sol-39293,,,,,,,
Sol-39294,,,,,,,
Sol-39295,,,,,,,
Sol-39296,,,,,,,
Sol-39297,,,,,,,
Sol-39298,,,,,,,
Sol-39299,,,,,,,
Sol-39300,,,,,,,
Sol-39301,,,,,,,
Sol-39302,,,,,,,
Sol-39303,,,,,,,
Sol-39304,,,,,,,
Sol-39305,,,,,,,
Sol-39306,,,,,,,
Sol-39307,,,,,,,
Sol-39308,,,,,,,
Sol-39309,,,,,,,
Sol-39310,,,,,,,
Sol-39311,,,,,,,
Sol-39312,,,,,,,
Sol-39313,,,,,,,
Sol-39314,,,,,,,
Sol-39315,,,,,,,
Sol-39316,,,,,,,
Sol-39317,,,,,,,
Sol-39318,,,,,,,
Sol-39319,,,,,,,
Sol-39320,,,,,,,
Sol-39321,,,,,,,
Sol-39322,,,,,,,
Sol-39323,,,,,,,
Sol-39324,,,,,,,
Sol-39325,,,,,,,
Sol-39326,,,,,,,
Sol-39327,,,,,,,
Sol-39328,,,,,,,
Sol-39329,,,,,,,
Sol-39330,,,,,,,
Sol-39331,,,,,,,
Sol-39332,,,,,,,
Sol-39333,,,,,,,
Sol-39334,,,,,,,
Sol-39335,,,,,,,
Sol-39336,,,,,,,
Sol-39337,,,,,,,
Sol-39338,,,,,,,
Sol-39339,,,,,,,
Sol-39340,,,,,,,
Sol-39341,,,,,,,
Sol-39342,,,,,,,
Sol-39343,,,,,,,
Sol-39344,,,,,,,
Sol-39345,,,,,,,
Sol-39346,,,,,,,
Sol-39347,,,,,,,
Sol-39348,,,,,,,
Sol-39349,,,,,,,
Sol-39350,,,,,,,
Sol-39351,,,,,,,
Sol-39352,,,,,,,
Sol-39353,,,,,,,
Sol-39354,,,,,,,
Sol-39355,,,,,,,
Sol-39356,,,,,,,
Sol-39357,,,,,,,
Sol-39358,,,,,,,
Sol-39359,,,,,,,
Sol-39360,,,,,,,
Sol-39361,,,,,,,
Sol-39362,,,,,,,
Sol-39363,,,,,,,
Sol-39364,,,,,,,
Sol-39365,,,,,,,
Sol-39366,,,,,,,
Sol-39367,,,,,,,
Sol-39368,,,,,,,
Sol-39369,,,,,,,
Sol-39370,,,,,,,
Sol-39371,,,,,,,
Sol-39372,,,,,,,
Sol-39373,,,,,,,
Sol-39374,,,,,,,
Sol-39375,,,,,,,
Sol-39376,,,,,,,
Sol-39377,,,,,,,
Sol-39378,,,,,,,
Sol-39379,,,,,,,
Sol-39380,,,,,,,
Sol-39381,,,,,,,
Sol-39382,,,,,,,
Sol-39383,,,,,,,
Sol-39384,,,,,,,
Sol-39385,,,,,,,
Sol-39386,,,,,,,
Sol-39387,,,,,,,
Sol-39388,,,,,,,
Sol-39389,,,,,,,
Sol-39390,,,,,,,
Sol-39391,,,,,,,
Sol-39392,,,,,,,
Sol-39393,,,,,,,
Sol-39394,,,,,,,
Sol-39395,,,,,,,
Sol-39396,,,,,,,
Sol-39397,,,,,,,
Sol-39398,,,,,,,
Sol-39399,,,,,,,
Sol-39400,,,,,,,
Sol-39401,,,,,,,
Sol-39402,,,,,,,
Sol-39403,,,,,,,
Sol-39404,,,,,,,
Sol-39405,,,,,,,
Sol-39406,,,,,,,
Sol-39407,,,,,,,
Sol-39408,,,,,,,
Sol-39409,,,,,,,
Sol-39410,,,,,,,
Sol-39411,,,,,,,
Sol-39412,,,,,,,
Sol-39413,,,,,,,
Sol-39414,,,,,,,
Sol-39415,,,,,,,
Sol-39416,,,,,,,
Sol-39417,,,,,,,
Sol-39418,,,,,,,
Sol-39419,,,,,,,
Sol-39420,,,,,,,
Sol-39421,,,,,,,
Sol-39422,,,,,,,
Sol-39423,,,,,,,
Sol-39424,,,,,,,
Sol-39425,,,,,,,
Sol-39426,,,,,,,
Sol-39427,,,,,,,
Sol-39428,,,,,,,
Sol-39429,,,,,,,
Sol-39430,,,,,,,
Sol-39431,,,,,,,
Sol-39432,,,,,,,
Sol-39433,,,,,,,
Sol-39434,,,,,,,
Sol-39435,,,,,,,
Sol-39436,,,,,,,
Sol-39437,,,,,,,
Sol-39438,,,,,,,
Sol-39439,,,,,,,
Sol-39440,,,,,,,
Sol-39441,,,,,,,
Sol-39442,,,,,,,
Sol-39443,,,,,,,
Sol-39444,,,,,,,
Sol-39445,,,,,,,
Sol-39446,,,,,,,
Sol-39447,,,,,,,
Sol-39448,,,,,,,
Sol-39449,,,,,,,
Sol-39450,,,,,,,
Sol-39451,,,,,,,
Sol-39452,,,,,,,
Sol-39453,,,,,,,
Sol-39454,,,,,,,
Sol-39455,,,,,,,
Sol-39456,,,,,,,
Sol-39457,,,,,,,
Sol-39458,,,,,,,
Sol-39459,,,,,,,
Sol-39460,,,,,,,
Sol-39461,,,,,,,
Sol-39462,,,,,,,
Sol-39463,,,,,,,
Sol-39464,,,,,,,
Sol-39465,,,,,,,
Sol-39466,,,,,,,
Sol-39467,,,,,,,
Sol-39468,,,,,,,
Sol-39469,,,,,,,
Sol-39470,,,,,,,
Sol-39471,,,,,,,
Sol-39472,,,,,,,
Sol-39473,,,,,,,
Sol-39474,,,,,,,
Sol-39475,,,,,,,
Sol-39476,,,,,,,
Sol-39477,,,,,,,
Sol-39478,,,,,,,
Sol-39479,,,,,,,
Sol-39480,,,,,,,
Sol-39481,,,,,,,
Sol-39482,,,,,,,
Sol-39483,,,,,,,
Sol-39484,,,,,,,
Sol-39485,,,,,,,
Sol-39486,,,,,,,
Sol-39487,,,,,,,
Sol-39488,,,,,,,
Sol-39489,,,,,,,
Sol-39490,,,,,,,
Sol-39491,,,,,,,
Sol-39492,,,,,,,
Sol-39493,,,,,,,
Sol-39494,,,,,,,
Sol-39495,,,,,,,
Sol-39496,,,,,,,
Sol-39497,,,,,,,
Sol-39498,,,,,,,
Sol-39499,,,,,,,
Sol-39500,,,,,,,
Sol-39501,,,,,,,
Sol-39502,,,,,,,
Sol-39503,,,,,,,
Sol-39504,,,,,,,
Sol-39505,,,,,,,
Sol-39506,,,,,,,
Sol-39507,,,,,,,
Sol-39508,,,,,,,
Sol-39509,,,,,,,
Sol-39510,,,,,,,
Sol-39511,,,,,,,
Sol-39512,,,,,,,
Sol-39513,,,,,,,
Sol-39514,,,,,,,
Sol-39515,,,,,,,
Sol-39516,,,,,,,
Sol-39517,,,,,,,
Sol-39518,,,,,,,
Sol-39519,,,,,,,
Sol-39520,,,,,,,
Sol-39521,,,,,,,
Sol-39522,,,,,,,
Sol-39523,,,,,,,
Sol-39524,,,,,,,
Sol-39525,,,,,,,
Sol-39526,,,,,,,
Sol-39527,,,,,,,
Sol-39528,,,,,,,
Sol-39529,,,,,,,
Sol-39530,,,,,,,
Sol-39531,,,,,,,
Sol-39532,,,,,,,
Sol-39533,,,,,,,
Sol-39534,,,,,,,
Sol-39535,,,,,,,
Sol-39536,,,,,,,
Sol-39537,,,,,,,
Sol-39538,,,,,,,
Sol-39539,,,,,,,
Sol-39540,,,,,,,
Sol-39541,,,,,,,
Sol-39542,,,,,,,
Sol-39543,,,,,,,
Sol-39544,,,,,,,
Sol-39545,,,,,,,
Sol-39546,,,,,,,
Sol-39547,,,,,,,
Sol-39548,,,,,,,
Sol-39549,,,,,,,
Sol-39550,,,,,,,
Sol-39551,,,,,,,
Sol-39552,,,,,,,
Sol-39553,,,,,,,
Sol-39554,,,,,,,
Sol-39555,,,,,,,
Sol-39556,,,,,,,
Sol-39557,,,,,,,
Sol-39558,,,,,,,
Sol-39559,,,,,,,
Sol-39560,,,,,,,
Sol-39561,,,,,,,
Sol-39562,,,,,,,
Sol-39563,,,,,,,
Sol-39564,,,,,,,
Sol-39565,,,,,,,
Sol-39566,,,,,,,
Sol-39567,,,,,,,
Sol-39568,,,,,,,
Sol-39569,,,,,,,
Sol-39570,,,,,,,
Sol-39571,,,,,,,
Sol-39572,,,,,,,
Sol-39573,,,,,,,
Sol-39574,,,,,,,
Sol-39575,,,,,,,
Sol-39576,,,,,,,
Sol-39577,,,,,,,
Sol-39578,,,,,,,
Sol-39579,,,,,,,
Sol-39580,,,,,,,
Sol-39581,,,,,,,
Sol-39582,,,,,,,
Sol-39583,,,,,,,
Sol-39584,,,,,,,
Sol-39585,,,,,,,
Sol-39586,,,,,,,
Sol-39587,,,,,,,
Sol-39588,,,,,,,
Sol-39589,,,,,,,
Sol-39590,,,,,,,
Sol-39591,,,,,,,
Sol-39592,,,,,,,
Sol-39593,,,,,,,
Sol-39594,,,,,,,
Sol-39595,,,,,,,
Sol-39596,,,,,,,
Sol-39597,,,,,,,
Sol-39598,,,,,,,
Sol-39599,,,,,,,
Sol-39600,,,,,,,
Sol-39601,,,,,,,
Sol-39602,,,,,,,
Sol-39603,,,,,,,
Sol-39604,,,,,,,
Sol-39605,,,,,,,
Sol-39606,,,,,,,
Sol-39607,,,,,,,
Sol-39608,,,,,,,
Sol-39609,,,,,,,
Sol-39610,,,,,,,
Sol-39611,,,,,,,
Sol-39612,,,,,,,
Sol-39613,,,,,,,
Sol-39614,,,,,,,
Sol-39615,,,,,,,
Sol-39616,,,,,,,
Sol-39617,,,,,,,
Sol-39618,,,,,,,
Sol-39619,,,,,,,
Sol-39620,,,,,,,
Sol-39621,,,,,,,
Sol-39622,,,,,,,
Sol-39623,,,,,,,
Sol-39624,,,,,,,
Sol-39625,,,,,,,
Sol-39626,,,,,,,
Sol-39627,,,,,,,
Sol-39628,,,,,,,
Sol-39629,,,,,,,
Sol-39630,,,,,,,
Sol-39631,,,,,,,
Sol-39632,,,,,,,
Sol-39633,,,,,,,
Sol-39634,,,,,,,
Sol-39635,,,,,,,
Sol-39636,,,,,,,
Sol-39637,,,,,,,
Sol-39638,,,,,,,
Sol-39639,,,,,,,
Sol-39640,,,,,,,
Sol-39641,,,,,,,
Sol-39642,,,,,,,
Sol-39643,,,,,,,
Sol-39644,,,,,,,
Sol-39645,,,,,,,
Sol-39646,,,,,,,
Sol-39647,,,,,,,
Sol-39648,,,,,,,
Sol-39649,,,,,,,
Sol-39650,,,,,,,
Sol-39651,,,,,,,
Sol-39652,,,,,,,
Sol-39653,,,,,,,
Sol-39654,,,,,,,
Sol-39655,,,,,,,
Sol-39656,,,,,,,
Sol-39657,,,,,,,
Sol-39658,,,,,,,
Sol-39659,,,,,,,
Sol-39660,,,,,,,
Sol-39661,,,,,,,
Sol-39662,,,,,,,
Sol-39663,,,,,,,
Sol-39664,,,,,,,
Sol-39665,,,,,,,
Sol-39666,,,,,,,
Sol-39667,,,,,,,
Sol-39668,,,,,,,
Sol-39669,,,,,,,
Sol-39670,,,,,,,
Sol-39671,,,,,,,
Sol-39672,,,,,,,
Sol-39673,,,,,,,
Sol-39674,,,,,,,
Sol-39675,,,,,,,
Sol-39676,,,,,,,
Sol-39677,,,,,,,
Sol-39678,,,,,,,
Sol-39679,,,,,,,
Sol-39680,,,,,,,
Sol-39681,,,,,,,
Sol-39682,,,,,,,
Sol-39683,,,,,,,
Sol-39684,,,,,,,
Sol-39685,,,,,,,
Sol-39686,,,,,,,
Sol-39687,,,,,,,
Sol-39688,,,,,,,
Sol-39689,,,,,,,
Sol-39690,,,,,,,
Sol-39691,,,,,,,
Sol-39692,,,,,,,
Sol-39693,,,,,,,
Sol-39694,,,,,,,
Sol-39695,,,,,,,
Sol-39696,,,,,,,
Sol-39697,,,,,,,
Sol-39698,,,,,,,
Sol-39699,,,,,,,
Sol-39700,,,,,,,
Sol-39701,,,,,,,
Sol-39702,,,,,,,
Sol-39703,,,,,,,
Sol-39704,,,,,,,
Sol-39705,,,,,,,
Sol-39706,,,,,,,
Sol-39707,,,,,,,
Sol-39708,,,,,,,
Sol-39709,,,,,,,
Sol-39710,,,,,,,
Sol-39711,,,,,,,
Sol-39712,,,,,,,
Sol-39713,,,,,,,
Sol-39714,,,,,,,
Sol-39715,,,,,,,
Sol-39716,,,,,,,
Sol-39717,,,,,,,
Sol-39718,,,,,,,
Sol-39719,,,,,,,
Sol-39720,,,,,,,
Sol-39721,,,,,,,
Sol-39722,,,,,,,
Sol-39723,,,,,,,
Sol-39724,,,,,,,
Sol-39725,,,,,,,
Sol-39726,,,,,,,
Sol-39727,,,,,,,
Sol-39728,,,,,,,
Sol-39729,,,,,,,
Sol-39730,,,,,,,
Sol-39731,,,,,,,
Sol-39732,,,,,,,
Sol-39733,,,,,,,
Sol-39734,,,,,,,
Sol-39735,,,,,,,
Sol-39736,,,,,,,
Sol-39737,,,,,,,
Sol-39738,,,,,,,
Sol-39739,,,,,,,
Sol-39740,,,,,,,
Sol-39741,,,,,,,
Sol-39742,,,,,,,
Sol-39743,,,,,,,
Sol-39744,,,,,,,
Sol-39745,,,,,,,
Sol-39746,,,,,,,
Sol-39747,,,,,,,
Sol-39748,,,,,,,
Sol-39749,,,,,,,
Sol-39750,,,,,,,
Sol-39751,,,,,,,
Sol-39752,,,,,,,
Sol-39753,,,,,,,
Sol-39754,,,,,,,
Sol-39755,,,,,,,
Sol-39756,,,,,,,
Sol-39757,,,,,,,
Sol-39758,,,,,,,
Sol-39759,,,,,,,
Sol-39760,,,,,,,
Sol-39761,,,,,,,
Sol-39762,,,,,,,
Sol-39763,,,,,,,
Sol-39764,,,,,,,
Sol-39765,,,,,,,
Sol-39766,,,,,,,
Sol-39767,,,,,,,
Sol-39768,,,,,,,
Sol-39769,,,,,,,
Sol-39770,,,,,,,
Sol-39771,,,,,,,
Sol-39772,,,,,,,
Sol-39773,,,,,,,
Sol-39774,,,,,,,
Sol-39775,,,,,,,
Sol-39776,,,,,,,
Sol-39777,,,,,,,
Sol-39778,,,,,,,
Sol-39779,,,,,,,
Sol-39780,,,,,,,
Sol-39781,,,,,,,
Sol-39782,,,,,,,
Sol-39783,,,,,,,
Sol-39784,,,,,,,
Sol-39785,,,,,,,
Sol-39786,,,,,,,
Sol-39787,,,,,,,
Sol-39788,,,,,,,
Sol-39789,,,,,,,
Sol-39790,,,,,,,
Sol-39791,,,,,,,
Sol-39792,,,,,,,
Sol-39793,,,,,,,
Sol-39794,,,,,,,
Sol-39795,,,,,,,
Sol-39796,,,,,,,
Sol-39797,,,,,,,
Sol-39798,,,,,,,
Sol-39799,,,,,,,
Sol-39800,,,,,,,
Sol-39801,,,,,,,
Sol-39802,,,,,,,
Sol-39803,,,,,,,
Sol-39804,,,,,,,
Sol-39805,,,,,,,
Sol-39806,,,,,,,
Sol-39807,,,,,,,
Sol-39808,,,,,,,
Sol-39809,,,,,,,
Sol-39810,,,,,,,
Sol-39811,,,,,,,
Sol-39812,,,,,,,
Sol-39813,,,,,,,
Sol-39814,,,,,,,
Sol-39815,,,,,,,
Sol-39816,,,,,,,
Sol-39817,,,,,,,
Sol-39818,,,,,,,
Sol-39819,,,,,,,
Sol-39820,,,,,,,
Sol-39821,,,,,,,
Sol-39822,,,,,,,
Sol-39823,,,,,,,
Sol-39824,,,,,,,
Sol-39825,,,,,,,
Sol-39826,,,,,,,
Sol-39827,,,,,,,
Sol-39828,,,,,,,
Sol-39829,,,,,,,
Sol-39830,,,,,,,
Sol-39831,,,,,,,
Sol-39832,,,,,,,
Sol-39833,,,,,,,
Sol-39834,,,,,,,
Sol-39835,,,,,,,
Sol-39836,,,,,,,
Sol-39837,,,,,,,
Sol-39838,,,,,,,
Sol-39839,,,,,,,
Sol-39840,,,,,,,
Sol-39841,,,,,,,
Sol-39842,,,,,,,
Sol-39843,,,,,,,
Sol-39844,,,,,,,
Sol-39845,,,,,,,
Sol-39846,,,,,,,
Sol-39847,,,,,,,
Sol-39848,,,,,,,
Sol-39849,,,,,,,
Sol-39850,,,,,,,
Sol-39851,,,,,,,
Sol-39852,,,,,,,
Sol-39853,,,,,,,
Sol-39854,,,,,,,
Sol-39855,,,,,,,
Sol-39856,,,,,,,
Sol-39857,,,,,,,
Sol-39858,,,,,,,
Sol-39859,,,,,,,
Sol-39860,,,,,,,
Sol-39861,,,,,,,
Sol-39862,,,,,,,
Sol-39863,,,,,,,
Sol-39864,,,,,,,
Sol-39865,,,,,,,
Sol-39866,,,,,,,
Sol-39867,,,,,,,
Sol-39868,,,,,,,
Sol-39869,,,,,,,
Sol-39870,,,,,,,
Sol-39871,,,,,,,
Sol-39872,,,,,,,
Sol-39873,,,,,,,
Sol-39874,,,,,,,
Sol-39875,,,,,,,
Sol-39876,,,,,,,
Sol-39877,,,,,,,
Sol-39878,,,,,,,
Sol-39879,,,,,,,
Sol-39880,,,,,,,
Sol-39881,,,,,,,
Sol-39882,,,,,,,
Sol-39883,,,,,,,
Sol-39884,,,,,,,
Sol-39885,,,,,,,
Sol-39886,,,,,,,
Sol-39887,,,,,,,
Sol-39888,,,,,,,
Sol-39889,,,,,,,
Sol-39890,,,,,,,
Sol-39891,,,,,,,
Sol-39892,,,,,,,
Sol-39893,,,,,,,
Sol-39894,,,,,,,
Sol-39895,,,,,,,
Sol-39896,,,,,,,
Sol-39897,,,,,,,
Sol-39898,,,,,,,
Sol-39899,,,,,,,
Sol-39900,,,,,,,
Sol-39901,,,,,,,
Sol-39902,,,,,,,
Sol-39903,,,,,,,
Sol-39904,,,,,,,
Sol-39905,,,,,,,
Sol-39906,,,,,,,
Sol-39907,,,,,,,
Sol-39908,,,,,,,
Sol-39909,,,,,,,
Sol-39910,,,,,,,
Sol-39911,,,,,,,
Sol-39912,,,,,,,
Sol-39913,,,,,,,
Sol-39914,,,,,,,
Sol-39915,,,,,,,
Sol-39916,,,,,,,
Sol-39917,,,,,,,
Sol-39918,,,,,,,
Sol-39919,,,,,,,
Sol-39920,,,,,,,
Sol-39921,,,,,,,
Sol-39922,,,,,,,
Sol-39923,,,,,,,
Sol-39924,,,,,,,
Sol-39925,,,,,,,
Sol-39926,,,,,,,
Sol-39927,,,,,,,
Sol-39928,,,,,,,
Sol-39929,,,,,,,
Sol-39930,,,,,,,
Sol-39931,,,,,,,
Sol-39932,,,,,,,
Sol-39933,,,,,,,
Sol-39934,,,,,,,
Sol-39935,,,,,,,
Sol-39936,,,,,,,
Sol-39937,,,,,,,
Sol-39938,,,,,,,
Sol-39939,,,,,,,
Sol-39940,,,,,,,
Sol-39941,,,,,,,
Sol-39942,,,,,,,
Sol-39943,,,,,,,
Sol-39944,,,,,,,
Sol-39945,,,,,,,
Sol-39946,,,,,,,
Sol-39947,,,,,,,
Sol-39948,,,,,,,
Sol-39949,,,,,,,
Sol-39950,,,,,,,
Sol-39951,,,,,,,
Sol-39952,,,,,,,
Sol-39953,,,,,,,
Sol-39954,,,,,,,
Sol-39955,,,,,,,
Sol-39956,,,,,,,
Sol-39957,,,,,,,
Sol-39958,,,,,,,
Sol-39959,,,,,,,
Sol-39960,,,,,,,
Sol-39961,,,,,,,
Sol-39962,,,,,,,
Sol-39963,,,,,,,
Sol-39964,,,,,,,
Sol-39965,,,,,,,
Sol-39966,,,,,,,
Sol-39967,,,,,,,
Sol-39968,,,,,,,
Sol-39969,,,,,,,
Sol-39970,,,,,,,
Sol-39971,,,,,,,
Sol-39972,,,,,,,
Sol-39973,,,,,,,
Sol-39974,,,,,,,
Sol-39975,,,,,,,
Sol-39976,,,,,,,
Sol-39977,,,,,,,
Sol-39978,,,,,,,
Sol-39979,,,,,,,
Sol-39980,,,,,,,
Sol-39981,,,,,,,
Sol-39982,,,,,,,
Sol-39983,,,,,,,
Sol-39984,,,,,,,
Sol-39985,,,,,,,
Sol-39986,,,,,,,
Sol-39987,,,,,,,
Sol-39988,,,,,,,
Sol-39989,,,,,,,
Sol-39990,,,,,,,
Sol-39991,,,,,,,
Sol-39992,,,,,,,
Sol-39993,,,,,,,
Sol-39994,,,,,,,
Sol-39995,,,,,,,
Sol-39996,,,,,,,
Sol-39997,,,,,,,
Sol-39998,,,,,,,
Sol-39999,,,,,,,
Sol-40000,,,,,,,
Sol-40001,,,,,,,
Sol-40002,,,,,,,
Sol-40003,,,,,,,
Sol-40004,,,,,,,
Sol-40005,,,,,,,
Sol-40006,,,,,,,
Sol-40007,,,,,,,
Sol-40008,,,,,,,
Sol-40009,,,,,,,
Sol-40010,,,,,,,
Sol-40011,,,,,,,
Sol-40012,,,,,,,
Sol-40013,,,,,,,
Sol-40014,,,,,,,
Sol-40015,,,,,,,
Sol-40016,,,,,,,
Sol-40017,,,,,,,
Sol-40018,,,,,,,
Sol-40019,,,,,,,
Sol-40020,,,,,,,
Sol-40021,,,,,,,
Sol-40022,,,,,,,
Sol-40023,,,,,,,
Sol-40024,,,,,,,
Sol-40025,,,,,,,
Sol-40026,,,,,,,
Sol-40027,,,,,,,
Sol-40028,,,,,,,
Sol-40029,,,,,,,
Sol-40030,,,,,,,
Sol-40031,,,,,,,
Sol-40032,,,,,,,
Sol-40033,,,,,,,
Sol-40034,,,,,,,
Sol-40035,,,,,,,
Sol-40036,,,,,,,
Sol-40037,,,,,,,
Sol-40038,,,,,,,
Sol-40039,,,,,,,
Sol-40040,,,,,,,
Sol-40041,,,,,,,
Sol-40042,,,,,,,
Sol-40043,,,,,,,
Sol-40044,,,,,,,
Sol-40045,,,,,,,
Sol-40046,,,,,,,
Sol-40047,,,,,,,
Sol-40048,,,,,,,
Sol-40049,,,,,,,
Sol-40050,,,,,,,
Sol-40051,,,,,,,
Sol-40052,,,,,,,
Sol-40053,,,,,,,
Sol-40054,,,,,,,
Sol-40055,,,,,,,
Sol-40056,,,,,,,
Sol-40057,,,,,,,
Sol-40058,,,,,,,
Sol-40059,,,,,,,
Sol-40060,,,,,,,
Sol-40061,,,,,,,
Sol-40062,,,,,,,
Sol-40063,,,,,,,
Sol-40064,,,,,,,
Sol-40065,,,,,,,
Sol-40066,,,,,,,
Sol-40067,,,,,,,
Sol-40068,,,,,,,
Sol-40069,,,,,,,
Sol-40070,,,,,,,
Sol-40071,,,,,,,
Sol-40072,,,,,,,
Sol-40073,,,,,,,
Sol-40074,,,,,,,
Sol-40075,,,,,,,
Sol-40076,,,,,,,
Sol-40077,,,,,,,
Sol-40078,,,,,,,
Sol-40079,,,,,,,
Sol-40080,,,,,,,
Sol-40081,,,,,,,
Sol-40082,,,,,,,
Sol-40083,,,,,,,
Sol-40084,,,,,,,
Sol-40085,,,,,,,
Sol-40086,,,,,,,
Sol-40087,,,,,,,
Sol-40088,,,,,,,
Sol-40089,,,,,,,
Sol-40090,,,,,,,
Sol-40091,,,,,,,
Sol-40092,,,,,,,
Sol-40093,,,,,,,
Sol-40094,,,,,,,
Sol-40095,,,,,,,
Sol-40096,,,,,,,
Sol-40097,,,,,,,
Sol-40098,,,,,,,
Sol-40099,,,,,,,
Sol-40100,,,,,,,
Sol-40101,,,,,,,
Sol-40102,,,,,,,
Sol-40103,,,,,,,
Sol-40104,,,,,,,
Sol-40105,,,,,,,
Sol-40106,,,,,,,
Sol-40107,,,,,,,
Sol-40108,,,,,,,
Sol-40109,,,,,,,
Sol-40110,,,,,,,
Sol-40111,,,,,,,
Sol-40112,,,,,,,
Sol-40113,,,,,,,
Sol-40114,,,,,,,
Sol-40115,,,,,,,
Sol-40116,,,,,,,
Sol-40117,,,,,,,
Sol-40118,,,,,,,
Sol-40119,,,,,,,
Sol-40120,,,,,,,
Sol-40121,,,,,,,
Sol-40122,,,,,,,
Sol-40123,,,,,,,
Sol-40124,,,,,,,
Sol-40125,,,,,,,
Sol-40126,,,,,,,
Sol-40127,,,,,,,
Sol-40128,,,,,,,
Sol-40129,,,,,,,
Sol-40130,,,,,,,
Sol-40131,,,,,,,
Sol-40132,,,,,,,
Sol-40133,,,,,,,
Sol-40134,,,,,,,
Sol-40135,,,,,,,
Sol-40136,,,,,,,
Sol-40137,,,,,,,
Sol-40138,,,,,,,
Sol-40139,,,,,,,
Sol-40140,,,,,,,
Sol-40141,,,,,,,
Sol-40142,,,,,,,
Sol-40143,,,,,,,
Sol-40144,,,,,,,
Sol-40145,,,,,,,
Sol-40146,,,,,,,
Sol-40147,,,,,,,
Sol-40148,,,,,,,
Sol-40149,,,,,,,
Sol-40150,,,,,,,
Sol-40151,,,,,,,
Sol-40152,,,,,,,
Sol-40153,,,,,,,
Sol-40154,,,,,,,
Sol-40155,,,,,,,
Sol-40156,,,,,,,
Sol-40157,,,,,,,
Sol-40158,,,,,,,
Sol-40159,,,,,,,
Sol-40160,,,,,,,
Sol-40161,,,,,,,
Sol-40162,,,,,,,
Sol-40163,,,,,,,
Sol-40164,,,,,,,
Sol-40165,,,,,,,
Sol-40166,,,,,,,
Sol-40167,,,,,,,
Sol-40168,,,,,,,
Sol-40169,,,,,,,
Sol-40170,,,,,,,
Sol-40171,,,,,,,
Sol-40172,,,,,,,
Sol-40173,,,,,,,
Sol-40174,,,,,,,
Sol-40175,,,,,,,
Sol-40176,,,,,,,
Sol-40177,,,,,,,
Sol-40178,,,,,,,
Sol-40179,,,,,,,
Sol-40180,,,,,,,
Sol-40181,,,,,,,
Sol-40182,,,,,,,
Sol-40183,,,,,,,
Sol-40184,,,,,,,
Sol-40185,,,,,,,
Sol-40186,,,,,,,
Sol-40187,,,,,,,
Sol-40188,,,,,,,
Sol-40189,,,,,,,
Sol-40190,,,,,,,
Sol-40191,,,,,,,
Sol-40192,,,,,,,
Sol-40193,,,,,,,
Sol-40194,,,,,,,
Sol-40195,,,,,,,
Sol-40196,,,,,,,
Sol-40197,,,,,,,
Sol-40198,,,,,,,
Sol-40199,,,,,,,
Sol-40200,,,,,,,
Sol-40201,,,,,,,
Sol-40202,,,,,,,
Sol-40203,,,,,,,
Sol-40204,,,,,,,
Sol-40205,,,,,,,
Sol-40206,,,,,,,
Sol-40207,,,,,,,
Sol-40208,,,,,,,
Sol-40209,,,,,,,
Sol-40210,,,,,,,
Sol-40211,,,,,,,
Sol-40212,,,,,,,
Sol-40213,,,,,,,
Sol-40214,,,,,,,
Sol-40215,,,,,,,
Sol-40216,,,,,,,
Sol-40217,,,,,,,
Sol-40218,,,,,,,
Sol-40219,,,,,,,
Sol-40220,,,,,,,
Sol-40221,,,,,,,
Sol-40222,,,,,,,
Sol-40223,,,,,,,
Sol-40224,,,,,,,
Sol-40225,,,,,,,
Sol-40226,,,,,,,
Sol-40227,,,,,,,
Sol-40228,,,,,,,
Sol-40229,,,,,,,
Sol-40230,,,,,,,
Sol-40231,,,,,,,
Sol-40232,,,,,,,
Sol-40233,,,,,,,
Sol-40234,,,,,,,
Sol-40235,,,,,,,
Sol-40236,,,,,,,
Sol-40237,,,,,,,
Sol-40238,,,,,,,
Sol-40239,,,,,,,
Sol-40240,,,,,,,
Sol-40241,,,,,,,
Sol-40242,,,,,,,
Sol-40243,,,,,,,
Sol-40244,,,,,,,
Sol-40245,,,,,,,
Sol-40246,,,,,,,
Sol-40247,,,,,,,
Sol-40248,,,,,,,
Sol-40249,,,,,,,
Sol-40250,,,,,,,
Sol-40251,,,,,,,
Sol-40252,,,,,,,
Sol-40253,,,,,,,
Sol-40254,,,,,,,
Sol-40255,,,,,,,
Sol-40256,,,,,,,
Sol-40257,,,,,,,
Sol-40258,,,,,,,
Sol-40259,,,,,,,
Sol-40260,,,,,,,
Sol-40261,,,,,,,
Sol-40262,,,,,,,
Sol-40263,,,,,,,
Sol-40264,,,,,,,
Sol-40265,,,,,,,
Sol-40266,,,,,,,
Sol-40267,,,,,,,
Sol-40268,,,,,,,
Sol-40269,,,,,,,
Sol-40270,,,,,,,
Sol-40271,,,,,,,
Sol-40272,,,,,,,
Sol-40273,,,,,,,
Sol-40274,,,,,,,
Sol-40275,,,,,,,
Sol-40276,,,,,,,
Sol-40277,,,,,,,
Sol-40278,,,,,,,
Sol-40279,,,,,,,
Sol-40280,,,,,,,
Sol-40281,,,,,,,
Sol-40282,,,,,,,
Sol-40283,,,,,,,
Sol-40284,,,,,,,
Sol-40285,,,,,,,
Sol-40286,,,,,,,
Sol-40287,,,,,,,
Sol-40288,,,,,,,
Sol-40289,,,,,,,
Sol-40290,,,,,,,
Sol-40291,,,,,,,
Sol-40292,,,,,,,
Sol-40293,,,,,,,
Sol-40294,,,,,,,
Sol-40295,,,,,,,
Sol-40296,,,,,,,
Sol-40297,,,,,,,
Sol-40298,,,,,,,
Sol-40299,,,,,,,
Sol-40300,,,,,,,
Sol-40301,,,,,,,
Sol-40302,,,,,,,
Sol-40303,,,,,,,
Sol-40304,,,,,,,
Sol-40305,,,,,,,
Sol-40306,,,,,,,
Sol-40307,,,,,,,
Sol-40308,,,,,,,
Sol-40309,,,,,,,
Sol-40310,,,,,,,
Sol-40311,,,,,,,
Sol-40312,,,,,,,
Sol-40313,,,,,,,
Sol-40314,,,,,,,
Sol-40315,,,,,,,
Sol-40316,,,,,,,
Sol-40317,,,,,,,
Sol-40318,,,,,,,
Sol-40319,,,,,,,
Sol-40320,,,,,,,
Sol-40321,,,,,,,
Sol-40322,,,,,,,
Sol-40323,,,,,,,
Sol-40324,,,,,,,
Sol-40325,,,,,,,
Sol-40326,,,,,,,
Sol-40327,,,,,,,
Sol-40328,,,,,,,
Sol-40329,,,,,,,
Sol-40330,,,,,,,
Sol-40331,,,,,,,
Sol-40332,,,,,,,
Sol-40333,,,,,,,
Sol-40334,,,,,,,
Sol-40335,,,,,,,
Sol-40336,,,,,,,
Sol-40337,,,,,,,
Sol-40338,,,,,,,
Sol-40339,,,,,,,
Sol-40340,,,,,,,
Sol-40341,,,,,,,
Sol-40342,,,,,,,
Sol-40343,,,,,,,
Sol-40344,,,,,,,
Sol-40345,,,,,,,
Sol-40346,,,,,,,
Sol-40347,,,,,,,
Sol-40348,,,,,,,
Sol-40349,,,,,,,
Sol-40350,,,,,,,
Sol-40351,,,,,,,
Sol-40352,,,,,,,
Sol-40353,,,,,,,
Sol-40354,,,,,,,
Sol-40355,,,,,,,
Sol-40356,,,,,,,
Sol-40357,,,,,,,
Sol-40358,,,,,,,
Sol-40359,,,,,,,
Sol-40360,,,,,,,
Sol-40361,,,,,,,
Sol-40362,,,,,,,
Sol-40363,,,,,,,
Sol-40364,,,,,,,
Sol-40365,,,,,,,
Sol-40366,,,,,,,
Sol-40367,,,,,,,
Sol-40368,,,,,,,
Sol-40369,,,,,,,
Sol-40370,,,,,,,
Sol-40371,,,,,,,
Sol-40372,,,,,,,
Sol-40373,,,,,,,
Sol-40374,,,,,,,
Sol-40375,,,,,,,
Sol-40376,,,,,,,
Sol-40377,,,,,,,
Sol-40378,,,,,,,
Sol-40379,,,,,,,
Sol-40380,,,,,,,
Sol-40381,,,,,,,
Sol-40382,,,,,,,
Sol-40383,,,,,,,
Sol-40384,,,,,,,
Sol-40385,,,,,,,
Sol-40386,,,,,,,
Sol-40387,,,,,,,
Sol-40388,,,,,,,
Sol-40389,,,,,,,
Sol-40390,,,,,,,
Sol-40391,,,,,,,
Sol-40392,,,,,,,
Sol-40393,,,,,,,
Sol-40394,,,,,,,
Sol-40395,,,,,,,
Sol-40396,,,,,,,
Sol-40397,,,,,,,
Sol-40398,,,,,,,
Sol-40399,,,,,,,
Sol-40400,,,,,,,
Sol-40401,,,,,,,
Sol-40402,,,,,,,
Sol-40403,,,,,,,
Sol-40404,,,,,,,
Sol-40405,,,,,,,
Sol-40406,,,,,,,
Sol-40407,,,,,,,
Sol-40408,,,,,,,
Sol-40409,,,,,,,
Sol-40410,,,,,,,
Sol-40411,,,,,,,
Sol-40412,,,,,,,
Sol-40413,,,,,,,
Sol-40414,,,,,,,
Sol-40415,,,,,,,
Sol-40416,,,,,,,
Sol-40417,,,,,,,
Sol-40418,,,,,,,
Sol-40419,,,,,,,
Sol-40420,,,,,,,
Sol-40421,,,,,,,
Sol-40422,,,,,,,
Sol-40423,,,,,,,
Sol-40424,,,,,,,
Sol-40425,,,,,,,
Sol-40426,,,,,,,
Sol-40427,,,,,,,
Sol-40428,,,,,,,
Sol-40429,,,,,,,
Sol-40430,,,,,,,
Sol-40431,,,,,,,
Sol-40432,,,,,,,
Sol-40433,,,,,,,
Sol-40434,,,,,,,
Sol-40435,,,,,,,
Sol-40436,,,,,,,
Sol-40437,,,,,,,
Sol-40438,,,,,,,
Sol-40439,,,,,,,
Sol-40440,,,,,,,
Sol-40441,,,,,,,
Sol-40442,,,,,,,
Sol-40443,,,,,,,
Sol-40444,,,,,,,
Sol-40445,,,,,,,
Sol-40446,,,,,,,
Sol-40447,,,,,,,
Sol-40448,,,,,,,
Sol-40449,,,,,,,
Sol-40450,,,,,,,
Sol-40451,,,,,,,
Sol-40452,,,,,,,
Sol-40453,,,,,,,
Sol-40454,,,,,,,
Sol-40455,,,,,,,
Sol-40456,,,,,,,
Sol-40457,,,,,,,
Sol-40458,,,,,,,
Sol-40459,,,,,,,
Sol-40460,,,,,,,
Sol-40461,,,,,,,
Sol-40462,,,,,,,
Sol-40463,,,,,,,
Sol-40464,,,,,,,
Sol-40465,,,,,,,
Sol-40466,,,,,,,
Sol-40467,,,,,,,
Sol-40468,,,,,,,
Sol-40469,,,,,,,
Sol-40470,,,,,,,
Sol-40471,,,,,,,
Sol-40472,,,,,,,
Sol-40473,,,,,,,
Sol-40474,,,,,,,
Sol-40475,,,,,,,
Sol-40476,,,,,,,
Sol-40477,,,,,,,
Sol-40478,,,,,,,
Sol-40479,,,,,,,
Sol-40480,,,,,,,
Sol-40481,,,,,,,
Sol-40482,,,,,,,
Sol-40483,,,,,,,
Sol-40484,,,,,,,
Sol-40485,,,,,,,
Sol-40486,,,,,,,
Sol-40487,,,,,,,
Sol-40488,,,,,,,
Sol-40489,,,,,,,
Sol-40490,,,,,,,
Sol-40491,,,,,,,
Sol-40492,,,,,,,
Sol-40493,,,,,,,
Sol-40494,,,,,,,
Sol-40495,,,,,,,
Sol-40496,,,,,,,
Sol-40497,,,,,,,
Sol-40498,,,,,,,
Sol-40499,,,,,,,
Sol-40500,,,,,,,
Sol-40501,,,,,,,
Sol-40502,,,,,,,
Sol-40503,,,,,,,
Sol-40504,,,,,,,
Sol-40505,,,,,,,
Sol-40506,,,,,,,
Sol-40507,,,,,,,
Sol-40508,,,,,,,
Sol-40509,,,,,,,
Sol-40510,,,,,,,
Sol-40511,,,,,,,
Sol-40512,,,,,,,
Sol-40513,,,,,,,
Sol-40514,,,,,,,
Sol-40515,,,,,,,
Sol-40516,,,,,,,
Sol-40517,,,,,,,
Sol-40518,,,,,,,
Sol-40519,,,,,,,
Sol-40520,,,,,,,
Sol-40521,,,,,,,
Sol-40522,,,,,,,
Sol-40523,,,,,,,
Sol-40524,,,,,,,
Sol-40525,,,,,,,
Sol-40526,,,,,,,
Sol-40527,,,,,,,
Sol-40528,,,,,,,
Sol-40529,,,,,,,
Sol-40530,,,,,,,
Sol-40531,,,,,,,
Sol-40532,,,,,,,
Sol-40533,,,,,,,
Sol-40534,,,,,,,
Sol-40535,,,,,,,
Sol-40536,,,,,,,
Sol-40537,,,,,,,
Sol-40538,,,,,,,
Sol-40539,,,,,,,
Sol-40540,,,,,,,
Sol-40541,,,,,,,
Sol-40542,,,,,,,
Sol-40543,,,,,,,
Sol-40544,,,,,,,
Sol-40545,,,,,,,
Sol-40546,,,,,,,
Sol-40547,,,,,,,
Sol-40548,,,,,,,
Sol-40549,,,,,,,
Sol-40550,,,,,,,
Sol-40551,,,,,,,
Sol-40552,,,,,,,
Sol-40553,,,,,,,
Sol-40554,,,,,,,
Sol-40555,,,,,,,
Sol-40556,,,,,,,
Sol-40557,,,,,,,
Sol-40558,,,,,,,
Sol-40559,,,,,,,
Sol-40560,,,,,,,
Sol-40561,,,,,,,
Sol-40562,,,,,,,
Sol-40563,,,,,,,
Sol-40564,,,,,,,
Sol-40565,,,,,,,
Sol-40566,,,,,,,
Sol-40567,,,,,,,
Sol-40568,,,,,,,
Sol-40569,,,,,,,
Sol-40570,,,,,,,
Sol-40571,,,,,,,
Sol-40572,,,,,,,
Sol-40573,,,,,,,
Sol-40574,,,,,,,
Sol-40575,,,,,,,
Sol-40576,,,,,,,
Sol-40577,,,,,,,
Sol-40578,,,,,,,
Sol-40579,,,,,,,
Sol-40580,,,,,,,
Sol-40581,,,,,,,
Sol-40582,,,,,,,
Sol-40583,,,,,,,
Sol-40584,,,,,,,
Sol-40585,,,,,,,
Sol-40586,,,,,,,
Sol-40587,,,,,,,
Sol-40588,,,,,,,
Sol-40589,,,,,,,
Sol-40590,,,,,,,
Sol-40591,,,,,,,
Sol-40592,,,,,,,
Sol-40593,,,,,,,
Sol-40594,,,,,,,
Sol-40595,,,,,,,
Sol-40596,,,,,,,
Sol-40597,,,,,,,
Sol-40598,,,,,,,
Sol-40599,,,,,,,
Sol-40600,,,,,,,
Sol-40601,,,,,,,
Sol-40602,,,,,,,
Sol-40603,,,,,,,
Sol-40604,,,,,,,
Sol-40605,,,,,,,
Sol-40606,,,,,,,
Sol-40607,,,,,,,
Sol-40608,,,,,,,
Sol-40609,,,,,,,
Sol-40610,,,,,,,
Sol-40611,,,,,,,
Sol-40612,,,,,,,
Sol-40613,,,,,,,
Sol-40614,,,,,,,
Sol-40615,,,,,,,
Sol-40616,,,,,,,
Sol-40617,,,,,,,
Sol-40618,,,,,,,
Sol-40619,,,,,,,
Sol-40620,,,,,,,
Sol-40621,,,,,,,
Sol-40622,,,,,,,
Sol-40623,,,,,,,
Sol-40624,,,,,,,
Sol-40625,,,,,,,
Sol-40626,,,,,,,
Sol-40627,,,,,,,
Sol-40628,,,,,,,
Sol-40629,,,,,,,
Sol-40630,,,,,,,
Sol-40631,,,,,,,
Sol-40632,,,,,,,
Sol-40633,,,,,,,
Sol-40634,,,,,,,
Sol-40635,,,,,,,
Sol-40636,,,,,,,
Sol-40637,,,,,,,
Sol-40638,,,,,,,
Sol-40639,,,,,,,
Sol-40640,,,,,,,
Sol-40641,,,,,,,
Sol-40642,,,,,,,
Sol-40643,,,,,,,
Sol-40644,,,,,,,
Sol-40645,,,,,,,
Sol-40646,,,,,,,
Sol-40647,,,,,,,
Sol-40648,,,,,,,
Sol-40649,,,,,,,
Sol-40650,,,,,,,
Sol-40651,,,,,,,
Sol-40652,,,,,,,
Sol-40653,,,,,,,
Sol-40654,,,,,,,
Sol-40655,,,,,,,
Sol-40656,,,,,,,
Sol-40657,,,,,,,
Sol-40658,,,,,,,
Sol-40659,,,,,,,
Sol-40660,,,,,,,
Sol-40661,,,,,,,
Sol-40662,,,,,,,
Sol-40663,,,,,,,
Sol-40664,,,,,,,
Sol-40665,,,,,,,
Sol-40666,,,,,,,
Sol-40667,,,,,,,
Sol-40668,,,,,,,
Sol-40669,,,,,,,
Sol-40670,,,,,,,
Sol-40671,,,,,,,
Sol-40672,,,,,,,
Sol-40673,,,,,,,
Sol-40674,,,,,,,
Sol-40675,,,,,,,
Sol-40676,,,,,,,
Sol-40677,,,,,,,
Sol-40678,,,,,,,
Sol-40679,,,,,,,
Sol-40680,,,,,,,
Sol-40681,,,,,,,
Sol-40682,,,,,,,
Sol-40683,,,,,,,
Sol-40684,,,,,,,
Sol-40685,,,,,,,
Sol-40686,,,,,,,
Sol-40687,,,,,,,
Sol-40688,,,,,,,
Sol-40689,,,,,,,
Sol-40690,,,,,,,
Sol-40691,,,,,,,
Sol-40692,,,,,,,
Sol-40693,,,,,,,
Sol-40694,,,,,,,
Sol-40695,,,,,,,
Sol-40696,,,,,,,
Sol-40697,,,,,,,
Sol-40698,,,,,,,
Sol-40699,,,,,,,
Sol-40700,,,,,,,
Sol-40701,,,,,,,
Sol-40702,,,,,,,
Sol-40703,,,,,,,
Sol-40704,,,,,,,
Sol-40705,,,,,,,
Sol-40706,,,,,,,
Sol-40707,,,,,,,
Sol-40708,,,,,,,
Sol-40709,,,,,,,
Sol-40710,,,,,,,
Sol-40711,,,,,,,
Sol-40712,,,,,,,
Sol-40713,,,,,,,
Sol-40714,,,,,,,
Sol-40715,,,,,,,
Sol-40716,,,,,,,
Sol-40717,,,,,,,
Sol-40718,,,,,,,
Sol-40719,,,,,,,
Sol-40720,,,,,,,
Sol-40721,,,,,,,
Sol-40722,,,,,,,
Sol-40723,,,,,,,
Sol-40724,,,,,,,
Sol-40725,,,,,,,
Sol-40726,,,,,,,
Sol-40727,,,,,,,
Sol-40728,,,,,,,
Sol-40729,,,,,,,
Sol-40730,,,,,,,
Sol-40731,,,,,,,
Sol-40732,,,,,,,
Sol-40733,,,,,,,
Sol-40734,,,,,,,
Sol-40735,,,,,,,
Sol-40736,,,,,,,
Sol-40737,,,,,,,
Sol-40738,,,,,,,
Sol-40739,,,,,,,
Sol-40740,,,,,,,
Sol-40741,,,,,,,
Sol-40742,,,,,,,
Sol-40743,,,,,,,
Sol-40744,,,,,,,
Sol-40745,,,,,,,
Sol-40746,,,,,,,
Sol-40747,,,,,,,
Sol-40748,,,,,,,
Sol-40749,,,,,,,
Sol-40750,,,,,,,
Sol-40751,,,,,,,
Sol-40752,,,,,,,
Sol-40753,,,,,,,
Sol-40754,,,,,,,
Sol-40755,,,,,,,
Sol-40756,,,,,,,
Sol-40757,,,,,,,
Sol-40758,,,,,,,
Sol-40759,,,,,,,
Sol-40760,,,,,,,
Sol-40761,,,,,,,
Sol-40762,,,,,,,
Sol-40763,,,,,,,
Sol-40764,,,,,,,
Sol-40765,,,,,,,
Sol-40766,,,,,,,
Sol-40767,,,,,,,
Sol-40768,,,,,,,
Sol-40769,,,,,,,
Sol-40770,,,,,,,
Sol-40771,,,,,,,
Sol-40772,,,,,,,
Sol-40773,,,,,,,
Sol-40774,,,,,,,
Sol-40775,,,,,,,
Sol-40776,,,,,,,
Sol-40777,,,,,,,
Sol-40778,,,,,,,
Sol-40779,,,,,,,
Sol-40780,,,,,,,
Sol-40781,,,,,,,
Sol-40782,,,,,,,
Sol-40783,,,,,,,
Sol-40784,,,,,,,
Sol-40785,,,,,,,
Sol-40786,,,,,,,
Sol-40787,,,,,,,
Sol-40788,,,,,,,
Sol-40789,,,,,,,
Sol-40790,,,,,,,
Sol-40791,,,,,,,
Sol-40792,,,,,,,
Sol-40793,,,,,,,
Sol-40794,,,,,,,
Sol-40795,,,,,,,
Sol-40796,,,,,,,
Sol-40797,,,,,,,
Sol-40798,,,,,,,
Sol-40799,,,,,,,
Sol-40800,,,,,,,
Sol-40801,,,,,,,
Sol-40802,,,,,,,
Sol-40803,,,,,,,
Sol-40804,,,,,,,
Sol-40805,,,,,,,
Sol-40806,,,,,,,
Sol-40807,,,,,,,
Sol-40808,,,,,,,
Sol-40809,,,,,,,
Sol-40810,,,,,,,
Sol-40811,,,,,,,
Sol-40812,,,,,,,
Sol-40813,,,,,,,
Sol-40814,,,,,,,
Sol-40815,,,,,,,
Sol-40816,,,,,,,
Sol-40817,,,,,,,
Sol-40818,,,,,,,
Sol-40819,,,,,,,
Sol-40820,,,,,,,
Sol-40821,,,,,,,
Sol-40822,,,,,,,
Sol-40823,,,,,,,
Sol-40824,,,,,,,
Sol-40825,,,,,,,
Sol-40826,,,,,,,
Sol-40827,,,,,,,
Sol-40828,,,,,,,
Sol-40829,,,,,,,
Sol-40830,,,,,,,
Sol-40831,,,,,,,
Sol-40832,,,,,,,
Sol-40833,,,,,,,
Sol-40834,,,,,,,
Sol-40835,,,,,,,
Sol-40836,,,,,,,
Sol-40837,,,,,,,
Sol-40838,,,,,,,
Sol-40839,,,,,,,
Sol-40840,,,,,,,
Sol-40841,,,,,,,
Sol-40842,,,,,,,
Sol-40843,,,,,,,
Sol-40844,,,,,,,
Sol-40845,,,,,,,
Sol-40846,,,,,,,
Sol-40847,,,,,,,
Sol-40848,,,,,,,
Sol-40849,,,,,,,
Sol-40850,,,,,,,
Sol-40851,,,,,,,
Sol-40852,,,,,,,
Sol-40853,,,,,,,
Sol-40854,,,,,,,
Sol-40855,,,,,,,
Sol-40856,,,,,,,
Sol-40857,,,,,,,
Sol-40858,,,,,,,
Sol-40859,,,,,,,
Sol-40860,,,,,,,
Sol-40861,,,,,,,
Sol-40862,,,,,,,
Sol-40863,,,,,,,
Sol-40864,,,,,,,
Sol-40865,,,,,,,
Sol-40866,,,,,,,
Sol-40867,,,,,,,
Sol-40868,,,,,,,
Sol-40869,,,,,,,
Sol-40870,,,,,,,
Sol-40871,,,,,,,
Sol-40872,,,,,,,
Sol-40873,,,,,,,
Sol-40874,,,,,,,
Sol-40875,,,,,,,
Sol-40876,,,,,,,
Sol-40877,,,,,,,
Sol-40878,,,,,,,
Sol-40879,,,,,,,
Sol-40880,,,,,,,
Sol-40881,,,,,,,
Sol-40882,,,,,,,
Sol-40883,,,,,,,
Sol-40884,,,,,,,
Sol-40885,,,,,,,
Sol-40886,,,,,,,
Sol-40887,,,,,,,
Sol-40888,,,,,,,
Sol-40889,,,,,,,
Sol-40890,,,,,,,
Sol-40891,,,,,,,
Sol-40892,,,,,,,
Sol-40893,,,,,,,
Sol-40894,,,,,,,
Sol-40895,,,,,,,
Sol-40896,,,,,,,
Sol-40897,,,,,,,
Sol-40898,,,,,,,
Sol-40899,,,,,,,
Sol-40900,,,,,,,
Sol-40901,,,,,,,
Sol-40902,,,,,,,
Sol-40903,,,,,,,
Sol-40904,,,,,,,
Sol-40905,,,,,,,
Sol-40906,,,,,,,
Sol-40907,,,,,,,
Sol-40908,,,,,,,
Sol-40909,,,,,,,
Sol-40910,,,,,,,
Sol-40911,,,,,,,
Sol-40912,,,,,,,
Sol-40913,,,,,,,
Sol-40914,,,,,,,
Sol-40915,,,,,,,
Sol-40916,,,,,,,
Sol-40917,,,,,,,
Sol-40918,,,,,,,
Sol-40919,,,,,,,
Sol-40920,,,,,,,
Sol-40921,,,,,,,
Sol-40922,,,,,,,
Sol-40923,,,,,,,
Sol-40924,,,,,,,
Sol-40925,,,,,,,
Sol-40926,,,,,,,
Sol-40927,,,,,,,
Sol-40928,,,,,,,
Sol-40929,,,,,,,
Sol-40930,,,,,,,
Sol-40931,,,,,,,
Sol-40932,,,,,,,
Sol-40933,,,,,,,
Sol-40934,,,,,,,
Sol-40935,,,,,,,
Sol-40936,,,,,,,
Sol-40937,,,,,,,
Sol-40938,,,,,,,
Sol-40939,,,,,,,
Sol-40940,,,,,,,
Sol-40941,,,,,,,
Sol-40942,,,,,,,
Sol-40943,,,,,,,
Sol-40944,,,,,,,
Sol-40945,,,,,,,
Sol-40946,,,,,,,
Sol-40947,,,,,,,
Sol-40948,,,,,,,
Sol-40949,,,,,,,
Sol-40950,,,,,,,
Sol-40951,,,,,,,
Sol-40952,,,,,,,
Sol-40953,,,,,,,
Sol-40954,,,,,,,
Sol-40955,,,,,,,
Sol-40956,,,,,,,
Sol-40957,,,,,,,
Sol-40958,,,,,,,
Sol-40959,,,,,,,
Sol-40960,,,,,,,
Sol-40961,,,,,,,
Sol-40962,,,,,,,
Sol-40963,,,,,,,
Sol-40964,,,,,,,
Sol-40965,,,,,,,
Sol-40966,,,,,,,
Sol-40967,,,,,,,
Sol-40968,,,,,,,
Sol-40969,,,,,,,
Sol-40970,,,,,,,
Sol-40971,,,,,,,
Sol-40972,,,,,,,
Sol-40973,,,,,,,
Sol-40974,,,,,,,
Sol-40975,,,,,,,
Sol-40976,,,,,,,
Sol-40977,,,,,,,
Sol-40978,,,,,,,
Sol-40979,,,,,,,
Sol-40980,,,,,,,
Sol-40981,,,,,,,
Sol-40982,,,,,,,
Sol-40983,,,,,,,
Sol-40984,,,,,,,
Sol-40985,,,,,,,
Sol-40986,,,,,,,
Sol-40987,,,,,,,
Sol-40988,,,,,,,
Sol-40989,,,,,,,
Sol-40990,,,,,,,
Sol-40991,,,,,,,
Sol-40992,,,,,,,
Sol-40993,,,,,,,
Sol-40994,,,,,,,
Sol-40995,,,,,,,
Sol-40996,,,,,,,
Sol-40997,,,,,,,
Sol-40998,,,,,,,
Sol-40999,,,,,,,
Sol-41000,,,,,,,
Sol-41001,,,,,,,
Sol-41002,,,,,,,
Sol-41003,,,,,,,
Sol-41004,,,,,,,
Sol-41005,,,,,,,
Sol-41006,,,,,,,
Sol-41007,,,,,,,
Sol-41008,,,,,,,
Sol-41009,,,,,,,
Sol-41010,,,,,,,
Sol-41011,,,,,,,
Sol-41012,,,,,,,
Sol-41013,,,,,,,
Sol-41014,,,,,,,
Sol-41015,,,,,,,
Sol-41016,,,,,,,
Sol-41017,,,,,,,
Sol-41018,,,,,,,
Sol-41019,,,,,,,
Sol-41020,,,,,,,
Sol-41021,,,,,,,
Sol-41022,,,,,,,
Sol-41023,,,,,,,
Sol-41024,,,,,,,
Sol-41025,,,,,,,
Sol-41026,,,,,,,
Sol-41027,,,,,,,
Sol-41028,,,,,,,
Sol-41029,,,,,,,
Sol-41030,,,,,,,
Sol-41031,,,,,,,
Sol-41032,,,,,,,
Sol-41033,,,,,,,
Sol-41034,,,,,,,
Sol-41035,,,,,,,
Sol-41036,,,,,,,
Sol-41037,,,,,,,
Sol-41038,,,,,,,
Sol-41039,,,,,,,
Sol-41040,,,,,,,
Sol-41041,,,,,,,
Sol-41042,,,,,,,
Sol-41043,,,,,,,
Sol-41044,,,,,,,
Sol-41045,,,,,,,
Sol-41046,,,,,,,
Sol-41047,,,,,,,
Sol-41048,,,,,,,
Sol-41049,,,,,,,
Sol-41050,,,,,,,
Sol-41051,,,,,,,
Sol-41052,,,,,,,
Sol-41053,,,,,,,
Sol-41054,,,,,,,
Sol-41055,,,,,,,
Sol-41056,,,,,,,
Sol-41057,,,,,,,
Sol-41058,,,,,,,
Sol-41059,,,,,,,
Sol-41060,,,,,,,
Sol-41061,,,,,,,
Sol-41062,,,,,,,
Sol-41063,,,,,,,
Sol-41064,,,,,,,
Sol-41065,,,,,,,
Sol-41066,,,,,,,
Sol-41067,,,,,,,
Sol-41068,,,,,,,
Sol-41069,,,,,,,
Sol-41070,,,,,,,
Sol-41071,,,,,,,
Sol-41072,,,,,,,
Sol-41073,,,,,,,
Sol-41074,,,,,,,
Sol-41075,,,,,,,
Sol-41076,,,,,,,
Sol-41077,,,,,,,
Sol-41078,,,,,,,
Sol-41079,,,,,,,
Sol-41080,,,,,,,
Sol-41081,,,,,,,
Sol-41082,,,,,,,
Sol-41083,,,,,,,
Sol-41084,,,,,,,
Sol-41085,,,,,,,
Sol-41086,,,,,,,
Sol-41087,,,,,,,
Sol-41088,,,,,,,
Sol-41089,,,,,,,
Sol-41090,,,,,,,
Sol-41091,,,,,,,
Sol-41092,,,,,,,
Sol-41093,,,,,,,
Sol-41094,,,,,,,
Sol-41095,,,,,,,
Sol-41096,,,,,,,
Sol-41097,,,,,,,
Sol-41098,,,,,,,
Sol-41099,,,,,,,
Sol-41100,,,,,,,
Sol-41101,,,,,,,
Sol-41102,,,,,,,
Sol-41103,,,,,,,
Sol-41104,,,,,,,
Sol-41105,,,,,,,
Sol-41106,,,,,,,
Sol-41107,,,,,,,
Sol-41108,,,,,,,
Sol-41109,,,,,,,
Sol-41110,,,,,,,
Sol-41111,,,,,,,
Sol-41112,,,,,,,
Sol-41113,,,,,,,
Sol-41114,,,,,,,
Sol-41115,,,,,,,
Sol-41116,,,,,,,
Sol-41117,,,,,,,
Sol-41118,,,,,,,
Sol-41119,,,,,,,
Sol-41120,,,,,,,
Sol-41121,,,,,,,
Sol-41122,,,,,,,
Sol-41123,,,,,,,
Sol-41124,,,,,,,
Sol-41125,,,,,,,
Sol-41126,,,,,,,
Sol-41127,,,,,,,
Sol-41128,,,,,,,
Sol-41129,,,,,,,
Sol-41130,,,,,,,
Sol-41131,,,,,,,
Sol-41132,,,,,,,
Sol-41133,,,,,,,
Sol-41134,,,,,,,
Sol-41135,,,,,,,
Sol-41136,,,,,,,
Sol-41137,,,,,,,
Sol-41138,,,,,,,
Sol-41139,,,,,,,
Sol-41140,,,,,,,
Sol-41141,,,,,,,
Sol-41142,,,,,,,
Sol-41143,,,,,,,
Sol-41144,,,,,,,
Sol-41145,,,,,,,
Sol-41146,,,,,,,
Sol-41147,,,,,,,
Sol-41148,,,,,,,
Sol-41149,,,,,,,
Sol-41150,,,,,,,
Sol-41151,,,,,,,
Sol-41152,,,,,,,
Sol-41153,,,,,,,
Sol-41154,,,,,,,
Sol-41155,,,,,,,
Sol-41156,,,,,,,
Sol-41157,,,,,,,
Sol-41158,,,,,,,
Sol-41159,,,,,,,
Sol-41160,,,,,,,
Sol-41161,,,,,,,
Sol-41162,,,,,,,
Sol-41163,,,,,,,
Sol-41164,,,,,,,
Sol-41165,,,,,,,
Sol-41166,,,,,,,
Sol-41167,,,,,,,
Sol-41168,,,,,,,
Sol-41169,,,,,,,
Sol-41170,,,,,,,
Sol-41171,,,,,,,
Sol-41172,,,,,,,
Sol-41173,,,,,,,
Sol-41174,,,,,,,
Sol-41175,,,,,,,
Sol-41176,,,,,,,
Sol-41177,,,,,,,
Sol-41178,,,,,,,
Sol-41179,,,,,,,
Sol-41180,,,,,,,
Sol-41181,,,,,,,
Sol-41182,,,,,,,
Sol-41183,,,,,,,
Sol-41184,,,,,,,
Sol-41185,,,,,,,
Sol-41186,,,,,,,
Sol-41187,,,,,,,
Sol-41188,,,,,,,
Sol-41189,,,,,,,
Sol-41190,,,,,,,
Sol-41191,,,,,,,
Sol-41192,,,,,,,
Sol-41193,,,,,,,
Sol-41194,,,,,,,
Sol-41195,,,,,,,
Sol-41196,,,,,,,
Sol-41197,,,,,,,
Sol-41198,,,,,,,
Sol-41199,,,,,,,
Sol-41200,,,,,,,
Sol-41201,,,,,,,
Sol-41202,,,,,,,
Sol-41203,,,,,,,
Sol-41204,,,,,,,
Sol-41205,,,,,,,
Sol-41206,,,,,,,
Sol-41207,,,,,,,
Sol-41208,,,,,,,
Sol-41209,,,,,,,
Sol-41210,,,,,,,
Sol-41211,,,,,,,
Sol-41212,,,,,,,
Sol-41213,,,,,,,
Sol-41214,,,,,,,
Sol-41215,,,,,,,
Sol-41216,,,,,,,
Sol-41217,,,,,,,
Sol-41218,,,,,,,
Sol-41219,,,,,,,
Sol-41220,,,,,,,
Sol-41221,,,,,,,
Sol-41222,,,,,,,
Sol-41223,,,,,,,
Sol-41224,,,,,,,
Sol-41225,,,,,,,
Sol-41226,,,,,,,
Sol-41227,,,,,,,
Sol-41228,,,,,,,
Sol-41229,,,,,,,
Sol-41230,,,,,,,
Sol-41231,,,,,,,
Sol-41232,,,,,,,
Sol-41233,,,,,,,
Sol-41234,,,,,,,
Sol-41235,,,,,,,
Sol-41236,,,,,,,
Sol-41237,,,,,,,
Sol-41238,,,,,,,
Sol-41239,,,,,,,
Sol-41240,,,,,,,
Sol-41241,,,,,,,
Sol-41242,,,,,,,
Sol-41243,,,,,,,
Sol-41244,,,,,,,
Sol-41245,,,,,,,
Sol-41246,,,,,,,
Sol-41247,,,,,,,
Sol-41248,,,,,,,
Sol-41249,,,,,,,
Sol-41250,,,,,,,
Sol-41251,,,,,,,
Sol-41252,,,,,,,
Sol-41253,,,,,,,
Sol-41254,,,,,,,
Sol-41255,,,,,,,
Sol-41256,,,,,,,
Sol-41257,,,,,,,
Sol-41258,,,,,,,
Sol-41259,,,,,,,
Sol-41260,,,,,,,
Sol-41261,,,,,,,
Sol-41262,,,,,,,
Sol-41263,,,,,,,
Sol-41264,,,,,,,
Sol-41265,,,,,,,
Sol-41266,,,,,,,
Sol-41267,,,,,,,
Sol-41268,,,,,,,
Sol-41269,,,,,,,
Sol-41270,,,,,,,
Sol-41271,,,,,,,
Sol-41272,,,,,,,
Sol-41273,,,,,,,
Sol-41274,,,,,,,
Sol-41275,,,,,,,
Sol-41276,,,,,,,
Sol-41277,,,,,,,
Sol-41278,,,,,,,
Sol-41279,,,,,,,
Sol-41280,,,,,,,
Sol-41281,,,,,,,
Sol-41282,,,,,,,
Sol-41283,,,,,,,
Sol-41284,,,,,,,
Sol-41285,,,,,,,
Sol-41286,,,,,,,
Sol-41287,,,,,,,
Sol-41288,,,,,,,
Sol-41289,,,,,,,
Sol-41290,,,,,,,
Sol-41291,,,,,,,
Sol-41292,,,,,,,
Sol-41293,,,,,,,
Sol-41294,,,,,,,
Sol-41295,,,,,,,
Sol-41296,,,,,,,
Sol-41297,,,,,,,
Sol-41298,,,,,,,
Sol-41299,,,,,,,
Sol-41300,,,,,,,
Sol-41301,,,,,,,
Sol-41302,,,,,,,
Sol-41303,,,,,,,
Sol-41304,,,,,,,
Sol-41305,,,,,,,
Sol-41306,,,,,,,
Sol-41307,,,,,,,
Sol-41308,,,,,,,
Sol-41309,,,,,,,
Sol-41310,,,,,,,
Sol-41311,,,,,,,
Sol-41312,,,,,,,
Sol-41313,,,,,,,
Sol-41314,,,,,,,
Sol-41315,,,,,,,
Sol-41316,,,,,,,
Sol-41317,,,,,,,
Sol-41318,,,,,,,
Sol-41319,,,,,,,
Sol-41320,,,,,,,
Sol-41321,,,,,,,
Sol-41322,,,,,,,
Sol-41323,,,,,,,
Sol-41324,,,,,,,
Sol-41325,,,,,,,
Sol-41326,,,,,,,
Sol-41327,,,,,,,
Sol-41328,,,,,,,
Sol-41329,,,,,,,
Sol-41330,,,,,,,
Sol-41331,,,,,,,
Sol-41332,,,,,,,
Sol-41333,,,,,,,
Sol-41334,,,,,,,
Sol-41335,,,,,,,
Sol-41336,,,,,,,
Sol-41337,,,,,,,
Sol-41338,,,,,,,
Sol-41339,,,,,,,
Sol-41340,,,,,,,
Sol-41341,,,,,,,
Sol-41342,,,,,,,
Sol-41343,,,,,,,
Sol-41344,,,,,,,
Sol-41345,,,,,,,
Sol-41346,,,,,,,
Sol-41347,,,,,,,
Sol-41348,,,,,,,
Sol-41349,,,,,,,
Sol-41350,,,,,,,
Sol-41351,,,,,,,
Sol-41352,,,,,,,
Sol-41353,,,,,,,
Sol-41354,,,,,,,
Sol-41355,,,,,,,
Sol-41356,,,,,,,
Sol-41357,,,,,,,
Sol-41358,,,,,,,
Sol-41359,,,,,,,
Sol-41360,,,,,,,
Sol-41361,,,,,,,
Sol-41362,,,,,,,
Sol-41363,,,,,,,
Sol-41364,,,,,,,
Sol-41365,,,,,,,
Sol-41366,,,,,,,
Sol-41367,,,,,,,
Sol-41368,,,,,,,
Sol-41369,,,,,,,
Sol-41370,,,,,,,
Sol-41371,,,,,,,
Sol-41372,,,,,,,
Sol-41373,,,,,,,
Sol-41374,,,,,,,
Sol-41375,,,,,,,
Sol-41376,,,,,,,
Sol-41377,,,,,,,
Sol-41378,,,,,,,
Sol-41379,,,,,,,
Sol-41380,,,,,,,
Sol-41381,,,,,,,
Sol-41382,,,,,,,
Sol-41383,,,,,,,
Sol-41384,,,,,,,
Sol-41385,,,,,,,
Sol-41386,,,,,,,
Sol-41387,,,,,,,
Sol-41388,,,,,,,
Sol-41389,,,,,,,
Sol-41390,,,,,,,
Sol-41391,,,,,,,
Sol-41392,,,,,,,
Sol-41393,,,,,,,
Sol-41394,,,,,,,
Sol-41395,,,,,,,
Sol-41396,,,,,,,
Sol-41397,,,,,,,
Sol-41398,,,,,,,
Sol-41399,,,,,,,
Sol-41400,,,,,,,
Sol-41401,,,,,,,
Sol-41402,,,,,,,
Sol-41403,,,,,,,
Sol-41404,,,,,,,
Sol-41405,,,,,,,
Sol-41406,,,,,,,
Sol-41407,,,,,,,
Sol-41408,,,,,,,
Sol-41409,,,,,,,
Sol-41410,,,,,,,
Sol-41411,,,,,,,
Sol-41412,,,,,,,
Sol-41413,,,,,,,
Sol-41414,,,,,,,
Sol-41415,,,,,,,
Sol-41416,,,,,,,
Sol-41417,,,,,,,
Sol-41418,,,,,,,
Sol-41419,,,,,,,
Sol-41420,,,,,,,
Sol-41421,,,,,,,
Sol-41422,,,,,,,
Sol-41423,,,,,,,
Sol-41424,,,,,,,
Sol-41425,,,,,,,
Sol-41426,,,,,,,
Sol-41427,,,,,,,
Sol-41428,,,,,,,
Sol-41429,,,,,,,
Sol-41430,,,,,,,
Sol-41431,,,,,,,
Sol-41432,,,,,,,
Sol-41433,,,,,,,
Sol-41434,,,,,,,
Sol-41435,,,,,,,
Sol-41436,,,,,,,
Sol-41437,,,,,,,
Sol-41438,,,,,,,
Sol-41439,,,,,,,
Sol-41440,,,,,,,
Sol-41441,,,,,,,
Sol-41442,,,,,,,
Sol-41443,,,,,,,
Sol-41444,,,,,,,
Sol-41445,,,,,,,
Sol-41446,,,,,,,
Sol-41447,,,,,,,
Sol-41448,,,,,,,
Sol-41449,,,,,,,
Sol-41450,,,,,,,
Sol-41451,,,,,,,
Sol-41452,,,,,,,
Sol-41453,,,,,,,
Sol-41454,,,,,,,
Sol-41455,,,,,,,
Sol-41456,,,,,,,
Sol-41457,,,,,,,
Sol-41458,,,,,,,
Sol-41459,,,,,,,
Sol-41460,,,,,,,
Sol-41461,,,,,,,
Sol-41462,,,,,,,
Sol-41463,,,,,,,
Sol-41464,,,,,,,
Sol-41465,,,,,,,
Sol-41466,,,,,,,
Sol-41467,,,,,,,
Sol-41468,,,,,,,
Sol-41469,,,,,,,
Sol-41470,,,,,,,
Sol-41471,,,,,,,
Sol-41472,,,,,,,
Sol-41473,,,,,,,
Sol-41474,,,,,,,
Sol-41475,,,,,,,
Sol-41476,,,,,,,
Sol-41477,,,,,,,
Sol-41478,,,,,,,
Sol-41479,,,,,,,
Sol-41480,,,,,,,
Sol-41481,,,,,,,
Sol-41482,,,,,,,
Sol-41483,,,,,,,
Sol-41484,,,,,,,
Sol-41485,,,,,,,
Sol-41486,,,,,,,
Sol-41487,,,,,,,
Sol-41488,,,,,,,
Sol-41489,,,,,,,
Sol-41490,,,,,,,
Sol-41491,,,,,,,
Sol-41492,,,,,,,
Sol-41493,,,,,,,
Sol-41494,,,,,,,
Sol-41495,,,,,,,
Sol-41496,,,,,,,
Sol-41497,,,,,,,
Sol-41498,,,,,,,
Sol-41499,,,,,,,
Sol-41500,,,,,,,
Sol-41501,,,,,,,
Sol-41502,,,,,,,
Sol-41503,,,,,,,
Sol-41504,,,,,,,
Sol-41505,,,,,,,
Sol-41506,,,,,,,
Sol-41507,,,,,,,
Sol-41508,,,,,,,
Sol-41509,,,,,,,
Sol-41510,,,,,,,
Sol-41511,,,,,,,
Sol-41512,,,,,,,
Sol-41513,,,,,,,
Sol-41514,,,,,,,
Sol-41515,,,,,,,
Sol-41516,,,,,,,
Sol-41517,,,,,,,
Sol-41518,,,,,,,
Sol-41519,,,,,,,
Sol-41520,,,,,,,
Sol-41521,,,,,,,
Sol-41522,,,,,,,
Sol-41523,,,,,,,
Sol-41524,,,,,,,
Sol-41525,,,,,,,
Sol-41526,,,,,,,
Sol-41527,,,,,,,
Sol-41528,,,,,,,
Sol-41529,,,,,,,
Sol-41530,,,,,,,
Sol-41531,,,,,,,
Sol-41532,,,,,,,
Sol-41533,,,,,,,
Sol-41534,,,,,,,
Sol-41535,,,,,,,
Sol-41536,,,,,,,
Sol-41537,,,,,,,
Sol-41538,,,,,,,
Sol-41539,,,,,,,
Sol-41540,,,,,,,
Sol-41541,,,,,,,
Sol-41542,,,,,,,
Sol-41543,,,,,,,
Sol-41544,,,,,,,
Sol-41545,,,,,,,
Sol-41546,,,,,,,
Sol-41547,,,,,,,
Sol-41548,,,,,,,
Sol-41549,,,,,,,
Sol-41550,,,,,,,
Sol-41551,,,,,,,
Sol-41552,,,,,,,
Sol-41553,,,,,,,
Sol-41554,,,,,,,
Sol-41555,,,,,,,
Sol-41556,,,,,,,
Sol-41557,,,,,,,
Sol-41558,,,,,,,
Sol-41559,,,,,,,
Sol-41560,,,,,,,
Sol-41561,,,,,,,
Sol-41562,,,,,,,
Sol-41563,,,,,,,
Sol-41564,,,,,,,
Sol-41565,,,,,,,
Sol-41566,,,,,,,
Sol-41567,,,,,,,
Sol-41568,,,,,,,
Sol-41569,,,,,,,
Sol-41570,,,,,,,
Sol-41571,,,,,,,
Sol-41572,,,,,,,
Sol-41573,,,,,,,
Sol-41574,,,,,,,
Sol-41575,,,,,,,
Sol-41576,,,,,,,
Sol-41577,,,,,,,
Sol-41578,,,,,,,
Sol-41579,,,,,,,
Sol-41580,,,,,,,
Sol-41581,,,,,,,
Sol-41582,,,,,,,
Sol-41583,,,,,,,
Sol-41584,,,,,,,
Sol-41585,,,,,,,
Sol-41586,,,,,,,
Sol-41587,,,,,,,
Sol-41588,,,,,,,
Sol-41589,,,,,,,
Sol-41590,,,,,,,
Sol-41591,,,,,,,
Sol-41592,,,,,,,
Sol-41593,,,,,,,
Sol-41594,,,,,,,
Sol-41595,,,,,,,
Sol-41596,,,,,,,
Sol-41597,,,,,,,
Sol-41598,,,,,,,
Sol-41599,,,,,,,
Sol-41600,,,,,,,
Sol-41601,,,,,,,
Sol-41602,,,,,,,
Sol-41603,,,,,,,
Sol-41604,,,,,,,
Sol-41605,,,,,,,
Sol-41606,,,,,,,
Sol-41607,,,,,,,
Sol-41608,,,,,,,
Sol-41609,,,,,,,
Sol-41610,,,,,,,
Sol-41611,,,,,,,
Sol-41612,,,,,,,
Sol-41613,,,,,,,
Sol-41614,,,,,,,
Sol-41615,,,,,,,
Sol-41616,,,,,,,
Sol-41617,,,,,,,
Sol-41618,,,,,,,
Sol-41619,,,,,,,
Sol-41620,,,,,,,
Sol-41621,,,,,,,
Sol-41622,,,,,,,
Sol-41623,,,,,,,
Sol-41624,,,,,,,
Sol-41625,,,,,,,
Sol-41626,,,,,,,
Sol-41627,,,,,,,
Sol-41628,,,,,,,
Sol-41629,,,,,,,
Sol-41630,,,,,,,
Sol-41631,,,,,,,
Sol-41632,,,,,,,
Sol-41633,,,,,,,
Sol-41634,,,,,,,
Sol-41635,,,,,,,
Sol-41636,,,,,,,
Sol-41637,,,,,,,
Sol-41638,,,,,,,
Sol-41639,,,,,,,
Sol-41640,,,,,,,
Sol-41641,,,,,,,
Sol-41642,,,,,,,
Sol-41643,,,,,,,
Sol-41644,,,,,,,
Sol-41645,,,,,,,
Sol-41646,,,,,,,
Sol-41647,,,,,,,
Sol-41648,,,,,,,
Sol-41649,,,,,,,
Sol-41650,,,,,,,
Sol-41651,,,,,,,
Sol-41652,,,,,,,
Sol-41653,,,,,,,
Sol-41654,,,,,,,
Sol-41655,,,,,,,
Sol-41656,,,,,,,
Sol-41657,,,,,,,
Sol-41658,,,,,,,
Sol-41659,,,,,,,
Sol-41660,,,,,,,
Sol-41661,,,,,,,
Sol-41662,,,,,,,
Sol-41663,,,,,,,
Sol-41664,,,,,,,
Sol-41665,,,,,,,
Sol-41666,,,,,,,
Sol-41667,,,,,,,
Sol-41668,,,,,,,
Sol-41669,,,,,,,
Sol-41670,,,,,,,
Sol-41671,,,,,,,
Sol-41672,,,,,,,
Sol-41673,,,,,,,
Sol-41674,,,,,,,
Sol-41675,,,,,,,
Sol-41676,,,,,,,
Sol-41677,,,,,,,
Sol-41678,,,,,,,
Sol-41679,,,,,,,
Sol-41680,,,,,,,
Sol-41681,,,,,,,
Sol-41682,,,,,,,
Sol-41683,,,,,,,
Sol-41684,,,,,,,
Sol-41685,,,,,,,
Sol-41686,,,,,,,
Sol-41687,,,,,,,
Sol-41688,,,,,,,
Sol-41689,,,,,,,
Sol-41690,,,,,,,
Sol-41691,,,,,,,
Sol-41692,,,,,,,
Sol-41693,,,,,,,
Sol-41694,,,,,,,
Sol-41695,,,,,,,
Sol-41696,,,,,,,
Sol-41697,,,,,,,
Sol-41698,,,,,,,
Sol-41699,,,,,,,
Sol-41700,,,,,,,
Sol-41701,,,,,,,
Sol-41702,,,,,,,
Sol-41703,,,,,,,
Sol-41704,,,,,,,
Sol-41705,,,,,,,
Sol-41706,,,,,,,
Sol-41707,,,,,,,
Sol-41708,,,,,,,
Sol-41709,,,,,,,
Sol-41710,,,,,,,
Sol-41711,,,,,,,
Sol-41712,,,,,,,
Sol-41713,,,,,,,
Sol-41714,,,,,,,
Sol-41715,,,,,,,
Sol-41716,,,,,,,
Sol-41717,,,,,,,
Sol-41718,,,,,,,
Sol-41719,,,,,,,
Sol-41720,,,,,,,
Sol-41721,,,,,,,
Sol-41722,,,,,,,
Sol-41723,,,,,,,
Sol-41724,,,,,,,
Sol-41725,,,,,,,
Sol-41726,,,,,,,
Sol-41727,,,,,,,
Sol-41728,,,,,,,
Sol-41729,,,,,,,
Sol-41730,,,,,,,
Sol-41731,,,,,,,
Sol-41732,,,,,,,
Sol-41733,,,,,,,
Sol-41734,,,,,,,
Sol-41735,,,,,,,
Sol-41736,,,,,,,
Sol-41737,,,,,,,
Sol-41738,,,,,,,
Sol-41739,,,,,,,
Sol-41740,,,,,,,
Sol-41741,,,,,,,
Sol-41742,,,,,,,
Sol-41743,,,,,,,
Sol-41744,,,,,,,
Sol-41745,,,,,,,
Sol-41746,,,,,,,
Sol-41747,,,,,,,
Sol-41748,,,,,,,
Sol-41749,,,,,,,
Sol-41750,,,,,,,
Sol-41751,,,,,,,
Sol-41752,,,,,,,
Sol-41753,,,,,,,
Sol-41754,,,,,,,
Sol-41755,,,,,,,
Sol-41756,,,,,,,
Sol-41757,,,,,,,
Sol-41758,,,,,,,
Sol-41759,,,,,,,
Sol-41760,,,,,,,
Sol-41761,,,,,,,
Sol-41762,,,,,,,
Sol-41763,,,,,,,
Sol-41764,,,,,,,
Sol-41765,,,,,,,
Sol-41766,,,,,,,
Sol-41767,,,,,,,
Sol-41768,,,,,,,
Sol-41769,,,,,,,
Sol-41770,,,,,,,
Sol-41771,,,,,,,
Sol-41772,,,,,,,
Sol-41773,,,,,,,
Sol-41774,,,,,,,
Sol-41775,,,,,,,
Sol-41776,,,,,,,
Sol-41777,,,,,,,
Sol-41778,,,,,,,
Sol-41779,,,,,,,
Sol-41780,,,,,,,
Sol-41781,,,,,,,
Sol-41782,,,,,,,
Sol-41783,,,,,,,
Sol-41784,,,,,,,
Sol-41785,,,,,,,
Sol-41786,,,,,,,
Sol-41787,,,,,,,
Sol-41788,,,,,,,
Sol-41789,,,,,,,
Sol-41790,,,,,,,
Sol-41791,,,,,,,
Sol-41792,,,,,,,
Sol-41793,,,,,,,
Sol-41794,,,,,,,
Sol-41795,,,,,,,
Sol-41796,,,,,,,
Sol-41797,,,,,,,
Sol-41798,,,,,,,
Sol-41799,,,,,,,
Sol-41800,,,,,,,
Sol-41801,,,,,,,
Sol-41802,,,,,,,
Sol-41803,,,,,,,
Sol-41804,,,,,,,
Sol-41805,,,,,,,
Sol-41806,,,,,,,
Sol-41807,,,,,,,
Sol-41808,,,,,,,
Sol-41809,,,,,,,
Sol-41810,,,,,,,
Sol-41811,,,,,,,
Sol-41812,,,,,,,
Sol-41813,,,,,,,
Sol-41814,,,,,,,
Sol-41815,,,,,,,
Sol-41816,,,,,,,
Sol-41817,,,,,,,
Sol-41818,,,,,,,
Sol-41819,,,,,,,
Sol-41820,,,,,,,
Sol-41821,,,,,,,
Sol-41822,,,,,,,
Sol-41823,,,,,,,
Sol-41824,,,,,,,
Sol-41825,,,,,,,
Sol-41826,,,,,,,
Sol-41827,,,,,,,
Sol-41828,,,,,,,
Sol-41829,,,,,,,
Sol-41830,,,,,,,
Sol-41831,,,,,,,
Sol-41832,,,,,,,
Sol-41833,,,,,,,
Sol-41834,,,,,,,
Sol-41835,,,,,,,
Sol-41836,,,,,,,
Sol-41837,,,,,,,
Sol-41838,,,,,,,
Sol-41839,,,,,,,
Sol-41840,,,,,,,
Sol-41841,,,,,,,
Sol-41842,,,,,,,
Sol-41843,,,,,,,
Sol-41844,,,,,,,
Sol-41845,,,,,,,
Sol-41846,,,,,,,
Sol-41847,,,,,,,
Sol-41848,,,,,,,
Sol-41849,,,,,,,
Sol-41850,,,,,,,
Sol-41851,,,,,,,
Sol-41852,,,,,,,
Sol-41853,,,,,,,
Sol-41854,,,,,,,
Sol-41855,,,,,,,
Sol-41856,,,,,,,
Sol-41857,,,,,,,
Sol-41858,,,,,,,
Sol-41859,,,,,,,
Sol-41860,,,,,,,
Sol-41861,,,,,,,
Sol-41862,,,,,,,
Sol-41863,,,,,,,
Sol-41864,,,,,,,
Sol-41865,,,,,,,
Sol-41866,,,,,,,
Sol-41867,,,,,,,
Sol-41868,,,,,,,
Sol-41869,,,,,,,
Sol-41870,,,,,,,
Sol-41871,,,,,,,
Sol-41872,,,,,,,
Sol-41873,,,,,,,
Sol-41874,,,,,,,
Sol-41875,,,,,,,
Sol-41876,,,,,,,
Sol-41877,,,,,,,
Sol-41878,,,,,,,
Sol-41879,,,,,,,
Sol-41880,,,,,,,
Sol-41881,,,,,,,
Sol-41882,,,,,,,
Sol-41883,,,,,,,
Sol-41884,,,,,,,
Sol-41885,,,,,,,
Sol-41886,,,,,,,
Sol-41887,,,,,,,
Sol-41888,,,,,,,
Sol-41889,,,,,,,
Sol-41890,,,,,,,
Sol-41891,,,,,,,
Sol-41892,,,,,,,
Sol-41893,,,,,,,
Sol-41894,,,,,,,
Sol-41895,,,,,,,
Sol-41896,,,,,,,
Sol-41897,,,,,,,
Sol-41898,,,,,,,
Sol-41899,,,,,,,
Sol-41900,,,,,,,
Sol-41901,,,,,,,
Sol-41902,,,,,,,
Sol-41903,,,,,,,
Sol-41904,,,,,,,
Sol-41905,,,,,,,
Sol-41906,,,,,,,
Sol-41907,,,,,,,
Sol-41908,,,,,,,
Sol-41909,,,,,,,
Sol-41910,,,,,,,
Sol-41911,,,,,,,
Sol-41912,,,,,,,
Sol-41913,,,,,,,
Sol-41914,,,,,,,
Sol-41915,,,,,,,
Sol-41916,,,,,,,
Sol-41917,,,,,,,
Sol-41918,,,,,,,
Sol-41919,,,,,,,
Sol-41920,,,,,,,
Sol-41921,,,,,,,
Sol-41922,,,,,,,
Sol-41923,,,,,,,
Sol-41924,,,,,,,
Sol-41925,,,,,,,
Sol-41926,,,,,,,
Sol-41927,,,,,,,
Sol-41928,,,,,,,
Sol-41929,,,,,,,
Sol-41930,,,,,,,
Sol-41931,,,,,,,
Sol-41932,,,,,,,
Sol-41933,,,,,,,
Sol-41934,,,,,,,
Sol-41935,,,,,,,
Sol-41936,,,,,,,
Sol-41937,,,,,,,
Sol-41938,,,,,,,
Sol-41939,,,,,,,
Sol-41940,,,,,,,
Sol-41941,,,,,,,
Sol-41942,,,,,,,
Sol-41943,,,,,,,
Sol-41944,,,,,,,
Sol-41945,,,,,,,
Sol-41946,,,,,,,
Sol-41947,,,,,,,
Sol-41948,,,,,,,
Sol-41949,,,,,,,
Sol-41950,,,,,,,
Sol-41951,,,,,,,
Sol-41952,,,,,,,
Sol-41953,,,,,,,
Sol-41954,,,,,,,
Sol-41955,,,,,,,
Sol-41956,,,,,,,
Sol-41957,,,,,,,
Sol-41958,,,,,,,
Sol-41959,,,,,,,
Sol-41960,,,,,,,
Sol-41961,,,,,,,
Sol-41962,,,,,,,
Sol-41963,,,,,,,
Sol-41964,,,,,,,
Sol-41965,,,,,,,
Sol-41966,,,,,,,
Sol-41967,,,,,,,
Sol-41968,,,,,,,
Sol-41969,,,,,,,
Sol-41970,,,,,,,
Sol-41971,,,,,,,
Sol-41972,,,,,,,
Sol-41973,,,,,,,
Sol-41974,,,,,,,
Sol-41975,,,,,,,
Sol-41976,,,,,,,
Sol-41977,,,,,,,
Sol-41978,,,,,,,
Sol-41979,,,,,,,
Sol-41980,,,,,,,
Sol-41981,,,,,,,
Sol-41982,,,,,,,
Sol-41983,,,,,,,
Sol-41984,,,,,,,
Sol-41985,,,,,,,
Sol-41986,,,,,,,
Sol-41987,,,,,,,
Sol-41988,,,,,,,
Sol-41989,,,,,,,
Sol-41990,,,,,,,
Sol-41991,,,,,,,
Sol-41992,,,,,,,
Sol-41993,,,,,,,
Sol-41994,,,,,,,
Sol-41995,,,,,,,
Sol-41996,,,,,,,
Sol-41997,,,,,,,
Sol-41998,,,,,,,
Sol-41999,,,,,,,
Sol-42000,,,,,,,
Sol-42001,,,,,,,
Sol-42002,,,,,,,
Sol-42003,,,,,,,
Sol-42004,,,,,,,
Sol-42005,,,,,,,
Sol-42006,,,,,,,
Sol-42007,,,,,,,
Sol-42008,,,,,,,
Sol-42009,,,,,,,
Sol-42010,,,,,,,
Sol-42011,,,,,,,
Sol-42012,,,,,,,
Sol-42013,,,,,,,
Sol-42014,,,,,,,
Sol-42015,,,,,,,
Sol-42016,,,,,,,
Sol-42017,,,,,,,
Sol-42018,,,,,,,
Sol-42019,,,,,,,
Sol-42020,,,,,,,
Sol-42021,,,,,,,
Sol-42022,,,,,,,
Sol-42023,,,,,,,
Sol-42024,,,,,,,
Sol-42025,,,,,,,
Sol-42026,,,,,,,
Sol-42027,,,,,,,
Sol-42028,,,,,,,
Sol-42029,,,,,,,
Sol-42030,,,,,,,
Sol-42031,,,,,,,
Sol-42032,,,,,,,
Sol-42033,,,,,,,
Sol-42034,,,,,,,
Sol-42035,,,,,,,
Sol-42036,,,,,,,
Sol-42037,,,,,,,
Sol-42038,,,,,,,
Sol-42039,,,,,,,
Sol-42040,,,,,,,
Sol-42041,,,,,,,
Sol-42042,,,,,,,
Sol-42043,,,,,,,
Sol-42044,,,,,,,
Sol-42045,,,,,,,
Sol-42046,,,,,,,
Sol-42047,,,,,,,
Sol-42048,,,,,,,
Sol-42049,,,,,,,
Sol-42050,,,,,,,
Sol-42051,,,,,,,
Sol-42052,,,,,,,
Sol-42053,,,,,,,
Sol-42054,,,,,,,
Sol-42055,,,,,,,
Sol-42056,,,,,,,
Sol-42057,,,,,,,
Sol-42058,,,,,,,
Sol-42059,,,,,,,
Sol-42060,,,,,,,
Sol-42061,,,,,,,
Sol-42062,,,,,,,
Sol-42063,,,,,,,
Sol-42064,,,,,,,
Sol-42065,,,,,,,
Sol-42066,,,,,,,
Sol-42067,,,,,,,
Sol-42068,,,,,,,
Sol-42069,,,,,,,
Sol-42070,,,,,,,
Sol-42071,,,,,,,
Sol-42072,,,,,,,
Sol-42073,,,,,,,
Sol-42074,,,,,,,
Sol-42075,,,,,,,
Sol-42076,,,,,,,
Sol-42077,,,,,,,
Sol-42078,,,,,,,
Sol-42079,,,,,,,
Sol-42080,,,,,,,
Sol-42081,,,,,,,
Sol-42082,,,,,,,
Sol-42083,,,,,,,
Sol-42084,,,,,,,
Sol-42085,,,,,,,
Sol-42086,,,,,,,
Sol-42087,,,,,,,
Sol-42088,,,,,,,
Sol-42089,,,,,,,
Sol-42090,,,,,,,
Sol-42091,,,,,,,
Sol-42092,,,,,,,
Sol-42093,,,,,,,
Sol-42094,,,,,,,
Sol-42095,,,,,,,
Sol-42096,,,,,,,
Sol-42097,,,,,,,
Sol-42098,,,,,,,
Sol-42099,,,,,,,
Sol-42100,,,,,,,
Sol-42101,,,,,,,
Sol-42102,,,,,,,
Sol-42103,,,,,,,
Sol-42104,,,,,,,
Sol-42105,,,,,,,
Sol-42106,,,,,,,
Sol-42107,,,,,,,
Sol-42108,,,,,,,
Sol-42109,,,,,,,
Sol-42110,,,,,,,
Sol-42111,,,,,,,
Sol-42112,,,,,,,
Sol-42113,,,,,,,
Sol-42114,,,,,,,
Sol-42115,,,,,,,
Sol-42116,,,,,,,
Sol-42117,,,,,,,
Sol-42118,,,,,,,
Sol-42119,,,,,,,
Sol-42120,,,,,,,
Sol-42121,,,,,,,
Sol-42122,,,,,,,
Sol-42123,,,,,,,
Sol-42124,,,,,,,
Sol-42125,,,,,,,
Sol-42126,,,,,,,
Sol-42127,,,,,,,
Sol-42128,,,,,,,
Sol-42129,,,,,,,
Sol-42130,,,,,,,
Sol-42131,,,,,,,
Sol-42132,,,,,,,
Sol-42133,,,,,,,
Sol-42134,,,,,,,
Sol-42135,,,,,,,
Sol-42136,,,,,,,
Sol-42137,,,,,,,
Sol-42138,,,,,,,
Sol-42139,,,,,,,
Sol-42140,,,,,,,
Sol-42141,,,,,,,
Sol-42142,,,,,,,
Sol-42143,,,,,,,
Sol-42144,,,,,,,
Sol-42145,,,,,,,
Sol-42146,,,,,,,
Sol-42147,,,,,,,
Sol-42148,,,,,,,
Sol-42149,,,,,,,
Sol-42150,,,,,,,
Sol-42151,,,,,,,
Sol-42152,,,,,,,
Sol-42153,,,,,,,
Sol-42154,,,,,,,
Sol-42155,,,,,,,
Sol-42156,,,,,,,
Sol-42157,,,,,,,
Sol-42158,,,,,,,
Sol-42159,,,,,,,
Sol-42160,,,,,,,
Sol-42161,,,,,,,
Sol-42162,,,,,,,
Sol-42163,,,,,,,
Sol-42164,,,,,,,
Sol-42165,,,,,,,
Sol-42166,,,,,,,
Sol-42167,,,,,,,
Sol-42168,,,,,,,
Sol-42169,,,,,,,
Sol-42170,,,,,,,
Sol-42171,,,,,,,
Sol-42172,,,,,,,
Sol-42173,,,,,,,
Sol-42174,,,,,,,
Sol-42175,,,,,,,
Sol-42176,,,,,,,
Sol-42177,,,,,,,
Sol-42178,,,,,,,
Sol-42179,,,,,,,
Sol-42180,,,,,,,
Sol-42181,,,,,,,
Sol-42182,,,,,,,
Sol-42183,,,,,,,
Sol-42184,,,,,,,
Sol-42185,,,,,,,
Sol-42186,,,,,,,
Sol-42187,,,,,,,
Sol-42188,,,,,,,
Sol-42189,,,,,,,
Sol-42190,,,,,,,
Sol-42191,,,,,,,
Sol-42192,,,,,,,
Sol-42193,,,,,,,
Sol-42194,,,,,,,
Sol-42195,,,,,,,
Sol-42196,,,,,,,
Sol-42197,,,,,,,
Sol-42198,,,,,,,
Sol-42199,,,,,,,
Sol-42200,,,,,,,
Sol-42201,,,,,,,
Sol-42202,,,,,,,
Sol-42203,,,,,,,
Sol-42204,,,,,,,
Sol-42205,,,,,,,
Sol-42206,,,,,,,
Sol-42207,,,,,,,
Sol-42208,,,,,,,
Sol-42209,,,,,,,
Sol-42210,,,,,,,
Sol-42211,,,,,,,
Sol-42212,,,,,,,
Sol-42213,,,,,,,
Sol-42214,,,,,,,
Sol-42215,,,,,,,
Sol-42216,,,,,,,
Sol-42217,,,,,,,
Sol-42218,,,,,,,
Sol-42219,,,,,,,
Sol-42220,,,,,,,
Sol-42221,,,,,,,
Sol-42222,,,,,,,
Sol-42223,,,,,,,
Sol-42224,,,,,,,
Sol-42225,,,,,,,
Sol-42226,,,,,,,
Sol-42227,,,,,,,
Sol-42228,,,,,,,
Sol-42229,,,,,,,
Sol-42230,,,,,,,
Sol-42231,,,,,,,
Sol-42232,,,,,,,
Sol-42233,,,,,,,
Sol-42234,,,,,,,
Sol-42235,,,,,,,
Sol-42236,,,,,,,
Sol-42237,,,,,,,
Sol-42238,,,,,,,
Sol-42239,,,,,,,
Sol-42240,,,,,,,
Sol-42241,,,,,,,
Sol-42242,,,,,,,
Sol-42243,,,,,,,
Sol-42244,,,,,,,
Sol-42245,,,,,,,
Sol-42246,,,,,,,
Sol-42247,,,,,,,
Sol-42248,,,,,,,
Sol-42249,,,,,,,
Sol-42250,,,,,,,
Sol-42251,,,,,,,
Sol-42252,,,,,,,
Sol-42253,,,,,,,
Sol-42254,,,,,,,
Sol-42255,,,,,,,
Sol-42256,,,,,,,
Sol-42257,,,,,,,
Sol-42258,,,,,,,
Sol-42259,,,,,,,
Sol-42260,,,,,,,
Sol-42261,,,,,,,
Sol-42262,,,,,,,
Sol-42263,,,,,,,
Sol-42264,,,,,,,
Sol-42265,,,,,,,
Sol-42266,,,,,,,
Sol-42267,,,,,,,
Sol-42268,,,,,,,
Sol-42269,,,,,,,
Sol-42270,,,,,,,
Sol-42271,,,,,,,
Sol-42272,,,,,,,
Sol-42273,,,,,,,
Sol-42274,,,,,,,
Sol-42275,,,,,,,
Sol-42276,,,,,,,
Sol-42277,,,,,,,
Sol-42278,,,,,,,
Sol-42279,,,,,,,
Sol-42280,,,,,,,
Sol-42281,,,,,,,
Sol-42282,,,,,,,
Sol-42283,,,,,,,
Sol-42284,,,,,,,
Sol-42285,,,,,,,
Sol-42286,,,,,,,
Sol-42287,,,,,,,
Sol-42288,,,,,,,
Sol-42289,,,,,,,
Sol-42290,,,,,,,
Sol-42291,,,,,,,
Sol-42292,,,,,,,
Sol-42293,,,,,,,
Sol-42294,,,,,,,
Sol-42295,,,,,,,
Sol-42296,,,,,,,
Sol-42297,,,,,,,
Sol-42298,,,,,,,
Sol-42299,,,,,,,
Sol-42300,,,,,,,
Sol-42301,,,,,,,
Sol-42302,,,,,,,
Sol-42303,,,,,,,
Sol-42304,,,,,,,
Sol-42305,,,,,,,
Sol-42306,,,,,,,
Sol-42307,,,,,,,
Sol-42308,,,,,,,
Sol-42309,,,,,,,
Sol-42310,,,,,,,
Sol-42311,,,,,,,
Sol-42312,,,,,,,
Sol-42313,,,,,,,
Sol-42314,,,,,,,
Sol-42315,,,,,,,
Sol-42316,,,,,,,
Sol-42317,,,,,,,
Sol-42318,,,,,,,
Sol-42319,,,,,,,
Sol-42320,,,,,,,
Sol-42321,,,,,,,
Sol-42322,,,,,,,
Sol-42323,,,,,,,
Sol-42324,,,,,,,
Sol-42325,,,,,,,
Sol-42326,,,,,,,
Sol-42327,,,,,,,
Sol-42328,,,,,,,
Sol-42329,,,,,,,
Sol-42330,,,,,,,
Sol-42331,,,,,,,
Sol-42332,,,,,,,
Sol-42333,,,,,,,
Sol-42334,,,,,,,
Sol-42335,,,,,,,
Sol-42336,,,,,,,
Sol-42337,,,,,,,
Sol-42338,,,,,,,
Sol-42339,,,,,,,
Sol-42340,,,,,,,
Sol-42341,,,,,,,
Sol-42342,,,,,,,
Sol-42343,,,,,,,
Sol-42344,,,,,,,
Sol-42345,,,,,,,
Sol-42346,,,,,,,
Sol-42347,,,,,,,
Sol-42348,,,,,,,
Sol-42349,,,,,,,
Sol-42350,,,,,,,
Sol-42351,,,,,,,
Sol-42352,,,,,,,
Sol-42353,,,,,,,
Sol-42354,,,,,,,
Sol-42355,,,,,,,
Sol-42356,,,,,,,
Sol-42357,,,,,,,
Sol-42358,,,,,,,
Sol-42359,,,,,,,
Sol-42360,,,,,,,
Sol-42361,,,,,,,
Sol-42362,,,,,,,
Sol-42363,,,,,,,
Sol-42364,,,,,,,
Sol-42365,,,,,,,
Sol-42366,,,,,,,
Sol-42367,,,,,,,
Sol-42368,,,,,,,
Sol-42369,,,,,,,
Sol-42370,,,,,,,
Sol-42371,,,,,,,
Sol-42372,,,,,,,
Sol-42373,,,,,,,
Sol-42374,,,,,,,
Sol-42375,,,,,,,
Sol-42376,,,,,,,
Sol-42377,,,,,,,
Sol-42378,,,,,,,
Sol-42379,,,,,,,
Sol-42380,,,,,,,
Sol-42381,,,,,,,
Sol-42382,,,,,,,
Sol-42383,,,,,,,
Sol-42384,,,,,,,
Sol-42385,,,,,,,
Sol-42386,,,,,,,
Sol-42387,,,,,,,
Sol-42388,,,,,,,
Sol-42389,,,,,,,
Sol-42390,,,,,,,
Sol-42391,,,,,,,
Sol-42392,,,,,,,
Sol-42393,,,,,,,
Sol-42394,,,,,,,
Sol-42395,,,,,,,
Sol-42396,,,,,,,
Sol-42397,,,,,,,
Sol-42398,,,,,,,
Sol-42399,,,,,,,
Sol-42400,,,,,,,
Sol-42401,,,,,,,
Sol-42402,,,,,,,
Sol-42403,,,,,,,
Sol-42404,,,,,,,
Sol-42405,,,,,,,
Sol-42406,,,,,,,
Sol-42407,,,,,,,
Sol-42408,,,,,,,
Sol-42409,,,,,,,
Sol-42410,,,,,,,
Sol-42411,,,,,,,
Sol-42412,,,,,,,
Sol-42413,,,,,,,
Sol-42414,,,,,,,
Sol-42415,,,,,,,
Sol-42416,,,,,,,
Sol-42417,,,,,,,
Sol-42418,,,,,,,
Sol-42419,,,,,,,
Sol-42420,,,,,,,
Sol-42421,,,,,,,
Sol-42422,,,,,,,
Sol-42423,,,,,,,
Sol-42424,,,,,,,
Sol-42425,,,,,,,
Sol-42426,,,,,,,
Sol-42427,,,,,,,
Sol-42428,,,,,,,
Sol-42429,,,,,,,
Sol-42430,,,,,,,
Sol-42431,,,,,,,
Sol-42432,,,,,,,
Sol-42433,,,,,,,
Sol-42434,,,,,,,
Sol-42435,,,,,,,
Sol-42436,,,,,,,
Sol-42437,,,,,,,
Sol-42438,,,,,,,
Sol-42439,,,,,,,
Sol-42440,,,,,,,
Sol-42441,,,,,,,
Sol-42442,,,,,,,
Sol-42443,,,,,,,
Sol-42444,,,,,,,
Sol-42445,,,,,,,
Sol-42446,,,,,,,
Sol-42447,,,,,,,
Sol-42448,,,,,,,
Sol-42449,,,,,,,
Sol-42450,,,,,,,
Sol-42451,,,,,,,
Sol-42452,,,,,,,
Sol-42453,,,,,,,
Sol-42454,,,,,,,
Sol-42455,,,,,,,
Sol-42456,,,,,,,
Sol-42457,,,,,,,
Sol-42458,,,,,,,
Sol-42459,,,,,,,
Sol-42460,,,,,,,
Sol-42461,,,,,,,
Sol-42462,,,,,,,
Sol-42463,,,,,,,
Sol-42464,,,,,,,
Sol-42465,,,,,,,
Sol-42466,,,,,,,
Sol-42467,,,,,,,
Sol-42468,,,,,,,
Sol-42469,,,,,,,
Sol-42470,,,,,,,
Sol-42471,,,,,,,
Sol-42472,,,,,,,
Sol-42473,,,,,,,
Sol-42474,,,,,,,
Sol-42475,,,,,,,
Sol-42476,,,,,,,
Sol-42477,,,,,,,
Sol-42478,,,,,,,
Sol-42479,,,,,,,
Sol-42480,,,,,,,
Sol-42481,,,,,,,
Sol-42482,,,,,,,
Sol-42483,,,,,,,
Sol-42484,,,,,,,
Sol-42485,,,,,,,
Sol-42486,,,,,,,
Sol-42487,,,,,,,
Sol-42488,,,,,,,
Sol-42489,,,,,,,
Sol-42490,,,,,,,
Sol-42491,,,,,,,
Sol-42492,,,,,,,
Sol-42493,,,,,,,
Sol-42494,,,,,,,
Sol-42495,,,,,,,
Sol-42496,,,,,,,
Sol-42497,,,,,,,
Sol-42498,,,,,,,
Sol-42499,,,,,,,
Sol-42500,,,,,,,
Sol-42501,,,,,,,
Sol-42502,,,,,,,
Sol-42503,,,,,,,
Sol-42504,,,,,,,
Sol-42505,,,,,,,
Sol-42506,,,,,,,
Sol-42507,,,,,,,
Sol-42508,,,,,,,
Sol-42509,,,,,,,
Sol-42510,,,,,,,
Sol-42511,,,,,,,
Sol-42512,,,,,,,
Sol-42513,,,,,,,
Sol-42514,,,,,,,
Sol-42515,,,,,,,
Sol-42516,,,,,,,
Sol-42517,,,,,,,
Sol-42518,,,,,,,
Sol-42519,,,,,,,
Sol-42520,,,,,,,
Sol-42521,,,,,,,
Sol-42522,,,,,,,
Sol-42523,,,,,,,
Sol-42524,,,,,,,
Sol-42525,,,,,,,
Sol-42526,,,,,,,
Sol-42527,,,,,,,
Sol-42528,,,,,,,
Sol-42529,,,,,,,
Sol-42530,,,,,,,
Sol-42531,,,,,,,
Sol-42532,,,,,,,
Sol-42533,,,,,,,
Sol-42534,,,,,,,
Sol-42535,,,,,,,
Sol-42536,,,,,,,
Sol-42537,,,,,,,
Sol-42538,,,,,,,
Sol-42539,,,,,,,
Sol-42540,,,,,,,
Sol-42541,,,,,,,
Sol-42542,,,,,,,
Sol-42543,,,,,,,
Sol-42544,,,,,,,
Sol-42545,,,,,,,
Sol-42546,,,,,,,
Sol-42547,,,,,,,
Sol-42548,,,,,,,
Sol-42549,,,,,,,
Sol-42550,,,,,,,
Sol-42551,,,,,,,
Sol-42552,,,,,,,
Sol-42553,,,,,,,
Sol-42554,,,,,,,
Sol-42555,,,,,,,
Sol-42556,,,,,,,
Sol-42557,,,,,,,
Sol-42558,,,,,,,
Sol-42559,,,,,,,
Sol-42560,,,,,,,
Sol-42561,,,,,,,
Sol-42562,,,,,,,
Sol-42563,,,,,,,
Sol-42564,,,,,,,
Sol-42565,,,,,,,
Sol-42566,,,,,,,
Sol-42567,,,,,,,
Sol-42568,,,,,,,
Sol-42569,,,,,,,
Sol-42570,,,,,,,
Sol-42571,,,,,,,
Sol-42572,,,,,,,
Sol-42573,,,,,,,
Sol-42574,,,,,,,
Sol-42575,,,,,,,
Sol-42576,,,,,,,
Sol-42577,,,,,,,
Sol-42578,,,,,,,
Sol-42579,,,,,,,
Sol-42580,,,,,,,
Sol-42581,,,,,,,
Sol-42582,,,,,,,
Sol-42583,,,,,,,
Sol-42584,,,,,,,
Sol-42585,,,,,,,
Sol-42586,,,,,,,
Sol-42587,,,,,,,
Sol-42588,,,,,,,
Sol-42589,,,,,,,
Sol-42590,,,,,,,
Sol-42591,,,,,,,
Sol-42592,,,,,,,
Sol-42593,,,,,,,
Sol-42594,,,,,,,
Sol-42595,,,,,,,
Sol-42596,,,,,,,
Sol-42597,,,,,,,
Sol-42598,,,,,,,
Sol-42599,,,,,,,
Sol-42600,,,,,,,
Sol-42601,,,,,,,
Sol-42602,,,,,,,
Sol-42603,,,,,,,
Sol-42604,,,,,,,
Sol-42605,,,,,,,
Sol-42606,,,,,,,
Sol-42607,,,,,,,
Sol-42608,,,,,,,
Sol-42609,,,,,,,
Sol-42610,,,,,,,
Sol-42611,,,,,,,
Sol-42612,,,,,,,
Sol-42613,,,,,,,
Sol-42614,,,,,,,
Sol-42615,,,,,,,
Sol-42616,,,,,,,
Sol-42617,,,,,,,
Sol-42618,,,,,,,
Sol-42619,,,,,,,
Sol-42620,,,,,,,
Sol-42621,,,,,,,
Sol-42622,,,,,,,
Sol-42623,,,,,,,
Sol-42624,,,,,,,
Sol-42625,,,,,,,
Sol-42626,,,,,,,
Sol-42627,,,,,,,
Sol-42628,,,,,,,
Sol-42629,,,,,,,
Sol-42630,,,,,,,
Sol-42631,,,,,,,
Sol-42632,,,,,,,
Sol-42633,,,,,,,
Sol-42634,,,,,,,
Sol-42635,,,,,,,
Sol-42636,,,,,,,
Sol-42637,,,,,,,
Sol-42638,,,,,,,
Sol-42639,,,,,,,
Sol-42640,,,,,,,
Sol-42641,,,,,,,
Sol-42642,,,,,,,
Sol-42643,,,,,,,
Sol-42644,,,,,,,
Sol-42645,,,,,,,
Sol-42646,,,,,,,
Sol-42647,,,,,,,
Sol-42648,,,,,,,
Sol-42649,,,,,,,
Sol-42650,,,,,,,
Sol-42651,,,,,,,
Sol-42652,,,,,,,
Sol-42653,,,,,,,
Sol-42654,,,,,,,
Sol-42655,,,,,,,
Sol-42656,,,,,,,
Sol-42657,,,,,,,
Sol-42658,,,,,,,
Sol-42659,,,,,,,
Sol-42660,,,,,,,
Sol-42661,,,,,,,
Sol-42662,,,,,,,
Sol-42663,,,,,,,
Sol-42664,,,,,,,
Sol-42665,,,,,,,
Sol-42666,,,,,,,
Sol-42667,,,,,,,
Sol-42668,,,,,,,
Sol-42669,,,,,,,
Sol-42670,,,,,,,
Sol-42671,,,,,,,
Sol-42672,,,,,,,
Sol-42673,,,,,,,
Sol-42674,,,,,,,
Sol-42675,,,,,,,
Sol-42676,,,,,,,
Sol-42677,,,,,,,
Sol-42678,,,,,,,
Sol-42679,,,,,,,
Sol-42680,,,,,,,
Sol-42681,,,,,,,
Sol-42682,,,,,,,
Sol-42683,,,,,,,
Sol-42684,,,,,,,
Sol-42685,,,,,,,
Sol-42686,,,,,,,
Sol-42687,,,,,,,
Sol-42688,,,,,,,
Sol-42689,,,,,,,
Sol-42690,,,,,,,
Sol-42691,,,,,,,
Sol-42692,,,,,,,
Sol-42693,,,,,,,
Sol-42694,,,,,,,
Sol-42695,,,,,,,
Sol-42696,,,,,,,
Sol-42697,,,,,,,
Sol-42698,,,,,,,
Sol-42699,,,,,,,
Sol-42700,,,,,,,
Sol-42701,,,,,,,
Sol-42702,,,,,,,
Sol-42703,,,,,,,
Sol-42704,,,,,,,
Sol-42705,,,,,,,
Sol-42706,,,,,,,
Sol-42707,,,,,,,
Sol-42708,,,,,,,
Sol-42709,,,,,,,
Sol-42710,,,,,,,
Sol-42711,,,,,,,
Sol-42712,,,,,,,
Sol-42713,,,,,,,
Sol-42714,,,,,,,
Sol-42715,,,,,,,
Sol-42716,,,,,,,
Sol-42717,,,,,,,
Sol-42718,,,,,,,
Sol-42719,,,,,,,
Sol-42720,,,,,,,
Sol-42721,,,,,,,
Sol-42722,,,,,,,
Sol-42723,,,,,,,
Sol-42724,,,,,,,
Sol-42725,,,,,,,
Sol-42726,,,,,,,
Sol-42727,,,,,,,
Sol-42728,,,,,,,
Sol-42729,,,,,,,
Sol-42730,,,,,,,
Sol-42731,,,,,,,
Sol-42732,,,,,,,
Sol-42733,,,,,,,
Sol-42734,,,,,,,
Sol-42735,,,,,,,
Sol-42736,,,,,,,
Sol-42737,,,,,,,
Sol-42738,,,,,,,
Sol-42739,,,,,,,
Sol-42740,,,,,,,
Sol-42741,,,,,,,
Sol-42742,,,,,,,
Sol-42743,,,,,,,
Sol-42744,,,,,,,
Sol-42745,,,,,,,
Sol-42746,,,,,,,
Sol-42747,,,,,,,
Sol-42748,,,,,,,
Sol-42749,,,,,,,
Sol-42750,,,,,,,
Sol-42751,,,,,,,
Sol-42752,,,,,,,
Sol-42753,,,,,,,
Sol-42754,,,,,,,
Sol-42755,,,,,,,
Sol-42756,,,,,,,
Sol-42757,,,,,,,
Sol-42758,,,,,,,
Sol-42759,,,,,,,
Sol-42760,,,,,,,
Sol-42761,,,,,,,
Sol-42762,,,,,,,
Sol-42763,,,,,,,
Sol-42764,,,,,,,
Sol-42765,,,,,,,
Sol-42766,,,,,,,
Sol-42767,,,,,,,
Sol-42768,,,,,,,
Sol-42769,,,,,,,
Sol-42770,,,,,,,
Sol-42771,,,,,,,
Sol-42772,,,,,,,
Sol-42773,,,,,,,
Sol-42774,,,,,,,
Sol-42775,,,,,,,
Sol-42776,,,,,,,
Sol-42777,,,,,,,
Sol-42778,,,,,,,
Sol-42779,,,,,,,
Sol-42780,,,,,,,
Sol-42781,,,,,,,
Sol-42782,,,,,,,
Sol-42783,,,,,,,
Sol-42784,,,,,,,
Sol-42785,,,,,,,
Sol-42786,,,,,,,
Sol-42787,,,,,,,
Sol-42788,,,,,,,
Sol-42789,,,,,,,
Sol-42790,,,,,,,
Sol-42791,,,,,,,
Sol-42792,,,,,,,
Sol-42793,,,,,,,
Sol-42794,,,,,,,
Sol-42795,,,,,,,
Sol-42796,,,,,,,
Sol-42797,,,,,,,
Sol-42798,,,,,,,
Sol-42799,,,,,,,
Sol-42800,,,,,,,
Sol-42801,,,,,,,
Sol-42802,,,,,,,
Sol-42803,,,,,,,
Sol-42804,,,,,,,
Sol-42805,,,,,,,
Sol-42806,,,,,,,
Sol-42807,,,,,,,
Sol-42808,,,,,,,
Sol-42809,,,,,,,
Sol-42810,,,,,,,
Sol-42811,,,,,,,
Sol-42812,,,,,,,
Sol-42813,,,,,,,
Sol-42814,,,,,,,
Sol-42815,,,,,,,
Sol-42816,,,,,,,
Sol-42817,,,,,,,
Sol-42818,,,,,,,
Sol-42819,,,,,,,
Sol-42820,,,,,,,
Sol-42821,,,,,,,
Sol-42822,,,,,,,
Sol-42823,,,,,,,
Sol-42824,,,,,,,
Sol-42825,,,,,,,
Sol-42826,,,,,,,
Sol-42827,,,,,,,
Sol-42828,,,,,,,
Sol-42829,,,,,,,
Sol-42830,,,,,,,
Sol-42831,,,,,,,
Sol-42832,,,,,,,
Sol-42833,,,,,,,
Sol-42834,,,,,,,
Sol-42835,,,,,,,
Sol-42836,,,,,,,
Sol-42837,,,,,,,
Sol-42838,,,,,,,
Sol-42839,,,,,,,
Sol-42840,,,,,,,
Sol-42841,,,,,,,
Sol-42842,,,,,,,
Sol-42843,,,,,,,
Sol-42844,,,,,,,
Sol-42845,,,,,,,
Sol-42846,,,,,,,
Sol-42847,,,,,,,
Sol-42848,,,,,,,
Sol-42849,,,,,,,
Sol-42850,,,,,,,
Sol-42851,,,,,,,
Sol-42852,,,,,,,
Sol-42853,,,,,,,
Sol-42854,,,,,,,
Sol-42855,,,,,,,
Sol-42856,,,,,,,
Sol-42857,,,,,,,
Sol-42858,,,,,,,
Sol-42859,,,,,,,
Sol-42860,,,,,,,
Sol-42861,,,,,,,
Sol-42862,,,,,,,
Sol-42863,,,,,,,
Sol-42864,,,,,,,
Sol-42865,,,,,,,
Sol-42866,,,,,,,
Sol-42867,,,,,,,
Sol-42868,,,,,,,
Sol-42869,,,,,,,
Sol-42870,,,,,,,
Sol-42871,,,,,,,
Sol-42872,,,,,,,
Sol-42873,,,,,,,
Sol-42874,,,,,,,
Sol-42875,,,,,,,
Sol-42876,,,,,,,
Sol-42877,,,,,,,
Sol-42878,,,,,,,
Sol-42879,,,,,,,
Sol-42880,,,,,,,
Sol-42881,,,,,,,
Sol-42882,,,,,,,
Sol-42883,,,,,,,
Sol-42884,,,,,,,
Sol-42885,,,,,,,
Sol-42886,,,,,,,
Sol-42887,,,,,,,
Sol-42888,,,,,,,
Sol-42889,,,,,,,
Sol-42890,,,,,,,
Sol-42891,,,,,,,
Sol-42892,,,,,,,
Sol-42893,,,,,,,
Sol-42894,,,,,,,
Sol-42895,,,,,,,
Sol-42896,,,,,,,
Sol-42897,,,,,,,
Sol-42898,,,,,,,
Sol-42899,,,,,,,
Sol-42900,,,,,,,
Sol-42901,,,,,,,
Sol-42902,,,,,,,
Sol-42903,,,,,,,
Sol-42904,,,,,,,
Sol-42905,,,,,,,
Sol-42906,,,,,,,
Sol-42907,,,,,,,
Sol-42908,,,,,,,
Sol-42909,,,,,,,
Sol-42910,,,,,,,
Sol-42911,,,,,,,
Sol-42912,,,,,,,
Sol-42913,,,,,,,
Sol-42914,,,,,,,
Sol-42915,,,,,,,
Sol-42916,,,,,,,
Sol-42917,,,,,,,
Sol-42918,,,,,,,
Sol-42919,,,,,,,
Sol-42920,,,,,,,
Sol-42921,,,,,,,
Sol-42922,,,,,,,
Sol-42923,,,,,,,
Sol-42924,,,,,,,
Sol-42925,,,,,,,
Sol-42926,,,,,,,
Sol-42927,,,,,,,
Sol-42928,,,,,,,
Sol-42929,,,,,,,
Sol-42930,,,,,,,
Sol-42931,,,,,,,
Sol-42932,,,,,,,
Sol-42933,,,,,,,
Sol-42934,,,,,,,
Sol-42935,,,,,,,
Sol-42936,,,,,,,
Sol-42937,,,,,,,
Sol-42938,,,,,,,
Sol-42939,,,,,,,
Sol-42940,,,,,,,
Sol-42941,,,,,,,
Sol-42942,,,,,,,
Sol-42943,,,,,,,
Sol-42944,,,,,,,
Sol-42945,,,,,,,
Sol-42946,,,,,,,
Sol-42947,,,,,,,
Sol-42948,,,,,,,
Sol-42949,,,,,,,
Sol-42950,,,,,,,
Sol-42951,,,,,,,
Sol-42952,,,,,,,
Sol-42953,,,,,,,
Sol-42954,,,,,,,
Sol-42955,,,,,,,
Sol-42956,,,,,,,
Sol-42957,,,,,,,
Sol-42958,,,,,,,
Sol-42959,,,,,,,
Sol-42960,,,,,,,
Sol-42961,,,,,,,
Sol-42962,,,,,,,
Sol-42963,,,,,,,
Sol-42964,,,,,,,
Sol-42965,,,,,,,
Sol-42966,,,,,,,
Sol-42967,,,,,,,
Sol-42968,,,,,,,
Sol-42969,,,,,,,
Sol-42970,,,,,,,
Sol-42971,,,,,,,
Sol-42972,,,,,,,
Sol-42973,,,,,,,
Sol-42974,,,,,,,
Sol-42975,,,,,,,
Sol-42976,,,,,,,
Sol-42977,,,,,,,
Sol-42978,,,,,,,
Sol-42979,,,,,,,
Sol-42980,,,,,,,
Sol-42981,,,,,,,
Sol-42982,,,,,,,
Sol-42983,,,,,,,
Sol-42984,,,,,,,
Sol-42985,,,,,,,
Sol-42986,,,,,,,
Sol-42987,,,,,,,
Sol-42988,,,,,,,
Sol-42989,,,,,,,
Sol-42990,,,,,,,
Sol-42991,,,,,,,
Sol-42992,,,,,,,
Sol-42993,,,,,,,
Sol-42994,,,,,,,
Sol-42995,,,,,,,
Sol-42996,,,,,,,
Sol-42997,,,,,,,
Sol-42998,,,,,,,
Sol-42999,,,,,,,
Sol-43000,,,,,,,
Sol-43001,,,,,,,
Sol-43002,,,,,,,
Sol-43003,,,,,,,
Sol-43004,,,,,,,
Sol-43005,,,,,,,
Sol-43006,,,,,,,
Sol-43007,,,,,,,
Sol-43008,,,,,,,
Sol-43009,,,,,,,
Sol-43010,,,,,,,
Sol-43011,,,,,,,
Sol-43012,,,,,,,
Sol-43013,,,,,,,
Sol-43014,,,,,,,
Sol-43015,,,,,,,
Sol-43016,,,,,,,
Sol-43017,,,,,,,
Sol-43018,,,,,,,
Sol-43019,,,,,,,
Sol-43020,,,,,,,
Sol-43021,,,,,,,
Sol-43022,,,,,,,
Sol-43023,,,,,,,
Sol-43024,,,,,,,
Sol-43025,,,,,,,
Sol-43026,,,,,,,
Sol-43027,,,,,,,
Sol-43028,,,,,,,
Sol-43029,,,,,,,
Sol-43030,,,,,,,
Sol-43031,,,,,,,
Sol-43032,,,,,,,
Sol-43033,,,,,,,
Sol-43034,,,,,,,
Sol-43035,,,,,,,
Sol-43036,,,,,,,
Sol-43037,,,,,,,
Sol-43038,,,,,,,
Sol-43039,,,,,,,
Sol-43040,,,,,,,
Sol-43041,,,,,,,
Sol-43042,,,,,,,
Sol-43043,,,,,,,
Sol-43044,,,,,,,
Sol-43045,,,,,,,
Sol-43046,,,,,,,
Sol-43047,,,,,,,
Sol-43048,,,,,,,
Sol-43049,,,,,,,
Sol-43050,,,,,,,
Sol-43051,,,,,,,
Sol-43052,,,,,,,
Sol-43053,,,,,,,
Sol-43054,,,,,,,
Sol-43055,,,,,,,
Sol-43056,,,,,,,
Sol-43057,,,,,,,
Sol-43058,,,,,,,
Sol-43059,,,,,,,
Sol-43060,,,,,,,
Sol-43061,,,,,,,
Sol-43062,,,,,,,
Sol-43063,,,,,,,
Sol-43064,,,,,,,
Sol-43065,,,,,,,
Sol-43066,,,,,,,
Sol-43067,,,,,,,
Sol-43068,,,,,,,
Sol-43069,,,,,,,
Sol-43070,,,,,,,
Sol-43071,,,,,,,
Sol-43072,,,,,,,
Sol-43073,,,,,,,
Sol-43074,,,,,,,
Sol-43075,,,,,,,
Sol-43076,,,,,,,
Sol-43077,,,,,,,
Sol-43078,,,,,,,
Sol-43079,,,,,,,
Sol-43080,,,,,,,
Sol-43081,,,,,,,
Sol-43082,,,,,,,
Sol-43083,,,,,,,
Sol-43084,,,,,,,
Sol-43085,,,,,,,
Sol-43086,,,,,,,
Sol-43087,,,,,,,
Sol-43088,,,,,,,
Sol-43089,,,,,,,
Sol-43090,,,,,,,
Sol-43091,,,,,,,
Sol-43092,,,,,,,
Sol-43093,,,,,,,
Sol-43094,,,,,,,
Sol-43095,,,,,,,
Sol-43096,,,,,,,
Sol-43097,,,,,,,
Sol-43098,,,,,,,
Sol-43099,,,,,,,
Sol-43100,,,,,,,
Sol-43101,,,,,,,
Sol-43102,,,,,,,
Sol-43103,,,,,,,
Sol-43104,,,,,,,
Sol-43105,,,,,,,
Sol-43106,,,,,,,
Sol-43107,,,,,,,
Sol-43108,,,,,,,
Sol-43109,,,,,,,
Sol-43110,,,,,,,
Sol-43111,,,,,,,
Sol-43112,,,,,,,
Sol-43113,,,,,,,
Sol-43114,,,,,,,
Sol-43115,,,,,,,
Sol-43116,,,,,,,
Sol-43117,,,,,,,
Sol-43118,,,,,,,
Sol-43119,,,,,,,
Sol-43120,,,,,,,
Sol-43121,,,,,,,
Sol-43122,,,,,,,
Sol-43123,,,,,,,
Sol-43124,,,,,,,
Sol-43125,,,,,,,
Sol-43126,,,,,,,
Sol-43127,,,,,,,
Sol-43128,,,,,,,
Sol-43129,,,,,,,
Sol-43130,,,,,,,
Sol-43131,,,,,,,
Sol-43132,,,,,,,
Sol-43133,,,,,,,
Sol-43134,,,,,,,
Sol-43135,,,,,,,
Sol-43136,,,,,,,
Sol-43137,,,,,,,
Sol-43138,,,,,,,
Sol-43139,,,,,,,
Sol-43140,,,,,,,
Sol-43141,,,,,,,
Sol-43142,,,,,,,
Sol-43143,,,,,,,
Sol-43144,,,,,,,
Sol-43145,,,,,,,
Sol-43146,,,,,,,
Sol-43147,,,,,,,
Sol-43148,,,,,,,
Sol-43149,,,,,,,
Sol-43150,,,,,,,
Sol-43151,,,,,,,
Sol-43152,,,,,,,
Sol-43153,,,,,,,
Sol-43154,,,,,,,
Sol-43155,,,,,,,
Sol-43156,,,,,,,
Sol-43157,,,,,,,
Sol-43158,,,,,,,
Sol-43159,,,,,,,
Sol-43160,,,,,,,
Sol-43161,,,,,,,
Sol-43162,,,,,,,
Sol-43163,,,,,,,
Sol-43164,,,,,,,
Sol-43165,,,,,,,
Sol-43166,,,,,,,
Sol-43167,,,,,,,
Sol-43168,,,,,,,
Sol-43169,,,,,,,
Sol-43170,,,,,,,
Sol-43171,,,,,,,
Sol-43172,,,,,,,
Sol-43173,,,,,,,
Sol-43174,,,,,,,
Sol-43175,,,,,,,
Sol-43176,,,,,,,
Sol-43177,,,,,,,
Sol-43178,,,,,,,
Sol-43179,,,,,,,
Sol-43180,,,,,,,
Sol-43181,,,,,,,
Sol-43182,,,,,,,
Sol-43183,,,,,,,
Sol-43184,,,,,,,
Sol-43185,,,,,,,
Sol-43186,,,,,,,
Sol-43187,,,,,,,
Sol-43188,,,,,,,
Sol-43189,,,,,,,
Sol-43190,,,,,,,
Sol-43191,,,,,,,
Sol-43192,,,,,,,
Sol-43193,,,,,,,
Sol-43194,,,,,,,
Sol-43195,,,,,,,
Sol-43196,,,,,,,
Sol-43197,,,,,,,
Sol-43198,,,,,,,
Sol-43199,,,,,,,
Sol-43200,,,,,,,
Sol-43201,,,,,,,
Sol-43202,,,,,,,
Sol-43203,,,,,,,
Sol-43204,,,,,,,
Sol-43205,,,,,,,
Sol-43206,,,,,,,
Sol-43207,,,,,,,
Sol-43208,,,,,,,
Sol-43209,,,,,,,
Sol-43210,,,,,,,
Sol-43211,,,,,,,
Sol-43212,,,,,,,
Sol-43213,,,,,,,
Sol-43214,,,,,,,
Sol-43215,,,,,,,
Sol-43216,,,,,,,
Sol-43217,,,,,,,
Sol-43218,,,,,,,
Sol-43219,,,,,,,
Sol-43220,,,,,,,
Sol-43221,,,,,,,
Sol-43222,,,,,,,
Sol-43223,,,,,,,
Sol-43224,,,,,,,
Sol-43225,,,,,,,
Sol-43226,,,,,,,
Sol-43227,,,,,,,
Sol-43228,,,,,,,
Sol-43229,,,,,,,
Sol-43230,,,,,,,
Sol-43231,,,,,,,
Sol-43232,,,,,,,
Sol-43233,,,,,,,
Sol-43234,,,,,,,
Sol-43235,,,,,,,
Sol-43236,,,,,,,
Sol-43237,,,,,,,
Sol-43238,,,,,,,
Sol-43239,,,,,,,
Sol-43240,,,,,,,
Sol-43241,,,,,,,
Sol-43242,,,,,,,
Sol-43243,,,,,,,
Sol-43244,,,,,,,
Sol-43245,,,,,,,
Sol-43246,,,,,,,
Sol-43247,,,,,,,
Sol-43248,,,,,,,
Sol-43249,,,,,,,
Sol-43250,,,,,,,
Sol-43251,,,,,,,
Sol-43252,,,,,,,
Sol-43253,,,,,,,
Sol-43254,,,,,,,
Sol-43255,,,,,,,
Sol-43256,,,,,,,
Sol-43257,,,,,,,
Sol-43258,,,,,,,
Sol-43259,,,,,,,
Sol-43260,,,,,,,
Sol-43261,,,,,,,
Sol-43262,,,,,,,
Sol-43263,,,,,,,
Sol-43264,,,,,,,
Sol-43265,,,,,,,
Sol-43266,,,,,,,
Sol-43267,,,,,,,
Sol-43268,,,,,,,
Sol-43269,,,,,,,
Sol-43270,,,,,,,
Sol-43271,,,,,,,
Sol-43272,,,,,,,
Sol-43273,,,,,,,
Sol-43274,,,,,,,
Sol-43275,,,,,,,
Sol-43276,,,,,,,
Sol-43277,,,,,,,
Sol-43278,,,,,,,
Sol-43279,,,,,,,
Sol-43280,,,,,,,
Sol-43281,,,,,,,
Sol-43282,,,,,,,
Sol-43283,,,,,,,
Sol-43284,,,,,,,
Sol-43285,,,,,,,
Sol-43286,,,,,,,
Sol-43287,,,,,,,
Sol-43288,,,,,,,
Sol-43289,,,,,,,
Sol-43290,,,,,,,
Sol-43291,,,,,,,
Sol-43292,,,,,,,
Sol-43293,,,,,,,
Sol-43294,,,,,,,
Sol-43295,,,,,,,
Sol-43296,,,,,,,
Sol-43297,,,,,,,
Sol-43298,,,,,,,
Sol-43299,,,,,,,
Sol-43300,,,,,,,
Sol-43301,,,,,,,
Sol-43302,,,,,,,
Sol-43303,,,,,,,
Sol-43304,,,,,,,
Sol-43305,,,,,,,
Sol-43306,,,,,,,
Sol-43307,,,,,,,
Sol-43308,,,,,,,
Sol-43309,,,,,,,
Sol-43310,,,,,,,
Sol-43311,,,,,,,
Sol-43312,,,,,,,
Sol-43313,,,,,,,
Sol-43314,,,,,,,
Sol-43315,,,,,,,
Sol-43316,,,,,,,
Sol-43317,,,,,,,
Sol-43318,,,,,,,
Sol-43319,,,,,,,
Sol-43320,,,,,,,
Sol-43321,,,,,,,
Sol-43322,,,,,,,
Sol-43323,,,,,,,
Sol-43324,,,,,,,
Sol-43325,,,,,,,
Sol-43326,,,,,,,
Sol-43327,,,,,,,
Sol-43328,,,,,,,
Sol-43329,,,,,,,
Sol-43330,,,,,,,
Sol-43331,,,,,,,
Sol-43332,,,,,,,
Sol-43333,,,,,,,
Sol-43334,,,,,,,
Sol-43335,,,,,,,
Sol-43336,,,,,,,
Sol-43337,,,,,,,
Sol-43338,,,,,,,
Sol-43339,,,,,,,
Sol-43340,,,,,,,
Sol-43341,,,,,,,
Sol-43342,,,,,,,
Sol-43343,,,,,,,
Sol-43344,,,,,,,
Sol-43345,,,,,,,
Sol-43346,,,,,,,
Sol-43347,,,,,,,
Sol-43348,,,,,,,
Sol-43349,,,,,,,
Sol-43350,,,,,,,
Sol-43351,,,,,,,
Sol-43352,,,,,,,
Sol-43353,,,,,,,
Sol-43354,,,,,,,
Sol-43355,,,,,,,
Sol-43356,,,,,,,
Sol-43357,,,,,,,
Sol-43358,,,,,,,
Sol-43359,,,,,,,
Sol-43360,,,,,,,
Sol-43361,,,,,,,
Sol-43362,,,,,,,
Sol-43363,,,,,,,
Sol-43364,,,,,,,
Sol-43365,,,,,,,
Sol-43366,,,,,,,
Sol-43367,,,,,,,
Sol-43368,,,,,,,
Sol-43369,,,,,,,
Sol-43370,,,,,,,
Sol-43371,,,,,,,
Sol-43372,,,,,,,
Sol-43373,,,,,,,
Sol-43374,,,,,,,
Sol-43375,,,,,,,
Sol-43376,,,,,,,
Sol-43377,,,,,,,
Sol-43378,,,,,,,
Sol-43379,,,,,,,
Sol-43380,,,,,,,
Sol-43381,,,,,,,
Sol-43382,,,,,,,
Sol-43383,,,,,,,
Sol-43384,,,,,,,
Sol-43385,,,,,,,
Sol-43386,,,,,,,
Sol-43387,,,,,,,
Sol-43388,,,,,,,
Sol-43389,,,,,,,
Sol-43390,,,,,,,
Sol-43391,,,,,,,
Sol-43392,,,,,,,
Sol-43393,,,,,,,
Sol-43394,,,,,,,
Sol-43395,,,,,,,
Sol-43396,,,,,,,
Sol-43397,,,,,,,
Sol-43398,,,,,,,
Sol-43399,,,,,,,
Sol-43400,,,,,,,
Sol-43401,,,,,,,
Sol-43402,,,,,,,
Sol-43403,,,,,,,
Sol-43404,,,,,,,
Sol-43405,,,,,,,
Sol-43406,,,,,,,
Sol-43407,,,,,,,
Sol-43408,,,,,,,
Sol-43409,,,,,,,
Sol-43410,,,,,,,
Sol-43411,,,,,,,
Sol-43412,,,,,,,
Sol-43413,,,,,,,
Sol-43414,,,,,,,
Sol-43415,,,,,,,
Sol-43416,,,,,,,
Sol-43417,,,,,,,
Sol-43418,,,,,,,
Sol-43419,,,,,,,
Sol-43420,,,,,,,
Sol-43421,,,,,,,
Sol-43422,,,,,,,
Sol-43423,,,,,,,
Sol-43424,,,,,,,
Sol-43425,,,,,,,
Sol-43426,,,,,,,
Sol-43427,,,,,,,
Sol-43428,,,,,,,
Sol-43429,,,,,,,
Sol-43430,,,,,,,
Sol-43431,,,,,,,
Sol-43432,,,,,,,
Sol-43433,,,,,,,
Sol-43434,,,,,,,
Sol-43435,,,,,,,
Sol-43436,,,,,,,
Sol-43437,,,,,,,
Sol-43438,,,,,,,
Sol-43439,,,,,,,
Sol-43440,,,,,,,
Sol-43441,,,,,,,
Sol-43442,,,,,,,
Sol-43443,,,,,,,
Sol-43444,,,,,,,
Sol-43445,,,,,,,
Sol-43446,,,,,,,
Sol-43447,,,,,,,
Sol-43448,,,,,,,
Sol-43449,,,,,,,
Sol-43450,,,,,,,
Sol-43451,,,,,,,
Sol-43452,,,,,,,
Sol-43453,,,,,,,
Sol-43454,,,,,,,
Sol-43455,,,,,,,
Sol-43456,,,,,,,
Sol-43457,,,,,,,
Sol-43458,,,,,,,
Sol-43459,,,,,,,
Sol-43460,,,,,,,
Sol-43461,,,,,,,
Sol-43462,,,,,,,
Sol-43463,,,,,,,
Sol-43464,,,,,,,
Sol-43465,,,,,,,
Sol-43466,,,,,,,
Sol-43467,,,,,,,
Sol-43468,,,,,,,
Sol-43469,,,,,,,
Sol-43470,,,,,,,
Sol-43471,,,,,,,
Sol-43472,,,,,,,
Sol-43473,,,,,,,
Sol-43474,,,,,,,
Sol-43475,,,,,,,
Sol-43476,,,,,,,
Sol-43477,,,,,,,
Sol-43478,,,,,,,
Sol-43479,,,,,,,
Sol-43480,,,,,,,
Sol-43481,,,,,,,
Sol-43482,,,,,,,
Sol-43483,,,,,,,
Sol-43484,,,,,,,
Sol-43485,,,,,,,
Sol-43486,,,,,,,
Sol-43487,,,,,,,
Sol-43488,,,,,,,
Sol-43489,,,,,,,
Sol-43490,,,,,,,
Sol-43491,,,,,,,
Sol-43492,,,,,,,
Sol-43493,,,,,,,
Sol-43494,,,,,,,
Sol-43495,,,,,,,
Sol-43496,,,,,,,
Sol-43497,,,,,,,
Sol-43498,,,,,,,
Sol-43499,,,,,,,
Sol-43500,,,,,,,
Sol-43501,,,,,,,
Sol-43502,,,,,,,
Sol-43503,,,,,,,
Sol-43504,,,,,,,
Sol-43505,,,,,,,
Sol-43506,,,,,,,
Sol-43507,,,,,,,
Sol-43508,,,,,,,
Sol-43509,,,,,,,
Sol-43510,,,,,,,
Sol-43511,,,,,,,
Sol-43512,,,,,,,
Sol-43513,,,,,,,
Sol-43514,,,,,,,
Sol-43515,,,,,,,
Sol-43516,,,,,,,
Sol-43517,,,,,,,
Sol-43518,,,,,,,
Sol-43519,,,,,,,
Sol-43520,,,,,,,
Sol-43521,,,,,,,
Sol-43522,,,,,,,
Sol-43523,,,,,,,
Sol-43524,,,,,,,
Sol-43525,,,,,,,
Sol-43526,,,,,,,
Sol-43527,,,,,,,
Sol-43528,,,,,,,
Sol-43529,,,,,,,
Sol-43530,,,,,,,
Sol-43531,,,,,,,
Sol-43532,,,,,,,
Sol-43533,,,,,,,
Sol-43534,,,,,,,
Sol-43535,,,,,,,
Sol-43536,,,,,,,
Sol-43537,,,,,,,
Sol-43538,,,,,,,
Sol-43539,,,,,,,
Sol-43540,,,,,,,
Sol-43541,,,,,,,
Sol-43542,,,,,,,
Sol-43543,,,,,,,
Sol-43544,,,,,,,
Sol-43545,,,,,,,
Sol-43546,,,,,,,
Sol-43547,,,,,,,
Sol-43548,,,,,,,
Sol-43549,,,,,,,
Sol-43550,,,,,,,
Sol-43551,,,,,,,
Sol-43552,,,,,,,
Sol-43553,,,,,,,
Sol-43554,,,,,,,
Sol-43555,,,,,,,
Sol-43556,,,,,,,
Sol-43557,,,,,,,
Sol-43558,,,,,,,
Sol-43559,,,,,,,
Sol-43560,,,,,,,
Sol-43561,,,,,,,
Sol-43562,,,,,,,
Sol-43563,,,,,,,
Sol-43564,,,,,,,
Sol-43565,,,,,,,
Sol-43566,,,,,,,
Sol-43567,,,,,,,
Sol-43568,,,,,,,
Sol-43569,,,,,,,
Sol-43570,,,,,,,
Sol-43571,,,,,,,
Sol-43572,,,,,,,
Sol-43573,,,,,,,
Sol-43574,,,,,,,
Sol-43575,,,,,,,
Sol-43576,,,,,,,
Sol-43577,,,,,,,
Sol-43578,,,,,,,
Sol-43579,,,,,,,
Sol-43580,,,,,,,
Sol-43581,,,,,,,
Sol-43582,,,,,,,
Sol-43583,,,,,,,
Sol-43584,,,,,,,
Sol-43585,,,,,,,
Sol-43586,,,,,,,
Sol-43587,,,,,,,
Sol-43588,,,,,,,
Sol-43589,,,,,,,
Sol-43590,,,,,,,
Sol-43591,,,,,,,
Sol-43592,,,,,,,
Sol-43593,,,,,,,
Sol-43594,,,,,,,
Sol-43595,,,,,,,
Sol-43596,,,,,,,
Sol-43597,,,,,,,
Sol-43598,,,,,,,
Sol-43599,,,,,,,
Sol-43600,,,,,,,
Sol-43601,,,,,,,
Sol-43602,,,,,,,
Sol-43603,,,,,,,
Sol-43604,,,,,,,
Sol-43605,,,,,,,
Sol-43606,,,,,,,
Sol-43607,,,,,,,
Sol-43608,,,,,,,
Sol-43609,,,,,,,
Sol-43610,,,,,,,
Sol-43611,,,,,,,
Sol-43612,,,,,,,
Sol-43613,,,,,,,
Sol-43614,,,,,,,
Sol-43615,,,,,,,
Sol-43616,,,,,,,
Sol-43617,,,,,,,
Sol-43618,,,,,,,
Sol-43619,,,,,,,
Sol-43620,,,,,,,
Sol-43621,,,,,,,
Sol-43622,,,,,,,
Sol-43623,,,,,,,
Sol-43624,,,,,,,
Sol-43625,,,,,,,
Sol-43626,,,,,,,
Sol-43627,,,,,,,
Sol-43628,,,,,,,
Sol-43629,,,,,,,
Sol-43630,,,,,,,
Sol-43631,,,,,,,
Sol-43632,,,,,,,
Sol-43633,,,,,,,
Sol-43634,,,,,,,
Sol-43635,,,,,,,
Sol-43636,,,,,,,
Sol-43637,,,,,,,
Sol-43638,,,,,,,
Sol-43639,,,,,,,
Sol-43640,,,,,,,
Sol-43641,,,,,,,
Sol-43642,,,,,,,
Sol-43643,,,,,,,
Sol-43644,,,,,,,
Sol-43645,,,,,,,
Sol-43646,,,,,,,
Sol-43647,,,,,,,
Sol-43648,,,,,,,
Sol-43649,,,,,,,
Sol-43650,,,,,,,
Sol-43651,,,,,,,
Sol-43652,,,,,,,
Sol-43653,,,,,,,
Sol-43654,,,,,,,
Sol-43655,,,,,,,
Sol-43656,,,,,,,
Sol-43657,,,,,,,
Sol-43658,,,,,,,
Sol-43659,,,,,,,
Sol-43660,,,,,,,
Sol-43661,,,,,,,
Sol-43662,,,,,,,
Sol-43663,,,,,,,
Sol-43664,,,,,,,
Sol-43665,,,,,,,
Sol-43666,,,,,,,
Sol-43667,,,,,,,
Sol-43668,,,,,,,
Sol-43669,,,,,,,
Sol-43670,,,,,,,
Sol-43671,,,,,,,
Sol-43672,,,,,,,
Sol-43673,,,,,,,
Sol-43674,,,,,,,
Sol-43675,,,,,,,
Sol-43676,,,,,,,
Sol-43677,,,,,,,
Sol-43678,,,,,,,
Sol-43679,,,,,,,
Sol-43680,,,,,,,
Sol-43681,,,,,,,
Sol-43682,,,,,,,
Sol-43683,,,,,,,
Sol-43684,,,,,,,
Sol-43685,,,,,,,
Sol-43686,,,,,,,
Sol-43687,,,,,,,
Sol-43688,,,,,,,
Sol-43689,,,,,,,
Sol-43690,,,,,,,
Sol-43691,,,,,,,
Sol-43692,,,,,,,
Sol-43693,,,,,,,
Sol-43694,,,,,,,
Sol-43695,,,,,,,
Sol-43696,,,,,,,
Sol-43697,,,,,,,
Sol-43698,,,,,,,
Sol-43699,,,,,,,
Sol-43700,,,,,,,
Sol-43701,,,,,,,
Sol-43702,,,,,,,
Sol-43703,,,,,,,
Sol-43704,,,,,,,
Sol-43705,,,,,,,
Sol-43706,,,,,,,
Sol-43707,,,,,,,
Sol-43708,,,,,,,
Sol-43709,,,,,,,
Sol-43710,,,,,,,
Sol-43711,,,,,,,
Sol-43712,,,,,,,
Sol-43713,,,,,,,
Sol-43714,,,,,,,
Sol-43715,,,,,,,
Sol-43716,,,,,,,
Sol-43717,,,,,,,
Sol-43718,,,,,,,
Sol-43719,,,,,,,
Sol-43720,,,,,,,
Sol-43721,,,,,,,
Sol-43722,,,,,,,
Sol-43723,,,,,,,
Sol-43724,,,,,,,
Sol-43725,,,,,,,
Sol-43726,,,,,,,
Sol-43727,,,,,,,
Sol-43728,,,,,,,
Sol-43729,,,,,,,
Sol-43730,,,,,,,
Sol-43731,,,,,,,
Sol-43732,,,,,,,
Sol-43733,,,,,,,
Sol-43734,,,,,,,
Sol-43735,,,,,,,
Sol-43736,,,,,,,
Sol-43737,,,,,,,
Sol-43738,,,,,,,
Sol-43739,,,,,,,
Sol-43740,,,,,,,
Sol-43741,,,,,,,
Sol-43742,,,,,,,
Sol-43743,,,,,,,
Sol-43744,,,,,,,
Sol-43745,,,,,,,
Sol-43746,,,,,,,
Sol-43747,,,,,,,
Sol-43748,,,,,,,
Sol-43749,,,,,,,
Sol-43750,,,,,,,
Sol-43751,,,,,,,
Sol-43752,,,,,,,
Sol-43753,,,,,,,
Sol-43754,,,,,,,
Sol-43755,,,,,,,
Sol-43756,,,,,,,
Sol-43757,,,,,,,
Sol-43758,,,,,,,
Sol-43759,,,,,,,
Sol-43760,,,,,,,
Sol-43761,,,,,,,
Sol-43762,,,,,,,
Sol-43763,,,,,,,
Sol-43764,,,,,,,
Sol-43765,,,,,,,
Sol-43766,,,,,,,
Sol-43767,,,,,,,
Sol-43768,,,,,,,
Sol-43769,,,,,,,
Sol-43770,,,,,,,
Sol-43771,,,,,,,
Sol-43772,,,,,,,
Sol-43773,,,,,,,
Sol-43774,,,,,,,
Sol-43775,,,,,,,
Sol-43776,,,,,,,
Sol-43777,,,,,,,
Sol-43778,,,,,,,
Sol-43779,,,,,,,
Sol-43780,,,,,,,
Sol-43781,,,,,,,
Sol-43782,,,,,,,
Sol-43783,,,,,,,
Sol-43784,,,,,,,
Sol-43785,,,,,,,
Sol-43786,,,,,,,
Sol-43787,,,,,,,
Sol-43788,,,,,,,
Sol-43789,,,,,,,
Sol-43790,,,,,,,
Sol-43791,,,,,,,
Sol-43792,,,,,,,
Sol-43793,,,,,,,
Sol-43794,,,,,,,
Sol-43795,,,,,,,
Sol-43796,,,,,,,
Sol-43797,,,,,,,
Sol-43798,,,,,,,
Sol-43799,,,,,,,
Sol-43800,,,,,,,
Sol-43801,,,,,,,
Sol-43802,,,,,,,
Sol-43803,,,,,,,
Sol-43804,,,,,,,
Sol-43805,,,,,,,
Sol-43806,,,,,,,
Sol-43807,,,,,,,
Sol-43808,,,,,,,
Sol-43809,,,,,,,
Sol-43810,,,,,,,
Sol-43811,,,,,,,
Sol-43812,,,,,,,
Sol-43813,,,,,,,
Sol-43814,,,,,,,
Sol-43815,,,,,,,
Sol-43816,,,,,,,
Sol-43817,,,,,,,
Sol-43818,,,,,,,
Sol-43819,,,,,,,
Sol-43820,,,,,,,
Sol-43821,,,,,,,
Sol-43822,,,,,,,
Sol-43823,,,,,,,
Sol-43824,,,,,,,
Sol-43825,,,,,,,
Sol-43826,,,,,,,
Sol-43827,,,,,,,
Sol-43828,,,,,,,
Sol-43829,,,,,,,
Sol-43830,,,,,,,
Sol-43831,,,,,,,
Sol-43832,,,,,,,
Sol-43833,,,,,,,
Sol-43834,,,,,,,
Sol-43835,,,,,,,
Sol-43836,,,,,,,
Sol-43837,,,,,,,
Sol-43838,,,,,,,
Sol-43839,,,,,,,
Sol-43840,,,,,,,
Sol-43841,,,,,,,
Sol-43842,,,,,,,
Sol-43843,,,,,,,
Sol-43844,,,,,,,
Sol-43845,,,,,,,
Sol-43846,,,,,,,
Sol-43847,,,,,,,
Sol-43848,,,,,,,
Sol-43849,,,,,,,
Sol-43850,,,,,,,
Sol-43851,,,,,,,
Sol-43852,,,,,,,
Sol-43853,,,,,,,
Sol-43854,,,,,,,
Sol-43855,,,,,,,
Sol-43856,,,,,,,
Sol-43857,,,,,,,
Sol-43858,,,,,,,
Sol-43859,,,,,,,
Sol-43860,,,,,,,
Sol-43861,,,,,,,
Sol-43862,,,,,,,
Sol-43863,,,,,,,
Sol-43864,,,,,,,
Sol-43865,,,,,,,
Sol-43866,,,,,,,
Sol-43867,,,,,,,
Sol-43868,,,,,,,
Sol-43869,,,,,,,
Sol-43870,,,,,,,
Sol-43871,,,,,,,
Sol-43872,,,,,,,
Sol-43873,,,,,,,
Sol-43874,,,,,,,
Sol-43875,,,,,,,
Sol-43876,,,,,,,
Sol-43877,,,,,,,
Sol-43878,,,,,,,
Sol-43879,,,,,,,
Sol-43880,,,,,,,
Sol-43881,,,,,,,
Sol-43882,,,,,,,
Sol-43883,,,,,,,
Sol-43884,,,,,,,
Sol-43885,,,,,,,
Sol-43886,,,,,,,
Sol-43887,,,,,,,
Sol-43888,,,,,,,
Sol-43889,,,,,,,
Sol-43890,,,,,,,
Sol-43891,,,,,,,
Sol-43892,,,,,,,
Sol-43893,,,,,,,
Sol-43894,,,,,,,
Sol-43895,,,,,,,
Sol-43896,,,,,,,
Sol-43897,,,,,,,
Sol-43898,,,,,,,
Sol-43899,,,,,,,
Sol-43900,,,,,,,
Sol-43901,,,,,,,
Sol-43902,,,,,,,
Sol-43903,,,,,,,
Sol-43904,,,,,,,
Sol-43905,,,,,,,
Sol-43906,,,,,,,
Sol-43907,,,,,,,
Sol-43908,,,,,,,
Sol-43909,,,,,,,
Sol-43910,,,,,,,
Sol-43911,,,,,,,
Sol-43912,,,,,,,
Sol-43913,,,,,,,
Sol-43914,,,,,,,
Sol-43915,,,,,,,
Sol-43916,,,,,,,
Sol-43917,,,,,,,
Sol-43918,,,,,,,
Sol-43919,,,,,,,
Sol-43920,,,,,,,
Sol-43921,,,,,,,
Sol-43922,,,,,,,
Sol-43923,,,,,,,
Sol-43924,,,,,,,
Sol-43925,,,,,,,
Sol-43926,,,,,,,
Sol-43927,,,,,,,
Sol-43928,,,,,,,
Sol-43929,,,,,,,
Sol-43930,,,,,,,
Sol-43931,,,,,,,
Sol-43932,,,,,,,
Sol-43933,,,,,,,
Sol-43934,,,,,,,
Sol-43935,,,,,,,
Sol-43936,,,,,,,
Sol-43937,,,,,,,
Sol-43938,,,,,,,
Sol-43939,,,,,,,
Sol-43940,,,,,,,
Sol-43941,,,,,,,
Sol-43942,,,,,,,
Sol-43943,,,,,,,
Sol-43944,,,,,,,
Sol-43945,,,,,,,
Sol-43946,,,,,,,
Sol-43947,,,,,,,
Sol-43948,,,,,,,
Sol-43949,,,,,,,
Sol-43950,,,,,,,
Sol-43951,,,,,,,
Sol-43952,,,,,,,
Sol-43953,,,,,,,
Sol-43954,,,,,,,
Sol-43955,,,,,,,
Sol-43956,,,,,,,
Sol-43957,,,,,,,
Sol-43958,,,,,,,
Sol-43959,,,,,,,
Sol-43960,,,,,,,
Sol-43961,,,,,,,
Sol-43962,,,,,,,
Sol-43963,,,,,,,
Sol-43964,,,,,,,
Sol-43965,,,,,,,
Sol-43966,,,,,,,
Sol-43967,,,,,,,
Sol-43968,,,,,,,
Sol-43969,,,,,,,
Sol-43970,,,,,,,
Sol-43971,,,,,,,
Sol-43972,,,,,,,
Sol-43973,,,,,,,
Sol-43974,,,,,,,
Sol-43975,,,,,,,
Sol-43976,,,,,,,
Sol-43977,,,,,,,
Sol-43978,,,,,,,
Sol-43979,,,,,,,
Sol-43980,,,,,,,
Sol-43981,,,,,,,
Sol-43982,,,,,,,
Sol-43983,,,,,,,
Sol-43984,,,,,,,
Sol-43985,,,,,,,
Sol-43986,,,,,,,
Sol-43987,,,,,,,
Sol-43988,,,,,,,
Sol-43989,,,,,,,
Sol-43990,,,,,,,
Sol-43991,,,,,,,
Sol-43992,,,,,,,
Sol-43993,,,,,,,
Sol-43994,,,,,,,
Sol-43995,,,,,,,
Sol-43996,,,,,,,
Sol-43997,,,,,,,
Sol-43998,,,,,,,
Sol-43999,,,,,,,
Sol-44000,,,,,,,
Sol-44001,,,,,,,
Sol-44002,,,,,,,
Sol-44003,,,,,,,
Sol-44004,,,,,,,
Sol-44005,,,,,,,
Sol-44006,,,,,,,
Sol-44007,,,,,,,
Sol-44008,,,,,,,
Sol-44009,,,,,,,
Sol-44010,,,,,,,
Sol-44011,,,,,,,
Sol-44012,,,,,,,
Sol-44013,,,,,,,
Sol-44014,,,,,,,
Sol-44015,,,,,,,
Sol-44016,,,,,,,
Sol-44017,,,,,,,
Sol-44018,,,,,,,
Sol-44019,,,,,,,
Sol-44020,,,,,,,
Sol-44021,,,,,,,
Sol-44022,,,,,,,
Sol-44023,,,,,,,
Sol-44024,,,,,,,
Sol-44025,,,,,,,
Sol-44026,,,,,,,
Sol-44027,,,,,,,
Sol-44028,,,,,,,
Sol-44029,,,,,,,
Sol-44030,,,,,,,
Sol-44031,,,,,,,
Sol-44032,,,,,,,
Sol-44033,,,,,,,
Sol-44034,,,,,,,
Sol-44035,,,,,,,
Sol-44036,,,,,,,
Sol-44037,,,,,,,
Sol-44038,,,,,,,
Sol-44039,,,,,,,
Sol-44040,,,,,,,
Sol-44041,,,,,,,
Sol-44042,,,,,,,
Sol-44043,,,,,,,
Sol-44044,,,,,,,
Sol-44045,,,,,,,
Sol-44046,,,,,,,
Sol-44047,,,,,,,
Sol-44048,,,,,,,
Sol-44049,,,,,,,
Sol-44050,,,,,,,
Sol-44051,,,,,,,
Sol-44052,,,,,,,
Sol-44053,,,,,,,
Sol-44054,,,,,,,
Sol-44055,,,,,,,
Sol-44056,,,,,,,
Sol-44057,,,,,,,
Sol-44058,,,,,,,
Sol-44059,,,,,,,
Sol-44060,,,,,,,
Sol-44061,,,,,,,
Sol-44062,,,,,,,
Sol-44063,,,,,,,
Sol-44064,,,,,,,
Sol-44065,,,,,,,
Sol-44066,,,,,,,
Sol-44067,,,,,,,
Sol-44068,,,,,,,
Sol-44069,,,,,,,
Sol-44070,,,,,,,
Sol-44071,,,,,,,
Sol-44072,,,,,,,
Sol-44073,,,,,,,
Sol-44074,,,,,,,
Sol-44075,,,,,,,
Sol-44076,,,,,,,
Sol-44077,,,,,,,
Sol-44078,,,,,,,
Sol-44079,,,,,,,
Sol-44080,,,,,,,
Sol-44081,,,,,,,
Sol-44082,,,,,,,
Sol-44083,,,,,,,
Sol-44084,,,,,,,
Sol-44085,,,,,,,
Sol-44086,,,,,,,
Sol-44087,,,,,,,
Sol-44088,,,,,,,
Sol-44089,,,,,,,
Sol-44090,,,,,,,
Sol-44091,,,,,,,
Sol-44092,,,,,,,
Sol-44093,,,,,,,
Sol-44094,,,,,,,
Sol-44095,,,,,,,
Sol-44096,,,,,,,
Sol-44097,,,,,,,
Sol-44098,,,,,,,
Sol-44099,,,,,,,
Sol-44100,,,,,,,
Sol-44101,,,,,,,
Sol-44102,,,,,,,
Sol-44103,,,,,,,
Sol-44104,,,,,,,
Sol-44105,,,,,,,
Sol-44106,,,,,,,
Sol-44107,,,,,,,
Sol-44108,,,,,,,
Sol-44109,,,,,,,
Sol-44110,,,,,,,
Sol-44111,,,,,,,
Sol-44112,,,,,,,
Sol-44113,,,,,,,
Sol-44114,,,,,,,
Sol-44115,,,,,,,
Sol-44116,,,,,,,
Sol-44117,,,,,,,
Sol-44118,,,,,,,
Sol-44119,,,,,,,
Sol-44120,,,,,,,
Sol-44121,,,,,,,
Sol-44122,,,,,,,
Sol-44123,,,,,,,
Sol-44124,,,,,,,
Sol-44125,,,,,,,
Sol-44126,,,,,,,
Sol-44127,,,,,,,
Sol-44128,,,,,,,
Sol-44129,,,,,,,
Sol-44130,,,,,,,
Sol-44131,,,,,,,
Sol-44132,,,,,,,
Sol-44133,,,,,,,
Sol-44134,,,,,,,
Sol-44135,,,,,,,
Sol-44136,,,,,,,
Sol-44137,,,,,,,
Sol-44138,,,,,,,
Sol-44139,,,,,,,
Sol-44140,,,,,,,
Sol-44141,,,,,,,
Sol-44142,,,,,,,
Sol-44143,,,,,,,
Sol-44144,,,,,,,
Sol-44145,,,,,,,
Sol-44146,,,,,,,
Sol-44147,,,,,,,
Sol-44148,,,,,,,
Sol-44149,,,,,,,
Sol-44150,,,,,,,
Sol-44151,,,,,,,
Sol-44152,,,,,,,
Sol-44153,,,,,,,
Sol-44154,,,,,,,
Sol-44155,,,,,,,
Sol-44156,,,,,,,
Sol-44157,,,,,,,
Sol-44158,,,,,,,
Sol-44159,,,,,,,
Sol-44160,,,,,,,
Sol-44161,,,,,,,
Sol-44162,,,,,,,
Sol-44163,,,,,,,
Sol-44164,,,,,,,
Sol-44165,,,,,,,
Sol-44166,,,,,,,
Sol-44167,,,,,,,
Sol-44168,,,,,,,
Sol-44169,,,,,,,
Sol-44170,,,,,,,
Sol-44171,,,,,,,
Sol-44172,,,,,,,
Sol-44173,,,,,,,
Sol-44174,,,,,,,
Sol-44175,,,,,,,
Sol-44176,,,,,,,
Sol-44177,,,,,,,
Sol-44178,,,,,,,
Sol-44179,,,,,,,
Sol-44180,,,,,,,
Sol-44181,,,,,,,
Sol-44182,,,,,,,
Sol-44183,,,,,,,
Sol-44184,,,,,,,
Sol-44185,,,,,,,
Sol-44186,,,,,,,
Sol-44187,,,,,,,
Sol-44188,,,,,,,
Sol-44189,,,,,,,
Sol-44190,,,,,,,
Sol-44191,,,,,,,
Sol-44192,,,,,,,
Sol-44193,,,,,,,
Sol-44194,,,,,,,
Sol-44195,,,,,,,
Sol-44196,,,,,,,
Sol-44197,,,,,,,
Sol-44198,,,,,,,
Sol-44199,,,,,,,
Sol-44200,,,,,,,
Sol-44201,,,,,,,
Sol-44202,,,,,,,
Sol-44203,,,,,,,
Sol-44204,,,,,,,
Sol-44205,,,,,,,
Sol-44206,,,,,,,
Sol-44207,,,,,,,
Sol-44208,,,,,,,
Sol-44209,,,,,,,
Sol-44210,,,,,,,
Sol-44211,,,,,,,
Sol-44212,,,,,,,
Sol-44213,,,,,,,
Sol-44214,,,,,,,
Sol-44215,,,,,,,
Sol-44216,,,,,,,
Sol-44217,,,,,,,
Sol-44218,,,,,,,
Sol-44219,,,,,,,
Sol-44220,,,,,,,
Sol-44221,,,,,,,
Sol-44222,,,,,,,
Sol-44223,,,,,,,
Sol-44224,,,,,,,
Sol-44225,,,,,,,
Sol-44226,,,,,,,
Sol-44227,,,,,,,
Sol-44228,,,,,,,
Sol-44229,,,,,,,
Sol-44230,,,,,,,
Sol-44231,,,,,,,
Sol-44232,,,,,,,
Sol-44233,,,,,,,
Sol-44234,,,,,,,
Sol-44235,,,,,,,
Sol-44236,,,,,,,
Sol-44237,,,,,,,
Sol-44238,,,,,,,
Sol-44239,,,,,,,
Sol-44240,,,,,,,
Sol-44241,,,,,,,
Sol-44242,,,,,,,
Sol-44243,,,,,,,
Sol-44244,,,,,,,
Sol-44245,,,,,,,
Sol-44246,,,,,,,
Sol-44247,,,,,,,
Sol-44248,,,,,,,
Sol-44249,,,,,,,
Sol-44250,,,,,,,
Sol-44251,,,,,,,
Sol-44252,,,,,,,
Sol-44253,,,,,,,
Sol-44254,,,,,,,
Sol-44255,,,,,,,
Sol-44256,,,,,,,
Sol-44257,,,,,,,
Sol-44258,,,,,,,
Sol-44259,,,,,,,
Sol-44260,,,,,,,
Sol-44261,,,,,,,
Sol-44262,,,,,,,
Sol-44263,,,,,,,
Sol-44264,,,,,,,
Sol-44265,,,,,,,
Sol-44266,,,,,,,
Sol-44267,,,,,,,
Sol-44268,,,,,,,
Sol-44269,,,,,,,
Sol-44270,,,,,,,
Sol-44271,,,,,,,
Sol-44272,,,,,,,
Sol-44273,,,,,,,
Sol-44274,,,,,,,
Sol-44275,,,,,,,
Sol-44276,,,,,,,
Sol-44277,,,,,,,
Sol-44278,,,,,,,
Sol-44279,,,,,,,
Sol-44280,,,,,,,
Sol-44281,,,,,,,
Sol-44282,,,,,,,
Sol-44283,,,,,,,
Sol-44284,,,,,,,
Sol-44285,,,,,,,
Sol-44286,,,,,,,
Sol-44287,,,,,,,
Sol-44288,,,,,,,
Sol-44289,,,,,,,
Sol-44290,,,,,,,
Sol-44291,,,,,,,
Sol-44292,,,,,,,
Sol-44293,,,,,,,
Sol-44294,,,,,,,
Sol-44295,,,,,,,
Sol-44296,,,,,,,
Sol-44297,,,,,,,
Sol-44298,,,,,,,
Sol-44299,,,,,,,
Sol-44300,,,,,,,
Sol-44301,,,,,,,
Sol-44302,,,,,,,
Sol-44303,,,,,,,
Sol-44304,,,,,,,
Sol-44305,,,,,,,
Sol-44306,,,,,,,
Sol-44307,,,,,,,
Sol-44308,,,,,,,
Sol-44309,,,,,,,
Sol-44310,,,,,,,
Sol-44311,,,,,,,
Sol-44312,,,,,,,
Sol-44313,,,,,,,
Sol-44314,,,,,,,
Sol-44315,,,,,,,
Sol-44316,,,,,,,
Sol-44317,,,,,,,
Sol-44318,,,,,,,
Sol-44319,,,,,,,
Sol-44320,,,,,,,
Sol-44321,,,,,,,
Sol-44322,,,,,,,
Sol-44323,,,,,,,
Sol-44324,,,,,,,
Sol-44325,,,,,,,
Sol-44326,,,,,,,
Sol-44327,,,,,,,
Sol-44328,,,,,,,
Sol-44329,,,,,,,
Sol-44330,,,,,,,
Sol-44331,,,,,,,
Sol-44332,,,,,,,
Sol-44333,,,,,,,
Sol-44334,,,,,,,
Sol-44335,,,,,,,
Sol-44336,,,,,,,
Sol-44337,,,,,,,
Sol-44338,,,,,,,
Sol-44339,,,,,,,
Sol-44340,,,,,,,
Sol-44341,,,,,,,
Sol-44342,,,,,,,
Sol-44343,,,,,,,
Sol-44344,,,,,,,
Sol-44345,,,,,,,
Sol-44346,,,,,,,
Sol-44347,,,,,,,
Sol-44348,,,,,,,
Sol-44349,,,,,,,
Sol-44350,,,,,,,
Sol-44351,,,,,,,
Sol-44352,,,,,,,
Sol-44353,,,,,,,
Sol-44354,,,,,,,
Sol-44355,,,,,,,
Sol-44356,,,,,,,
Sol-44357,,,,,,,
Sol-44358,,,,,,,
Sol-44359,,,,,,,
Sol-44360,,,,,,,
Sol-44361,,,,,,,
Sol-44362,,,,,,,
Sol-44363,,,,,,,
Sol-44364,,,,,,,
Sol-44365,,,,,,,
Sol-44366,,,,,,,
Sol-44367,,,,,,,
Sol-44368,,,,,,,
Sol-44369,,,,,,,
Sol-44370,,,,,,,
Sol-44371,,,,,,,
Sol-44372,,,,,,,
Sol-44373,,,,,,,
Sol-44374,,,,,,,
Sol-44375,,,,,,,
Sol-44376,,,,,,,
Sol-44377,,,,,,,
Sol-44378,,,,,,,
Sol-44379,,,,,,,
Sol-44380,,,,,,,
Sol-44381,,,,,,,
Sol-44382,,,,,,,
Sol-44383,,,,,,,
Sol-44384,,,,,,,
Sol-44385,,,,,,,
Sol-44386,,,,,,,
Sol-44387,,,,,,,
Sol-44388,,,,,,,
Sol-44389,,,,,,,
Sol-44390,,,,,,,
Sol-44391,,,,,,,
Sol-44392,,,,,,,
Sol-44393,,,,,,,
Sol-44394,,,,,,,
Sol-44395,,,,,,,
Sol-44396,,,,,,,
Sol-44397,,,,,,,
Sol-44398,,,,,,,
Sol-44399,,,,,,,
Sol-44400,,,,,,,
Sol-44401,,,,,,,
Sol-44402,,,,,,,
Sol-44403,,,,,,,
Sol-44404,,,,,,,
Sol-44405,,,,,,,
Sol-44406,,,,,,,
Sol-44407,,,,,,,
Sol-44408,,,,,,,
Sol-44409,,,,,,,
Sol-44410,,,,,,,
Sol-44411,,,,,,,
Sol-44412,,,,,,,
Sol-44413,,,,,,,
Sol-44414,,,,,,,
Sol-44415,,,,,,,
Sol-44416,,,,,,,
Sol-44417,,,,,,,
Sol-44418,,,,,,,
Sol-44419,,,,,,,
Sol-44420,,,,,,,
Sol-44421,,,,,,,
Sol-44422,,,,,,,
Sol-44423,,,,,,,
Sol-44424,,,,,,,
Sol-44425,,,,,,,
Sol-44426,,,,,,,
Sol-44427,,,,,,,
Sol-44428,,,,,,,
Sol-44429,,,,,,,
Sol-44430,,,,,,,
Sol-44431,,,,,,,
Sol-44432,,,,,,,
Sol-44433,,,,,,,
Sol-44434,,,,,,,
Sol-44435,,,,,,,
Sol-44436,,,,,,,
Sol-44437,,,,,,,
Sol-44438,,,,,,,
Sol-44439,,,,,,,
Sol-44440,,,,,,,
Sol-44441,,,,,,,
Sol-44442,,,,,,,
Sol-44443,,,,,,,
Sol-44444,,,,,,,
Sol-44445,,,,,,,
Sol-44446,,,,,,,
Sol-44447,,,,,,,
Sol-44448,,,,,,,
Sol-44449,,,,,,,
Sol-44450,,,,,,,
Sol-44451,,,,,,,
Sol-44452,,,,,,,
Sol-44453,,,,,,,
Sol-44454,,,,,,,
Sol-44455,,,,,,,
Sol-44456,,,,,,,
Sol-44457,,,,,,,
Sol-44458,,,,,,,
Sol-44459,,,,,,,
Sol-44460,,,,,,,
Sol-44461,,,,,,,
Sol-44462,,,,,,,
Sol-44463,,,,,,,
Sol-44464,,,,,,,
Sol-44465,,,,,,,
Sol-44466,,,,,,,
Sol-44467,,,,,,,
Sol-44468,,,,,,,
Sol-44469,,,,,,,
Sol-44470,,,,,,,
Sol-44471,,,,,,,
Sol-44472,,,,,,,
Sol-44473,,,,,,,
Sol-44474,,,,,,,
Sol-44475,,,,,,,
Sol-44476,,,,,,,
Sol-44477,,,,,,,
Sol-44478,,,,,,,
Sol-44479,,,,,,,
Sol-44480,,,,,,,
Sol-44481,,,,,,,
Sol-44482,,,,,,,
Sol-44483,,,,,,,
Sol-44484,,,,,,,
Sol-44485,,,,,,,
Sol-44486,,,,,,,
Sol-44487,,,,,,,
Sol-44488,,,,,,,
Sol-44489,,,,,,,
Sol-44490,,,,,,,
Sol-44491,,,,,,,
Sol-44492,,,,,,,
Sol-44493,,,,,,,
Sol-44494,,,,,,,
Sol-44495,,,,,,,
Sol-44496,,,,,,,
Sol-44497,,,,,,,
Sol-44498,,,,,,,
Sol-44499,,,,,,,
Sol-44500,,,,,,,
Sol-44501,,,,,,,
Sol-44502,,,,,,,
Sol-44503,,,,,,,
Sol-44504,,,,,,,
Sol-44505,,,,,,,
Sol-44506,,,,,,,
Sol-44507,,,,,,,
Sol-44508,,,,,,,
Sol-44509,,,,,,,
Sol-44510,,,,,,,
Sol-44511,,,,,,,
Sol-44512,,,,,,,
Sol-44513,,,,,,,
Sol-44514,,,,,,,
Sol-44515,,,,,,,
Sol-44516,,,,,,,
Sol-44517,,,,,,,
Sol-44518,,,,,,,
Sol-44519,,,,,,,
Sol-44520,,,,,,,
Sol-44521,,,,,,,
Sol-44522,,,,,,,
Sol-44523,,,,,,,
Sol-44524,,,,,,,
Sol-44525,,,,,,,
Sol-44526,,,,,,,
Sol-44527,,,,,,,
Sol-44528,,,,,,,
Sol-44529,,,,,,,
Sol-44530,,,,,,,
Sol-44531,,,,,,,
Sol-44532,,,,,,,
Sol-44533,,,,,,,
Sol-44534,,,,,,,
Sol-44535,,,,,,,
Sol-44536,,,,,,,
Sol-44537,,,,,,,
Sol-44538,,,,,,,
Sol-44539,,,,,,,
Sol-44540,,,,,,,
Sol-44541,,,,,,,
Sol-44542,,,,,,,
Sol-44543,,,,,,,
Sol-44544,,,,,,,
Sol-44545,,,,,,,
Sol-44546,,,,,,,
Sol-44547,,,,,,,
Sol-44548,,,,,,,
Sol-44549,,,,,,,
Sol-44550,,,,,,,
Sol-44551,,,,,,,
Sol-44552,,,,,,,
Sol-44553,,,,,,,
Sol-44554,,,,,,,
Sol-44555,,,,,,,
Sol-44556,,,,,,,
Sol-44557,,,,,,,
Sol-44558,,,,,,,
Sol-44559,,,,,,,
Sol-44560,,,,,,,
Sol-44561,,,,,,,
Sol-44562,,,,,,,
Sol-44563,,,,,,,
Sol-44564,,,,,,,
Sol-44565,,,,,,,
Sol-44566,,,,,,,
Sol-44567,,,,,,,
Sol-44568,,,,,,,
Sol-44569,,,,,,,
Sol-44570,,,,,,,
Sol-44571,,,,,,,
Sol-44572,,,,,,,
Sol-44573,,,,,,,
Sol-44574,,,,,,,
Sol-44575,,,,,,,
Sol-44576,,,,,,,
Sol-44577,,,,,,,
Sol-44578,,,,,,,
Sol-44579,,,,,,,
Sol-44580,,,,,,,
Sol-44581,,,,,,,
Sol-44582,,,,,,,
Sol-44583,,,,,,,
Sol-44584,,,,,,,
Sol-44585,,,,,,,
Sol-44586,,,,,,,
Sol-44587,,,,,,,
Sol-44588,,,,,,,
Sol-44589,,,,,,,
Sol-44590,,,,,,,
Sol-44591,,,,,,,
Sol-44592,,,,,,,
Sol-44593,,,,,,,
Sol-44594,,,,,,,
Sol-44595,,,,,,,
Sol-44596,,,,,,,
Sol-44597,,,,,,,
Sol-44598,,,,,,,
Sol-44599,,,,,,,
Sol-44600,,,,,,,
Sol-44601,,,,,,,
Sol-44602,,,,,,,
Sol-44603,,,,,,,
Sol-44604,,,,,,,
Sol-44605,,,,,,,
Sol-44606,,,,,,,
Sol-44607,,,,,,,
Sol-44608,,,,,,,
Sol-44609,,,,,,,
Sol-44610,,,,,,,
Sol-44611,,,,,,,
Sol-44612,,,,,,,
Sol-44613,,,,,,,
Sol-44614,,,,,,,
Sol-44615,,,,,,,
Sol-44616,,,,,,,
Sol-44617,,,,,,,
Sol-44618,,,,,,,
Sol-44619,,,,,,,
Sol-44620,,,,,,,
Sol-44621,,,,,,,
Sol-44622,,,,,,,
Sol-44623,,,,,,,
Sol-44624,,,,,,,
Sol-44625,,,,,,,
Sol-44626,,,,,,,
Sol-44627,,,,,,,
Sol-44628,,,,,,,
Sol-44629,,,,,,,
Sol-44630,,,,,,,
Sol-44631,,,,,,,
Sol-44632,,,,,,,
Sol-44633,,,,,,,
Sol-44634,,,,,,,
Sol-44635,,,,,,,
Sol-44636,,,,,,,
Sol-44637,,,,,,,
Sol-44638,,,,,,,
Sol-44639,,,,,,,
Sol-44640,,,,,,,
Sol-44641,,,,,,,
Sol-44642,,,,,,,
Sol-44643,,,,,,,
Sol-44644,,,,,,,
Sol-44645,,,,,,,
Sol-44646,,,,,,,
Sol-44647,,,,,,,
Sol-44648,,,,,,,
Sol-44649,,,,,,,
Sol-44650,,,,,,,
Sol-44651,,,,,,,
Sol-44652,,,,,,,
Sol-44653,,,,,,,
Sol-44654,,,,,,,
Sol-44655,,,,,,,
Sol-44656,,,,,,,
Sol-44657,,,,,,,
Sol-44658,,,,,,,
Sol-44659,,,,,,,
Sol-44660,,,,,,,
Sol-44661,,,,,,,
Sol-44662,,,,,,,
Sol-44663,,,,,,,
Sol-44664,,,,,,,
Sol-44665,,,,,,,
Sol-44666,,,,,,,
Sol-44667,,,,,,,
Sol-44668,,,,,,,
Sol-44669,,,,,,,
Sol-44670,,,,,,,
Sol-44671,,,,,,,
Sol-44672,,,,,,,
Sol-44673,,,,,,,
Sol-44674,,,,,,,
Sol-44675,,,,,,,
Sol-44676,,,,,,,
Sol-44677,,,,,,,
Sol-44678,,,,,,,
Sol-44679,,,,,,,
Sol-44680,,,,,,,
Sol-44681,,,,,,,
Sol-44682,,,,,,,
Sol-44683,,,,,,,
Sol-44684,,,,,,,
Sol-44685,,,,,,,
Sol-44686,,,,,,,
Sol-44687,,,,,,,
Sol-44688,,,,,,,
Sol-44689,,,,,,,
Sol-44690,,,,,,,
Sol-44691,,,,,,,
Sol-44692,,,,,,,
Sol-44693,,,,,,,
Sol-44694,,,,,,,
Sol-44695,,,,,,,
Sol-44696,,,,,,,
Sol-44697,,,,,,,
Sol-44698,,,,,,,
Sol-44699,,,,,,,
Sol-44700,,,,,,,
Sol-44701,,,,,,,
Sol-44702,,,,,,,
Sol-44703,,,,,,,
Sol-44704,,,,,,,
Sol-44705,,,,,,,
Sol-44706,,,,,,,
Sol-44707,,,,,,,
Sol-44708,,,,,,,
Sol-44709,,,,,,,
Sol-44710,,,,,,,
Sol-44711,,,,,,,
Sol-44712,,,,,,,
Sol-44713,,,,,,,
Sol-44714,,,,,,,
Sol-44715,,,,,,,
Sol-44716,,,,,,,
Sol-44717,,,,,,,
Sol-44718,,,,,,,
Sol-44719,,,,,,,
Sol-44720,,,,,,,
Sol-44721,,,,,,,
Sol-44722,,,,,,,
Sol-44723,,,,,,,
Sol-44724,,,,,,,
Sol-44725,,,,,,,
Sol-44726,,,,,,,
Sol-44727,,,,,,,
Sol-44728,,,,,,,
Sol-44729,,,,,,,
Sol-44730,,,,,,,
Sol-44731,,,,,,,
Sol-44732,,,,,,,
Sol-44733,,,,,,,
Sol-44734,,,,,,,
Sol-44735,,,,,,,
Sol-44736,,,,,,,
Sol-44737,,,,,,,
Sol-44738,,,,,,,
Sol-44739,,,,,,,
Sol-44740,,,,,,,
Sol-44741,,,,,,,
Sol-44742,,,,,,,
Sol-44743,,,,,,,
Sol-44744,,,,,,,
Sol-44745,,,,,,,
Sol-44746,,,,,,,
Sol-44747,,,,,,,
Sol-44748,,,,,,,
Sol-44749,,,,,,,
Sol-44750,,,,,,,
Sol-44751,,,,,,,
Sol-44752,,,,,,,
Sol-44753,,,,,,,
Sol-44754,,,,,,,
Sol-44755,,,,,,,
Sol-44756,,,,,,,
Sol-44757,,,,,,,
Sol-44758,,,,,,,
Sol-44759,,,,,,,
Sol-44760,,,,,,,
Sol-44761,,,,,,,
Sol-44762,,,,,,,
Sol-44763,,,,,,,
Sol-44764,,,,,,,
Sol-44765,,,,,,,
Sol-44766,,,,,,,
Sol-44767,,,,,,,
Sol-44768,,,,,,,
Sol-44769,,,,,,,
Sol-44770,,,,,,,
Sol-44771,,,,,,,
Sol-44772,,,,,,,
Sol-44773,,,,,,,
Sol-44774,,,,,,,
Sol-44775,,,,,,,
Sol-44776,,,,,,,
Sol-44777,,,,,,,
Sol-44778,,,,,,,
Sol-44779,,,,,,,
Sol-44780,,,,,,,
Sol-44781,,,,,,,
Sol-44782,,,,,,,
Sol-44783,,,,,,,
Sol-44784,,,,,,,
Sol-44785,,,,,,,
Sol-44786,,,,,,,
Sol-44787,,,,,,,
Sol-44788,,,,,,,
Sol-44789,,,,,,,
Sol-44790,,,,,,,
Sol-44791,,,,,,,
Sol-44792,,,,,,,
Sol-44793,,,,,,,
Sol-44794,,,,,,,
Sol-44795,,,,,,,
Sol-44796,,,,,,,
Sol-44797,,,,,,,
Sol-44798,,,,,,,
Sol-44799,,,,,,,
Sol-44800,,,,,,,
Sol-44801,,,,,,,
Sol-44802,,,,,,,
Sol-44803,,,,,,,
Sol-44804,,,,,,,
Sol-44805,,,,,,,
Sol-44806,,,,,,,
Sol-44807,,,,,,,
Sol-44808,,,,,,,
Sol-44809,,,,,,,
Sol-44810,,,,,,,
Sol-44811,,,,,,,
Sol-44812,,,,,,,
Sol-44813,,,,,,,
Sol-44814,,,,,,,
Sol-44815,,,,,,,
Sol-44816,,,,,,,
Sol-44817,,,,,,,
Sol-44818,,,,,,,
Sol-44819,,,,,,,
Sol-44820,,,,,,,
Sol-44821,,,,,,,
Sol-44822,,,,,,,
Sol-44823,,,,,,,
Sol-44824,,,,,,,
Sol-44825,,,,,,,
Sol-44826,,,,,,,
Sol-44827,,,,,,,
Sol-44828,,,,,,,
Sol-44829,,,,,,,
Sol-44830,,,,,,,
Sol-44831,,,,,,,
Sol-44832,,,,,,,
Sol-44833,,,,,,,
Sol-44834,,,,,,,
Sol-44835,,,,,,,
Sol-44836,,,,,,,
Sol-44837,,,,,,,
Sol-44838,,,,,,,
Sol-44839,,,,,,,
Sol-44840,,,,,,,
Sol-44841,,,,,,,
Sol-44842,,,,,,,
Sol-44843,,,,,,,
Sol-44844,,,,,,,
Sol-44845,,,,,,,
Sol-44846,,,,,,,
Sol-44847,,,,,,,
Sol-44848,,,,,,,
Sol-44849,,,,,,,
Sol-44850,,,,,,,
Sol-44851,,,,,,,
Sol-44852,,,,,,,
Sol-44853,,,,,,,
Sol-44854,,,,,,,
Sol-44855,,,,,,,
Sol-44856,,,,,,,
Sol-44857,,,,,,,
Sol-44858,,,,,,,
Sol-44859,,,,,,,
Sol-44860,,,,,,,
Sol-44861,,,,,,,
Sol-44862,,,,,,,
Sol-44863,,,,,,,
Sol-44864,,,,,,,
Sol-44865,,,,,,,
Sol-44866,,,,,,,
Sol-44867,,,,,,,
Sol-44868,,,,,,,
Sol-44869,,,,,,,
Sol-44870,,,,,,,
Sol-44871,,,,,,,
Sol-44872,,,,,,,
Sol-44873,,,,,,,
Sol-44874,,,,,,,
Sol-44875,,,,,,,
Sol-44876,,,,,,,
Sol-44877,,,,,,,
Sol-44878,,,,,,,
Sol-44879,,,,,,,
Sol-44880,,,,,,,
Sol-44881,,,,,,,
Sol-44882,,,,,,,
Sol-44883,,,,,,,
Sol-44884,,,,,,,
Sol-44885,,,,,,,
Sol-44886,,,,,,,
Sol-44887,,,,,,,
Sol-44888,,,,,,,
Sol-44889,,,,,,,
Sol-44890,,,,,,,
Sol-44891,,,,,,,
Sol-44892,,,,,,,
Sol-44893,,,,,,,
Sol-44894,,,,,,,
Sol-44895,,,,,,,
Sol-44896,,,,,,,
Sol-44897,,,,,,,
Sol-44898,,,,,,,
Sol-44899,,,,,,,
Sol-44900,,,,,,,
Sol-44901,,,,,,,
Sol-44902,,,,,,,
Sol-44903,,,,,,,
Sol-44904,,,,,,,
Sol-44905,,,,,,,
Sol-44906,,,,,,,
Sol-44907,,,,,,,
Sol-44908,,,,,,,
Sol-44909,,,,,,,
Sol-44910,,,,,,,
Sol-44911,,,,,,,
Sol-44912,,,,,,,
Sol-44913,,,,,,,
Sol-44914,,,,,,,
Sol-44915,,,,,,,
Sol-44916,,,,,,,
Sol-44917,,,,,,,
Sol-44918,,,,,,,
Sol-44919,,,,,,,
Sol-44920,,,,,,,
Sol-44921,,,,,,,
Sol-44922,,,,,,,
Sol-44923,,,,,,,
Sol-44924,,,,,,,
Sol-44925,,,,,,,
Sol-44926,,,,,,,
Sol-44927,,,,,,,
Sol-44928,,,,,,,
Sol-44929,,,,,,,
Sol-44930,,,,,,,
Sol-44931,,,,,,,
Sol-44932,,,,,,,
Sol-44933,,,,,,,
Sol-44934,,,,,,,
Sol-44935,,,,,,,
Sol-44936,,,,,,,
Sol-44937,,,,,,,
Sol-44938,,,,,,,
Sol-44939,,,,,,,
Sol-44940,,,,,,,
Sol-44941,,,,,,,
Sol-44942,,,,,,,
Sol-44943,,,,,,,
Sol-44944,,,,,,,
Sol-44945,,,,,,,
Sol-44946,,,,,,,
Sol-44947,,,,,,,
Sol-44948,,,,,,,
Sol-44949,,,,,,,
Sol-44950,,,,,,,
Sol-44951,,,,,,,
Sol-44952,,,,,,,
Sol-44953,,,,,,,
Sol-44954,,,,,,,
Sol-44955,,,,,,,
Sol-44956,,,,,,,
Sol-44957,,,,,,,
Sol-44958,,,,,,,
Sol-44959,,,,,,,
Sol-44960,,,,,,,
Sol-44961,,,,,,,
Sol-44962,,,,,,,
Sol-44963,,,,,,,
Sol-44964,,,,,,,
Sol-44965,,,,,,,
Sol-44966,,,,,,,
Sol-44967,,,,,,,
Sol-44968,,,,,,,
Sol-44969,,,,,,,
Sol-44970,,,,,,,
Sol-44971,,,,,,,
Sol-44972,,,,,,,
Sol-44973,,,,,,,
Sol-44974,,,,,,,
Sol-44975,,,,,,,
Sol-44976,,,,,,,
Sol-44977,,,,,,,
Sol-44978,,,,,,,
Sol-44979,,,,,,,
Sol-44980,,,,,,,
Sol-44981,,,,,,,
Sol-44982,,,,,,,
Sol-44983,,,,,,,
Sol-44984,,,,,,,
Sol-44985,,,,,,,
Sol-44986,,,,,,,
Sol-44987,,,,,,,
Sol-44988,,,,,,,
Sol-44989,,,,,,,
Sol-44990,,,,,,,
Sol-44991,,,,,,,
Sol-44992,,,,,,,
Sol-44993,,,,,,,
Sol-44994,,,,,,,
Sol-44995,,,,,,,
Sol-44996,,,,,,,
Sol-44997,,,,,,,
Sol-44998,,,,,,,
Sol-44999,,,,,,,
Sol-45000,,,,,,,
Sol-45001,,,,,,,
Sol-45002,,,,,,,
Sol-45003,,,,,,,
Sol-45004,,,,,,,
Sol-45005,,,,,,,
Sol-45006,,,,,,,
Sol-45007,,,,,,,
Sol-45008,,,,,,,
Sol-45009,,,,,,,
Sol-45010,,,,,,,
Sol-45011,,,,,,,
Sol-45012,,,,,,,
Sol-45013,,,,,,,
Sol-45014,,,,,,,
Sol-45015,,,,,,,
Sol-45016,,,,,,,
Sol-45017,,,,,,,
Sol-45018,,,,,,,
Sol-45019,,,,,,,
Sol-45020,,,,,,,
Sol-45021,,,,,,,
Sol-45022,,,,,,,
Sol-45023,,,,,,,
Sol-45024,,,,,,,
Sol-45025,,,,,,,
Sol-45026,,,,,,,
Sol-45027,,,,,,,
Sol-45028,,,,,,,
Sol-45029,,,,,,,
Sol-45030,,,,,,,
Sol-45031,,,,,,,
Sol-45032,,,,,,,
Sol-45033,,,,,,,
Sol-45034,,,,,,,
Sol-45035,,,,,,,
Sol-45036,,,,,,,
Sol-45037,,,,,,,
Sol-45038,,,,,,,
Sol-45039,,,,,,,
Sol-45040,,,,,,,
Sol-45041,,,,,,,
Sol-45042,,,,,,,
Sol-45043,,,,,,,
Sol-45044,,,,,,,
Sol-45045,,,,,,,
Sol-45046,,,,,,,
Sol-45047,,,,,,,
Sol-45048,,,,,,,
Sol-45049,,,,,,,
Sol-45050,,,,,,,
Sol-45051,,,,,,,
Sol-45052,,,,,,,
Sol-45053,,,,,,,
Sol-45054,,,,,,,
Sol-45055,,,,,,,
Sol-45056,,,,,,,
Sol-45057,,,,,,,
Sol-45058,,,,,,,
Sol-45059,,,,,,,
Sol-45060,,,,,,,
Sol-45061,,,,,,,
Sol-45062,,,,,,,
Sol-45063,,,,,,,
Sol-45064,,,,,,,
Sol-45065,,,,,,,
Sol-45066,,,,,,,
Sol-45067,,,,,,,
Sol-45068,,,,,,,
Sol-45069,,,,,,,
Sol-45070,,,,,,,
Sol-45071,,,,,,,
Sol-45072,,,,,,,
Sol-45073,,,,,,,
Sol-45074,,,,,,,
Sol-45075,,,,,,,
Sol-45076,,,,,,,
Sol-45077,,,,,,,
Sol-45078,,,,,,,
Sol-45079,,,,,,,
Sol-45080,,,,,,,
Sol-45081,,,,,,,
Sol-45082,,,,,,,
Sol-45083,,,,,,,
Sol-45084,,,,,,,
Sol-45085,,,,,,,
Sol-45086,,,,,,,
Sol-45087,,,,,,,
Sol-45088,,,,,,,
Sol-45089,,,,,,,
Sol-45090,,,,,,,
Sol-45091,,,,,,,
Sol-45092,,,,,,,
Sol-45093,,,,,,,
Sol-45094,,,,,,,
Sol-45095,,,,,,,
Sol-45096,,,,,,,
Sol-45097,,,,,,,
Sol-45098,,,,,,,
Sol-45099,,,,,,,
Sol-45100,,,,,,,
Sol-45101,,,,,,,
Sol-45102,,,,,,,
Sol-45103,,,,,,,
Sol-45104,,,,,,,
Sol-45105,,,,,,,
Sol-45106,,,,,,,
Sol-45107,,,,,,,
Sol-45108,,,,,,,
Sol-45109,,,,,,,
Sol-45110,,,,,,,
Sol-45111,,,,,,,
Sol-45112,,,,,,,
Sol-45113,,,,,,,
Sol-45114,,,,,,,
Sol-45115,,,,,,,
Sol-45116,,,,,,,
Sol-45117,,,,,,,
Sol-45118,,,,,,,
Sol-45119,,,,,,,
Sol-45120,,,,,,,
Sol-45121,,,,,,,
Sol-45122,,,,,,,
Sol-45123,,,,,,,
Sol-45124,,,,,,,
Sol-45125,,,,,,,
Sol-45126,,,,,,,
Sol-45127,,,,,,,
Sol-45128,,,,,,,
Sol-45129,,,,,,,
Sol-45130,,,,,,,
Sol-45131,,,,,,,
Sol-45132,,,,,,,
Sol-45133,,,,,,,
Sol-45134,,,,,,,
Sol-45135,,,,,,,
Sol-45136,,,,,,,
Sol-45137,,,,,,,
Sol-45138,,,,,,,
Sol-45139,,,,,,,
Sol-45140,,,,,,,
Sol-45141,,,,,,,
Sol-45142,,,,,,,
Sol-45143,,,,,,,
Sol-45144,,,,,,,
Sol-45145,,,,,,,
Sol-45146,,,,,,,
Sol-45147,,,,,,,
Sol-45148,,,,,,,
Sol-45149,,,,,,,
Sol-45150,,,,,,,
Sol-45151,,,,,,,
Sol-45152,,,,,,,
Sol-45153,,,,,,,
Sol-45154,,,,,,,
Sol-45155,,,,,,,
Sol-45156,,,,,,,
Sol-45157,,,,,,,
Sol-45158,,,,,,,
Sol-45159,,,,,,,
Sol-45160,,,,,,,
Sol-45161,,,,,,,
Sol-45162,,,,,,,
Sol-45163,,,,,,,
Sol-45164,,,,,,,
Sol-45165,,,,,,,
Sol-45166,,,,,,,
Sol-45167,,,,,,,
Sol-45168,,,,,,,
Sol-45169,,,,,,,
Sol-45170,,,,,,,
Sol-45171,,,,,,,
Sol-45172,,,,,,,
Sol-45173,,,,,,,
Sol-45174,,,,,,,
Sol-45175,,,,,,,
Sol-45176,,,,,,,
Sol-45177,,,,,,,
Sol-45178,,,,,,,
Sol-45179,,,,,,,
Sol-45180,,,,,,,
Sol-45181,,,,,,,
Sol-45182,,,,,,,
Sol-45183,,,,,,,
Sol-45184,,,,,,,
Sol-45185,,,,,,,
Sol-45186,,,,,,,
Sol-45187,,,,,,,
Sol-45188,,,,,,,
Sol-45189,,,,,,,
Sol-45190,,,,,,,
Sol-45191,,,,,,,
Sol-45192,,,,,,,
Sol-45193,,,,,,,
Sol-45194,,,,,,,
Sol-45195,,,,,,,
Sol-45196,,,,,,,
Sol-45197,,,,,,,
Sol-45198,,,,,,,
Sol-45199,,,,,,,
Sol-45200,,,,,,,
Sol-45201,,,,,,,
Sol-45202,,,,,,,
Sol-45203,,,,,,,
Sol-45204,,,,,,,
Sol-45205,,,,,,,
Sol-45206,,,,,,,
Sol-45207,,,,,,,
Sol-45208,,,,,,,
Sol-45209,,,,,,,
Sol-45210,,,,,,,
Sol-45211,,,,,,,
Sol-45212,,,,,,,
Sol-45213,,,,,,,
Sol-45214,,,,,,,
Sol-45215,,,,,,,
Sol-45216,,,,,,,
Sol-45217,,,,,,,
Sol-45218,,,,,,,
Sol-45219,,,,,,,
Sol-45220,,,,,,,
Sol-45221,,,,,,,
Sol-45222,,,,,,,
Sol-45223,,,,,,,
Sol-45224,,,,,,,
Sol-45225,,,,,,,
Sol-45226,,,,,,,
Sol-45227,,,,,,,
Sol-45228,,,,,,,
Sol-45229,,,,,,,
Sol-45230,,,,,,,
Sol-45231,,,,,,,
Sol-45232,,,,,,,
Sol-45233,,,,,,,
Sol-45234,,,,,,,
Sol-45235,,,,,,,
Sol-45236,,,,,,,
Sol-45237,,,,,,,
Sol-45238,,,,,,,
Sol-45239,,,,,,,
Sol-45240,,,,,,,
Sol-45241,,,,,,,
Sol-45242,,,,,,,
Sol-45243,,,,,,,
Sol-45244,,,,,,,
Sol-45245,,,,,,,
Sol-45246,,,,,,,
Sol-45247,,,,,,,
Sol-45248,,,,,,,
Sol-45249,,,,,,,
Sol-45250,,,,,,,
Sol-45251,,,,,,,
Sol-45252,,,,,,,
Sol-45253,,,,,,,
Sol-45254,,,,,,,
Sol-45255,,,,,,,
Sol-45256,,,,,,,
Sol-45257,,,,,,,
Sol-45258,,,,,,,
Sol-45259,,,,,,,
Sol-45260,,,,,,,
Sol-45261,,,,,,,
Sol-45262,,,,,,,
Sol-45263,,,,,,,
Sol-45264,,,,,,,
Sol-45265,,,,,,,
Sol-45266,,,,,,,
Sol-45267,,,,,,,
Sol-45268,,,,,,,
Sol-45269,,,,,,,
Sol-45270,,,,,,,
Sol-45271,,,,,,,
Sol-45272,,,,,,,
Sol-45273,,,,,,,
Sol-45274,,,,,,,
Sol-45275,,,,,,,
Sol-45276,,,,,,,
Sol-45277,,,,,,,
Sol-45278,,,,,,,
Sol-45279,,,,,,,
Sol-45280,,,,,,,
Sol-45281,,,,,,,
Sol-45282,,,,,,,
Sol-45283,,,,,,,
Sol-45284,,,,,,,
Sol-45285,,,,,,,
Sol-45286,,,,,,,
Sol-45287,,,,,,,
Sol-45288,,,,,,,
Sol-45289,,,,,,,
Sol-45290,,,,,,,
Sol-45291,,,,,,,
Sol-45292,,,,,,,
Sol-45293,,,,,,,
Sol-45294,,,,,,,
Sol-45295,,,,,,,
Sol-45296,,,,,,,
Sol-45297,,,,,,,
Sol-45298,,,,,,,
Sol-45299,,,,,,,
Sol-45300,,,,,,,
Sol-45301,,,,,,,
Sol-45302,,,,,,,
Sol-45303,,,,,,,
Sol-45304,,,,,,,
Sol-45305,,,,,,,
Sol-45306,,,,,,,
Sol-45307,,,,,,,
Sol-45308,,,,,,,
Sol-45309,,,,,,,
Sol-45310,,,,,,,
Sol-45311,,,,,,,
Sol-45312,,,,,,,
Sol-45313,,,,,,,
Sol-45314,,,,,,,
Sol-45315,,,,,,,
Sol-45316,,,,,,,
Sol-45317,,,,,,,
Sol-45318,,,,,,,
Sol-45319,,,,,,,
Sol-45320,,,,,,,
Sol-45321,,,,,,,
Sol-45322,,,,,,,
Sol-45323,,,,,,,
Sol-45324,,,,,,,
Sol-45325,,,,,,,
Sol-45326,,,,,,,
Sol-45327,,,,,,,
Sol-45328,,,,,,,
Sol-45329,,,,,,,
Sol-45330,,,,,,,
Sol-45331,,,,,,,
Sol-45332,,,,,,,
Sol-45333,,,,,,,
Sol-45334,,,,,,,
Sol-45335,,,,,,,
Sol-45336,,,,,,,
Sol-45337,,,,,,,
Sol-45338,,,,,,,
Sol-45339,,,,,,,
Sol-45340,,,,,,,
Sol-45341,,,,,,,
Sol-45342,,,,,,,
Sol-45343,,,,,,,
Sol-45344,,,,,,,
Sol-45345,,,,,,,
Sol-45346,,,,,,,
Sol-45347,,,,,,,
Sol-45348,,,,,,,
Sol-45349,,,,,,,
Sol-45350,,,,,,,
Sol-45351,,,,,,,
Sol-45352,,,,,,,
Sol-45353,,,,,,,
Sol-45354,,,,,,,
Sol-45355,,,,,,,
Sol-45356,,,,,,,
Sol-45357,,,,,,,
Sol-45358,,,,,,,
Sol-45359,,,,,,,
Sol-45360,,,,,,,
Sol-45361,,,,,,,
Sol-45362,,,,,,,
Sol-45363,,,,,,,
Sol-45364,,,,,,,
Sol-45365,,,,,,,
Sol-45366,,,,,,,
Sol-45367,,,,,,,
Sol-45368,,,,,,,
Sol-45369,,,,,,,
Sol-45370,,,,,,,
Sol-45371,,,,,,,
Sol-45372,,,,,,,
Sol-45373,,,,,,,
Sol-45374,,,,,,,
Sol-45375,,,,,,,
Sol-45376,,,,,,,
Sol-45377,,,,,,,
Sol-45378,,,,,,,
Sol-45379,,,,,,,
Sol-45380,,,,,,,
Sol-45381,,,,,,,
Sol-45382,,,,,,,
Sol-45383,,,,,,,
Sol-45384,,,,,,,
Sol-45385,,,,,,,
Sol-45386,,,,,,,
Sol-45387,,,,,,,
Sol-45388,,,,,,,
Sol-45389,,,,,,,
Sol-45390,,,,,,,
Sol-45391,,,,,,,
Sol-45392,,,,,,,
Sol-45393,,,,,,,
Sol-45394,,,,,,,
Sol-45395,,,,,,,
Sol-45396,,,,,,,
Sol-45397,,,,,,,
Sol-45398,,,,,,,
Sol-45399,,,,,,,
Sol-45400,,,,,,,
Sol-45401,,,,,,,
Sol-45402,,,,,,,
Sol-45403,,,,,,,
Sol-45404,,,,,,,
Sol-45405,,,,,,,
Sol-45406,,,,,,,
Sol-45407,,,,,,,
Sol-45408,,,,,,,
Sol-45409,,,,,,,
Sol-45410,,,,,,,
Sol-45411,,,,,,,
Sol-45412,,,,,,,
Sol-45413,,,,,,,
Sol-45414,,,,,,,
Sol-45415,,,,,,,
Sol-45416,,,,,,,
Sol-45417,,,,,,,
Sol-45418,,,,,,,
Sol-45419,,,,,,,
Sol-45420,,,,,,,
Sol-45421,,,,,,,
Sol-45422,,,,,,,
Sol-45423,,,,,,,
Sol-45424,,,,,,,
Sol-45425,,,,,,,
Sol-45426,,,,,,,
Sol-45427,,,,,,,
Sol-45428,,,,,,,
Sol-45429,,,,,,,
Sol-45430,,,,,,,
Sol-45431,,,,,,,
Sol-45432,,,,,,,
Sol-45433,,,,,,,
Sol-45434,,,,,,,
Sol-45435,,,,,,,
Sol-45436,,,,,,,
Sol-45437,,,,,,,
Sol-45438,,,,,,,
Sol-45439,,,,,,,
Sol-45440,,,,,,,
Sol-45441,,,,,,,
Sol-45442,,,,,,,
Sol-45443,,,,,,,
Sol-45444,,,,,,,
Sol-45445,,,,,,,
Sol-45446,,,,,,,
Sol-45447,,,,,,,
Sol-45448,,,,,,,
Sol-45449,,,,,,,
Sol-45450,,,,,,,
Sol-45451,,,,,,,
Sol-45452,,,,,,,
Sol-45453,,,,,,,
Sol-45454,,,,,,,
Sol-45455,,,,,,,
Sol-45456,,,,,,,
Sol-45457,,,,,,,
Sol-45458,,,,,,,
Sol-45459,,,,,,,
Sol-45460,,,,,,,
Sol-45461,,,,,,,
Sol-45462,,,,,,,
Sol-45463,,,,,,,
Sol-45464,,,,,,,
Sol-45465,,,,,,,
Sol-45466,,,,,,,
Sol-45467,,,,,,,
Sol-45468,,,,,,,
Sol-45469,,,,,,,
Sol-45470,,,,,,,
Sol-45471,,,,,,,
Sol-45472,,,,,,,
Sol-45473,,,,,,,
Sol-45474,,,,,,,
Sol-45475,,,,,,,
Sol-45476,,,,,,,
Sol-45477,,,,,,,
Sol-45478,,,,,,,
Sol-45479,,,,,,,
Sol-45480,,,,,,,
Sol-45481,,,,,,,
Sol-45482,,,,,,,
Sol-45483,,,,,,,
Sol-45484,,,,,,,
Sol-45485,,,,,,,
Sol-45486,,,,,,,
Sol-45487,,,,,,,
Sol-45488,,,,,,,
Sol-45489,,,,,,,
Sol-45490,,,,,,,
Sol-45491,,,,,,,
Sol-45492,,,,,,,
Sol-45493,,,,,,,
Sol-45494,,,,,,,
Sol-45495,,,,,,,
Sol-45496,,,,,,,
Sol-45497,,,,,,,
Sol-45498,,,,,,,
Sol-45499,,,,,,,
Sol-45500,,,,,,,
Sol-45501,,,,,,,
Sol-45502,,,,,,,
Sol-45503,,,,,,,
Sol-45504,,,,,,,
Sol-45505,,,,,,,
Sol-45506,,,,,,,
Sol-45507,,,,,,,
Sol-45508,,,,,,,
Sol-45509,,,,,,,
Sol-45510,,,,,,,
Sol-45511,,,,,,,
Sol-45512,,,,,,,
Sol-45513,,,,,,,
Sol-45514,,,,,,,
Sol-45515,,,,,,,
Sol-45516,,,,,,,
Sol-45517,,,,,,,
Sol-45518,,,,,,,
Sol-45519,,,,,,,
Sol-45520,,,,,,,
Sol-45521,,,,,,,
Sol-45522,,,,,,,
Sol-45523,,,,,,,
Sol-45524,,,,,,,
Sol-45525,,,,,,,
Sol-45526,,,,,,,
Sol-45527,,,,,,,
Sol-45528,,,,,,,
Sol-45529,,,,,,,
Sol-45530,,,,,,,
Sol-45531,,,,,,,
Sol-45532,,,,,,,
Sol-45533,,,,,,,
Sol-45534,,,,,,,
Sol-45535,,,,,,,
Sol-45536,,,,,,,
Sol-45537,,,,,,,
Sol-45538,,,,,,,
Sol-45539,,,,,,,
Sol-45540,,,,,,,
Sol-45541,,,,,,,
Sol-45542,,,,,,,
Sol-45543,,,,,,,
Sol-45544,,,,,,,
Sol-45545,,,,,,,
Sol-45546,,,,,,,
Sol-45547,,,,,,,
Sol-45548,,,,,,,
Sol-45549,,,,,,,
Sol-45550,,,,,,,
Sol-45551,,,,,,,
Sol-45552,,,,,,,
Sol-45553,,,,,,,
Sol-45554,,,,,,,
Sol-45555,,,,,,,
Sol-45556,,,,,,,
Sol-45557,,,,,,,
Sol-45558,,,,,,,
Sol-45559,,,,,,,
Sol-45560,,,,,,,
Sol-45561,,,,,,,
Sol-45562,,,,,,,
Sol-45563,,,,,,,
Sol-45564,,,,,,,
Sol-45565,,,,,,,
Sol-45566,,,,,,,
Sol-45567,,,,,,,
Sol-45568,,,,,,,
Sol-45569,,,,,,,
Sol-45570,,,,,,,
Sol-45571,,,,,,,
Sol-45572,,,,,,,
Sol-45573,,,,,,,
Sol-45574,,,,,,,
Sol-45575,,,,,,,
Sol-45576,,,,,,,
Sol-45577,,,,,,,
Sol-45578,,,,,,,
Sol-45579,,,,,,,
Sol-45580,,,,,,,
Sol-45581,,,,,,,
Sol-45582,,,,,,,
Sol-45583,,,,,,,
Sol-45584,,,,,,,
Sol-45585,,,,,,,
Sol-45586,,,,,,,
Sol-45587,,,,,,,
Sol-45588,,,,,,,
Sol-45589,,,,,,,
Sol-45590,,,,,,,
Sol-45591,,,,,,,
Sol-45592,,,,,,,
Sol-45593,,,,,,,
Sol-45594,,,,,,,
Sol-45595,,,,,,,
Sol-45596,,,,,,,
Sol-45597,,,,,,,
Sol-45598,,,,,,,
Sol-45599,,,,,,,
Sol-45600,,,,,,,
Sol-45601,,,,,,,
Sol-45602,,,,,,,
Sol-45603,,,,,,,
Sol-45604,,,,,,,
Sol-45605,,,,,,,
Sol-45606,,,,,,,
Sol-45607,,,,,,,
Sol-45608,,,,,,,
Sol-45609,,,,,,,
Sol-45610,,,,,,,
Sol-45611,,,,,,,
Sol-45612,,,,,,,
Sol-45613,,,,,,,
Sol-45614,,,,,,,
Sol-45615,,,,,,,
Sol-45616,,,,,,,
Sol-45617,,,,,,,
Sol-45618,,,,,,,
Sol-45619,,,,,,,
Sol-45620,,,,,,,
Sol-45621,,,,,,,
Sol-45622,,,,,,,
Sol-45623,,,,,,,
Sol-45624,,,,,,,
Sol-45625,,,,,,,
Sol-45626,,,,,,,
Sol-45627,,,,,,,
Sol-45628,,,,,,,
Sol-45629,,,,,,,
Sol-45630,,,,,,,
Sol-45631,,,,,,,
Sol-45632,,,,,,,
Sol-45633,,,,,,,
Sol-45634,,,,,,,
Sol-45635,,,,,,,
Sol-45636,,,,,,,
Sol-45637,,,,,,,
Sol-45638,,,,,,,
Sol-45639,,,,,,,
Sol-45640,,,,,,,
Sol-45641,,,,,,,
Sol-45642,,,,,,,
Sol-45643,,,,,,,
Sol-45644,,,,,,,
Sol-45645,,,,,,,
Sol-45646,,,,,,,
Sol-45647,,,,,,,
Sol-45648,,,,,,,
Sol-45649,,,,,,,
Sol-45650,,,,,,,
Sol-45651,,,,,,,
Sol-45652,,,,,,,
Sol-45653,,,,,,,
Sol-45654,,,,,,,
Sol-45655,,,,,,,
Sol-45656,,,,,,,
Sol-45657,,,,,,,
Sol-45658,,,,,,,
Sol-45659,,,,,,,
Sol-45660,,,,,,,
Sol-45661,,,,,,,
Sol-45662,,,,,,,
Sol-45663,,,,,,,
Sol-45664,,,,,,,
Sol-45665,,,,,,,
Sol-45666,,,,,,,
Sol-45667,,,,,,,
Sol-45668,,,,,,,
Sol-45669,,,,,,,
Sol-45670,,,,,,,
Sol-45671,,,,,,,
Sol-45672,,,,,,,
Sol-45673,,,,,,,
Sol-45674,,,,,,,
Sol-45675,,,,,,,
Sol-45676,,,,,,,
Sol-45677,,,,,,,
Sol-45678,,,,,,,
Sol-45679,,,,,,,
Sol-45680,,,,,,,
Sol-45681,,,,,,,
Sol-45682,,,,,,,
Sol-45683,,,,,,,
Sol-45684,,,,,,,
Sol-45685,,,,,,,
Sol-45686,,,,,,,
Sol-45687,,,,,,,
Sol-45688,,,,,,,
Sol-45689,,,,,,,
Sol-45690,,,,,,,
Sol-45691,,,,,,,
Sol-45692,,,,,,,
Sol-45693,,,,,,,
Sol-45694,,,,,,,
Sol-45695,,,,,,,
Sol-45696,,,,,,,
Sol-45697,,,,,,,
Sol-45698,,,,,,,
Sol-45699,,,,,,,
Sol-45700,,,,,,,
Sol-45701,,,,,,,
Sol-45702,,,,,,,
Sol-45703,,,,,,,
Sol-45704,,,,,,,
Sol-45705,,,,,,,
Sol-45706,,,,,,,
Sol-45707,,,,,,,
Sol-45708,,,,,,,
Sol-45709,,,,,,,
Sol-45710,,,,,,,
Sol-45711,,,,,,,
Sol-45712,,,,,,,
Sol-45713,,,,,,,
Sol-45714,,,,,,,
Sol-45715,,,,,,,
Sol-45716,,,,,,,
Sol-45717,,,,,,,
Sol-45718,,,,,,,
Sol-45719,,,,,,,
Sol-45720,,,,,,,
Sol-45721,,,,,,,
Sol-45722,,,,,,,
Sol-45723,,,,,,,
Sol-45724,,,,,,,
Sol-45725,,,,,,,
Sol-45726,,,,,,,
Sol-45727,,,,,,,
Sol-45728,,,,,,,
Sol-45729,,,,,,,
Sol-45730,,,,,,,
Sol-45731,,,,,,,
Sol-45732,,,,,,,
Sol-45733,,,,,,,
Sol-45734,,,,,,,
Sol-45735,,,,,,,
Sol-45736,,,,,,,
Sol-45737,,,,,,,
Sol-45738,,,,,,,
Sol-45739,,,,,,,
Sol-45740,,,,,,,
Sol-45741,,,,,,,
Sol-45742,,,,,,,
Sol-45743,,,,,,,
Sol-45744,,,,,,,
Sol-45745,,,,,,,
Sol-45746,,,,,,,
Sol-45747,,,,,,,
Sol-45748,,,,,,,
Sol-45749,,,,,,,
Sol-45750,,,,,,,
Sol-45751,,,,,,,
Sol-45752,,,,,,,
Sol-45753,,,,,,,
Sol-45754,,,,,,,
Sol-45755,,,,,,,
Sol-45756,,,,,,,
Sol-45757,,,,,,,
Sol-45758,,,,,,,
Sol-45759,,,,,,,
Sol-45760,,,,,,,
Sol-45761,,,,,,,
Sol-45762,,,,,,,
Sol-45763,,,,,,,
Sol-45764,,,,,,,
Sol-45765,,,,,,,
Sol-45766,,,,,,,
Sol-45767,,,,,,,
Sol-45768,,,,,,,
Sol-45769,,,,,,,
Sol-45770,,,,,,,
Sol-45771,,,,,,,
Sol-45772,,,,,,,
Sol-45773,,,,,,,
Sol-45774,,,,,,,
Sol-45775,,,,,,,
Sol-45776,,,,,,,
Sol-45777,,,,,,,
Sol-45778,,,,,,,
Sol-45779,,,,,,,
Sol-45780,,,,,,,
Sol-45781,,,,,,,
Sol-45782,,,,,,,
Sol-45783,,,,,,,
Sol-45784,,,,,,,
Sol-45785,,,,,,,
Sol-45786,,,,,,,
Sol-45787,,,,,,,
Sol-45788,,,,,,,
Sol-45789,,,,,,,
Sol-45790,,,,,,,
Sol-45791,,,,,,,
Sol-45792,,,,,,,
Sol-45793,,,,,,,
Sol-45794,,,,,,,
Sol-45795,,,,,,,
Sol-45796,,,,,,,
Sol-45797,,,,,,,
Sol-45798,,,,,,,
Sol-45799,,,,,,,
Sol-45800,,,,,,,
Sol-45801,,,,,,,
Sol-45802,,,,,,,
Sol-45803,,,,,,,
Sol-45804,,,,,,,
Sol-45805,,,,,,,
Sol-45806,,,,,,,
Sol-45807,,,,,,,
Sol-45808,,,,,,,
Sol-45809,,,,,,,
Sol-45810,,,,,,,
Sol-45811,,,,,,,
Sol-45812,,,,,,,
Sol-45813,,,,,,,
Sol-45814,,,,,,,
Sol-45815,,,,,,,
Sol-45816,,,,,,,
Sol-45817,,,,,,,
Sol-45818,,,,,,,
Sol-45819,,,,,,,
Sol-45820,,,,,,,
Sol-45821,,,,,,,
Sol-45822,,,,,,,
Sol-45823,,,,,,,
Sol-45824,,,,,,,
Sol-45825,,,,,,,
Sol-45826,,,,,,,
Sol-45827,,,,,,,
Sol-45828,,,,,,,
Sol-45829,,,,,,,
Sol-45830,,,,,,,
Sol-45831,,,,,,,
Sol-45832,,,,,,,
Sol-45833,,,,,,,
Sol-45834,,,,,,,
Sol-45835,,,,,,,
Sol-45836,,,,,,,
Sol-45837,,,,,,,
Sol-45838,,,,,,,
Sol-45839,,,,,,,
Sol-45840,,,,,,,
Sol-45841,,,,,,,
Sol-45842,,,,,,,
Sol-45843,,,,,,,
Sol-45844,,,,,,,
Sol-45845,,,,,,,
Sol-45846,,,,,,,
Sol-45847,,,,,,,
Sol-45848,,,,,,,
Sol-45849,,,,,,,
Sol-45850,,,,,,,
Sol-45851,,,,,,,
Sol-45852,,,,,,,
Sol-45853,,,,,,,
Sol-45854,,,,,,,
Sol-45855,,,,,,,
Sol-45856,,,,,,,
Sol-45857,,,,,,,
Sol-45858,,,,,,,
Sol-45859,,,,,,,
Sol-45860,,,,,,,
Sol-45861,,,,,,,
Sol-45862,,,,,,,
Sol-45863,,,,,,,
Sol-45864,,,,,,,
Sol-45865,,,,,,,
Sol-45866,,,,,,,
Sol-45867,,,,,,,
Sol-45868,,,,,,,
Sol-45869,,,,,,,
Sol-45870,,,,,,,
Sol-45871,,,,,,,
Sol-45872,,,,,,,
Sol-45873,,,,,,,
Sol-45874,,,,,,,
Sol-45875,,,,,,,
Sol-45876,,,,,,,
Sol-45877,,,,,,,
Sol-45878,,,,,,,
Sol-45879,,,,,,,
Sol-45880,,,,,,,
Sol-45881,,,,,,,
Sol-45882,,,,,,,
Sol-45883,,,,,,,
Sol-45884,,,,,,,
Sol-45885,,,,,,,
Sol-45886,,,,,,,
Sol-45887,,,,,,,
Sol-45888,,,,,,,
Sol-45889,,,,,,,
Sol-45890,,,,,,,
Sol-45891,,,,,,,
Sol-45892,,,,,,,
Sol-45893,,,,,,,
Sol-45894,,,,,,,
Sol-45895,,,,,,,
Sol-45896,,,,,,,
Sol-45897,,,,,,,
Sol-45898,,,,,,,
Sol-45899,,,,,,,
Sol-45900,,,,,,,
Sol-45901,,,,,,,
Sol-45902,,,,,,,
Sol-45903,,,,,,,
Sol-45904,,,,,,,
Sol-45905,,,,,,,
Sol-45906,,,,,,,
Sol-45907,,,,,,,
Sol-45908,,,,,,,
Sol-45909,,,,,,,
Sol-45910,,,,,,,
Sol-45911,,,,,,,
Sol-45912,,,,,,,
Sol-45913,,,,,,,
Sol-45914,,,,,,,
Sol-45915,,,,,,,
Sol-45916,,,,,,,
Sol-45917,,,,,,,
Sol-45918,,,,,,,
Sol-45919,,,,,,,
Sol-45920,,,,,,,
Sol-45921,,,,,,,
Sol-45922,,,,,,,
Sol-45923,,,,,,,
Sol-45924,,,,,,,
Sol-45925,,,,,,,
Sol-45926,,,,,,,
Sol-45927,,,,,,,
Sol-45928,,,,,,,
Sol-45929,,,,,,,
Sol-45930,,,,,,,
Sol-45931,,,,,,,
Sol-45932,,,,,,,
Sol-45933,,,,,,,
Sol-45934,,,,,,,
Sol-45935,,,,,,,
Sol-45936,,,,,,,
Sol-45937,,,,,,,
Sol-45938,,,,,,,
Sol-45939,,,,,,,
Sol-45940,,,,,,,
Sol-45941,,,,,,,
Sol-45942,,,,,,,
Sol-45943,,,,,,,
Sol-45944,,,,,,,
Sol-45945,,,,,,,
Sol-45946,,,,,,,
Sol-45947,,,,,,,
Sol-45948,,,,,,,
Sol-45949,,,,,,,
Sol-45950,,,,,,,
Sol-45951,,,,,,,
Sol-45952,,,,,,,
Sol-45953,,,,,,,
Sol-45954,,,,,,,
Sol-45955,,,,,,,
Sol-45956,,,,,,,
Sol-45957,,,,,,,
Sol-45958,,,,,,,
Sol-45959,,,,,,,
Sol-45960,,,,,,,
Sol-45961,,,,,,,
Sol-45962,,,,,,,
Sol-45963,,,,,,,
Sol-45964,,,,,,,
Sol-45965,,,,,,,
Sol-45966,,,,,,,
Sol-45967,,,,,,,
Sol-45968,,,,,,,
Sol-45969,,,,,,,
Sol-45970,,,,,,,
Sol-45971,,,,,,,
Sol-45972,,,,,,,
Sol-45973,,,,,,,
Sol-45974,,,,,,,
Sol-45975,,,,,,,
Sol-45976,,,,,,,
Sol-45977,,,,,,,
Sol-45978,,,,,,,
Sol-45979,,,,,,,
Sol-45980,,,,,,,
Sol-45981,,,,,,,
Sol-45982,,,,,,,
Sol-45983,,,,,,,
Sol-45984,,,,,,,
Sol-45985,,,,,,,
Sol-45986,,,,,,,
Sol-45987,,,,,,,
Sol-45988,,,,,,,
Sol-45989,,,,,,,
Sol-45990,,,,,,,
Sol-45991,,,,,,,
Sol-45992,,,,,,,
Sol-45993,,,,,,,
Sol-45994,,,,,,,
Sol-45995,,,,,,,
Sol-45996,,,,,,,
Sol-45997,,,,,,,
Sol-45998,,,,,,,
Sol-45999,,,,,,,
Sol-46000,,,,,,,
Sol-46001,,,,,,,
Sol-46002,,,,,,,
Sol-46003,,,,,,,
Sol-46004,,,,,,,
Sol-46005,,,,,,,
Sol-46006,,,,,,,
Sol-46007,,,,,,,
Sol-46008,,,,,,,
Sol-46009,,,,,,,
Sol-46010,,,,,,,
Sol-46011,,,,,,,
Sol-46012,,,,,,,
Sol-46013,,,,,,,
Sol-46014,,,,,,,
Sol-46015,,,,,,,
Sol-46016,,,,,,,
Sol-46017,,,,,,,
Sol-46018,,,,,,,
Sol-46019,,,,,,,
Sol-46020,,,,,,,
Sol-46021,,,,,,,
Sol-46022,,,,,,,
Sol-46023,,,,,,,
Sol-46024,,,,,,,
Sol-46025,,,,,,,
Sol-46026,,,,,,,
Sol-46027,,,,,,,
Sol-46028,,,,,,,
Sol-46029,,,,,,,
Sol-46030,,,,,,,
Sol-46031,,,,,,,
Sol-46032,,,,,,,
Sol-46033,,,,,,,
Sol-46034,,,,,,,
Sol-46035,,,,,,,
Sol-46036,,,,,,,
Sol-46037,,,,,,,
Sol-46038,,,,,,,
Sol-46039,,,,,,,
Sol-46040,,,,,,,
Sol-46041,,,,,,,
Sol-46042,,,,,,,
Sol-46043,,,,,,,
Sol-46044,,,,,,,
Sol-46045,,,,,,,
Sol-46046,,,,,,,
Sol-46047,,,,,,,
Sol-46048,,,,,,,
Sol-46049,,,,,,,
Sol-46050,,,,,,,
Sol-46051,,,,,,,
Sol-46052,,,,,,,
Sol-46053,,,,,,,
Sol-46054,,,,,,,
Sol-46055,,,,,,,
Sol-46056,,,,,,,
Sol-46057,,,,,,,
Sol-46058,,,,,,,
Sol-46059,,,,,,,
Sol-46060,,,,,,,
Sol-46061,,,,,,,
Sol-46062,,,,,,,
Sol-46063,,,,,,,
Sol-46064,,,,,,,
Sol-46065,,,,,,,
Sol-46066,,,,,,,
Sol-46067,,,,,,,
Sol-46068,,,,,,,
Sol-46069,,,,,,,
Sol-46070,,,,,,,
Sol-46071,,,,,,,
Sol-46072,,,,,,,
Sol-46073,,,,,,,
Sol-46074,,,,,,,
Sol-46075,,,,,,,
Sol-46076,,,,,,,
Sol-46077,,,,,,,
Sol-46078,,,,,,,
Sol-46079,,,,,,,
Sol-46080,,,,,,,
Sol-46081,,,,,,,
Sol-46082,,,,,,,
Sol-46083,,,,,,,
Sol-46084,,,,,,,
Sol-46085,,,,,,,
Sol-46086,,,,,,,
Sol-46087,,,,,,,
Sol-46088,,,,,,,
Sol-46089,,,,,,,
Sol-46090,,,,,,,
Sol-46091,,,,,,,
Sol-46092,,,,,,,
Sol-46093,,,,,,,
Sol-46094,,,,,,,
Sol-46095,,,,,,,
Sol-46096,,,,,,,
Sol-46097,,,,,,,
Sol-46098,,,,,,,
Sol-46099,,,,,,,
Sol-46100,,,,,,,
Sol-46101,,,,,,,
Sol-46102,,,,,,,
Sol-46103,,,,,,,
Sol-46104,,,,,,,
Sol-46105,,,,,,,
Sol-46106,,,,,,,
Sol-46107,,,,,,,
Sol-46108,,,,,,,
Sol-46109,,,,,,,
Sol-46110,,,,,,,
Sol-46111,,,,,,,
Sol-46112,,,,,,,
Sol-46113,,,,,,,
Sol-46114,,,,,,,
Sol-46115,,,,,,,
Sol-46116,,,,,,,
Sol-46117,,,,,,,
Sol-46118,,,,,,,
Sol-46119,,,,,,,
Sol-46120,,,,,,,
Sol-46121,,,,,,,
Sol-46122,,,,,,,
Sol-46123,,,,,,,
Sol-46124,,,,,,,
Sol-46125,,,,,,,
Sol-46126,,,,,,,
Sol-46127,,,,,,,
Sol-46128,,,,,,,
Sol-46129,,,,,,,
Sol-46130,,,,,,,
Sol-46131,,,,,,,
Sol-46132,,,,,,,
Sol-46133,,,,,,,
Sol-46134,,,,,,,
Sol-46135,,,,,,,
Sol-46136,,,,,,,
Sol-46137,,,,,,,
Sol-46138,,,,,,,
Sol-46139,,,,,,,
Sol-46140,,,,,,,
Sol-46141,,,,,,,
Sol-46142,,,,,,,
Sol-46143,,,,,,,
Sol-46144,,,,,,,
Sol-46145,,,,,,,
Sol-46146,,,,,,,
Sol-46147,,,,,,,
Sol-46148,,,,,,,
Sol-46149,,,,,,,
Sol-46150,,,,,,,
Sol-46151,,,,,,,
Sol-46152,,,,,,,
Sol-46153,,,,,,,
Sol-46154,,,,,,,
Sol-46155,,,,,,,
Sol-46156,,,,,,,
Sol-46157,,,,,,,
Sol-46158,,,,,,,
Sol-46159,,,,,,,
Sol-46160,,,,,,,
Sol-46161,,,,,,,
Sol-46162,,,,,,,
Sol-46163,,,,,,,
Sol-46164,,,,,,,
Sol-46165,,,,,,,
Sol-46166,,,,,,,
Sol-46167,,,,,,,
Sol-46168,,,,,,,
Sol-46169,,,,,,,
Sol-46170,,,,,,,
Sol-46171,,,,,,,
Sol-46172,,,,,,,
Sol-46173,,,,,,,
Sol-46174,,,,,,,
Sol-46175,,,,,,,
Sol-46176,,,,,,,
Sol-46177,,,,,,,
Sol-46178,,,,,,,
Sol-46179,,,,,,,
Sol-46180,,,,,,,
Sol-46181,,,,,,,
Sol-46182,,,,,,,
Sol-46183,,,,,,,
Sol-46184,,,,,,,
Sol-46185,,,,,,,
Sol-46186,,,,,,,
Sol-46187,,,,,,,
Sol-46188,,,,,,,
Sol-46189,,,,,,,
Sol-46190,,,,,,,
Sol-46191,,,,,,,
Sol-46192,,,,,,,
Sol-46193,,,,,,,
Sol-46194,,,,,,,
Sol-46195,,,,,,,
Sol-46196,,,,,,,
Sol-46197,,,,,,,
Sol-46198,,,,,,,
Sol-46199,,,,,,,
Sol-46200,,,,,,,
Sol-46201,,,,,,,
Sol-46202,,,,,,,
Sol-46203,,,,,,,
Sol-46204,,,,,,,
Sol-46205,,,,,,,
Sol-46206,,,,,,,
Sol-46207,,,,,,,
Sol-46208,,,,,,,
Sol-46209,,,,,,,
Sol-46210,,,,,,,
Sol-46211,,,,,,,
Sol-46212,,,,,,,
Sol-46213,,,,,,,
Sol-46214,,,,,,,
Sol-46215,,,,,,,
Sol-46216,,,,,,,
Sol-46217,,,,,,,
Sol-46218,,,,,,,
Sol-46219,,,,,,,
Sol-46220,,,,,,,
Sol-46221,,,,,,,
Sol-46222,,,,,,,
Sol-46223,,,,,,,
Sol-46224,,,,,,,
Sol-46225,,,,,,,
Sol-46226,,,,,,,
Sol-46227,,,,,,,
Sol-46228,,,,,,,
Sol-46229,,,,,,,
Sol-46230,,,,,,,
Sol-46231,,,,,,,
Sol-46232,,,,,,,
Sol-46233,,,,,,,
Sol-46234,,,,,,,
Sol-46235,,,,,,,
Sol-46236,,,,,,,
Sol-46237,,,,,,,
Sol-46238,,,,,,,
Sol-46239,,,,,,,
Sol-46240,,,,,,,
Sol-46241,,,,,,,
Sol-46242,,,,,,,
Sol-46243,,,,,,,
Sol-46244,,,,,,,
Sol-46245,,,,,,,
Sol-46246,,,,,,,
Sol-46247,,,,,,,
Sol-46248,,,,,,,
Sol-46249,,,,,,,
Sol-46250,,,,,,,
Sol-46251,,,,,,,
Sol-46252,,,,,,,
Sol-46253,,,,,,,
Sol-46254,,,,,,,
Sol-46255,,,,,,,
Sol-46256,,,,,,,
Sol-46257,,,,,,,
Sol-46258,,,,,,,
Sol-46259,,,,,,,
Sol-46260,,,,,,,
Sol-46261,,,,,,,
Sol-46262,,,,,,,
Sol-46263,,,,,,,
Sol-46264,,,,,,,
Sol-46265,,,,,,,
Sol-46266,,,,,,,
Sol-46267,,,,,,,
Sol-46268,,,,,,,
Sol-46269,,,,,,,
Sol-46270,,,,,,,
Sol-46271,,,,,,,
Sol-46272,,,,,,,
Sol-46273,,,,,,,
Sol-46274,,,,,,,
Sol-46275,,,,,,,
Sol-46276,,,,,,,
Sol-46277,,,,,,,
Sol-46278,,,,,,,
Sol-46279,,,,,,,
Sol-46280,,,,,,,
Sol-46281,,,,,,,
Sol-46282,,,,,,,
Sol-46283,,,,,,,
Sol-46284,,,,,,,
Sol-46285,,,,,,,
Sol-46286,,,,,,,
Sol-46287,,,,,,,
Sol-46288,,,,,,,
Sol-46289,,,,,,,
Sol-46290,,,,,,,
Sol-46291,,,,,,,
Sol-46292,,,,,,,
Sol-46293,,,,,,,
Sol-46294,,,,,,,
Sol-46295,,,,,,,
Sol-46296,,,,,,,
Sol-46297,,,,,,,
Sol-46298,,,,,,,
Sol-46299,,,,,,,
Sol-46300,,,,,,,
Sol-46301,,,,,,,
Sol-46302,,,,,,,
Sol-46303,,,,,,,
Sol-46304,,,,,,,
Sol-46305,,,,,,,
Sol-46306,,,,,,,
Sol-46307,,,,,,,
Sol-46308,,,,,,,
Sol-46309,,,,,,,
Sol-46310,,,,,,,
Sol-46311,,,,,,,
Sol-46312,,,,,,,
Sol-46313,,,,,,,
Sol-46314,,,,,,,
Sol-46315,,,,,,,
Sol-46316,,,,,,,
Sol-46317,,,,,,,
Sol-46318,,,,,,,
Sol-46319,,,,,,,
Sol-46320,,,,,,,
Sol-46321,,,,,,,
Sol-46322,,,,,,,
Sol-46323,,,,,,,
Sol-46324,,,,,,,
Sol-46325,,,,,,,
Sol-46326,,,,,,,
Sol-46327,,,,,,,
Sol-46328,,,,,,,
Sol-46329,,,,,,,
Sol-46330,,,,,,,
Sol-46331,,,,,,,
Sol-46332,,,,,,,
Sol-46333,,,,,,,
Sol-46334,,,,,,,
Sol-46335,,,,,,,
Sol-46336,,,,,,,
Sol-46337,,,,,,,
Sol-46338,,,,,,,
Sol-46339,,,,,,,
Sol-46340,,,,,,,
Sol-46341,,,,,,,
Sol-46342,,,,,,,
Sol-46343,,,,,,,
Sol-46344,,,,,,,
Sol-46345,,,,,,,
Sol-46346,,,,,,,
Sol-46347,,,,,,,
Sol-46348,,,,,,,
Sol-46349,,,,,,,
Sol-46350,,,,,,,
Sol-46351,,,,,,,
Sol-46352,,,,,,,
Sol-46353,,,,,,,
Sol-46354,,,,,,,
Sol-46355,,,,,,,
Sol-46356,,,,,,,
Sol-46357,,,,,,,
Sol-46358,,,,,,,
Sol-46359,,,,,,,
Sol-46360,,,,,,,
Sol-46361,,,,,,,
Sol-46362,,,,,,,
Sol-46363,,,,,,,
Sol-46364,,,,,,,
Sol-46365,,,,,,,
Sol-46366,,,,,,,
Sol-46367,,,,,,,
Sol-46368,,,,,,,
Sol-46369,,,,,,,
Sol-46370,,,,,,,
Sol-46371,,,,,,,
Sol-46372,,,,,,,
Sol-46373,,,,,,,
Sol-46374,,,,,,,
Sol-46375,,,,,,,
Sol-46376,,,,,,,
Sol-46377,,,,,,,
Sol-46378,,,,,,,
Sol-46379,,,,,,,
Sol-46380,,,,,,,
Sol-46381,,,,,,,
Sol-46382,,,,,,,
Sol-46383,,,,,,,
Sol-46384,,,,,,,
Sol-46385,,,,,,,
Sol-46386,,,,,,,
Sol-46387,,,,,,,
Sol-46388,,,,,,,
Sol-46389,,,,,,,
Sol-46390,,,,,,,
Sol-46391,,,,,,,
Sol-46392,,,,,,,
Sol-46393,,,,,,,
Sol-46394,,,,,,,
Sol-46395,,,,,,,
Sol-46396,,,,,,,
Sol-46397,,,,,,,
Sol-46398,,,,,,,
Sol-46399,,,,,,,
Sol-46400,,,,,,,
Sol-46401,,,,,,,
Sol-46402,,,,,,,
Sol-46403,,,,,,,
Sol-46404,,,,,,,
Sol-46405,,,,,,,
Sol-46406,,,,,,,
Sol-46407,,,,,,,
Sol-46408,,,,,,,
Sol-46409,,,,,,,
Sol-46410,,,,,,,
Sol-46411,,,,,,,
Sol-46412,,,,,,,
Sol-46413,,,,,,,
Sol-46414,,,,,,,
Sol-46415,,,,,,,
Sol-46416,,,,,,,
Sol-46417,,,,,,,
Sol-46418,,,,,,,
Sol-46419,,,,,,,
Sol-46420,,,,,,,
Sol-46421,,,,,,,
Sol-46422,,,,,,,
Sol-46423,,,,,,,
Sol-46424,,,,,,,
Sol-46425,,,,,,,
Sol-46426,,,,,,,
Sol-46427,,,,,,,
Sol-46428,,,,,,,
Sol-46429,,,,,,,
Sol-46430,,,,,,,
Sol-46431,,,,,,,
Sol-46432,,,,,,,
Sol-46433,,,,,,,
Sol-46434,,,,,,,
Sol-46435,,,,,,,
Sol-46436,,,,,,,
Sol-46437,,,,,,,
Sol-46438,,,,,,,
Sol-46439,,,,,,,
Sol-46440,,,,,,,
Sol-46441,,,,,,,
Sol-46442,,,,,,,
Sol-46443,,,,,,,
Sol-46444,,,,,,,
Sol-46445,,,,,,,
Sol-46446,,,,,,,
Sol-46447,,,,,,,
Sol-46448,,,,,,,
Sol-46449,,,,,,,
Sol-46450,,,,,,,
Sol-46451,,,,,,,
Sol-46452,,,,,,,
Sol-46453,,,,,,,
Sol-46454,,,,,,,
Sol-46455,,,,,,,
Sol-46456,,,,,,,
Sol-46457,,,,,,,
Sol-46458,,,,,,,
Sol-46459,,,,,,,
Sol-46460,,,,,,,
Sol-46461,,,,,,,
Sol-46462,,,,,,,
Sol-46463,,,,,,,
Sol-46464,,,,,,,
Sol-46465,,,,,,,
Sol-46466,,,,,,,
Sol-46467,,,,,,,
Sol-46468,,,,,,,
Sol-46469,,,,,,,
Sol-46470,,,,,,,
Sol-46471,,,,,,,
Sol-46472,,,,,,,
Sol-46473,,,,,,,
Sol-46474,,,,,,,
Sol-46475,,,,,,,
Sol-46476,,,,,,,
Sol-46477,,,,,,,
Sol-46478,,,,,,,
Sol-46479,,,,,,,
Sol-46480,,,,,,,
Sol-46481,,,,,,,
Sol-46482,,,,,,,
Sol-46483,,,,,,,
Sol-46484,,,,,,,
Sol-46485,,,,,,,
Sol-46486,,,,,,,
Sol-46487,,,,,,,
Sol-46488,,,,,,,
Sol-46489,,,,,,,
Sol-46490,,,,,,,
Sol-46491,,,,,,,
Sol-46492,,,,,,,
Sol-46493,,,,,,,
Sol-46494,,,,,,,
Sol-46495,,,,,,,
Sol-46496,,,,,,,
Sol-46497,,,,,,,
Sol-46498,,,,,,,
Sol-46499,,,,,,,
Sol-46500,,,,,,,
Sol-46501,,,,,,,
Sol-46502,,,,,,,
Sol-46503,,,,,,,
Sol-46504,,,,,,,
Sol-46505,,,,,,,
Sol-46506,,,,,,,
Sol-46507,,,,,,,
Sol-46508,,,,,,,
Sol-46509,,,,,,,
Sol-46510,,,,,,,
Sol-46511,,,,,,,
Sol-46512,,,,,,,
Sol-46513,,,,,,,
Sol-46514,,,,,,,
Sol-46515,,,,,,,
Sol-46516,,,,,,,
Sol-46517,,,,,,,
Sol-46518,,,,,,,
Sol-46519,,,,,,,
Sol-46520,,,,,,,
Sol-46521,,,,,,,
Sol-46522,,,,,,,
Sol-46523,,,,,,,
Sol-46524,,,,,,,
Sol-46525,,,,,,,
Sol-46526,,,,,,,
Sol-46527,,,,,,,
Sol-46528,,,,,,,
Sol-46529,,,,,,,
Sol-46530,,,,,,,
Sol-46531,,,,,,,
Sol-46532,,,,,,,
Sol-46533,,,,,,,
Sol-46534,,,,,,,
Sol-46535,,,,,,,
Sol-46536,,,,,,,
Sol-46537,,,,,,,
Sol-46538,,,,,,,
Sol-46539,,,,,,,
Sol-46540,,,,,,,
Sol-46541,,,,,,,
Sol-46542,,,,,,,
Sol-46543,,,,,,,
Sol-46544,,,,,,,
Sol-46545,,,,,,,
Sol-46546,,,,,,,
Sol-46547,,,,,,,
Sol-46548,,,,,,,
Sol-46549,,,,,,,
Sol-46550,,,,,,,
Sol-46551,,,,,,,
Sol-46552,,,,,,,
Sol-46553,,,,,,,
Sol-46554,,,,,,,
Sol-46555,,,,,,,
Sol-46556,,,,,,,
Sol-46557,,,,,,,
Sol-46558,,,,,,,
Sol-46559,,,,,,,
Sol-46560,,,,,,,
Sol-46561,,,,,,,
Sol-46562,,,,,,,
Sol-46563,,,,,,,
Sol-46564,,,,,,,
Sol-46565,,,,,,,
Sol-46566,,,,,,,
Sol-46567,,,,,,,
Sol-46568,,,,,,,
Sol-46569,,,,,,,
Sol-46570,,,,,,,
Sol-46571,,,,,,,
Sol-46572,,,,,,,
Sol-46573,,,,,,,
Sol-46574,,,,,,,
Sol-46575,,,,,,,
Sol-46576,,,,,,,
Sol-46577,,,,,,,
Sol-46578,,,,,,,
Sol-46579,,,,,,,
Sol-46580,,,,,,,
Sol-46581,,,,,,,
Sol-46582,,,,,,,
Sol-46583,,,,,,,
Sol-46584,,,,,,,
Sol-46585,,,,,,,
Sol-46586,,,,,,,
Sol-46587,,,,,,,
Sol-46588,,,,,,,
Sol-46589,,,,,,,
Sol-46590,,,,,,,
Sol-46591,,,,,,,
Sol-46592,,,,,,,
Sol-46593,,,,,,,
Sol-46594,,,,,,,
Sol-46595,,,,,,,
Sol-46596,,,,,,,
Sol-46597,,,,,,,
Sol-46598,,,,,,,
Sol-46599,,,,,,,
Sol-46600,,,,,,,
Sol-46601,,,,,,,
Sol-46602,,,,,,,
Sol-46603,,,,,,,
Sol-46604,,,,,,,
Sol-46605,,,,,,,
Sol-46606,,,,,,,
Sol-46607,,,,,,,
Sol-46608,,,,,,,
Sol-46609,,,,,,,
Sol-46610,,,,,,,
Sol-46611,,,,,,,
Sol-46612,,,,,,,
Sol-46613,,,,,,,
Sol-46614,,,,,,,
Sol-46615,,,,,,,
Sol-46616,,,,,,,
Sol-46617,,,,,,,
Sol-46618,,,,,,,
Sol-46619,,,,,,,
Sol-46620,,,,,,,
Sol-46621,,,,,,,
Sol-46622,,,,,,,
Sol-46623,,,,,,,
Sol-46624,,,,,,,
Sol-46625,,,,,,,
Sol-46626,,,,,,,
Sol-46627,,,,,,,
Sol-46628,,,,,,,
Sol-46629,,,,,,,
Sol-46630,,,,,,,
Sol-46631,,,,,,,
Sol-46632,,,,,,,
Sol-46633,,,,,,,
Sol-46634,,,,,,,
Sol-46635,,,,,,,
Sol-46636,,,,,,,
Sol-46637,,,,,,,
Sol-46638,,,,,,,
Sol-46639,,,,,,,
Sol-46640,,,,,,,
Sol-46641,,,,,,,
Sol-46642,,,,,,,
Sol-46643,,,,,,,
Sol-46644,,,,,,,
Sol-46645,,,,,,,
Sol-46646,,,,,,,
Sol-46647,,,,,,,
Sol-46648,,,,,,,
Sol-46649,,,,,,,
Sol-46650,,,,,,,
Sol-46651,,,,,,,
Sol-46652,,,,,,,
Sol-46653,,,,,,,
Sol-46654,,,,,,,
Sol-46655,,,,,,,
Sol-46656,,,,,,,
Sol-46657,,,,,,,
Sol-46658,,,,,,,
Sol-46659,,,,,,,
Sol-46660,,,,,,,
Sol-46661,,,,,,,
Sol-46662,,,,,,,
Sol-46663,,,,,,,
Sol-46664,,,,,,,
Sol-46665,,,,,,,
Sol-46666,,,,,,,
Sol-46667,,,,,,,
Sol-46668,,,,,,,
Sol-46669,,,,,,,
Sol-46670,,,,,,,
Sol-46671,,,,,,,
Sol-46672,,,,,,,
Sol-46673,,,,,,,
Sol-46674,,,,,,,
Sol-46675,,,,,,,
Sol-46676,,,,,,,
Sol-46677,,,,,,,
Sol-46678,,,,,,,
Sol-46679,,,,,,,
Sol-46680,,,,,,,
Sol-46681,,,,,,,
Sol-46682,,,,,,,
Sol-46683,,,,,,,
Sol-46684,,,,,,,
Sol-46685,,,,,,,
Sol-46686,,,,,,,
Sol-46687,,,,,,,
Sol-46688,,,,,,,
Sol-46689,,,,,,,
Sol-46690,,,,,,,
Sol-46691,,,,,,,
Sol-46692,,,,,,,
Sol-46693,,,,,,,
Sol-46694,,,,,,,
Sol-46695,,,,,,,
Sol-46696,,,,,,,
Sol-46697,,,,,,,
Sol-46698,,,,,,,
Sol-46699,,,,,,,
Sol-46700,,,,,,,
Sol-46701,,,,,,,
Sol-46702,,,,,,,
Sol-46703,,,,,,,
Sol-46704,,,,,,,
Sol-46705,,,,,,,
Sol-46706,,,,,,,
Sol-46707,,,,,,,
Sol-46708,,,,,,,
Sol-46709,,,,,,,
Sol-46710,,,,,,,
Sol-46711,,,,,,,
Sol-46712,,,,,,,
Sol-46713,,,,,,,
Sol-46714,,,,,,,
Sol-46715,,,,,,,
Sol-46716,,,,,,,
Sol-46717,,,,,,,
Sol-46718,,,,,,,
Sol-46719,,,,,,,
Sol-46720,,,,,,,
Sol-46721,,,,,,,
Sol-46722,,,,,,,
Sol-46723,,,,,,,
Sol-46724,,,,,,,
Sol-46725,,,,,,,
Sol-46726,,,,,,,
Sol-46727,,,,,,,
Sol-46728,,,,,,,
Sol-46729,,,,,,,
Sol-46730,,,,,,,
Sol-46731,,,,,,,
Sol-46732,,,,,,,
Sol-46733,,,,,,,
Sol-46734,,,,,,,
Sol-46735,,,,,,,
Sol-46736,,,,,,,
Sol-46737,,,,,,,
Sol-46738,,,,,,,
Sol-46739,,,,,,,
Sol-46740,,,,,,,
Sol-46741,,,,,,,
Sol-46742,,,,,,,
Sol-46743,,,,,,,
Sol-46744,,,,,,,
Sol-46745,,,,,,,
Sol-46746,,,,,,,
Sol-46747,,,,,,,
Sol-46748,,,,,,,
Sol-46749,,,,,,,
Sol-46750,,,,,,,
Sol-46751,,,,,,,
Sol-46752,,,,,,,
Sol-46753,,,,,,,
Sol-46754,,,,,,,
Sol-46755,,,,,,,
Sol-46756,,,,,,,
Sol-46757,,,,,,,
Sol-46758,,,,,,,
Sol-46759,,,,,,,
Sol-46760,,,,,,,
Sol-46761,,,,,,,
Sol-46762,,,,,,,
Sol-46763,,,,,,,
Sol-46764,,,,,,,
Sol-46765,,,,,,,
Sol-46766,,,,,,,
Sol-46767,,,,,,,
Sol-46768,,,,,,,
Sol-46769,,,,,,,
Sol-46770,,,,,,,
Sol-46771,,,,,,,
Sol-46772,,,,,,,
Sol-46773,,,,,,,
Sol-46774,,,,,,,
Sol-46775,,,,,,,
Sol-46776,,,,,,,
Sol-46777,,,,,,,
Sol-46778,,,,,,,
Sol-46779,,,,,,,
Sol-46780,,,,,,,
Sol-46781,,,,,,,
Sol-46782,,,,,,,
Sol-46783,,,,,,,
Sol-46784,,,,,,,
Sol-46785,,,,,,,
Sol-46786,,,,,,,
Sol-46787,,,,,,,
Sol-46788,,,,,,,
Sol-46789,,,,,,,
Sol-46790,,,,,,,
Sol-46791,,,,,,,
Sol-46792,,,,,,,
Sol-46793,,,,,,,
Sol-46794,,,,,,,
Sol-46795,,,,,,,
Sol-46796,,,,,,,
Sol-46797,,,,,,,
Sol-46798,,,,,,,
Sol-46799,,,,,,,
Sol-46800,,,,,,,
Sol-46801,,,,,,,
Sol-46802,,,,,,,
Sol-46803,,,,,,,
Sol-46804,,,,,,,
Sol-46805,,,,,,,
Sol-46806,,,,,,,
Sol-46807,,,,,,,
Sol-46808,,,,,,,
Sol-46809,,,,,,,
Sol-46810,,,,,,,
Sol-46811,,,,,,,
Sol-46812,,,,,,,
Sol-46813,,,,,,,
Sol-46814,,,,,,,
Sol-46815,,,,,,,
Sol-46816,,,,,,,
Sol-46817,,,,,,,
Sol-46818,,,,,,,
Sol-46819,,,,,,,
Sol-46820,,,,,,,
Sol-46821,,,,,,,
Sol-46822,,,,,,,
Sol-46823,,,,,,,
Sol-46824,,,,,,,
Sol-46825,,,,,,,
Sol-46826,,,,,,,
Sol-46827,,,,,,,
Sol-46828,,,,,,,
Sol-46829,,,,,,,
Sol-46830,,,,,,,
Sol-46831,,,,,,,
Sol-46832,,,,,,,
Sol-46833,,,,,,,
Sol-46834,,,,,,,
Sol-46835,,,,,,,
Sol-46836,,,,,,,
Sol-46837,,,,,,,
Sol-46838,,,,,,,
Sol-46839,,,,,,,
Sol-46840,,,,,,,
Sol-46841,,,,,,,
Sol-46842,,,,,,,
Sol-46843,,,,,,,
Sol-46844,,,,,,,
Sol-46845,,,,,,,
Sol-46846,,,,,,,
Sol-46847,,,,,,,
Sol-46848,,,,,,,
Sol-46849,,,,,,,
Sol-46850,,,,,,,
Sol-46851,,,,,,,
Sol-46852,,,,,,,
Sol-46853,,,,,,,
Sol-46854,,,,,,,
Sol-46855,,,,,,,
Sol-46856,,,,,,,
Sol-46857,,,,,,,
Sol-46858,,,,,,,
Sol-46859,,,,,,,
Sol-46860,,,,,,,
Sol-46861,,,,,,,
Sol-46862,,,,,,,
Sol-46863,,,,,,,
Sol-46864,,,,,,,
Sol-46865,,,,,,,
Sol-46866,,,,,,,
Sol-46867,,,,,,,
Sol-46868,,,,,,,
Sol-46869,,,,,,,
Sol-46870,,,,,,,
Sol-46871,,,,,,,
Sol-46872,,,,,,,
Sol-46873,,,,,,,
Sol-46874,,,,,,,
Sol-46875,,,,,,,
Sol-46876,,,,,,,
Sol-46877,,,,,,,
Sol-46878,,,,,,,
Sol-46879,,,,,,,
Sol-46880,,,,,,,
Sol-46881,,,,,,,
Sol-46882,,,,,,,
Sol-46883,,,,,,,
Sol-46884,,,,,,,
Sol-46885,,,,,,,
Sol-46886,,,,,,,
Sol-46887,,,,,,,
Sol-46888,,,,,,,
Sol-46889,,,,,,,
Sol-46890,,,,,,,
Sol-46891,,,,,,,
Sol-46892,,,,,,,
Sol-46893,,,,,,,
Sol-46894,,,,,,,
Sol-46895,,,,,,,
Sol-46896,,,,,,,
Sol-46897,,,,,,,
Sol-46898,,,,,,,
Sol-46899,,,,,,,
Sol-46900,,,,,,,
Sol-46901,,,,,,,
Sol-46902,,,,,,,
Sol-46903,,,,,,,
Sol-46904,,,,,,,
Sol-46905,,,,,,,
Sol-46906,,,,,,,
Sol-46907,,,,,,,
Sol-46908,,,,,,,
Sol-46909,,,,,,,
Sol-46910,,,,,,,
Sol-46911,,,,,,,
Sol-46912,,,,,,,
Sol-46913,,,,,,,
Sol-46914,,,,,,,
Sol-46915,,,,,,,
Sol-46916,,,,,,,
Sol-46917,,,,,,,
Sol-46918,,,,,,,
Sol-46919,,,,,,,
Sol-46920,,,,,,,
Sol-46921,,,,,,,
Sol-46922,,,,,,,
Sol-46923,,,,,,,
Sol-46924,,,,,,,
Sol-46925,,,,,,,
Sol-46926,,,,,,,
Sol-46927,,,,,,,
Sol-46928,,,,,,,
Sol-46929,,,,,,,
Sol-46930,,,,,,,
Sol-46931,,,,,,,
Sol-46932,,,,,,,
Sol-46933,,,,,,,
Sol-46934,,,,,,,
Sol-46935,,,,,,,
Sol-46936,,,,,,,
Sol-46937,,,,,,,
Sol-46938,,,,,,,
Sol-46939,,,,,,,
Sol-46940,,,,,,,
Sol-46941,,,,,,,
Sol-46942,,,,,,,
Sol-46943,,,,,,,
Sol-46944,,,,,,,
Sol-46945,,,,,,,
Sol-46946,,,,,,,
Sol-46947,,,,,,,
Sol-46948,,,,,,,
Sol-46949,,,,,,,
Sol-46950,,,,,,,
Sol-46951,,,,,,,
Sol-46952,,,,,,,
Sol-46953,,,,,,,
Sol-46954,,,,,,,
Sol-46955,,,,,,,
Sol-46956,,,,,,,
Sol-46957,,,,,,,
Sol-46958,,,,,,,
Sol-46959,,,,,,,
Sol-46960,,,,,,,
Sol-46961,,,,,,,
Sol-46962,,,,,,,
Sol-46963,,,,,,,
Sol-46964,,,,,,,
Sol-46965,,,,,,,
Sol-46966,,,,,,,
Sol-46967,,,,,,,
Sol-46968,,,,,,,
Sol-46969,,,,,,,
Sol-46970,,,,,,,
Sol-46971,,,,,,,
Sol-46972,,,,,,,
Sol-46973,,,,,,,
Sol-46974,,,,,,,
Sol-46975,,,,,,,
Sol-46976,,,,,,,
Sol-46977,,,,,,,
Sol-46978,,,,,,,
Sol-46979,,,,,,,
Sol-46980,,,,,,,
Sol-46981,,,,,,,
Sol-46982,,,,,,,
Sol-46983,,,,,,,
Sol-46984,,,,,,,
Sol-46985,,,,,,,
Sol-46986,,,,,,,
Sol-46987,,,,,,,
Sol-46988,,,,,,,
Sol-46989,,,,,,,
Sol-46990,,,,,,,
Sol-46991,,,,,,,
Sol-46992,,,,,,,
Sol-46993,,,,,,,
Sol-46994,,,,,,,
Sol-46995,,,,,,,
Sol-46996,,,,,,,
Sol-46997,,,,,,,
Sol-46998,,,,,,,
Sol-46999,,,,,,,
Sol-47000,,,,,,,
Sol-47001,,,,,,,
Sol-47002,,,,,,,
Sol-47003,,,,,,,
Sol-47004,,,,,,,
Sol-47005,,,,,,,
Sol-47006,,,,,,,
Sol-47007,,,,,,,
Sol-47008,,,,,,,
Sol-47009,,,,,,,
Sol-47010,,,,,,,
Sol-47011,,,,,,,
Sol-47012,,,,,,,
Sol-47013,,,,,,,
Sol-47014,,,,,,,
Sol-47015,,,,,,,
Sol-47016,,,,,,,
Sol-47017,,,,,,,
Sol-47018,,,,,,,
Sol-47019,,,,,,,
Sol-47020,,,,,,,
Sol-47021,,,,,,,
Sol-47022,,,,,,,
Sol-47023,,,,,,,
Sol-47024,,,,,,,
Sol-47025,,,,,,,
Sol-47026,,,,,,,
Sol-47027,,,,,,,
Sol-47028,,,,,,,
Sol-47029,,,,,,,
Sol-47030,,,,,,,
Sol-47031,,,,,,,
Sol-47032,,,,,,,
Sol-47033,,,,,,,
Sol-47034,,,,,,,
Sol-47035,,,,,,,
Sol-47036,,,,,,,
Sol-47037,,,,,,,
Sol-47038,,,,,,,
Sol-47039,,,,,,,
Sol-47040,,,,,,,
Sol-47041,,,,,,,
Sol-47042,,,,,,,
Sol-47043,,,,,,,
Sol-47044,,,,,,,
Sol-47045,,,,,,,
Sol-47046,,,,,,,
Sol-47047,,,,,,,
Sol-47048,,,,,,,
Sol-47049,,,,,,,
Sol-47050,,,,,,,
Sol-47051,,,,,,,
Sol-47052,,,,,,,
Sol-47053,,,,,,,
Sol-47054,,,,,,,
Sol-47055,,,,,,,
Sol-47056,,,,,,,
Sol-47057,,,,,,,
Sol-47058,,,,,,,
Sol-47059,,,,,,,
Sol-47060,,,,,,,
Sol-47061,,,,,,,
Sol-47062,,,,,,,
Sol-47063,,,,,,,
Sol-47064,,,,,,,
Sol-47065,,,,,,,
Sol-47066,,,,,,,
Sol-47067,,,,,,,
Sol-47068,,,,,,,
Sol-47069,,,,,,,
Sol-47070,,,,,,,
Sol-47071,,,,,,,
Sol-47072,,,,,,,
Sol-47073,,,,,,,
Sol-47074,,,,,,,
Sol-47075,,,,,,,
Sol-47076,,,,,,,
Sol-47077,,,,,,,
Sol-47078,,,,,,,
Sol-47079,,,,,,,
Sol-47080,,,,,,,
Sol-47081,,,,,,,
Sol-47082,,,,,,,
Sol-47083,,,,,,,
Sol-47084,,,,,,,
Sol-47085,,,,,,,
Sol-47086,,,,,,,
Sol-47087,,,,,,,
Sol-47088,,,,,,,
Sol-47089,,,,,,,
Sol-47090,,,,,,,
Sol-47091,,,,,,,
Sol-47092,,,,,,,
Sol-47093,,,,,,,
Sol-47094,,,,,,,
Sol-47095,,,,,,,
Sol-47096,,,,,,,
Sol-47097,,,,,,,
Sol-47098,,,,,,,
Sol-47099,,,,,,,
Sol-47100,,,,,,,
Sol-47101,,,,,,,
Sol-47102,,,,,,,
Sol-47103,,,,,,,
Sol-47104,,,,,,,
Sol-47105,,,,,,,
Sol-47106,,,,,,,
Sol-47107,,,,,,,
Sol-47108,,,,,,,
Sol-47109,,,,,,,
Sol-47110,,,,,,,
Sol-47111,,,,,,,
Sol-47112,,,,,,,
Sol-47113,,,,,,,
Sol-47114,,,,,,,
Sol-47115,,,,,,,
Sol-47116,,,,,,,
Sol-47117,,,,,,,
Sol-47118,,,,,,,
Sol-47119,,,,,,,
Sol-47120,,,,,,,
Sol-47121,,,,,,,
Sol-47122,,,,,,,
Sol-47123,,,,,,,
Sol-47124,,,,,,,
Sol-47125,,,,,,,
Sol-47126,,,,,,,
Sol-47127,,,,,,,
Sol-47128,,,,,,,
Sol-47129,,,,,,,
Sol-47130,,,,,,,
Sol-47131,,,,,,,
Sol-47132,,,,,,,
Sol-47133,,,,,,,
Sol-47134,,,,,,,
Sol-47135,,,,,,,
Sol-47136,,,,,,,
Sol-47137,,,,,,,
Sol-47138,,,,,,,
Sol-47139,,,,,,,
Sol-47140,,,,,,,
Sol-47141,,,,,,,
Sol-47142,,,,,,,
Sol-47143,,,,,,,
Sol-47144,,,,,,,
Sol-47145,,,,,,,
Sol-47146,,,,,,,
Sol-47147,,,,,,,
Sol-47148,,,,,,,
Sol-47149,,,,,,,
Sol-47150,,,,,,,
Sol-47151,,,,,,,
Sol-47152,,,,,,,
Sol-47153,,,,,,,
Sol-47154,,,,,,,
Sol-47155,,,,,,,
Sol-47156,,,,,,,
Sol-47157,,,,,,,
Sol-47158,,,,,,,
Sol-47159,,,,,,,
Sol-47160,,,,,,,
Sol-47161,,,,,,,
Sol-47162,,,,,,,
Sol-47163,,,,,,,
Sol-47164,,,,,,,
Sol-47165,,,,,,,
Sol-47166,,,,,,,
Sol-47167,,,,,,,
Sol-47168,,,,,,,
Sol-47169,,,,,,,
Sol-47170,,,,,,,
Sol-47171,,,,,,,
Sol-47172,,,,,,,
Sol-47173,,,,,,,
Sol-47174,,,,,,,
Sol-47175,,,,,,,
Sol-47176,,,,,,,
Sol-47177,,,,,,,
Sol-47178,,,,,,,
Sol-47179,,,,,,,
Sol-47180,,,,,,,
Sol-47181,,,,,,,
Sol-47182,,,,,,,
Sol-47183,,,,,,,
Sol-47184,,,,,,,
Sol-47185,,,,,,,
Sol-47186,,,,,,,
Sol-47187,,,,,,,
Sol-47188,,,,,,,
Sol-47189,,,,,,,
Sol-47190,,,,,,,
Sol-47191,,,,,,,
Sol-47192,,,,,,,
Sol-47193,,,,,,,
Sol-47194,,,,,,,
Sol-47195,,,,,,,
Sol-47196,,,,,,,
Sol-47197,,,,,,,
Sol-47198,,,,,,,
Sol-47199,,,,,,,
Sol-47200,,,,,,,
Sol-47201,,,,,,,
Sol-47202,,,,,,,
Sol-47203,,,,,,,
Sol-47204,,,,,,,
Sol-47205,,,,,,,
Sol-47206,,,,,,,
Sol-47207,,,,,,,
Sol-47208,,,,,,,
Sol-47209,,,,,,,
Sol-47210,,,,,,,
Sol-47211,,,,,,,
Sol-47212,,,,,,,
Sol-47213,,,,,,,
Sol-47214,,,,,,,
Sol-47215,,,,,,,
Sol-47216,,,,,,,
Sol-47217,,,,,,,
Sol-47218,,,,,,,
Sol-47219,,,,,,,
Sol-47220,,,,,,,
Sol-47221,,,,,,,
Sol-47222,,,,,,,
Sol-47223,,,,,,,
Sol-47224,,,,,,,
Sol-47225,,,,,,,
Sol-47226,,,,,,,
Sol-47227,,,,,,,
Sol-47228,,,,,,,
Sol-47229,,,,,,,
Sol-47230,,,,,,,
Sol-47231,,,,,,,
Sol-47232,,,,,,,
Sol-47233,,,,,,,
Sol-47234,,,,,,,
Sol-47235,,,,,,,
Sol-47236,,,,,,,
Sol-47237,,,,,,,
Sol-47238,,,,,,,
Sol-47239,,,,,,,
Sol-47240,,,,,,,
Sol-47241,,,,,,,
Sol-47242,,,,,,,
Sol-47243,,,,,,,
Sol-47244,,,,,,,
Sol-47245,,,,,,,
Sol-47246,,,,,,,
Sol-47247,,,,,,,
Sol-47248,,,,,,,
Sol-47249,,,,,,,
Sol-47250,,,,,,,
Sol-47251,,,,,,,
Sol-47252,,,,,,,
Sol-47253,,,,,,,
Sol-47254,,,,,,,
Sol-47255,,,,,,,
Sol-47256,,,,,,,
Sol-47257,,,,,,,
Sol-47258,,,,,,,
Sol-47259,,,,,,,
Sol-47260,,,,,,,
Sol-47261,,,,,,,
Sol-47262,,,,,,,
Sol-47263,,,,,,,
Sol-47264,,,,,,,
Sol-47265,,,,,,,
Sol-47266,,,,,,,
Sol-47267,,,,,,,
Sol-47268,,,,,,,
Sol-47269,,,,,,,
Sol-47270,,,,,,,
Sol-47271,,,,,,,
Sol-47272,,,,,,,
Sol-47273,,,,,,,
Sol-47274,,,,,,,
Sol-47275,,,,,,,
Sol-47276,,,,,,,
Sol-47277,,,,,,,
Sol-47278,,,,,,,
Sol-47279,,,,,,,
Sol-47280,,,,,,,
Sol-47281,,,,,,,
Sol-47282,,,,,,,
Sol-47283,,,,,,,
Sol-47284,,,,,,,
Sol-47285,,,,,,,
Sol-47286,,,,,,,
Sol-47287,,,,,,,
Sol-47288,,,,,,,
Sol-47289,,,,,,,
Sol-47290,,,,,,,
Sol-47291,,,,,,,
Sol-47292,,,,,,,
Sol-47293,,,,,,,
Sol-47294,,,,,,,
Sol-47295,,,,,,,
Sol-47296,,,,,,,
Sol-47297,,,,,,,
Sol-47298,,,,,,,
Sol-47299,,,,,,,
Sol-47300,,,,,,,
Sol-47301,,,,,,,
Sol-47302,,,,,,,
Sol-47303,,,,,,,
Sol-47304,,,,,,,
Sol-47305,,,,,,,
Sol-47306,,,,,,,
Sol-47307,,,,,,,
Sol-47308,,,,,,,
Sol-47309,,,,,,,
Sol-47310,,,,,,,
Sol-47311,,,,,,,
Sol-47312,,,,,,,
Sol-47313,,,,,,,
Sol-47314,,,,,,,
Sol-47315,,,,,,,
Sol-47316,,,,,,,
Sol-47317,,,,,,,
Sol-47318,,,,,,,
Sol-47319,,,,,,,
Sol-47320,,,,,,,
Sol-47321,,,,,,,
Sol-47322,,,,,,,
Sol-47323,,,,,,,
Sol-47324,,,,,,,
Sol-47325,,,,,,,
Sol-47326,,,,,,,
Sol-47327,,,,,,,
Sol-47328,,,,,,,
Sol-47329,,,,,,,
Sol-47330,,,,,,,
Sol-47331,,,,,,,
Sol-47332,,,,,,,
Sol-47333,,,,,,,
Sol-47334,,,,,,,
Sol-47335,,,,,,,
Sol-47336,,,,,,,
Sol-47337,,,,,,,
Sol-47338,,,,,,,
Sol-47339,,,,,,,
Sol-47340,,,,,,,
Sol-47341,,,,,,,
Sol-47342,,,,,,,
Sol-47343,,,,,,,
Sol-47344,,,,,,,
Sol-47345,,,,,,,
Sol-47346,,,,,,,
Sol-47347,,,,,,,
Sol-47348,,,,,,,
Sol-47349,,,,,,,
Sol-47350,,,,,,,
Sol-47351,,,,,,,
Sol-47352,,,,,,,
Sol-47353,,,,,,,
Sol-47354,,,,,,,
Sol-47355,,,,,,,
Sol-47356,,,,,,,
Sol-47357,,,,,,,
Sol-47358,,,,,,,
Sol-47359,,,,,,,
Sol-47360,,,,,,,
Sol-47361,,,,,,,
Sol-47362,,,,,,,
Sol-47363,,,,,,,
Sol-47364,,,,,,,
Sol-47365,,,,,,,
Sol-47366,,,,,,,
Sol-47367,,,,,,,
Sol-47368,,,,,,,
Sol-47369,,,,,,,
Sol-47370,,,,,,,
Sol-47371,,,,,,,
Sol-47372,,,,,,,
Sol-47373,,,,,,,
Sol-47374,,,,,,,
Sol-47375,,,,,,,
Sol-47376,,,,,,,
Sol-47377,,,,,,,
Sol-47378,,,,,,,
Sol-47379,,,,,,,
Sol-47380,,,,,,,
Sol-47381,,,,,,,
Sol-47382,,,,,,,
Sol-47383,,,,,,,
Sol-47384,,,,,,,
Sol-47385,,,,,,,
Sol-47386,,,,,,,
Sol-47387,,,,,,,
Sol-47388,,,,,,,
Sol-47389,,,,,,,
Sol-47390,,,,,,,
Sol-47391,,,,,,,
Sol-47392,,,,,,,
Sol-47393,,,,,,,
Sol-47394,,,,,,,
Sol-47395,,,,,,,
Sol-47396,,,,,,,
Sol-47397,,,,,,,
Sol-47398,,,,,,,
Sol-47399,,,,,,,
Sol-47400,,,,,,,
Sol-47401,,,,,,,
Sol-47402,,,,,,,
Sol-47403,,,,,,,
Sol-47404,,,,,,,
Sol-47405,,,,,,,
Sol-47406,,,,,,,
Sol-47407,,,,,,,
Sol-47408,,,,,,,
Sol-47409,,,,,,,
Sol-47410,,,,,,,
Sol-47411,,,,,,,
Sol-47412,,,,,,,
Sol-47413,,,,,,,
Sol-47414,,,,,,,
Sol-47415,,,,,,,
Sol-47416,,,,,,,
Sol-47417,,,,,,,
Sol-47418,,,,,,,
Sol-47419,,,,,,,
Sol-47420,,,,,,,
Sol-47421,,,,,,,
Sol-47422,,,,,,,
Sol-47423,,,,,,,
Sol-47424,,,,,,,
Sol-47425,,,,,,,
Sol-47426,,,,,,,
Sol-47427,,,,,,,
Sol-47428,,,,,,,
Sol-47429,,,,,,,
Sol-47430,,,,,,,
Sol-47431,,,,,,,
Sol-47432,,,,,,,
Sol-47433,,,,,,,
Sol-47434,,,,,,,
Sol-47435,,,,,,,
Sol-47436,,,,,,,
Sol-47437,,,,,,,
Sol-47438,,,,,,,
Sol-47439,,,,,,,
Sol-47440,,,,,,,
Sol-47441,,,,,,,
Sol-47442,,,,,,,
Sol-47443,,,,,,,
Sol-47444,,,,,,,
Sol-47445,,,,,,,
Sol-47446,,,,,,,
Sol-47447,,,,,,,
Sol-47448,,,,,,,
Sol-47449,,,,,,,
Sol-47450,,,,,,,
Sol-47451,,,,,,,
Sol-47452,,,,,,,
Sol-47453,,,,,,,
Sol-47454,,,,,,,
Sol-47455,,,,,,,
Sol-47456,,,,,,,
Sol-47457,,,,,,,
Sol-47458,,,,,,,
Sol-47459,,,,,,,
Sol-47460,,,,,,,
Sol-47461,,,,,,,
Sol-47462,,,,,,,
Sol-47463,,,,,,,
Sol-47464,,,,,,,
Sol-47465,,,,,,,
Sol-47466,,,,,,,
Sol-47467,,,,,,,
Sol-47468,,,,,,,
Sol-47469,,,,,,,
Sol-47470,,,,,,,
Sol-47471,,,,,,,
Sol-47472,,,,,,,
Sol-47473,,,,,,,
Sol-47474,,,,,,,
Sol-47475,,,,,,,
Sol-47476,,,,,,,
Sol-47477,,,,,,,
Sol-47478,,,,,,,
Sol-47479,,,,,,,
Sol-47480,,,,,,,
Sol-47481,,,,,,,
Sol-47482,,,,,,,
Sol-47483,,,,,,,
Sol-47484,,,,,,,
Sol-47485,,,,,,,
Sol-47486,,,,,,,
Sol-47487,,,,,,,
Sol-47488,,,,,,,
Sol-47489,,,,,,,
Sol-47490,,,,,,,
Sol-47491,,,,,,,
Sol-47492,,,,,,,
Sol-47493,,,,,,,
Sol-47494,,,,,,,
Sol-47495,,,,,,,
Sol-47496,,,,,,,
Sol-47497,,,,,,,
Sol-47498,,,,,,,
Sol-47499,,,,,,,
Sol-47500,,,,,,,
Sol-47501,,,,,,,
Sol-47502,,,,,,,
Sol-47503,,,,,,,
Sol-47504,,,,,,,
Sol-47505,,,,,,,
Sol-47506,,,,,,,
Sol-47507,,,,,,,
Sol-47508,,,,,,,
Sol-47509,,,,,,,
Sol-47510,,,,,,,
Sol-47511,,,,,,,
Sol-47512,,,,,,,
Sol-47513,,,,,,,
Sol-47514,,,,,,,
Sol-47515,,,,,,,
Sol-47516,,,,,,,
Sol-47517,,,,,,,
Sol-47518,,,,,,,
Sol-47519,,,,,,,
Sol-47520,,,,,,,
Sol-47521,,,,,,,
Sol-47522,,,,,,,
Sol-47523,,,,,,,
Sol-47524,,,,,,,
Sol-47525,,,,,,,
Sol-47526,,,,,,,
Sol-47527,,,,,,,
Sol-47528,,,,,,,
Sol-47529,,,,,,,
Sol-47530,,,,,,,
Sol-47531,,,,,,,
Sol-47532,,,,,,,
Sol-47533,,,,,,,
Sol-47534,,,,,,,
Sol-47535,,,,,,,
Sol-47536,,,,,,,
Sol-47537,,,,,,,
Sol-47538,,,,,,,
Sol-47539,,,,,,,
Sol-47540,,,,,,,
Sol-47541,,,,,,,
Sol-47542,,,,,,,
Sol-47543,,,,,,,
Sol-47544,,,,,,,
Sol-47545,,,,,,,
Sol-47546,,,,,,,
Sol-47547,,,,,,,
Sol-47548,,,,,,,
Sol-47549,,,,,,,
Sol-47550,,,,,,,
Sol-47551,,,,,,,
Sol-47552,,,,,,,
Sol-47553,,,,,,,
Sol-47554,,,,,,,
Sol-47555,,,,,,,
Sol-47556,,,,,,,
Sol-47557,,,,,,,
Sol-47558,,,,,,,
Sol-47559,,,,,,,
Sol-47560,,,,,,,
Sol-47561,,,,,,,
Sol-47562,,,,,,,
Sol-47563,,,,,,,
Sol-47564,,,,,,,
Sol-47565,,,,,,,
Sol-47566,,,,,,,
Sol-47567,,,,,,,
Sol-47568,,,,,,,
Sol-47569,,,,,,,
Sol-47570,,,,,,,
Sol-47571,,,,,,,
Sol-47572,,,,,,,
Sol-47573,,,,,,,
Sol-47574,,,,,,,
Sol-47575,,,,,,,
Sol-47576,,,,,,,
Sol-47577,,,,,,,
Sol-47578,,,,,,,
Sol-47579,,,,,,,
Sol-47580,,,,,,,
Sol-47581,,,,,,,
Sol-47582,,,,,,,
Sol-47583,,,,,,,
Sol-47584,,,,,,,
Sol-47585,,,,,,,
Sol-47586,,,,,,,
Sol-47587,,,,,,,
Sol-47588,,,,,,,
Sol-47589,,,,,,,
Sol-47590,,,,,,,
Sol-47591,,,,,,,
Sol-47592,,,,,,,
Sol-47593,,,,,,,
Sol-47594,,,,,,,
Sol-47595,,,,,,,
Sol-47596,,,,,,,
Sol-47597,,,,,,,
Sol-47598,,,,,,,
Sol-47599,,,,,,,
Sol-47600,,,,,,,
Sol-47601,,,,,,,
Sol-47602,,,,,,,
Sol-47603,,,,,,,
Sol-47604,,,,,,,
Sol-47605,,,,,,,
Sol-47606,,,,,,,
Sol-47607,,,,,,,
Sol-47608,,,,,,,
Sol-47609,,,,,,,
Sol-47610,,,,,,,
Sol-47611,,,,,,,
Sol-47612,,,,,,,
Sol-47613,,,,,,,
Sol-47614,,,,,,,
Sol-47615,,,,,,,
Sol-47616,,,,,,,
Sol-47617,,,,,,,
Sol-47618,,,,,,,
Sol-47619,,,,,,,
Sol-47620,,,,,,,
Sol-47621,,,,,,,
Sol-47622,,,,,,,
Sol-47623,,,,,,,
Sol-47624,,,,,,,
Sol-47625,,,,,,,
Sol-47626,,,,,,,
Sol-47627,,,,,,,
Sol-47628,,,,,,,
Sol-47629,,,,,,,
Sol-47630,,,,,,,
Sol-47631,,,,,,,
Sol-47632,,,,,,,
Sol-47633,,,,,,,
Sol-47634,,,,,,,
Sol-47635,,,,,,,
Sol-47636,,,,,,,
Sol-47637,,,,,,,
Sol-47638,,,,,,,
Sol-47639,,,,,,,
Sol-47640,,,,,,,
Sol-47641,,,,,,,
Sol-47642,,,,,,,
Sol-47643,,,,,,,
Sol-47644,,,,,,,
Sol-47645,,,,,,,
Sol-47646,,,,,,,
Sol-47647,,,,,,,
Sol-47648,,,,,,,
Sol-47649,,,,,,,
Sol-47650,,,,,,,
Sol-47651,,,,,,,
Sol-47652,,,,,,,
Sol-47653,,,,,,,
Sol-47654,,,,,,,
Sol-47655,,,,,,,
Sol-47656,,,,,,,
Sol-47657,,,,,,,
Sol-47658,,,,,,,
Sol-47659,,,,,,,
Sol-47660,,,,,,,
Sol-47661,,,,,,,
Sol-47662,,,,,,,
Sol-47663,,,,,,,
Sol-47664,,,,,,,
Sol-47665,,,,,,,
Sol-47666,,,,,,,
Sol-47667,,,,,,,
Sol-47668,,,,,,,
Sol-47669,,,,,,,
Sol-47670,,,,,,,
Sol-47671,,,,,,,
Sol-47672,,,,,,,
Sol-47673,,,,,,,
Sol-47674,,,,,,,
Sol-47675,,,,,,,
Sol-47676,,,,,,,
Sol-47677,,,,,,,
Sol-47678,,,,,,,
Sol-47679,,,,,,,
Sol-47680,,,,,,,
Sol-47681,,,,,,,
Sol-47682,,,,,,,
Sol-47683,,,,,,,
Sol-47684,,,,,,,
Sol-47685,,,,,,,
Sol-47686,,,,,,,
Sol-47687,,,,,,,
Sol-47688,,,,,,,
Sol-47689,,,,,,,
Sol-47690,,,,,,,
Sol-47691,,,,,,,
Sol-47692,,,,,,,
Sol-47693,,,,,,,
Sol-47694,,,,,,,
Sol-47695,,,,,,,
Sol-47696,,,,,,,
Sol-47697,,,,,,,
Sol-47698,,,,,,,
Sol-47699,,,,,,,
Sol-47700,,,,,,,
Sol-47701,,,,,,,
Sol-47702,,,,,,,
Sol-47703,,,,,,,
Sol-47704,,,,,,,
Sol-47705,,,,,,,
Sol-47706,,,,,,,
Sol-47707,,,,,,,
Sol-47708,,,,,,,
Sol-47709,,,,,,,
Sol-47710,,,,,,,
Sol-47711,,,,,,,
Sol-47712,,,,,,,
Sol-47713,,,,,,,
Sol-47714,,,,,,,
Sol-47715,,,,,,,
Sol-47716,,,,,,,
Sol-47717,,,,,,,
Sol-47718,,,,,,,
Sol-47719,,,,,,,
Sol-47720,,,,,,,
Sol-47721,,,,,,,
Sol-47722,,,,,,,
Sol-47723,,,,,,,
Sol-47724,,,,,,,
Sol-47725,,,,,,,
Sol-47726,,,,,,,
Sol-47727,,,,,,,
Sol-47728,,,,,,,
Sol-47729,,,,,,,
Sol-47730,,,,,,,
Sol-47731,,,,,,,
Sol-47732,,,,,,,
Sol-47733,,,,,,,
Sol-47734,,,,,,,
Sol-47735,,,,,,,
Sol-47736,,,,,,,
Sol-47737,,,,,,,
Sol-47738,,,,,,,
Sol-47739,,,,,,,
Sol-47740,,,,,,,
Sol-47741,,,,,,,
Sol-47742,,,,,,,
Sol-47743,,,,,,,
Sol-47744,,,,,,,
Sol-47745,,,,,,,
Sol-47746,,,,,,,
Sol-47747,,,,,,,
Sol-47748,,,,,,,
Sol-47749,,,,,,,
Sol-47750,,,,,,,
Sol-47751,,,,,,,
Sol-47752,,,,,,,
Sol-47753,,,,,,,
Sol-47754,,,,,,,
Sol-47755,,,,,,,
Sol-47756,,,,,,,
Sol-47757,,,,,,,
Sol-47758,,,,,,,
Sol-47759,,,,,,,
Sol-47760,,,,,,,
Sol-47761,,,,,,,
Sol-47762,,,,,,,
Sol-47763,,,,,,,
Sol-47764,,,,,,,
Sol-47765,,,,,,,
Sol-47766,,,,,,,
Sol-47767,,,,,,,
Sol-47768,,,,,,,
Sol-47769,,,,,,,
Sol-47770,,,,,,,
Sol-47771,,,,,,,
Sol-47772,,,,,,,
Sol-47773,,,,,,,
Sol-47774,,,,,,,
Sol-47775,,,,,,,
Sol-47776,,,,,,,
Sol-47777,,,,,,,
Sol-47778,,,,,,,
Sol-47779,,,,,,,
Sol-47780,,,,,,,
Sol-47781,,,,,,,
Sol-47782,,,,,,,
Sol-47783,,,,,,,
Sol-47784,,,,,,,
Sol-47785,,,,,,,
Sol-47786,,,,,,,
Sol-47787,,,,,,,
Sol-47788,,,,,,,
Sol-47789,,,,,,,
Sol-47790,,,,,,,
Sol-47791,,,,,,,
Sol-47792,,,,,,,
Sol-47793,,,,,,,
Sol-47794,,,,,,,
Sol-47795,,,,,,,
Sol-47796,,,,,,,
Sol-47797,,,,,,,
Sol-47798,,,,,,,
Sol-47799,,,,,,,
Sol-47800,,,,,,,
Sol-47801,,,,,,,
Sol-47802,,,,,,,
Sol-47803,,,,,,,
Sol-47804,,,,,,,
Sol-47805,,,,,,,
Sol-47806,,,,,,,
Sol-47807,,,,,,,
Sol-47808,,,,,,,
Sol-47809,,,,,,,
Sol-47810,,,,,,,
Sol-47811,,,,,,,
Sol-47812,,,,,,,
Sol-47813,,,,,,,
Sol-47814,,,,,,,
Sol-47815,,,,,,,
Sol-47816,,,,,,,
Sol-47817,,,,,,,
Sol-47818,,,,,,,
Sol-47819,,,,,,,
Sol-47820,,,,,,,
Sol-47821,,,,,,,
Sol-47822,,,,,,,
Sol-47823,,,,,,,
Sol-47824,,,,,,,
Sol-47825,,,,,,,
Sol-47826,,,,,,,
Sol-47827,,,,,,,
Sol-47828,,,,,,,
Sol-47829,,,,,,,
Sol-47830,,,,,,,
Sol-47831,,,,,,,
Sol-47832,,,,,,,
Sol-47833,,,,,,,
Sol-47834,,,,,,,
Sol-47835,,,,,,,
Sol-47836,,,,,,,
Sol-47837,,,,,,,
Sol-47838,,,,,,,
Sol-47839,,,,,,,
Sol-47840,,,,,,,
Sol-47841,,,,,,,
Sol-47842,,,,,,,
Sol-47843,,,,,,,
Sol-47844,,,,,,,
Sol-47845,,,,,,,
Sol-47846,,,,,,,
Sol-47847,,,,,,,
Sol-47848,,,,,,,
Sol-47849,,,,,,,
Sol-47850,,,,,,,
Sol-47851,,,,,,,
Sol-47852,,,,,,,
Sol-47853,,,,,,,
Sol-47854,,,,,,,
Sol-47855,,,,,,,
Sol-47856,,,,,,,
Sol-47857,,,,,,,
Sol-47858,,,,,,,
Sol-47859,,,,,,,
Sol-47860,,,,,,,
Sol-47861,,,,,,,
Sol-47862,,,,,,,
Sol-47863,,,,,,,
Sol-47864,,,,,,,
Sol-47865,,,,,,,
Sol-47866,,,,,,,
Sol-47867,,,,,,,
Sol-47868,,,,,,,
Sol-47869,,,,,,,
Sol-47870,,,,,,,
Sol-47871,,,,,,,
Sol-47872,,,,,,,
Sol-47873,,,,,,,
Sol-47874,,,,,,,
Sol-47875,,,,,,,
Sol-47876,,,,,,,
Sol-47877,,,,,,,
Sol-47878,,,,,,,
Sol-47879,,,,,,,
Sol-47880,,,,,,,
Sol-47881,,,,,,,
Sol-47882,,,,,,,
Sol-47883,,,,,,,
Sol-47884,,,,,,,
Sol-47885,,,,,,,
Sol-47886,,,,,,,
Sol-47887,,,,,,,
Sol-47888,,,,,,,
Sol-47889,,,,,,,
Sol-47890,,,,,,,
Sol-47891,,,,,,,
Sol-47892,,,,,,,
Sol-47893,,,,,,,
Sol-47894,,,,,,,
Sol-47895,,,,,,,
Sol-47896,,,,,,,
Sol-47897,,,,,,,
Sol-47898,,,,,,,
Sol-47899,,,,,,,
Sol-47900,,,,,,,
Sol-47901,,,,,,,
Sol-47902,,,,,,,
Sol-47903,,,,,,,
Sol-47904,,,,,,,
Sol-47905,,,,,,,
Sol-47906,,,,,,,
Sol-47907,,,,,,,
Sol-47908,,,,,,,
Sol-47909,,,,,,,
Sol-47910,,,,,,,
Sol-47911,,,,,,,
Sol-47912,,,,,,,
Sol-47913,,,,,,,
Sol-47914,,,,,,,
Sol-47915,,,,,,,
Sol-47916,,,,,,,
Sol-47917,,,,,,,
Sol-47918,,,,,,,
Sol-47919,,,,,,,
Sol-47920,,,,,,,
Sol-47921,,,,,,,
Sol-47922,,,,,,,
Sol-47923,,,,,,,
Sol-47924,,,,,,,
Sol-47925,,,,,,,
Sol-47926,,,,,,,
Sol-47927,,,,,,,
Sol-47928,,,,,,,
Sol-47929,,,,,,,
Sol-47930,,,,,,,
Sol-47931,,,,,,,
Sol-47932,,,,,,,
Sol-47933,,,,,,,
Sol-47934,,,,,,,
Sol-47935,,,,,,,
Sol-47936,,,,,,,
Sol-47937,,,,,,,
Sol-47938,,,,,,,
Sol-47939,,,,,,,
Sol-47940,,,,,,,
Sol-47941,,,,,,,
Sol-47942,,,,,,,
Sol-47943,,,,,,,
Sol-47944,,,,,,,
Sol-47945,,,,,,,
Sol-47946,,,,,,,
Sol-47947,,,,,,,
Sol-47948,,,,,,,
Sol-47949,,,,,,,
Sol-47950,,,,,,,
Sol-47951,,,,,,,
Sol-47952,,,,,,,
Sol-47953,,,,,,,
Sol-47954,,,,,,,
Sol-47955,,,,,,,
Sol-47956,,,,,,,
Sol-47957,,,,,,,
Sol-47958,,,,,,,
Sol-47959,,,,,,,
Sol-47960,,,,,,,
Sol-47961,,,,,,,
Sol-47962,,,,,,,
Sol-47963,,,,,,,
Sol-47964,,,,,,,
Sol-47965,,,,,,,
Sol-47966,,,,,,,
Sol-47967,,,,,,,
Sol-47968,,,,,,,
Sol-47969,,,,,,,
Sol-47970,,,,,,,
Sol-47971,,,,,,,
Sol-47972,,,,,,,
Sol-47973,,,,,,,
Sol-47974,,,,,,,
Sol-47975,,,,,,,
Sol-47976,,,,,,,
Sol-47977,,,,,,,
Sol-47978,,,,,,,
Sol-47979,,,,,,,
Sol-47980,,,,,,,
Sol-47981,,,,,,,
Sol-47982,,,,,,,
Sol-47983,,,,,,,
Sol-47984,,,,,,,
Sol-47985,,,,,,,
Sol-47986,,,,,,,
Sol-47987,,,,,,,
Sol-47988,,,,,,,
Sol-47989,,,,,,,
Sol-47990,,,,,,,
Sol-47991,,,,,,,
Sol-47992,,,,,,,
Sol-47993,,,,,,,
Sol-47994,,,,,,,
Sol-47995,,,,,,,
Sol-47996,,,,,,,
Sol-47997,,,,,,,
Sol-47998,,,,,,,
Sol-47999,,,,,,,
Sol-48000,,,,,,,
Sol-48001,,,,,,,
Sol-48002,,,,,,,
Sol-48003,,,,,,,
Sol-48004,,,,,,,
Sol-48005,,,,,,,
Sol-48006,,,,,,,
Sol-48007,,,,,,,
Sol-48008,,,,,,,
Sol-48009,,,,,,,
Sol-48010,,,,,,,
Sol-48011,,,,,,,
Sol-48012,,,,,,,
Sol-48013,,,,,,,
Sol-48014,,,,,,,
Sol-48015,,,,,,,
Sol-48016,,,,,,,
Sol-48017,,,,,,,
Sol-48018,,,,,,,
Sol-48019,,,,,,,
Sol-48020,,,,,,,
Sol-48021,,,,,,,
Sol-48022,,,,,,,
Sol-48023,,,,,,,
Sol-48024,,,,,,,
Sol-48025,,,,,,,
Sol-48026,,,,,,,
Sol-48027,,,,,,,
Sol-48028,,,,,,,
Sol-48029,,,,,,,
Sol-48030,,,,,,,
Sol-48031,,,,,,,
Sol-48032,,,,,,,
Sol-48033,,,,,,,
Sol-48034,,,,,,,
Sol-48035,,,,,,,
Sol-48036,,,,,,,
Sol-48037,,,,,,,
Sol-48038,,,,,,,
Sol-48039,,,,,,,
Sol-48040,,,,,,,
Sol-48041,,,,,,,
Sol-48042,,,,,,,
Sol-48043,,,,,,,
Sol-48044,,,,,,,
Sol-48045,,,,,,,
Sol-48046,,,,,,,
Sol-48047,,,,,,,
Sol-48048,,,,,,,
Sol-48049,,,,,,,
Sol-48050,,,,,,,
Sol-48051,,,,,,,
Sol-48052,,,,,,,
Sol-48053,,,,,,,
Sol-48054,,,,,,,
Sol-48055,,,,,,,
Sol-48056,,,,,,,
Sol-48057,,,,,,,
Sol-48058,,,,,,,
Sol-48059,,,,,,,
Sol-48060,,,,,,,
Sol-48061,,,,,,,
Sol-48062,,,,,,,
Sol-48063,,,,,,,
Sol-48064,,,,,,,
Sol-48065,,,,,,,
Sol-48066,,,,,,,
Sol-48067,,,,,,,
Sol-48068,,,,,,,
Sol-48069,,,,,,,
Sol-48070,,,,,,,
Sol-48071,,,,,,,
Sol-48072,,,,,,,
Sol-48073,,,,,,,
Sol-48074,,,,,,,
Sol-48075,,,,,,,
Sol-48076,,,,,,,
Sol-48077,,,,,,,
Sol-48078,,,,,,,
Sol-48079,,,,,,,
Sol-48080,,,,,,,
Sol-48081,,,,,,,
Sol-48082,,,,,,,
Sol-48083,,,,,,,
Sol-48084,,,,,,,
Sol-48085,,,,,,,
Sol-48086,,,,,,,
Sol-48087,,,,,,,
Sol-48088,,,,,,,
Sol-48089,,,,,,,
Sol-48090,,,,,,,
Sol-48091,,,,,,,
Sol-48092,,,,,,,
Sol-48093,,,,,,,
Sol-48094,,,,,,,
Sol-48095,,,,,,,
Sol-48096,,,,,,,
Sol-48097,,,,,,,
Sol-48098,,,,,,,
Sol-48099,,,,,,,
Sol-48100,,,,,,,
Sol-48101,,,,,,,
Sol-48102,,,,,,,
Sol-48103,,,,,,,
Sol-48104,,,,,,,
Sol-48105,,,,,,,
Sol-48106,,,,,,,
Sol-48107,,,,,,,
Sol-48108,,,,,,,
Sol-48109,,,,,,,
Sol-48110,,,,,,,
Sol-48111,,,,,,,
Sol-48112,,,,,,,
Sol-48113,,,,,,,
Sol-48114,,,,,,,
Sol-48115,,,,,,,
Sol-48116,,,,,,,
Sol-48117,,,,,,,
Sol-48118,,,,,,,
Sol-48119,,,,,,,
Sol-48120,,,,,,,
Sol-48121,,,,,,,
Sol-48122,,,,,,,
Sol-48123,,,,,,,
Sol-48124,,,,,,,
Sol-48125,,,,,,,
Sol-48126,,,,,,,
Sol-48127,,,,,,,
Sol-48128,,,,,,,
Sol-48129,,,,,,,
Sol-48130,,,,,,,
Sol-48131,,,,,,,
Sol-48132,,,,,,,
Sol-48133,,,,,,,
Sol-48134,,,,,,,
Sol-48135,,,,,,,
Sol-48136,,,,,,,
Sol-48137,,,,,,,
Sol-48138,,,,,,,
Sol-48139,,,,,,,
Sol-48140,,,,,,,
Sol-48141,,,,,,,
Sol-48142,,,,,,,
Sol-48143,,,,,,,
Sol-48144,,,,,,,
Sol-48145,,,,,,,
Sol-48146,,,,,,,
Sol-48147,,,,,,,
Sol-48148,,,,,,,
Sol-48149,,,,,,,
Sol-48150,,,,,,,
Sol-48151,,,,,,,
Sol-48152,,,,,,,
Sol-48153,,,,,,,
Sol-48154,,,,,,,
Sol-48155,,,,,,,
Sol-48156,,,,,,,
Sol-48157,,,,,,,
Sol-48158,,,,,,,
Sol-48159,,,,,,,
Sol-48160,,,,,,,
Sol-48161,,,,,,,
Sol-48162,,,,,,,
Sol-48163,,,,,,,
Sol-48164,,,,,,,
Sol-48165,,,,,,,
Sol-48166,,,,,,,
Sol-48167,,,,,,,
Sol-48168,,,,,,,
Sol-48169,,,,,,,
Sol-48170,,,,,,,
Sol-48171,,,,,,,
Sol-48172,,,,,,,
Sol-48173,,,,,,,
Sol-48174,,,,,,,
Sol-48175,,,,,,,
Sol-48176,,,,,,,
Sol-48177,,,,,,,
Sol-48178,,,,,,,
Sol-48179,,,,,,,
Sol-48180,,,,,,,
Sol-48181,,,,,,,
Sol-48182,,,,,,,
Sol-48183,,,,,,,
Sol-48184,,,,,,,
Sol-48185,,,,,,,
Sol-48186,,,,,,,
Sol-48187,,,,,,,
Sol-48188,,,,,,,
Sol-48189,,,,,,,
Sol-48190,,,,,,,
Sol-48191,,,,,,,
Sol-48192,,,,,,,
Sol-48193,,,,,,,
Sol-48194,,,,,,,
Sol-48195,,,,,,,
Sol-48196,,,,,,,
Sol-48197,,,,,,,
Sol-48198,,,,,,,
Sol-48199,,,,,,,
Sol-48200,,,,,,,
Sol-48201,,,,,,,
Sol-48202,,,,,,,
Sol-48203,,,,,,,
Sol-48204,,,,,,,
Sol-48205,,,,,,,
Sol-48206,,,,,,,
Sol-48207,,,,,,,
Sol-48208,,,,,,,
Sol-48209,,,,,,,
Sol-48210,,,,,,,
Sol-48211,,,,,,,
Sol-48212,,,,,,,
Sol-48213,,,,,,,
Sol-48214,,,,,,,
Sol-48215,,,,,,,
Sol-48216,,,,,,,
Sol-48217,,,,,,,
Sol-48218,,,,,,,
Sol-48219,,,,,,,
Sol-48220,,,,,,,
Sol-48221,,,,,,,
Sol-48222,,,,,,,
Sol-48223,,,,,,,
Sol-48224,,,,,,,
Sol-48225,,,,,,,
Sol-48226,,,,,,,
Sol-48227,,,,,,,
Sol-48228,,,,,,,
Sol-48229,,,,,,,
Sol-48230,,,,,,,
Sol-48231,,,,,,,
Sol-48232,,,,,,,
Sol-48233,,,,,,,
Sol-48234,,,,,,,
Sol-48235,,,,,,,
Sol-48236,,,,,,,
Sol-48237,,,,,,,
Sol-48238,,,,,,,
Sol-48239,,,,,,,
Sol-48240,,,,,,,
Sol-48241,,,,,,,
Sol-48242,,,,,,,
Sol-48243,,,,,,,
Sol-48244,,,,,,,
Sol-48245,,,,,,,
Sol-48246,,,,,,,
Sol-48247,,,,,,,
Sol-48248,,,,,,,
Sol-48249,,,,,,,
Sol-48250,,,,,,,
Sol-48251,,,,,,,
Sol-48252,,,,,,,
Sol-48253,,,,,,,
Sol-48254,,,,,,,
Sol-48255,,,,,,,
Sol-48256,,,,,,,
Sol-48257,,,,,,,
Sol-48258,,,,,,,
Sol-48259,,,,,,,
Sol-48260,,,,,,,
Sol-48261,,,,,,,
Sol-48262,,,,,,,
Sol-48263,,,,,,,
Sol-48264,,,,,,,
Sol-48265,,,,,,,
Sol-48266,,,,,,,
Sol-48267,,,,,,,
Sol-48268,,,,,,,
Sol-48269,,,,,,,
Sol-48270,,,,,,,
Sol-48271,,,,,,,
Sol-48272,,,,,,,
Sol-48273,,,,,,,
Sol-48274,,,,,,,
Sol-48275,,,,,,,
Sol-48276,,,,,,,
Sol-48277,,,,,,,
Sol-48278,,,,,,,
Sol-48279,,,,,,,
Sol-48280,,,,,,,
Sol-48281,,,,,,,
Sol-48282,,,,,,,
Sol-48283,,,,,,,
Sol-48284,,,,,,,
Sol-48285,,,,,,,
Sol-48286,,,,,,,
Sol-48287,,,,,,,
Sol-48288,,,,,,,
Sol-48289,,,,,,,
Sol-48290,,,,,,,
Sol-48291,,,,,,,
Sol-48292,,,,,,,
Sol-48293,,,,,,,
Sol-48294,,,,,,,
Sol-48295,,,,,,,
Sol-48296,,,,,,,
Sol-48297,,,,,,,
Sol-48298,,,,,,,
Sol-48299,,,,,,,
Sol-48300,,,,,,,
Sol-48301,,,,,,,
Sol-48302,,,,,,,
Sol-48303,,,,,,,
Sol-48304,,,,,,,
Sol-48305,,,,,,,
Sol-48306,,,,,,,
Sol-48307,,,,,,,
Sol-48308,,,,,,,
Sol-48309,,,,,,,
Sol-48310,,,,,,,
Sol-48311,,,,,,,
Sol-48312,,,,,,,
Sol-48313,,,,,,,
Sol-48314,,,,,,,
Sol-48315,,,,,,,
Sol-48316,,,,,,,
Sol-48317,,,,,,,
Sol-48318,,,,,,,
Sol-48319,,,,,,,
Sol-48320,,,,,,,
Sol-48321,,,,,,,
Sol-48322,,,,,,,
Sol-48323,,,,,,,
Sol-48324,,,,,,,
Sol-48325,,,,,,,
Sol-48326,,,,,,,
Sol-48327,,,,,,,
Sol-48328,,,,,,,
Sol-48329,,,,,,,
Sol-48330,,,,,,,
Sol-48331,,,,,,,
Sol-48332,,,,,,,
Sol-48333,,,,,,,
Sol-48334,,,,,,,
Sol-48335,,,,,,,
Sol-48336,,,,,,,
Sol-48337,,,,,,,
Sol-48338,,,,,,,
Sol-48339,,,,,,,
Sol-48340,,,,,,,
Sol-48341,,,,,,,
Sol-48342,,,,,,,
Sol-48343,,,,,,,
Sol-48344,,,,,,,
Sol-48345,,,,,,,
Sol-48346,,,,,,,
Sol-48347,,,,,,,
Sol-48348,,,,,,,
Sol-48349,,,,,,,
Sol-48350,,,,,,,
Sol-48351,,,,,,,
Sol-48352,,,,,,,
Sol-48353,,,,,,,
Sol-48354,,,,,,,
Sol-48355,,,,,,,
Sol-48356,,,,,,,
Sol-48357,,,,,,,
Sol-48358,,,,,,,
Sol-48359,,,,,,,
Sol-48360,,,,,,,
Sol-48361,,,,,,,
Sol-48362,,,,,,,
Sol-48363,,,,,,,
Sol-48364,,,,,,,
Sol-48365,,,,,,,
Sol-48366,,,,,,,
Sol-48367,,,,,,,
Sol-48368,,,,,,,
Sol-48369,,,,,,,
Sol-48370,,,,,,,
Sol-48371,,,,,,,
Sol-48372,,,,,,,
Sol-48373,,,,,,,
Sol-48374,,,,,,,
Sol-48375,,,,,,,
Sol-48376,,,,,,,
Sol-48377,,,,,,,
Sol-48378,,,,,,,
Sol-48379,,,,,,,
Sol-48380,,,,,,,
Sol-48381,,,,,,,
Sol-48382,,,,,,,
Sol-48383,,,,,,,
Sol-48384,,,,,,,
Sol-48385,,,,,,,
Sol-48386,,,,,,,
Sol-48387,,,,,,,
Sol-48388,,,,,,,
Sol-48389,,,,,,,
Sol-48390,,,,,,,
Sol-48391,,,,,,,
Sol-48392,,,,,,,
Sol-48393,,,,,,,
Sol-48394,,,,,,,
Sol-48395,,,,,,,
Sol-48396,,,,,,,
Sol-48397,,,,,,,
Sol-48398,,,,,,,
Sol-48399,,,,,,,
Sol-48400,,,,,,,
Sol-48401,,,,,,,
Sol-48402,,,,,,,
Sol-48403,,,,,,,
Sol-48404,,,,,,,
Sol-48405,,,,,,,
Sol-48406,,,,,,,
Sol-48407,,,,,,,
Sol-48408,,,,,,,
Sol-48409,,,,,,,
Sol-48410,,,,,,,
Sol-48411,,,,,,,
Sol-48412,,,,,,,
Sol-48413,,,,,,,
Sol-48414,,,,,,,
Sol-48415,,,,,,,
Sol-48416,,,,,,,
Sol-48417,,,,,,,
Sol-48418,,,,,,,
Sol-48419,,,,,,,
Sol-48420,,,,,,,
Sol-48421,,,,,,,
Sol-48422,,,,,,,
Sol-48423,,,,,,,
Sol-48424,,,,,,,
Sol-48425,,,,,,,
Sol-48426,,,,,,,
Sol-48427,,,,,,,
Sol-48428,,,,,,,
Sol-48429,,,,,,,
Sol-48430,,,,,,,
Sol-48431,,,,,,,
Sol-48432,,,,,,,
Sol-48433,,,,,,,
Sol-48434,,,,,,,
Sol-48435,,,,,,,
Sol-48436,,,,,,,
Sol-48437,,,,,,,
Sol-48438,,,,,,,
Sol-48439,,,,,,,
Sol-48440,,,,,,,
Sol-48441,,,,,,,
Sol-48442,,,,,,,
Sol-48443,,,,,,,
Sol-48444,,,,,,,
Sol-48445,,,,,,,
Sol-48446,,,,,,,
Sol-48447,,,,,,,
Sol-48448,,,,,,,
Sol-48449,,,,,,,
Sol-48450,,,,,,,
Sol-48451,,,,,,,
Sol-48452,,,,,,,
Sol-48453,,,,,,,
Sol-48454,,,,,,,
Sol-48455,,,,,,,
Sol-48456,,,,,,,
Sol-48457,,,,,,,
Sol-48458,,,,,,,
Sol-48459,,,,,,,
Sol-48460,,,,,,,
Sol-48461,,,,,,,
Sol-48462,,,,,,,
Sol-48463,,,,,,,
Sol-48464,,,,,,,
Sol-48465,,,,,,,
Sol-48466,,,,,,,
Sol-48467,,,,,,,
Sol-48468,,,,,,,
Sol-48469,,,,,,,
Sol-48470,,,,,,,
Sol-48471,,,,,,,
Sol-48472,,,,,,,
Sol-48473,,,,,,,
Sol-48474,,,,,,,
Sol-48475,,,,,,,
Sol-48476,,,,,,,
Sol-48477,,,,,,,
Sol-48478,,,,,,,
Sol-48479,,,,,,,
Sol-48480,,,,,,,
Sol-48481,,,,,,,
Sol-48482,,,,,,,
Sol-48483,,,,,,,
Sol-48484,,,,,,,
Sol-48485,,,,,,,
Sol-48486,,,,,,,
Sol-48487,,,,,,,
Sol-48488,,,,,,,
Sol-48489,,,,,,,
Sol-48490,,,,,,,
Sol-48491,,,,,,,
Sol-48492,,,,,,,
Sol-48493,,,,,,,
Sol-48494,,,,,,,
Sol-48495,,,,,,,
Sol-48496,,,,,,,
Sol-48497,,,,,,,
Sol-48498,,,,,,,
Sol-48499,,,,,,,
Sol-48500,,,,,,,
Sol-48501,,,,,,,
Sol-48502,,,,,,,
Sol-48503,,,,,,,
Sol-48504,,,,,,,
Sol-48505,,,,,,,
Sol-48506,,,,,,,
Sol-48507,,,,,,,
Sol-48508,,,,,,,
Sol-48509,,,,,,,
Sol-48510,,,,,,,
Sol-48511,,,,,,,
Sol-48512,,,,,,,
Sol-48513,,,,,,,
Sol-48514,,,,,,,
Sol-48515,,,,,,,
Sol-48516,,,,,,,
Sol-48517,,,,,,,
Sol-48518,,,,,,,
Sol-48519,,,,,,,
Sol-48520,,,,,,,
Sol-48521,,,,,,,
Sol-48522,,,,,,,
Sol-48523,,,,,,,
Sol-48524,,,,,,,
Sol-48525,,,,,,,
Sol-48526,,,,,,,
Sol-48527,,,,,,,
Sol-48528,,,,,,,
Sol-48529,,,,,,,
Sol-48530,,,,,,,
Sol-48531,,,,,,,
Sol-48532,,,,,,,
Sol-48533,,,,,,,
Sol-48534,,,,,,,
Sol-48535,,,,,,,
Sol-48536,,,,,,,
Sol-48537,,,,,,,
Sol-48538,,,,,,,
Sol-48539,,,,,,,
Sol-48540,,,,,,,
Sol-48541,,,,,,,
Sol-48542,,,,,,,
Sol-48543,,,,,,,
Sol-48544,,,,,,,
Sol-48545,,,,,,,
Sol-48546,,,,,,,
Sol-48547,,,,,,,
Sol-48548,,,,,,,
Sol-48549,,,,,,,
Sol-48550,,,,,,,
Sol-48551,,,,,,,
Sol-48552,,,,,,,
Sol-48553,,,,,,,
Sol-48554,,,,,,,
Sol-48555,,,,,,,
Sol-48556,,,,,,,
Sol-48557,,,,,,,
Sol-48558,,,,,,,
Sol-48559,,,,,,,
Sol-48560,,,,,,,
Sol-48561,,,,,,,
Sol-48562,,,,,,,
Sol-48563,,,,,,,
Sol-48564,,,,,,,
Sol-48565,,,,,,,
Sol-48566,,,,,,,
Sol-48567,,,,,,,
Sol-48568,,,,,,,
Sol-48569,,,,,,,
Sol-48570,,,,,,,
Sol-48571,,,,,,,
Sol-48572,,,,,,,
Sol-48573,,,,,,,
Sol-48574,,,,,,,
Sol-48575,,,,,,,
Sol-48576,,,,,,,
Sol-48577,,,,,,,
Sol-48578,,,,,,,
Sol-48579,,,,,,,
Sol-48580,,,,,,,
Sol-48581,,,,,,,
Sol-48582,,,,,,,
Sol-48583,,,,,,,
Sol-48584,,,,,,,
Sol-48585,,,,,,,
Sol-48586,,,,,,,
Sol-48587,,,,,,,
Sol-48588,,,,,,,
Sol-48589,,,,,,,
Sol-48590,,,,,,,
Sol-48591,,,,,,,
Sol-48592,,,,,,,
Sol-48593,,,,,,,
Sol-48594,,,,,,,
Sol-48595,,,,,,,
Sol-48596,,,,,,,
Sol-48597,,,,,,,
Sol-48598,,,,,,,
Sol-48599,,,,,,,
Sol-48600,,,,,,,
Sol-48601,,,,,,,
Sol-48602,,,,,,,
Sol-48603,,,,,,,
Sol-48604,,,,,,,
Sol-48605,,,,,,,
Sol-48606,,,,,,,
Sol-48607,,,,,,,
Sol-48608,,,,,,,
Sol-48609,,,,,,,
Sol-48610,,,,,,,
Sol-48611,,,,,,,
Sol-48612,,,,,,,
Sol-48613,,,,,,,
Sol-48614,,,,,,,
Sol-48615,,,,,,,
Sol-48616,,,,,,,
Sol-48617,,,,,,,
Sol-48618,,,,,,,
Sol-48619,,,,,,,
Sol-48620,,,,,,,
Sol-48621,,,,,,,
Sol-48622,,,,,,,
Sol-48623,,,,,,,
Sol-48624,,,,,,,
Sol-48625,,,,,,,
Sol-48626,,,,,,,
Sol-48627,,,,,,,
Sol-48628,,,,,,,
Sol-48629,,,,,,,
Sol-48630,,,,,,,
Sol-48631,,,,,,,
Sol-48632,,,,,,,
Sol-48633,,,,,,,
Sol-48634,,,,,,,
Sol-48635,,,,,,,
Sol-48636,,,,,,,
Sol-48637,,,,,,,
Sol-48638,,,,,,,
Sol-48639,,,,,,,
Sol-48640,,,,,,,
Sol-48641,,,,,,,
Sol-48642,,,,,,,
Sol-48643,,,,,,,
Sol-48644,,,,,,,
Sol-48645,,,,,,,
Sol-48646,,,,,,,
Sol-48647,,,,,,,
Sol-48648,,,,,,,
Sol-48649,,,,,,,
Sol-48650,,,,,,,
Sol-48651,,,,,,,
Sol-48652,,,,,,,
Sol-48653,,,,,,,
Sol-48654,,,,,,,
Sol-48655,,,,,,,
Sol-48656,,,,,,,
Sol-48657,,,,,,,
Sol-48658,,,,,,,
Sol-48659,,,,,,,
Sol-48660,,,,,,,
Sol-48661,,,,,,,
Sol-48662,,,,,,,
Sol-48663,,,,,,,
Sol-48664,,,,,,,
Sol-48665,,,,,,,
Sol-48666,,,,,,,
Sol-48667,,,,,,,
Sol-48668,,,,,,,
Sol-48669,,,,,,,
Sol-48670,,,,,,,
Sol-48671,,,,,,,
Sol-48672,,,,,,,
Sol-48673,,,,,,,
Sol-48674,,,,,,,
Sol-48675,,,,,,,
Sol-48676,,,,,,,
Sol-48677,,,,,,,
Sol-48678,,,,,,,
Sol-48679,,,,,,,
Sol-48680,,,,,,,
Sol-48681,,,,,,,
Sol-48682,,,,,,,
Sol-48683,,,,,,,
Sol-48684,,,,,,,
Sol-48685,,,,,,,
Sol-48686,,,,,,,
Sol-48687,,,,,,,
Sol-48688,,,,,,,
Sol-48689,,,,,,,
Sol-48690,,,,,,,
Sol-48691,,,,,,,
Sol-48692,,,,,,,
Sol-48693,,,,,,,
Sol-48694,,,,,,,
Sol-48695,,,,,,,
Sol-48696,,,,,,,
Sol-48697,,,,,,,
Sol-48698,,,,,,,
Sol-48699,,,,,,,
Sol-48700,,,,,,,
Sol-48701,,,,,,,
Sol-48702,,,,,,,
Sol-48703,,,,,,,
Sol-48704,,,,,,,
Sol-48705,,,,,,,
Sol-48706,,,,,,,
Sol-48707,,,,,,,
Sol-48708,,,,,,,
Sol-48709,,,,,,,
Sol-48710,,,,,,,
Sol-48711,,,,,,,
Sol-48712,,,,,,,
Sol-48713,,,,,,,
Sol-48714,,,,,,,
Sol-48715,,,,,,,
Sol-48716,,,,,,,
Sol-48717,,,,,,,
Sol-48718,,,,,,,
Sol-48719,,,,,,,
Sol-48720,,,,,,,
Sol-48721,,,,,,,
Sol-48722,,,,,,,
Sol-48723,,,,,,,
Sol-48724,,,,,,,
Sol-48725,,,,,,,
Sol-48726,,,,,,,
Sol-48727,,,,,,,
Sol-48728,,,,,,,
Sol-48729,,,,,,,
Sol-48730,,,,,,,
Sol-48731,,,,,,,
Sol-48732,,,,,,,
Sol-48733,,,,,,,
Sol-48734,,,,,,,
Sol-48735,,,,,,,
Sol-48736,,,,,,,
Sol-48737,,,,,,,
Sol-48738,,,,,,,
Sol-48739,,,,,,,
Sol-48740,,,,,,,
Sol-48741,,,,,,,
Sol-48742,,,,,,,
Sol-48743,,,,,,,
Sol-48744,,,,,,,
Sol-48745,,,,,,,
Sol-48746,,,,,,,
Sol-48747,,,,,,,
Sol-48748,,,,,,,
Sol-48749,,,,,,,
Sol-48750,,,,,,,
Sol-48751,,,,,,,
Sol-48752,,,,,,,
Sol-48753,,,,,,,
Sol-48754,,,,,,,
Sol-48755,,,,,,,
Sol-48756,,,,,,,
Sol-48757,,,,,,,
Sol-48758,,,,,,,
Sol-48759,,,,,,,
Sol-48760,,,,,,,
Sol-48761,,,,,,,
Sol-48762,,,,,,,
Sol-48763,,,,,,,
Sol-48764,,,,,,,
Sol-48765,,,,,,,
Sol-48766,,,,,,,
Sol-48767,,,,,,,
Sol-48768,,,,,,,
Sol-48769,,,,,,,
Sol-48770,,,,,,,
Sol-48771,,,,,,,
Sol-48772,,,,,,,
Sol-48773,,,,,,,
Sol-48774,,,,,,,
Sol-48775,,,,,,,
Sol-48776,,,,,,,
Sol-48777,,,,,,,
Sol-48778,,,,,,,
Sol-48779,,,,,,,
Sol-48780,,,,,,,
Sol-48781,,,,,,,
Sol-48782,,,,,,,
Sol-48783,,,,,,,
Sol-48784,,,,,,,
Sol-48785,,,,,,,
Sol-48786,,,,,,,
Sol-48787,,,,,,,
Sol-48788,,,,,,,
Sol-48789,,,,,,,
Sol-48790,,,,,,,
Sol-48791,,,,,,,
Sol-48792,,,,,,,
Sol-48793,,,,,,,
Sol-48794,,,,,,,
Sol-48795,,,,,,,
Sol-48796,,,,,,,
Sol-48797,,,,,,,
Sol-48798,,,,,,,
Sol-48799,,,,,,,
Sol-48800,,,,,,,
Sol-48801,,,,,,,
Sol-48802,,,,,,,
Sol-48803,,,,,,,
Sol-48804,,,,,,,
Sol-48805,,,,,,,
Sol-48806,,,,,,,
Sol-48807,,,,,,,
Sol-48808,,,,,,,
Sol-48809,,,,,,,
Sol-48810,,,,,,,
Sol-48811,,,,,,,
Sol-48812,,,,,,,
Sol-48813,,,,,,,
Sol-48814,,,,,,,
Sol-48815,,,,,,,
Sol-48816,,,,,,,
Sol-48817,,,,,,,
Sol-48818,,,,,,,
Sol-48819,,,,,,,
Sol-48820,,,,,,,
Sol-48821,,,,,,,
Sol-48822,,,,,,,
Sol-48823,,,,,,,
Sol-48824,,,,,,,
Sol-48825,,,,,,,
Sol-48826,,,,,,,
Sol-48827,,,,,,,
Sol-48828,,,,,,,
Sol-48829,,,,,,,
Sol-48830,,,,,,,
Sol-48831,,,,,,,
Sol-48832,,,,,,,
Sol-48833,,,,,,,
Sol-48834,,,,,,,
Sol-48835,,,,,,,
Sol-48836,,,,,,,
Sol-48837,,,,,,,
Sol-48838,,,,,,,
Sol-48839,,,,,,,
Sol-48840,,,,,,,
Sol-48841,,,,,,,
Sol-48842,,,,,,,
Sol-48843,,,,,,,
Sol-48844,,,,,,,
Sol-48845,,,,,,,
Sol-48846,,,,,,,
Sol-48847,,,,,,,
Sol-48848,,,,,,,
Sol-48849,,,,,,,
Sol-48850,,,,,,,
Sol-48851,,,,,,,
Sol-48852,,,,,,,
Sol-48853,,,,,,,
Sol-48854,,,,,,,
Sol-48855,,,,,,,
Sol-48856,,,,,,,
Sol-48857,,,,,,,
Sol-48858,,,,,,,
Sol-48859,,,,,,,
Sol-48860,,,,,,,
Sol-48861,,,,,,,
Sol-48862,,,,,,,
Sol-48863,,,,,,,
Sol-48864,,,,,,,
Sol-48865,,,,,,,
Sol-48866,,,,,,,
Sol-48867,,,,,,,
Sol-48868,,,,,,,
Sol-48869,,,,,,,
Sol-48870,,,,,,,
Sol-48871,,,,,,,
Sol-48872,,,,,,,
Sol-48873,,,,,,,
Sol-48874,,,,,,,
Sol-48875,,,,,,,
Sol-48876,,,,,,,
Sol-48877,,,,,,,
Sol-48878,,,,,,,
Sol-48879,,,,,,,
Sol-48880,,,,,,,
Sol-48881,,,,,,,
Sol-48882,,,,,,,
Sol-48883,,,,,,,
Sol-48884,,,,,,,
Sol-48885,,,,,,,
Sol-48886,,,,,,,
Sol-48887,,,,,,,
Sol-48888,,,,,,,
Sol-48889,,,,,,,
Sol-48890,,,,,,,
Sol-48891,,,,,,,
Sol-48892,,,,,,,
Sol-48893,,,,,,,
Sol-48894,,,,,,,
Sol-48895,,,,,,,
Sol-48896,,,,,,,
Sol-48897,,,,,,,
Sol-48898,,,,,,,
Sol-48899,,,,,,,
Sol-48900,,,,,,,
Sol-48901,,,,,,,
Sol-48902,,,,,,,
Sol-48903,,,,,,,
Sol-48904,,,,,,,
Sol-48905,,,,,,,
Sol-48906,,,,,,,
Sol-48907,,,,,,,
Sol-48908,,,,,,,
Sol-48909,,,,,,,
Sol-48910,,,,,,,
Sol-48911,,,,,,,
Sol-48912,,,,,,,
Sol-48913,,,,,,,
Sol-48914,,,,,,,
Sol-48915,,,,,,,
Sol-48916,,,,,,,
Sol-48917,,,,,,,
Sol-48918,,,,,,,
Sol-48919,,,,,,,
Sol-48920,,,,,,,
Sol-48921,,,,,,,
Sol-48922,,,,,,,
Sol-48923,,,,,,,
Sol-48924,,,,,,,
Sol-48925,,,,,,,
Sol-48926,,,,,,,
Sol-48927,,,,,,,
Sol-48928,,,,,,,
Sol-48929,,,,,,,
Sol-48930,,,,,,,
Sol-48931,,,,,,,
Sol-48932,,,,,,,
Sol-48933,,,,,,,
Sol-48934,,,,,,,
Sol-48935,,,,,,,
Sol-48936,,,,,,,
Sol-48937,,,,,,,
Sol-48938,,,,,,,
Sol-48939,,,,,,,
Sol-48940,,,,,,,
Sol-48941,,,,,,,
Sol-48942,,,,,,,
Sol-48943,,,,,,,
Sol-48944,,,,,,,
Sol-48945,,,,,,,
Sol-48946,,,,,,,
Sol-48947,,,,,,,
Sol-48948,,,,,,,
Sol-48949,,,,,,,
Sol-48950,,,,,,,
Sol-48951,,,,,,,
Sol-48952,,,,,,,
Sol-48953,,,,,,,
Sol-48954,,,,,,,
Sol-48955,,,,,,,
Sol-48956,,,,,,,
Sol-48957,,,,,,,
Sol-48958,,,,,,,
Sol-48959,,,,,,,
Sol-48960,,,,,,,
Sol-48961,,,,,,,
Sol-48962,,,,,,,
Sol-48963,,,,,,,
Sol-48964,,,,,,,
Sol-48965,,,,,,,
Sol-48966,,,,,,,
Sol-48967,,,,,,,
Sol-48968,,,,,,,
Sol-48969,,,,,,,
Sol-48970,,,,,,,
Sol-48971,,,,,,,
Sol-48972,,,,,,,
Sol-48973,,,,,,,
Sol-48974,,,,,,,
Sol-48975,,,,,,,
Sol-48976,,,,,,,
Sol-48977,,,,,,,
Sol-48978,,,,,,,
Sol-48979,,,,,,,
Sol-48980,,,,,,,
Sol-48981,,,,,,,
Sol-48982,,,,,,,
Sol-48983,,,,,,,
Sol-48984,,,,,,,
Sol-48985,,,,,,,
Sol-48986,,,,,,,
Sol-48987,,,,,,,
Sol-48988,,,,,,,
Sol-48989,,,,,,,
Sol-48990,,,,,,,
Sol-48991,,,,,,,
Sol-48992,,,,,,,
Sol-48993,,,,,,,
Sol-48994,,,,,,,
Sol-48995,,,,,,,
Sol-48996,,,,,,,
Sol-48997,,,,,,,
Sol-48998,,,,,,,
Sol-48999,,,,,,,
Sol-49000,,,,,,,
Sol-49001,,,,,,,
Sol-49002,,,,,,,
Sol-49003,,,,,,,
Sol-49004,,,,,,,
Sol-49005,,,,,,,
Sol-49006,,,,,,,
Sol-49007,,,,,,,
Sol-49008,,,,,,,
Sol-49009,,,,,,,
Sol-49010,,,,,,,
Sol-49011,,,,,,,
Sol-49012,,,,,,,
Sol-49013,,,,,,,
Sol-49014,,,,,,,
Sol-49015,,,,,,,
Sol-49016,,,,,,,
Sol-49017,,,,,,,
Sol-49018,,,,,,,
Sol-49019,,,,,,,
Sol-49020,,,,,,,
Sol-49021,,,,,,,
Sol-49022,,,,,,,
Sol-49023,,,,,,,
Sol-49024,,,,,,,
Sol-49025,,,,,,,
Sol-49026,,,,,,,
Sol-49027,,,,,,,
Sol-49028,,,,,,,
Sol-49029,,,,,,,
Sol-49030,,,,,,,
Sol-49031,,,,,,,
Sol-49032,,,,,,,
Sol-49033,,,,,,,
Sol-49034,,,,,,,
Sol-49035,,,,,,,
Sol-49036,,,,,,,
Sol-49037,,,,,,,
Sol-49038,,,,,,,
Sol-49039,,,,,,,
Sol-49040,,,,,,,
Sol-49041,,,,,,,
Sol-49042,,,,,,,
Sol-49043,,,,,,,
Sol-49044,,,,,,,
Sol-49045,,,,,,,
Sol-49046,,,,,,,
Sol-49047,,,,,,,
Sol-49048,,,,,,,
Sol-49049,,,,,,,
Sol-49050,,,,,,,
Sol-49051,,,,,,,
Sol-49052,,,,,,,
Sol-49053,,,,,,,
Sol-49054,,,,,,,
Sol-49055,,,,,,,
Sol-49056,,,,,,,
Sol-49057,,,,,,,
Sol-49058,,,,,,,
Sol-49059,,,,,,,
Sol-49060,,,,,,,
Sol-49061,,,,,,,
Sol-49062,,,,,,,
Sol-49063,,,,,,,
Sol-49064,,,,,,,
Sol-49065,,,,,,,
Sol-49066,,,,,,,
Sol-49067,,,,,,,
Sol-49068,,,,,,,
Sol-49069,,,,,,,
Sol-49070,,,,,,,
Sol-49071,,,,,,,
Sol-49072,,,,,,,
Sol-49073,,,,,,,
Sol-49074,,,,,,,
Sol-49075,,,,,,,
Sol-49076,,,,,,,
Sol-49077,,,,,,,
Sol-49078,,,,,,,
Sol-49079,,,,,,,
Sol-49080,,,,,,,
Sol-49081,,,,,,,
Sol-49082,,,,,,,
Sol-49083,,,,,,,
Sol-49084,,,,,,,
Sol-49085,,,,,,,
Sol-49086,,,,,,,
Sol-49087,,,,,,,
Sol-49088,,,,,,,
Sol-49089,,,,,,,
Sol-49090,,,,,,,
Sol-49091,,,,,,,
Sol-49092,,,,,,,
Sol-49093,,,,,,,
Sol-49094,,,,,,,
Sol-49095,,,,,,,
Sol-49096,,,,,,,
Sol-49097,,,,,,,
Sol-49098,,,,,,,
Sol-49099,,,,,,,
Sol-49100,,,,,,,
Sol-49101,,,,,,,
Sol-49102,,,,,,,
Sol-49103,,,,,,,
Sol-49104,,,,,,,
Sol-49105,,,,,,,
Sol-49106,,,,,,,
Sol-49107,,,,,,,
Sol-49108,,,,,,,
Sol-49109,,,,,,,
Sol-49110,,,,,,,
Sol-49111,,,,,,,
Sol-49112,,,,,,,
Sol-49113,,,,,,,
Sol-49114,,,,,,,
Sol-49115,,,,,,,
Sol-49116,,,,,,,
Sol-49117,,,,,,,
Sol-49118,,,,,,,
Sol-49119,,,,,,,
Sol-49120,,,,,,,
Sol-49121,,,,,,,
Sol-49122,,,,,,,
Sol-49123,,,,,,,
Sol-49124,,,,,,,
Sol-49125,,,,,,,
Sol-49126,,,,,,,
Sol-49127,,,,,,,
Sol-49128,,,,,,,
Sol-49129,,,,,,,
Sol-49130,,,,,,,
Sol-49131,,,,,,,
Sol-49132,,,,,,,
Sol-49133,,,,,,,
Sol-49134,,,,,,,
Sol-49135,,,,,,,
Sol-49136,,,,,,,
Sol-49137,,,,,,,
Sol-49138,,,,,,,
Sol-49139,,,,,,,
Sol-49140,,,,,,,
Sol-49141,,,,,,,
Sol-49142,,,,,,,
Sol-49143,,,,,,,
Sol-49144,,,,,,,
Sol-49145,,,,,,,
Sol-49146,,,,,,,
Sol-49147,,,,,,,
Sol-49148,,,,,,,
Sol-49149,,,,,,,
Sol-49150,,,,,,,
Sol-49151,,,,,,,
Sol-49152,,,,,,,
Sol-49153,,,,,,,
Sol-49154,,,,,,,
Sol-49155,,,,,,,
Sol-49156,,,,,,,
Sol-49157,,,,,,,
Sol-49158,,,,,,,
Sol-49159,,,,,,,
Sol-49160,,,,,,,
Sol-49161,,,,,,,
Sol-49162,,,,,,,
Sol-49163,,,,,,,
Sol-49164,,,,,,,
Sol-49165,,,,,,,
Sol-49166,,,,,,,
Sol-49167,,,,,,,
Sol-49168,,,,,,,
Sol-49169,,,,,,,
Sol-49170,,,,,,,
Sol-49171,,,,,,,
Sol-49172,,,,,,,
Sol-49173,,,,,,,
Sol-49174,,,,,,,
Sol-49175,,,,,,,
Sol-49176,,,,,,,
Sol-49177,,,,,,,
Sol-49178,,,,,,,
Sol-49179,,,,,,,
Sol-49180,,,,,,,
Sol-49181,,,,,,,
Sol-49182,,,,,,,
Sol-49183,,,,,,,
Sol-49184,,,,,,,
Sol-49185,,,,,,,
Sol-49186,,,,,,,
Sol-49187,,,,,,,
Sol-49188,,,,,,,
Sol-49189,,,,,,,
Sol-49190,,,,,,,
Sol-49191,,,,,,,
Sol-49192,,,,,,,
Sol-49193,,,,,,,
Sol-49194,,,,,,,
Sol-49195,,,,,,,
Sol-49196,,,,,,,
Sol-49197,,,,,,,
Sol-49198,,,,,,,
Sol-49199,,,,,,,
Sol-49200,,,,,,,
Sol-49201,,,,,,,
Sol-49202,,,,,,,
Sol-49203,,,,,,,
Sol-49204,,,,,,,
Sol-49205,,,,,,,
Sol-49206,,,,,,,
Sol-49207,,,,,,,
Sol-49208,,,,,,,
Sol-49209,,,,,,,
Sol-49210,,,,,,,
Sol-49211,,,,,,,
Sol-49212,,,,,,,
Sol-49213,,,,,,,
Sol-49214,,,,,,,
Sol-49215,,,,,,,
Sol-49216,,,,,,,
Sol-49217,,,,,,,
Sol-49218,,,,,,,
Sol-49219,,,,,,,
Sol-49220,,,,,,,
Sol-49221,,,,,,,
Sol-49222,,,,,,,
Sol-49223,,,,,,,
Sol-49224,,,,,,,
Sol-49225,,,,,,,
Sol-49226,,,,,,,
Sol-49227,,,,,,,
Sol-49228,,,,,,,
Sol-49229,,,,,,,
Sol-49230,,,,,,,
Sol-49231,,,,,,,
Sol-49232,,,,,,,
Sol-49233,,,,,,,
Sol-49234,,,,,,,
Sol-49235,,,,,,,
Sol-49236,,,,,,,
Sol-49237,,,,,,,
Sol-49238,,,,,,,
Sol-49239,,,,,,,
Sol-49240,,,,,,,
Sol-49241,,,,,,,
Sol-49242,,,,,,,
Sol-49243,,,,,,,
Sol-49244,,,,,,,
Sol-49245,,,,,,,
Sol-49246,,,,,,,
Sol-49247,,,,,,,
Sol-49248,,,,,,,
Sol-49249,,,,,,,
Sol-49250,,,,,,,
Sol-49251,,,,,,,
Sol-49252,,,,,,,
Sol-49253,,,,,,,
Sol-49254,,,,,,,
Sol-49255,,,,,,,
Sol-49256,,,,,,,
Sol-49257,,,,,,,
Sol-49258,,,,,,,
Sol-49259,,,,,,,
Sol-49260,,,,,,,
Sol-49261,,,,,,,
Sol-49262,,,,,,,
Sol-49263,,,,,,,
Sol-49264,,,,,,,
Sol-49265,,,,,,,
Sol-49266,,,,,,,
Sol-49267,,,,,,,
Sol-49268,,,,,,,
Sol-49269,,,,,,,
Sol-49270,,,,,,,
Sol-49271,,,,,,,
Sol-49272,,,,,,,
Sol-49273,,,,,,,
Sol-49274,,,,,,,
Sol-49275,,,,,,,
Sol-49276,,,,,,,
Sol-49277,,,,,,,
Sol-49278,,,,,,,
Sol-49279,,,,,,,
Sol-49280,,,,,,,
Sol-49281,,,,,,,
Sol-49282,,,,,,,
Sol-49283,,,,,,,
Sol-49284,,,,,,,
Sol-49285,,,,,,,
Sol-49286,,,,,,,
Sol-49287,,,,,,,
Sol-49288,,,,,,,
Sol-49289,,,,,,,
Sol-49290,,,,,,,
Sol-49291,,,,,,,
Sol-49292,,,,,,,
Sol-49293,,,,,,,
Sol-49294,,,,,,,
Sol-49295,,,,,,,
Sol-49296,,,,,,,
Sol-49297,,,,,,,
Sol-49298,,,,,,,
Sol-49299,,,,,,,
Sol-49300,,,,,,,
Sol-49301,,,,,,,
Sol-49302,,,,,,,
Sol-49303,,,,,,,
Sol-49304,,,,,,,
Sol-49305,,,,,,,
Sol-49306,,,,,,,
Sol-49307,,,,,,,
Sol-49308,,,,,,,
Sol-49309,,,,,,,
Sol-49310,,,,,,,
Sol-49311,,,,,,,
Sol-49312,,,,,,,
Sol-49313,,,,,,,
Sol-49314,,,,,,,
Sol-49315,,,,,,,
Sol-49316,,,,,,,
Sol-49317,,,,,,,
Sol-49318,,,,,,,
Sol-49319,,,,,,,
Sol-49320,,,,,,,
Sol-49321,,,,,,,
Sol-49322,,,,,,,
Sol-49323,,,,,,,
Sol-49324,,,,,,,
Sol-49325,,,,,,,
Sol-49326,,,,,,,
Sol-49327,,,,,,,
Sol-49328,,,,,,,
Sol-49329,,,,,,,
Sol-49330,,,,,,,
Sol-49331,,,,,,,
Sol-49332,,,,,,,
Sol-49333,,,,,,,
Sol-49334,,,,,,,
Sol-49335,,,,,,,
Sol-49336,,,,,,,
Sol-49337,,,,,,,
Sol-49338,,,,,,,
Sol-49339,,,,,,,
Sol-49340,,,,,,,
Sol-49341,,,,,,,
Sol-49342,,,,,,,
Sol-49343,,,,,,,
Sol-49344,,,,,,,
Sol-49345,,,,,,,
Sol-49346,,,,,,,
Sol-49347,,,,,,,
Sol-49348,,,,,,,
Sol-49349,,,,,,,
Sol-49350,,,,,,,
Sol-49351,,,,,,,
Sol-49352,,,,,,,
Sol-49353,,,,,,,
Sol-49354,,,,,,,
Sol-49355,,,,,,,
Sol-49356,,,,,,,
Sol-49357,,,,,,,
Sol-49358,,,,,,,
Sol-49359,,,,,,,
Sol-49360,,,,,,,
Sol-49361,,,,,,,
Sol-49362,,,,,,,
Sol-49363,,,,,,,
Sol-49364,,,,,,,
Sol-49365,,,,,,,
Sol-49366,,,,,,,
Sol-49367,,,,,,,
Sol-49368,,,,,,,
Sol-49369,,,,,,,
Sol-49370,,,,,,,
Sol-49371,,,,,,,
Sol-49372,,,,,,,
Sol-49373,,,,,,,
Sol-49374,,,,,,,
Sol-49375,,,,,,,
Sol-49376,,,,,,,
Sol-49377,,,,,,,
Sol-49378,,,,,,,
Sol-49379,,,,,,,
Sol-49380,,,,,,,
Sol-49381,,,,,,,
Sol-49382,,,,,,,
Sol-49383,,,,,,,
Sol-49384,,,,,,,
Sol-49385,,,,,,,
Sol-49386,,,,,,,
Sol-49387,,,,,,,
Sol-49388,,,,,,,
Sol-49389,,,,,,,
Sol-49390,,,,,,,
Sol-49391,,,,,,,
Sol-49392,,,,,,,
Sol-49393,,,,,,,
Sol-49394,,,,,,,
Sol-49395,,,,,,,
Sol-49396,,,,,,,
Sol-49397,,,,,,,
Sol-49398,,,,,,,
Sol-49399,,,,,,,
Sol-49400,,,,,,,
Sol-49401,,,,,,,
Sol-49402,,,,,,,
Sol-49403,,,,,,,
Sol-49404,,,,,,,
Sol-49405,,,,,,,
Sol-49406,,,,,,,
Sol-49407,,,,,,,
Sol-49408,,,,,,,
Sol-49409,,,,,,,
Sol-49410,,,,,,,
Sol-49411,,,,,,,
Sol-49412,,,,,,,
Sol-49413,,,,,,,
Sol-49414,,,,,,,
Sol-49415,,,,,,,
Sol-49416,,,,,,,
Sol-49417,,,,,,,
Sol-49418,,,,,,,
Sol-49419,,,,,,,
Sol-49420,,,,,,,
Sol-49421,,,,,,,
Sol-49422,,,,,,,
Sol-49423,,,,,,,
Sol-49424,,,,,,,
Sol-49425,,,,,,,
Sol-49426,,,,,,,
Sol-49427,,,,,,,
Sol-49428,,,,,,,
Sol-49429,,,,,,,
Sol-49430,,,,,,,
Sol-49431,,,,,,,
Sol-49432,,,,,,,
Sol-49433,,,,,,,
Sol-49434,,,,,,,
Sol-49435,,,,,,,
Sol-49436,,,,,,,
Sol-49437,,,,,,,
Sol-49438,,,,,,,
Sol-49439,,,,,,,
Sol-49440,,,,,,,
Sol-49441,,,,,,,
Sol-49442,,,,,,,
Sol-49443,,,,,,,
Sol-49444,,,,,,,
Sol-49445,,,,,,,
Sol-49446,,,,,,,
Sol-49447,,,,,,,
Sol-49448,,,,,,,
Sol-49449,,,,,,,
Sol-49450,,,,,,,
Sol-49451,,,,,,,
Sol-49452,,,,,,,
Sol-49453,,,,,,,
Sol-49454,,,,,,,
Sol-49455,,,,,,,
Sol-49456,,,,,,,
Sol-49457,,,,,,,
Sol-49458,,,,,,,
Sol-49459,,,,,,,
Sol-49460,,,,,,,
Sol-49461,,,,,,,
Sol-49462,,,,,,,
Sol-49463,,,,,,,
Sol-49464,,,,,,,
Sol-49465,,,,,,,
Sol-49466,,,,,,,
Sol-49467,,,,,,,
Sol-49468,,,,,,,
Sol-49469,,,,,,,
Sol-49470,,,,,,,
Sol-49471,,,,,,,
Sol-49472,,,,,,,
Sol-49473,,,,,,,
Sol-49474,,,,,,,
Sol-49475,,,,,,,
Sol-49476,,,,,,,
Sol-49477,,,,,,,
Sol-49478,,,,,,,
Sol-49479,,,,,,,
Sol-49480,,,,,,,
Sol-49481,,,,,,,
Sol-49482,,,,,,,
Sol-49483,,,,,,,
Sol-49484,,,,,,,
Sol-49485,,,,,,,
Sol-49486,,,,,,,
Sol-49487,,,,,,,
Sol-49488,,,,,,,
Sol-49489,,,,,,,
Sol-49490,,,,,,,
Sol-49491,,,,,,,
Sol-49492,,,,,,,
Sol-49493,,,,,,,
Sol-49494,,,,,,,
Sol-49495,,,,,,,
Sol-49496,,,,,,,
Sol-49497,,,,,,,
Sol-49498,,,,,,,
Sol-49499,,,,,,,
Sol-49500,,,,,,,
Sol-49501,,,,,,,
Sol-49502,,,,,,,
Sol-49503,,,,,,,
Sol-49504,,,,,,,
Sol-49505,,,,,,,
Sol-49506,,,,,,,
Sol-49507,,,,,,,
Sol-49508,,,,,,,
Sol-49509,,,,,,,
Sol-49510,,,,,,,
Sol-49511,,,,,,,
Sol-49512,,,,,,,
Sol-49513,,,,,,,
Sol-49514,,,,,,,
Sol-49515,,,,,,,
Sol-49516,,,,,,,
Sol-49517,,,,,,,
Sol-49518,,,,,,,
Sol-49519,,,,,,,
Sol-49520,,,,,,,
Sol-49521,,,,,,,
Sol-49522,,,,,,,
Sol-49523,,,,,,,
Sol-49524,,,,,,,
Sol-49525,,,,,,,
Sol-49526,,,,,,,
Sol-49527,,,,,,,
Sol-49528,,,,,,,
Sol-49529,,,,,,,
Sol-49530,,,,,,,
Sol-49531,,,,,,,
Sol-49532,,,,,,,
Sol-49533,,,,,,,
Sol-49534,,,,,,,
Sol-49535,,,,,,,
Sol-49536,,,,,,,
Sol-49537,,,,,,,
Sol-49538,,,,,,,
Sol-49539,,,,,,,
Sol-49540,,,,,,,
Sol-49541,,,,,,,
Sol-49542,,,,,,,
Sol-49543,,,,,,,
Sol-49544,,,,,,,
Sol-49545,,,,,,,
Sol-49546,,,,,,,
Sol-49547,,,,,,,
Sol-49548,,,,,,,
Sol-49549,,,,,,,
Sol-49550,,,,,,,
Sol-49551,,,,,,,
Sol-49552,,,,,,,
Sol-49553,,,,,,,
Sol-49554,,,,,,,
Sol-49555,,,,,,,
Sol-49556,,,,,,,
Sol-49557,,,,,,,
Sol-49558,,,,,,,
Sol-49559,,,,,,,
Sol-49560,,,,,,,
Sol-49561,,,,,,,
Sol-49562,,,,,,,
Sol-49563,,,,,,,
Sol-49564,,,,,,,
Sol-49565,,,,,,,
Sol-49566,,,,,,,
Sol-49567,,,,,,,
Sol-49568,,,,,,,
Sol-49569,,,,,,,
Sol-49570,,,,,,,
Sol-49571,,,,,,,
Sol-49572,,,,,,,
Sol-49573,,,,,,,
Sol-49574,,,,,,,
Sol-49575,,,,,,,
Sol-49576,,,,,,,
Sol-49577,,,,,,,
Sol-49578,,,,,,,
Sol-49579,,,,,,,
Sol-49580,,,,,,,
Sol-49581,,,,,,,
Sol-49582,,,,,,,
Sol-49583,,,,,,,
Sol-49584,,,,,,,
Sol-49585,,,,,,,
Sol-49586,,,,,,,
Sol-49587,,,,,,,
Sol-49588,,,,,,,
Sol-49589,,,,,,,
Sol-49590,,,,,,,
Sol-49591,,,,,,,
Sol-49592,,,,,,,
Sol-49593,,,,,,,
Sol-49594,,,,,,,
Sol-49595,,,,,,,
Sol-49596,,,,,,,
Sol-49597,,,,,,,
Sol-49598,,,,,,,
Sol-49599,,,,,,,
Sol-49600,,,,,,,
Sol-49601,,,,,,,
Sol-49602,,,,,,,
Sol-49603,,,,,,,
Sol-49604,,,,,,,
Sol-49605,,,,,,,
Sol-49606,,,,,,,
Sol-49607,,,,,,,
Sol-49608,,,,,,,
Sol-49609,,,,,,,
Sol-49610,,,,,,,
Sol-49611,,,,,,,
Sol-49612,,,,,,,
Sol-49613,,,,,,,
Sol-49614,,,,,,,
Sol-49615,,,,,,,
Sol-49616,,,,,,,
Sol-49617,,,,,,,
Sol-49618,,,,,,,
Sol-49619,,,,,,,
Sol-49620,,,,,,,
Sol-49621,,,,,,,
Sol-49622,,,,,,,
Sol-49623,,,,,,,
Sol-49624,,,,,,,
Sol-49625,,,,,,,
Sol-49626,,,,,,,
Sol-49627,,,,,,,
Sol-49628,,,,,,,
Sol-49629,,,,,,,
Sol-49630,,,,,,,
Sol-49631,,,,,,,
Sol-49632,,,,,,,
Sol-49633,,,,,,,
Sol-49634,,,,,,,
Sol-49635,,,,,,,
Sol-49636,,,,,,,
Sol-49637,,,,,,,
Sol-49638,,,,,,,
Sol-49639,,,,,,,
Sol-49640,,,,,,,
Sol-49641,,,,,,,
Sol-49642,,,,,,,
Sol-49643,,,,,,,
Sol-49644,,,,,,,
Sol-49645,,,,,,,
Sol-49646,,,,,,,
Sol-49647,,,,,,,
Sol-49648,,,,,,,
Sol-49649,,,,,,,
Sol-49650,,,,,,,
Sol-49651,,,,,,,
Sol-49652,,,,,,,
Sol-49653,,,,,,,
Sol-49654,,,,,,,
Sol-49655,,,,,,,
Sol-49656,,,,,,,
Sol-49657,,,,,,,
Sol-49658,,,,,,,
Sol-49659,,,,,,,
Sol-49660,,,,,,,
Sol-49661,,,,,,,
Sol-49662,,,,,,,
Sol-49663,,,,,,,
Sol-49664,,,,,,,
Sol-49665,,,,,,,
Sol-49666,,,,,,,
Sol-49667,,,,,,,
Sol-49668,,,,,,,
Sol-49669,,,,,,,
Sol-49670,,,,,,,
Sol-49671,,,,,,,
Sol-49672,,,,,,,
Sol-49673,,,,,,,
Sol-49674,,,,,,,
Sol-49675,,,,,,,
Sol-49676,,,,,,,
Sol-49677,,,,,,,
Sol-49678,,,,,,,
Sol-49679,,,,,,,
Sol-49680,,,,,,,
Sol-49681,,,,,,,
Sol-49682,,,,,,,
Sol-49683,,,,,,,
Sol-49684,,,,,,,
Sol-49685,,,,,,,
Sol-49686,,,,,,,
Sol-49687,,,,,,,
Sol-49688,,,,,,,
Sol-49689,,,,,,,
Sol-49690,,,,,,,
Sol-49691,,,,,,,
Sol-49692,,,,,,,
Sol-49693,,,,,,,
Sol-49694,,,,,,,
Sol-49695,,,,,,,
Sol-49696,,,,,,,
Sol-49697,,,,,,,
Sol-49698,,,,,,,
Sol-49699,,,,,,,
Sol-49700,,,,,,,
Sol-49701,,,,,,,
Sol-49702,,,,,,,
Sol-49703,,,,,,,
Sol-49704,,,,,,,
Sol-49705,,,,,,,
Sol-49706,,,,,,,
Sol-49707,,,,,,,
Sol-49708,,,,,,,
Sol-49709,,,,,,,
Sol-49710,,,,,,,
Sol-49711,,,,,,,
Sol-49712,,,,,,,
Sol-49713,,,,,,,
Sol-49714,,,,,,,
Sol-49715,,,,,,,
Sol-49716,,,,,,,
Sol-49717,,,,,,,
Sol-49718,,,,,,,
Sol-49719,,,,,,,
Sol-49720,,,,,,,
Sol-49721,,,,,,,
Sol-49722,,,,,,,
Sol-49723,,,,,,,
Sol-49724,,,,,,,
Sol-49725,,,,,,,
Sol-49726,,,,,,,
Sol-49727,,,,,,,
Sol-49728,,,,,,,
Sol-49729,,,,,,,
Sol-49730,,,,,,,
Sol-49731,,,,,,,
Sol-49732,,,,,,,
Sol-49733,,,,,,,
Sol-49734,,,,,,,
Sol-49735,,,,,,,
Sol-49736,,,,,,,
Sol-49737,,,,,,,
Sol-49738,,,,,,,
Sol-49739,,,,,,,
Sol-49740,,,,,,,
Sol-49741,,,,,,,
Sol-49742,,,,,,,
Sol-49743,,,,,,,
Sol-49744,,,,,,,
Sol-49745,,,,,,,
Sol-49746,,,,,,,
Sol-49747,,,,,,,
Sol-49748,,,,,,,
Sol-49749,,,,,,,
Sol-49750,,,,,,,
Sol-49751,,,,,,,
Sol-49752,,,,,,,
Sol-49753,,,,,,,
Sol-49754,,,,,,,
Sol-49755,,,,,,,
Sol-49756,,,,,,,
Sol-49757,,,,,,,
Sol-49758,,,,,,,
Sol-49759,,,,,,,
Sol-49760,,,,,,,
Sol-49761,,,,,,,
Sol-49762,,,,,,,
Sol-49763,,,,,,,
Sol-49764,,,,,,,
Sol-49765,,,,,,,
Sol-49766,,,,,,,
Sol-49767,,,,,,,
Sol-49768,,,,,,,
Sol-49769,,,,,,,
Sol-49770,,,,,,,
Sol-49771,,,,,,,
Sol-49772,,,,,,,
Sol-49773,,,,,,,
Sol-49774,,,,,,,
Sol-49775,,,,,,,
Sol-49776,,,,,,,
Sol-49777,,,,,,,
Sol-49778,,,,,,,
Sol-49779,,,,,,,
Sol-49780,,,,,,,
Sol-49781,,,,,,,
Sol-49782,,,,,,,
Sol-49783,,,,,,,
Sol-49784,,,,,,,
Sol-49785,,,,,,,
Sol-49786,,,,,,,
Sol-49787,,,,,,,
Sol-49788,,,,,,,
Sol-49789,,,,,,,
Sol-49790,,,,,,,
Sol-49791,,,,,,,
Sol-49792,,,,,,,
Sol-49793,,,,,,,
Sol-49794,,,,,,,
Sol-49795,,,,,,,
Sol-49796,,,,,,,
Sol-49797,,,,,,,
Sol-49798,,,,,,,
Sol-49799,,,,,,,
Sol-49800,,,,,,,
Sol-49801,,,,,,,
Sol-49802,,,,,,,
Sol-49803,,,,,,,
Sol-49804,,,,,,,
Sol-49805,,,,,,,
Sol-49806,,,,,,,
Sol-49807,,,,,,,
Sol-49808,,,,,,,
Sol-49809,,,,,,,
Sol-49810,,,,,,,
Sol-49811,,,,,,,
Sol-49812,,,,,,,
Sol-49813,,,,,,,
Sol-49814,,,,,,,
Sol-49815,,,,,,,
Sol-49816,,,,,,,
Sol-49817,,,,,,,
Sol-49818,,,,,,,
Sol-49819,,,,,,,
Sol-49820,,,,,,,
Sol-49821,,,,,,,
Sol-49822,,,,,,,
Sol-49823,,,,,,,
Sol-49824,,,,,,,
Sol-49825,,,,,,,
Sol-49826,,,,,,,
Sol-49827,,,,,,,
Sol-49828,,,,,,,
Sol-49829,,,,,,,
Sol-49830,,,,,,,
Sol-49831,,,,,,,
Sol-49832,,,,,,,
Sol-49833,,,,,,,
Sol-49834,,,,,,,
Sol-49835,,,,,,,
Sol-49836,,,,,,,
Sol-49837,,,,,,,
Sol-49838,,,,,,,
Sol-49839,,,,,,,
Sol-49840,,,,,,,
Sol-49841,,,,,,,
Sol-49842,,,,,,,
Sol-49843,,,,,,,
Sol-49844,,,,,,,
Sol-49845,,,,,,,
Sol-49846,,,,,,,
Sol-49847,,,,,,,
Sol-49848,,,,,,,
Sol-49849,,,,,,,
Sol-49850,,,,,,,
Sol-49851,,,,,,,
Sol-49852,,,,,,,
Sol-49853,,,,,,,
Sol-49854,,,,,,,
Sol-49855,,,,,,,
Sol-49856,,,,,,,
Sol-49857,,,,,,,
Sol-49858,,,,,,,
Sol-49859,,,,,,,
Sol-49860,,,,,,,
Sol-49861,,,,,,,
Sol-49862,,,,,,,
Sol-49863,,,,,,,
Sol-49864,,,,,,,
Sol-49865,,,,,,,
Sol-49866,,,,,,,
Sol-49867,,,,,,,
Sol-49868,,,,,,,
Sol-49869,,,,,,,
Sol-49870,,,,,,,
Sol-49871,,,,,,,
Sol-49872,,,,,,,
Sol-49873,,,,,,,
Sol-49874,,,,,,,
Sol-49875,,,,,,,
Sol-49876,,,,,,,
Sol-49877,,,,,,,
Sol-49878,,,,,,,
Sol-49879,,,,,,,
Sol-49880,,,,,,,
Sol-49881,,,,,,,
Sol-49882,,,,,,,
Sol-49883,,,,,,,
Sol-49884,,,,,,,
Sol-49885,,,,,,,
Sol-49886,,,,,,,
Sol-49887,,,,,,,
Sol-49888,,,,,,,
Sol-49889,,,,,,,
Sol-49890,,,,,,,
Sol-49891,,,,,,,
Sol-49892,,,,,,,
Sol-49893,,,,,,,
Sol-49894,,,,,,,
Sol-49895,,,,,,,
Sol-49896,,,,,,,
Sol-49897,,,,,,,
Sol-49898,,,,,,,
Sol-49899,,,,,,,
Sol-49900,,,,,,,
Sol-49901,,,,,,,
Sol-49902,,,,,,,
Sol-49903,,,,,,,
Sol-49904,,,,,,,
Sol-49905,,,,,,,
Sol-49906,,,,,,,
Sol-49907,,,,,,,
Sol-49908,,,,,,,
Sol-49909,,,,,,,
Sol-49910,,,,,,,
Sol-49911,,,,,,,
Sol-49912,,,,,,,
Sol-49913,,,,,,,
Sol-49914,,,,,,,
Sol-49915,,,,,,,
Sol-49916,,,,,,,
Sol-49917,,,,,,,
Sol-49918,,,,,,,
Sol-49919,,,,,,,
Sol-49920,,,,,,,
Sol-49921,,,,,,,
Sol-49922,,,,,,,
Sol-49923,,,,,,,
Sol-49924,,,,,,,
Sol-49925,,,,,,,
Sol-49926,,,,,,,
Sol-49927,,,,,,,
Sol-49928,,,,,,,
Sol-49929,,,,,,,
Sol-49930,,,,,,,
Sol-49931,,,,,,,
Sol-49932,,,,,,,
Sol-49933,,,,,,,
Sol-49934,,,,,,,
Sol-49935,,,,,,,
Sol-49936,,,,,,,
Sol-49937,,,,,,,
Sol-49938,,,,,,,
Sol-49939,,,,,,,
Sol-49940,,,,,,,
Sol-49941,,,,,,,
Sol-49942,,,,,,,
Sol-49943,,,,,,,
Sol-49944,,,,,,,
Sol-49945,,,,,,,
Sol-49946,,,,,,,
Sol-49947,,,,,,,
Sol-49948,,,,,,,
Sol-49949,,,,,,,
Sol-49950,,,,,,,
Sol-49951,,,,,,,
Sol-49952,,,,,,,
Sol-49953,,,,,,,
Sol-49954,,,,,,,
Sol-49955,,,,,,,
Sol-49956,,,,,,,
Sol-49957,,,,,,,
Sol-49958,,,,,,,
Sol-49959,,,,,,,
Sol-49960,,,,,,,
Sol-49961,,,,,,,
Sol-49962,,,,,,,
Sol-49963,,,,,,,
Sol-49964,,,,,,,
Sol-49965,,,,,,,
Sol-49966,,,,,,,
Sol-49967,,,,,,,
Sol-49968,,,,,,,
Sol-49969,,,,,,,
Sol-49970,,,,,,,
Sol-49971,,,,,,,
Sol-49972,,,,,,,
Sol-49973,,,,,,,
Sol-49974,,,,,,,
Sol-49975,,,,,,,
Sol-49976,,,,,,,
Sol-49977,,,,,,,
Sol-49978,,,,,,,
Sol-49979,,,,,,,
Sol-49980,,,,,,,
Sol-49981,,,,,,,
Sol-49982,,,,,,,
Sol-49983,,,,,,,
Sol-49984,,,,,,,
Sol-49985,,,,,,,
Sol-49986,,,,,,,
Sol-49987,,,,,,,
Sol-49988,,,,,,,
Sol-49989,,,,,,,
Sol-49990,,,,,,,
Sol-49991,,,,,,,
Sol-49992,,,,,,,
Sol-49993,,,,,,,
Sol-49994,,,,,,,
Sol-49995,,,,,,,
Sol-49996,,,,,,,
Sol-49997,,,,,,,
Sol-49998,,,,,,,
Sol-49999,,,,,,,
Sol-50000,,,,,,,
Sol-50001,,,,,,,
Sol-50002,,,,,,,
Sol-50003,,,,,,,
Sol-50004,,,,,,,
Sol-50005,,,,,,,
Sol-50006,,,,,,,
Sol-50007,,,,,,,
Sol-50008,,,,,,,
Sol-50009,,,,,,,
Sol-50010,,,,,,,
Sol-50011,,,,,,,
Sol-50012,,,,,,,
Sol-50013,,,,,,,
Sol-50014,,,,,,,
Sol-50015,,,,,,,
Sol-50016,,,,,,,
Sol-50017,,,,,,,
Sol-50018,,,,,,,
Sol-50019,,,,,,,
Sol-50020,,,,,,,
Sol-50021,,,,,,,
Sol-50022,,,,,,,
Sol-50023,,,,,,,
Sol-50024,,,,,,,
Sol-50025,,,,,,,
Sol-50026,,,,,,,
Sol-50027,,,,,,,
Sol-50028,,,,,,,
Sol-50029,,,,,,,
Sol-50030,,,,,,,
Sol-50031,,,,,,,
Sol-50032,,,,,,,
Sol-50033,,,,,,,
Sol-50034,,,,,,,
Sol-50035,,,,,,,
Sol-50036,,,,,,,
Sol-50037,,,,,,,
Sol-50038,,,,,,,
Sol-50039,,,,,,,
Sol-50040,,,,,,,
Sol-50041,,,,,,,
Sol-50042,,,,,,,
Sol-50043,,,,,,,
Sol-50044,,,,,,,
Sol-50045,,,,,,,
Sol-50046,,,,,,,
Sol-50047,,,,,,,
Sol-50048,,,,,,,
Sol-50049,,,,,,,
Sol-50050,,,,,,,
Sol-50051,,,,,,,
Sol-50052,,,,,,,
Sol-50053,,,,,,,
Sol-50054,,,,,,,
Sol-50055,,,,,,,
Sol-50056,,,,,,,
Sol-50057,,,,,,,
Sol-50058,,,,,,,
Sol-50059,,,,,,,
Sol-50060,,,,,,,
Sol-50061,,,,,,,
Sol-50062,,,,,,,
Sol-50063,,,,,,,
Sol-50064,,,,,,,
Sol-50065,,,,,,,
Sol-50066,,,,,,,
Sol-50067,,,,,,,
Sol-50068,,,,,,,
Sol-50069,,,,,,,
Sol-50070,,,,,,,
Sol-50071,,,,,,,
Sol-50072,,,,,,,
Sol-50073,,,,,,,
Sol-50074,,,,,,,
Sol-50075,,,,,,,
Sol-50076,,,,,,,
Sol-50077,,,,,,,
Sol-50078,,,,,,,
Sol-50079,,,,,,,
Sol-50080,,,,,,,
Sol-50081,,,,,,,
Sol-50082,,,,,,,
Sol-50083,,,,,,,
Sol-50084,,,,,,,
Sol-50085,,,,,,,
Sol-50086,,,,,,,
Sol-50087,,,,,,,
Sol-50088,,,,,,,
Sol-50089,,,,,,,
Sol-50090,,,,,,,
Sol-50091,,,,,,,
Sol-50092,,,,,,,
Sol-50093,,,,,,,
Sol-50094,,,,,,,
Sol-50095,,,,,,,
Sol-50096,,,,,,,
Sol-50097,,,,,,,
Sol-50098,,,,,,,
Sol-50099,,,,,,,
Sol-50100,,,,,,,
Sol-50101,,,,,,,
Sol-50102,,,,,,,
Sol-50103,,,,,,,
Sol-50104,,,,,,,
Sol-50105,,,,,,,
Sol-50106,,,,,,,
Sol-50107,,,,,,,
Sol-50108,,,,,,,
Sol-50109,,,,,,,
Sol-50110,,,,,,,
Sol-50111,,,,,,,
Sol-50112,,,,,,,
Sol-50113,,,,,,,
Sol-50114,,,,,,,
Sol-50115,,,,,,,
Sol-50116,,,,,,,
Sol-50117,,,,,,,
Sol-50118,,,,,,,
Sol-50119,,,,,,,
Sol-50120,,,,,,,
Sol-50121,,,,,,,
Sol-50122,,,,,,,
Sol-50123,,,,,,,
Sol-50124,,,,,,,
Sol-50125,,,,,,,
Sol-50126,,,,,,,
Sol-50127,,,,,,,
Sol-50128,,,,,,,
Sol-50129,,,,,,,
Sol-50130,,,,,,,
Sol-50131,,,,,,,
Sol-50132,,,,,,,
Sol-50133,,,,,,,
Sol-50134,,,,,,,
Sol-50135,,,,,,,
Sol-50136,,,,,,,
Sol-50137,,,,,,,
Sol-50138,,,,,,,
Sol-50139,,,,,,,
Sol-50140,,,,,,,
Sol-50141,,,,,,,
Sol-50142,,,,,,,
Sol-50143,,,,,,,
Sol-50144,,,,,,,
Sol-50145,,,,,,,
Sol-50146,,,,,,,
Sol-50147,,,,,,,
Sol-50148,,,,,,,
Sol-50149,,,,,,,
Sol-50150,,,,,,,
Sol-50151,,,,,,,
Sol-50152,,,,,,,
Sol-50153,,,,,,,
Sol-50154,,,,,,,
Sol-50155,,,,,,,
Sol-50156,,,,,,,
Sol-50157,,,,,,,
Sol-50158,,,,,,,
Sol-50159,,,,,,,
Sol-50160,,,,,,,
Sol-50161,,,,,,,
Sol-50162,,,,,,,
Sol-50163,,,,,,,
Sol-50164,,,,,,,
Sol-50165,,,,,,,
Sol-50166,,,,,,,
Sol-50167,,,,,,,
Sol-50168,,,,,,,
Sol-50169,,,,,,,
Sol-50170,,,,,,,
Sol-50171,,,,,,,
Sol-50172,,,,,,,
Sol-50173,,,,,,,
Sol-50174,,,,,,,
Sol-50175,,,,,,,
Sol-50176,,,,,,,
Sol-50177,,,,,,,
Sol-50178,,,,,,,
Sol-50179,,,,,,,
Sol-50180,,,,,,,
Sol-50181,,,,,,,
Sol-50182,,,,,,,
Sol-50183,,,,,,,
Sol-50184,,,,,,,
Sol-50185,,,,,,,
Sol-50186,,,,,,,
Sol-50187,,,,,,,
Sol-50188,,,,,,,
Sol-50189,,,,,,,
Sol-50190,,,,,,,
Sol-50191,,,,,,,
Sol-50192,,,,,,,
Sol-50193,,,,,,,
Sol-50194,,,,,,,
Sol-50195,,,,,,,
Sol-50196,,,,,,,
Sol-50197,,,,,,,
Sol-50198,,,,,,,
Sol-50199,,,,,,,
Sol-50200,,,,,,,
Sol-50201,,,,,,,
Sol-50202,,,,,,,
Sol-50203,,,,,,,
Sol-50204,,,,,,,
Sol-50205,,,,,,,
Sol-50206,,,,,,,
Sol-50207,,,,,,,
Sol-50208,,,,,,,
Sol-50209,,,,,,,
Sol-50210,,,,,,,
Sol-50211,,,,,,,
Sol-50212,,,,,,,
Sol-50213,,,,,,,
Sol-50214,,,,,,,
Sol-50215,,,,,,,
Sol-50216,,,,,,,
Sol-50217,,,,,,,
Sol-50218,,,,,,,
Sol-50219,,,,,,,
Sol-50220,,,,,,,
Sol-50221,,,,,,,
Sol-50222,,,,,,,
Sol-50223,,,,,,,
Sol-50224,,,,,,,
Sol-50225,,,,,,,
Sol-50226,,,,,,,
Sol-50227,,,,,,,
Sol-50228,,,,,,,
Sol-50229,,,,,,,
Sol-50230,,,,,,,
Sol-50231,,,,,,,
Sol-50232,,,,,,,
Sol-50233,,,,,,,
Sol-50234,,,,,,,
Sol-50235,,,,,,,
Sol-50236,,,,,,,
Sol-50237,,,,,,,
Sol-50238,,,,,,,
Sol-50239,,,,,,,
Sol-50240,,,,,,,
Sol-50241,,,,,,,
Sol-50242,,,,,,,
Sol-50243,,,,,,,
Sol-50244,,,,,,,
Sol-50245,,,,,,,
Sol-50246,,,,,,,
Sol-50247,,,,,,,
Sol-50248,,,,,,,
Sol-50249,,,,,,,
Sol-50250,,,,,,,
Sol-50251,,,,,,,
Sol-50252,,,,,,,
Sol-50253,,,,,,,
Sol-50254,,,,,,,
Sol-50255,,,,,,,
Sol-50256,,,,,,,
Sol-50257,,,,,,,
Sol-50258,,,,,,,
Sol-50259,,,,,,,
Sol-50260,,,,,,,
Sol-50261,,,,,,,
Sol-50262,,,,,,,
Sol-50263,,,,,,,
Sol-50264,,,,,,,
Sol-50265,,,,,,,
Sol-50266,,,,,,,
Sol-50267,,,,,,,
Sol-50268,,,,,,,
Sol-50269,,,,,,,
Sol-50270,,,,,,,
Sol-50271,,,,,,,
Sol-50272,,,,,,,
Sol-50273,,,,,,,
Sol-50274,,,,,,,
Sol-50275,,,,,,,
Sol-50276,,,,,,,
Sol-50277,,,,,,,
Sol-50278,,,,,,,
Sol-50279,,,,,,,
Sol-50280,,,,,,,
Sol-50281,,,,,,,
Sol-50282,,,,,,,
Sol-50283,,,,,,,
Sol-50284,,,,,,,
Sol-50285,,,,,,,
Sol-50286,,,,,,,
Sol-50287,,,,,,,
Sol-50288,,,,,,,
Sol-50289,,,,,,,
Sol-50290,,,,,,,
Sol-50291,,,,,,,
Sol-50292,,,,,,,
Sol-50293,,,,,,,
Sol-50294,,,,,,,
Sol-50295,,,,,,,
Sol-50296,,,,,,,
Sol-50297,,,,,,,
Sol-50298,,,,,,,
Sol-50299,,,,,,,
Sol-50300,,,,,,,
Sol-50301,,,,,,,
Sol-50302,,,,,,,
Sol-50303,,,,,,,
Sol-50304,,,,,,,
Sol-50305,,,,,,,
Sol-50306,,,,,,,
Sol-50307,,,,,,,
Sol-50308,,,,,,,
Sol-50309,,,,,,,
Sol-50310,,,,,,,
Sol-50311,,,,,,,
Sol-50312,,,,,,,
Sol-50313,,,,,,,
Sol-50314,,,,,,,
Sol-50315,,,,,,,
Sol-50316,,,,,,,
Sol-50317,,,,,,,
Sol-50318,,,,,,,
Sol-50319,,,,,,,
Sol-50320,,,,,,,
Sol-50321,,,,,,,
Sol-50322,,,,,,,
Sol-50323,,,,,,,
Sol-50324,,,,,,,
Sol-50325,,,,,,,
Sol-50326,,,,,,,
Sol-50327,,,,,,,
Sol-50328,,,,,,,
Sol-50329,,,,,,,
Sol-50330,,,,,,,
Sol-50331,,,,,,,
Sol-50332,,,,,,,
Sol-50333,,,,,,,
Sol-50334,,,,,,,
Sol-50335,,,,,,,
Sol-50336,,,,,,,
Sol-50337,,,,,,,
Sol-50338,,,,,,,
Sol-50339,,,,,,,
Sol-50340,,,,,,,
Sol-50341,,,,,,,
Sol-50342,,,,,,,
Sol-50343,,,,,,,
Sol-50344,,,,,,,
Sol-50345,,,,,,,
Sol-50346,,,,,,,
Sol-50347,,,,,,,
Sol-50348,,,,,,,
Sol-50349,,,,,,,
Sol-50350,,,,,,,
Sol-50351,,,,,,,
Sol-50352,,,,,,,
Sol-50353,,,,,,,
Sol-50354,,,,,,,
Sol-50355,,,,,,,
Sol-50356,,,,,,,
Sol-50357,,,,,,,
Sol-50358,,,,,,,
Sol-50359,,,,,,,
Sol-50360,,,,,,,
Sol-50361,,,,,,,
Sol-50362,,,,,,,
Sol-50363,,,,,,,
Sol-50364,,,,,,,
Sol-50365,,,,,,,
Sol-50366,,,,,,,
Sol-50367,,,,,,,
Sol-50368,,,,,,,
Sol-50369,,,,,,,
Sol-50370,,,,,,,
Sol-50371,,,,,,,
Sol-50372,,,,,,,
Sol-50373,,,,,,,
Sol-50374,,,,,,,
Sol-50375,,,,,,,
Sol-50376,,,,,,,
Sol-50377,,,,,,,
Sol-50378,,,,,,,
Sol-50379,,,,,,,
Sol-50380,,,,,,,
Sol-50381,,,,,,,
Sol-50382,,,,,,,
Sol-50383,,,,,,,
Sol-50384,,,,,,,
Sol-50385,,,,,,,
Sol-50386,,,,,,,
Sol-50387,,,,,,,
Sol-50388,,,,,,,
Sol-50389,,,,,,,
Sol-50390,,,,,,,
Sol-50391,,,,,,,
Sol-50392,,,,,,,
Sol-50393,,,,,,,
Sol-50394,,,,,,,
Sol-50395,,,,,,,
Sol-50396,,,,,,,
Sol-50397,,,,,,,
Sol-50398,,,,,,,
Sol-50399,,,,,,,
Sol-50400,,,,,,,
Sol-50401,,,,,,,
Sol-50402,,,,,,,
Sol-50403,,,,,,,
Sol-50404,,,,,,,
Sol-50405,,,,,,,
Sol-50406,,,,,,,
Sol-50407,,,,,,,
Sol-50408,,,,,,,
Sol-50409,,,,,,,
Sol-50410,,,,,,,
Sol-50411,,,,,,,
Sol-50412,,,,,,,
Sol-50413,,,,,,,
Sol-50414,,,,,,,
Sol-50415,,,,,,,
Sol-50416,,,,,,,
Sol-50417,,,,,,,
Sol-50418,,,,,,,
Sol-50419,,,,,,,
Sol-50420,,,,,,,
Sol-50421,,,,,,,
Sol-50422,,,,,,,
Sol-50423,,,,,,,
Sol-50424,,,,,,,
Sol-50425,,,,,,,
Sol-50426,,,,,,,
Sol-50427,,,,,,,
Sol-50428,,,,,,,
Sol-50429,,,,,,,
Sol-50430,,,,,,,
Sol-50431,,,,,,,
Sol-50432,,,,,,,
Sol-50433,,,,,,,
Sol-50434,,,,,,,
Sol-50435,,,,,,,
Sol-50436,,,,,,,
Sol-50437,,,,,,,
Sol-50438,,,,,,,
Sol-50439,,,,,,,
Sol-50440,,,,,,,
Sol-50441,,,,,,,
Sol-50442,,,,,,,
Sol-50443,,,,,,,
Sol-50444,,,,,,,
Sol-50445,,,,,,,
Sol-50446,,,,,,,
Sol-50447,,,,,,,
Sol-50448,,,,,,,
Sol-50449,,,,,,,
Sol-50450,,,,,,,
Sol-50451,,,,,,,
Sol-50452,,,,,,,
Sol-50453,,,,,,,
Sol-50454,,,,,,,
Sol-50455,,,,,,,
Sol-50456,,,,,,,
Sol-50457,,,,,,,
Sol-50458,,,,,,,
Sol-50459,,,,,,,
Sol-50460,,,,,,,
Sol-50461,,,,,,,
Sol-50462,,,,,,,
Sol-50463,,,,,,,
Sol-50464,,,,,,,
Sol-50465,,,,,,,
Sol-50466,,,,,,,
Sol-50467,,,,,,,
Sol-50468,,,,,,,
Sol-50469,,,,,,,
Sol-50470,,,,,,,
Sol-50471,,,,,,,
Sol-50472,,,,,,,
Sol-50473,,,,,,,
Sol-50474,,,,,,,
Sol-50475,,,,,,,
Sol-50476,,,,,,,
Sol-50477,,,,,,,
Sol-50478,,,,,,,
Sol-50479,,,,,,,
Sol-50480,,,,,,,
Sol-50481,,,,,,,
Sol-50482,,,,,,,
Sol-50483,,,,,,,
Sol-50484,,,,,,,
Sol-50485,,,,,,,
Sol-50486,,,,,,,
Sol-50487,,,,,,,
Sol-50488,,,,,,,
Sol-50489,,,,,,,
Sol-50490,,,,,,,
Sol-50491,,,,,,,
Sol-50492,,,,,,,
Sol-50493,,,,,,,
Sol-50494,,,,,,,
Sol-50495,,,,,,,
Sol-50496,,,,,,,
Sol-50497,,,,,,,
Sol-50498,,,,,,,
Sol-50499,,,,,,,